{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/hexo-theme-particlex/source/css/main.css","path":"css/main.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-particlex/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-particlex/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-particlex/source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-particlex/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-particlex/source/js/lib/crypto.js","path":"js/lib/crypto.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-particlex/source/js/lib/highlight.js","path":"js/lib/highlight.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-particlex/source/js/lib/fireworks.min.js","path":"js/lib/fireworks.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-particlex/source/js/lib/home.js","path":"js/lib/home.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-particlex/source/js/lib/math.js","path":"js/lib/math.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-particlex/source/js/lib/preview.js","path":"js/lib/preview.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-particlex/source/js/lib/search.js","path":"js/lib/search.js","modified":1,"renderable":1},{"_id":"source/img/img1.jpg","path":"img/img1.jpg","modified":1,"renderable":0},{"_id":"source/img/img10.jpg","path":"img/img10.jpg","modified":1,"renderable":0},{"_id":"source/img/img100.png","path":"img/img100.png","modified":1,"renderable":0},{"_id":"source/img/img101.png","path":"img/img101.png","modified":1,"renderable":0},{"_id":"source/img/img102.png","path":"img/img102.png","modified":1,"renderable":0},{"_id":"source/img/img103.png","path":"img/img103.png","modified":1,"renderable":0},{"_id":"source/img/img104.png","path":"img/img104.png","modified":1,"renderable":0},{"_id":"source/img/img105.png","path":"img/img105.png","modified":1,"renderable":0},{"_id":"source/img/img106.png","path":"img/img106.png","modified":1,"renderable":0},{"_id":"source/img/img107.png","path":"img/img107.png","modified":1,"renderable":0},{"_id":"source/img/img108.png","path":"img/img108.png","modified":1,"renderable":0},{"_id":"source/img/img109.png","path":"img/img109.png","modified":1,"renderable":0},{"_id":"source/img/img11.jpg","path":"img/img11.jpg","modified":1,"renderable":0},{"_id":"source/img/img110.png","path":"img/img110.png","modified":1,"renderable":0},{"_id":"source/img/img111.png","path":"img/img111.png","modified":1,"renderable":0},{"_id":"source/img/img112.png","path":"img/img112.png","modified":1,"renderable":0},{"_id":"source/img/img113.png","path":"img/img113.png","modified":1,"renderable":0},{"_id":"source/img/img114.png","path":"img/img114.png","modified":1,"renderable":0},{"_id":"source/img/img115.png","path":"img/img115.png","modified":1,"renderable":0},{"_id":"source/img/img116.png","path":"img/img116.png","modified":1,"renderable":0},{"_id":"source/img/img117.png","path":"img/img117.png","modified":1,"renderable":0},{"_id":"source/img/img118.png","path":"img/img118.png","modified":1,"renderable":0},{"_id":"source/img/img119.png","path":"img/img119.png","modified":1,"renderable":0},{"_id":"source/img/img12.jpg","path":"img/img12.jpg","modified":1,"renderable":0},{"_id":"source/img/img120.png","path":"img/img120.png","modified":1,"renderable":0},{"_id":"source/img/img121.png","path":"img/img121.png","modified":1,"renderable":0},{"_id":"source/img/img122.png","path":"img/img122.png","modified":1,"renderable":0},{"_id":"source/img/img13.jpg","path":"img/img13.jpg","modified":1,"renderable":0},{"_id":"source/img/img14.jpg","path":"img/img14.jpg","modified":1,"renderable":0},{"_id":"source/img/img15.jpg","path":"img/img15.jpg","modified":1,"renderable":0},{"_id":"source/img/img16.jpg","path":"img/img16.jpg","modified":1,"renderable":0},{"_id":"source/img/img17.jpg","path":"img/img17.jpg","modified":1,"renderable":0},{"_id":"source/img/img18.jpg","path":"img/img18.jpg","modified":1,"renderable":0},{"_id":"source/img/img19.jpg","path":"img/img19.jpg","modified":1,"renderable":0},{"_id":"source/img/img2.jpg","path":"img/img2.jpg","modified":1,"renderable":0},{"_id":"source/img/img20.jpg","path":"img/img20.jpg","modified":1,"renderable":0},{"_id":"source/img/img21.jpg","path":"img/img21.jpg","modified":1,"renderable":0},{"_id":"source/img/img22.jpg","path":"img/img22.jpg","modified":1,"renderable":0},{"_id":"source/img/img23.jpg","path":"img/img23.jpg","modified":1,"renderable":0},{"_id":"source/img/img24.jpg","path":"img/img24.jpg","modified":1,"renderable":0},{"_id":"source/img/img25.jpg","path":"img/img25.jpg","modified":1,"renderable":0},{"_id":"source/img/img26.jpg","path":"img/img26.jpg","modified":1,"renderable":0},{"_id":"source/img/img27.jpg","path":"img/img27.jpg","modified":1,"renderable":0},{"_id":"source/img/img28.jpg","path":"img/img28.jpg","modified":1,"renderable":0},{"_id":"source/img/img29.jpg","path":"img/img29.jpg","modified":1,"renderable":0},{"_id":"source/img/img3.jpg","path":"img/img3.jpg","modified":1,"renderable":0},{"_id":"source/img/img30.jpg","path":"img/img30.jpg","modified":1,"renderable":0},{"_id":"source/img/img31.jpg","path":"img/img31.jpg","modified":1,"renderable":0},{"_id":"source/img/img32.jpg","path":"img/img32.jpg","modified":1,"renderable":0},{"_id":"source/img/img33.jpg","path":"img/img33.jpg","modified":1,"renderable":0},{"_id":"source/img/img34.jpg","path":"img/img34.jpg","modified":1,"renderable":0},{"_id":"source/img/img35.jpg","path":"img/img35.jpg","modified":1,"renderable":0},{"_id":"source/img/img36.jpg","path":"img/img36.jpg","modified":1,"renderable":0},{"_id":"source/img/img37.jpg","path":"img/img37.jpg","modified":1,"renderable":0},{"_id":"source/img/img38.jpg","path":"img/img38.jpg","modified":1,"renderable":0},{"_id":"source/img/img39.jpg","path":"img/img39.jpg","modified":1,"renderable":0},{"_id":"source/img/img4.jpg","path":"img/img4.jpg","modified":1,"renderable":0},{"_id":"source/img/img40.jpg","path":"img/img40.jpg","modified":1,"renderable":0},{"_id":"source/img/img41.jpg","path":"img/img41.jpg","modified":1,"renderable":0},{"_id":"source/img/img42.jpg","path":"img/img42.jpg","modified":1,"renderable":0},{"_id":"source/img/img43.jpg","path":"img/img43.jpg","modified":1,"renderable":0},{"_id":"source/img/img44.png","path":"img/img44.png","modified":1,"renderable":0},{"_id":"source/img/img45.jpg","path":"img/img45.jpg","modified":1,"renderable":0},{"_id":"source/img/img46.jpg","path":"img/img46.jpg","modified":1,"renderable":0},{"_id":"source/img/img47.jpg","path":"img/img47.jpg","modified":1,"renderable":0},{"_id":"source/img/img48.jpg","path":"img/img48.jpg","modified":1,"renderable":0},{"_id":"source/img/img49.jpg","path":"img/img49.jpg","modified":1,"renderable":0},{"_id":"source/img/img5.jpg","path":"img/img5.jpg","modified":1,"renderable":0},{"_id":"source/img/img50.jpg","path":"img/img50.jpg","modified":1,"renderable":0},{"_id":"source/img/img51.jpg","path":"img/img51.jpg","modified":1,"renderable":0},{"_id":"source/img/img52.jpg","path":"img/img52.jpg","modified":1,"renderable":0},{"_id":"source/img/img53.jpg","path":"img/img53.jpg","modified":1,"renderable":0},{"_id":"source/img/img54.jpg","path":"img/img54.jpg","modified":1,"renderable":0},{"_id":"source/img/img55.jpg","path":"img/img55.jpg","modified":1,"renderable":0},{"_id":"source/img/img56.jpg","path":"img/img56.jpg","modified":1,"renderable":0},{"_id":"source/img/img57.jpg","path":"img/img57.jpg","modified":1,"renderable":0},{"_id":"source/img/img58.jpg","path":"img/img58.jpg","modified":1,"renderable":0},{"_id":"source/img/img59.jpg","path":"img/img59.jpg","modified":1,"renderable":0},{"_id":"source/img/img6.jpg","path":"img/img6.jpg","modified":1,"renderable":0},{"_id":"source/img/img60.jpg","path":"img/img60.jpg","modified":1,"renderable":0},{"_id":"source/img/img61.jpg","path":"img/img61.jpg","modified":1,"renderable":0},{"_id":"source/img/img62.png","path":"img/img62.png","modified":1,"renderable":0},{"_id":"source/img/img63.png","path":"img/img63.png","modified":1,"renderable":0},{"_id":"source/img/img64.png","path":"img/img64.png","modified":1,"renderable":0},{"_id":"source/img/img65.png","path":"img/img65.png","modified":1,"renderable":0},{"_id":"source/img/img66.png","path":"img/img66.png","modified":1,"renderable":0},{"_id":"source/img/img67.png","path":"img/img67.png","modified":1,"renderable":0},{"_id":"source/img/img68.png","path":"img/img68.png","modified":1,"renderable":0},{"_id":"source/img/img69.png","path":"img/img69.png","modified":1,"renderable":0},{"_id":"source/img/img7.jpg","path":"img/img7.jpg","modified":1,"renderable":0},{"_id":"source/img/img70.png","path":"img/img70.png","modified":1,"renderable":0},{"_id":"source/img/img71.png","path":"img/img71.png","modified":1,"renderable":0},{"_id":"source/img/img72.png","path":"img/img72.png","modified":1,"renderable":0},{"_id":"source/img/img73.png","path":"img/img73.png","modified":1,"renderable":0},{"_id":"source/img/img74.png","path":"img/img74.png","modified":1,"renderable":0},{"_id":"source/img/img75.png","path":"img/img75.png","modified":1,"renderable":0},{"_id":"source/img/img76.png","path":"img/img76.png","modified":1,"renderable":0},{"_id":"source/img/img77.png","path":"img/img77.png","modified":1,"renderable":0},{"_id":"source/img/img78.png","path":"img/img78.png","modified":1,"renderable":0},{"_id":"source/img/img79.png","path":"img/img79.png","modified":1,"renderable":0},{"_id":"source/img/img8.jpg","path":"img/img8.jpg","modified":1,"renderable":0},{"_id":"source/img/img80.png","path":"img/img80.png","modified":1,"renderable":0},{"_id":"source/img/img81.png","path":"img/img81.png","modified":1,"renderable":0},{"_id":"source/img/img82.png","path":"img/img82.png","modified":1,"renderable":0},{"_id":"source/img/img83.png","path":"img/img83.png","modified":1,"renderable":0},{"_id":"source/img/img84.png","path":"img/img84.png","modified":1,"renderable":0},{"_id":"source/img/img85.png","path":"img/img85.png","modified":1,"renderable":0},{"_id":"source/img/img87.png","path":"img/img87.png","modified":1,"renderable":0},{"_id":"source/img/img88.png","path":"img/img88.png","modified":1,"renderable":0},{"_id":"source/img/img86.png","path":"img/img86.png","modified":1,"renderable":0},{"_id":"source/img/img89.png","path":"img/img89.png","modified":1,"renderable":0},{"_id":"source/img/img9.jpg","path":"img/img9.jpg","modified":1,"renderable":0},{"_id":"source/img/img90.png","path":"img/img90.png","modified":1,"renderable":0},{"_id":"source/img/img91.png","path":"img/img91.png","modified":1,"renderable":0},{"_id":"source/img/img92.png","path":"img/img92.png","modified":1,"renderable":0},{"_id":"source/img/img93.png","path":"img/img93.png","modified":1,"renderable":0},{"_id":"source/img/img95.png","path":"img/img95.png","modified":1,"renderable":0},{"_id":"source/img/img94.png","path":"img/img94.png","modified":1,"renderable":0},{"_id":"source/img/img97.png","path":"img/img97.png","modified":1,"renderable":0},{"_id":"source/img/img98.png","path":"img/img98.png","modified":1,"renderable":0},{"_id":"source/img/img99.png","path":"img/img99.png","modified":1,"renderable":0},{"_id":"source/img/img96.png","path":"img/img96.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/categories/index.md","hash":"8a1e540014ca17d432bb227f9b61cd95c7b13caf","modified":1758268185098},{"_id":"source/_posts/Git.md","hash":"6393295d34a387d544b18323a716d002141229e2","modified":1755672594000},{"_id":"source/_posts/Android认识以及入门.md","hash":"6eaff995a03df6fbdb0646451040fc27d511dc11","modified":1755672594000},{"_id":"source/_posts/CMD.md","hash":"10ecbd4aa930e0de06464ba34ab27f968a3111ff","modified":1755694858000},{"_id":"source/_posts/Java基础概念.md","hash":"ba97486e65d2ff0a1c5fbbb5b071ce6dcbaf3a57","modified":1756116970000},{"_id":"source/_posts/Java跨平台的原理.md","hash":"c350aba97c6195305718fbd2cf42b89a0f60708a","modified":1755955090000},{"_id":"source/_posts/Kotlin使用协程编写高效的并发程序.md","hash":"0c646421ccb6a88a3a5e57dc7041bb48cc77b057","modified":1755672594000},{"_id":"source/_posts/Kotlin使用DSL构建专有语法结构.md","hash":"e7bc2bed14cee6610edc5955fb9277ed657a0226","modified":1755672594000},{"_id":"source/_posts/Jetpack.md","hash":"1dfe7e9c4496aedd56be355db7849af2b438e1a7","modified":1755672594000},{"_id":"source/_posts/Kotlin内置函数.md","hash":"d4848d3b03445e503d0ab38c20bbffb6d5480022","modified":1755672594000},{"_id":"source/_posts/Kotlin定义静态方法.md","hash":"3dc3f4d5cc204da27779e8516617cbd860db662d","modified":1755672594000},{"_id":"source/_posts/Kotlin扩展函数和运算符重载.md","hash":"e8bc0bfe042e92eab556cabd1d231bb14a941644","modified":1755672594000},{"_id":"source/_posts/Kotlin延迟初始化和密封类.md","hash":"b2664ee1a3e0c0c04d8263b68e93feeebced7ece","modified":1755672594000},{"_id":"source/_posts/Kotlin标准函数.md","hash":"ee5f8128ae8d2fd9966577c982a94dac47579d77","modified":1755672594000},{"_id":"source/_posts/Kotlin泛型的高级特性.md","hash":"47f5de0005915b2fefeb7e9f58b67619d46e998b","modified":1755672594000},{"_id":"source/_posts/Kotlin的infix函数.md","hash":"8c59763bd706bbad1626ab0b9210426da15e7be6","modified":1755672594000},{"_id":"source/_posts/Kotlin高阶函数.md","hash":"557573ef619e37c8a4b320fa38b9b0d985b646ee","modified":1755672594000},{"_id":"source/_posts/Kotlin高阶函数的应用.md","hash":"9b73cfa522ff9396da4b7ed32a846ecf6c607e32","modified":1755672594000},{"_id":"source/_posts/Kotlin语法.md","hash":"42b09eb0fc3db808d3e12e193236ba6e6c8c1d01","modified":1755672594000},{"_id":"source/_posts/Material-Design.md","hash":"82eced9d46450427aefc3d4485010f124290bf0d","modified":1755672594000},{"_id":"source/_posts/SQL函数篇.md","hash":"6a31d45a5639104ec753b565b1fb79207ce9245f","modified":1755672594000},{"_id":"source/_posts/SQL基础篇.md","hash":"806ee5a355b66dc930076d57e9dd056473be4724","modified":1755672594000},{"_id":"source/_posts/SQL多表查询.md","hash":"eeb62a8164cd116c82766db1829932f86fb68932","modified":1755672594000},{"_id":"source/_posts/SQL字段约束.md","hash":"81f07550bd1f92f159de4e795cb9e97f02b7c173","modified":1755672594000},{"_id":"source/_posts/Service-Kotlin.md","hash":"b0eaf85a787f541d0d62a2b6a63297567cd74865","modified":1755672594000},{"_id":"source/_posts/UI开发-Kotlin.md","hash":"7905c298cf0eadd1e71345aaee761fd3455ea972","modified":1755672594000},{"_id":"source/_posts/UI开发.md","hash":"e3a8683b6dbc428db0e26ee35b0e036341c052b0","modified":1755672594000},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1733762942000},{"_id":"source/_posts/try-catch和finally.md","hash":"47b49dd22a029cd5c7e47d43e189745d23d382ec","modified":1755672594000},{"_id":"source/_posts/事务篇.md","hash":"9bfff98f7616fc5e060e120a45d6e1028d428881","modified":1755672594000},{"_id":"source/_posts/使用网络技术.md","hash":"d2cc6be8d7ab347d1a05174a51ec230aa990ea5a","modified":1755672594000},{"_id":"source/_posts/内容提供器.md","hash":"3959f88a9a830e613353543cd60133d48bda0249","modified":1755672594000},{"_id":"source/_posts/分享功能.md","hash":"ba4024eafff025d3ed4bd9c77c602c8799e2337e","modified":1757159978000},{"_id":"source/_posts/原码补码反码.md","hash":"12299eca30fee68c87fca2270fd4c86d9ecb481e","modified":1756217974000},{"_id":"source/_posts/如何给项目引入AI助手.md","hash":"37a21cd5c3d051a6c964f7e776c22ae986be9f6e","modified":1755672594000},{"_id":"source/_posts/广播机制-Kotlin.md","hash":"547ee9a74829b92c7b1ccd7aabe5eef6052d13e9","modified":1755672594000},{"_id":"source/_posts/广播机制.md","hash":"06ffad0e166bcdb08686981365bb755e9012d49d","modified":1755672594000},{"_id":"source/_posts/手机多媒体-Kotlin.md","hash":"7c94ea72ad351611851b09baa94166947b6e9565","modified":1755672594000},{"_id":"source/_posts/手机多媒体.md","hash":"c660cb2b53b8e94fac0beda9f12591809723cc25","modified":1755672594000},{"_id":"source/_posts/探究ContentProvider-Kotlin.md","hash":"99262a2aaeeeb24fb7a8e3856bf517fd5cd7f67b","modified":1755672594000},{"_id":"source/_posts/数据存储-Kotlin.md","hash":"ee52789d5f2a408f54c6084cd84b56d289f2ebb6","modified":1755672594000},{"_id":"source/_posts/数据存储.md","hash":"76f162dfacc32428f730a2451cb1e9f3df127649","modified":1755672594000},{"_id":"source/_posts/最美UI体验-Material-Design-Kotlin.md","hash":"762338c434effbbac6b90244e52849823044bb0d","modified":1755672594000},{"_id":"source/_posts/服务.md","hash":"ad34bb4518d98e2d7d1be661df36419d419be20c","modified":1755672594000},{"_id":"source/_posts/正则表达式.md","hash":"02f87924c14ae6e62e39747812d5fe83ee378e38","modified":1758203894942},{"_id":"source/_posts/泛型和委托.md","hash":"f8d6f38e885a6c058ec6c1f5d28709399d8f5c39","modified":1755672594000},{"_id":"source/_posts/活动.md","hash":"66e86394abebd9b0db9aa09a75f06c2509bda6e7","modified":1755672594000},{"_id":"source/_posts/活动-1.md","hash":"7299b0f22b838a5de13027fbfd180df5dc6fb83a","modified":1755672594000},{"_id":"source/_posts/登陆注册数据备份-手动备份.md","hash":"f4297def9dc8bf141d18518139fd7e03705fa99a","modified":1757851793001},{"_id":"source/_posts/碎片-1.md","hash":"e4374dba3da3b447d6c955994e780b58af8b4e22","modified":1755672594000},{"_id":"source/_posts/碎片.md","hash":"2a29044a23c1bb78a172c714a0ab08ac886b73c0","modified":1755672594000},{"_id":"source/_posts/编写好用的工具.md","hash":"dfe532438737f80c0dc3ac55c0d66e719f07a7ae","modified":1755672594000},{"_id":"source/_posts/网络技术.md","hash":"f6b763f55bbd7718b5b8fdf98ea71ce5288a66bf","modified":1757335023351},{"_id":"source/_posts/自定义View(一).md","hash":"e5f1205b2b7722c93e8b32303d27c4bf2f20d311","modified":1755672594000},{"_id":"source/_posts/自定义View-二.md","hash":"6b0eec68b5fcf0ca78580af9ca08f7ffba47e801","modified":1755672594000},{"_id":"source/_posts/自定义ViewGroup.md","hash":"92fdeec73cb33fd3e80e1f9bc72f6bb19c808d32","modified":1755672594000},{"_id":"source/_posts/计算机中的数据存储.md","hash":"874d8be216c4d3f72eb543894da17c757ab6bb21","modified":1756389106000},{"_id":"source/_posts/运算符.md","hash":"55f15fb8a6e27c8690ff1e18ba242afc29b2d1e4","modified":1756213390000},{"_id":"source/_posts/高级技巧-Kotlin.md","hash":"dedf969c1e4c7eda6472c72dfa0c97e0280aaa6e","modified":1758346113080},{"_id":"source/_posts/高级技巧.md","hash":"46740e2bb48ad87f97ee4d81f120d4d03953da69","modified":1755672594000},{"_id":"source/about/index.md","hash":"4678964e487eab4a837d60229a339451f2c8798c","modified":1758269317830},{"_id":"source/img/img14.jpg","hash":"af40a112b450d8d51c2f9c756d5fa825ebc77676","modified":1755672594000},{"_id":"source/img/img13.jpg","hash":"f533f4b1606aea34ed6f6c2d180e7e7cc9c60ecc","modified":1755672594000},{"_id":"source/img/img21.jpg","hash":"868068a20cab607570c0779634aaa98c13f425ae","modified":1755672594000},{"_id":"source/img/img24.jpg","hash":"ba28f819f853a22645f0ca0ccbf9947c5817443a","modified":1755672594000},{"_id":"source/img/img28.jpg","hash":"e45146adc935a3e3fa553ed827aa1f2b8d82a98f","modified":1755672594000},{"_id":"source/img/img3.jpg","hash":"ca8528ea95338fb57a93a1ba668b0af0ae985617","modified":1755672594000},{"_id":"source/img/img31.jpg","hash":"4ec5de7eeec11b2e644089fc4b8451826c3abe6f","modified":1755672594000},{"_id":"source/img/img34.jpg","hash":"0349ddc3556dc1270e71b85745805022b0baf515","modified":1755672594000},{"_id":"source/img/img36.jpg","hash":"23c7f5727f6bd17508b70faa2376140552c170da","modified":1755672594000},{"_id":"source/img/img37.jpg","hash":"fd0fb6965439c25329c16b81f8d10e5c6cb35e51","modified":1755672594000},{"_id":"source/img/img4.jpg","hash":"c50d369b25dd12afd98a36760d6fa5ef7a2fbef0","modified":1755672594000},{"_id":"source/img/img6.jpg","hash":"bc79480d3955a3b138d7b683bc668dfe64eac888","modified":1755672594000},{"_id":"source/img/img7.jpg","hash":"6d6e01976930a062c6d0ba6cd3913761be6dbeb3","modified":1755672594000},{"_id":"source/img/img9.jpg","hash":"90a8f9c87e608624f68fb89dcc25bb8c875a7553","modified":1755672594000},{"_id":"source/img/img1.jpg","hash":"f299895cf3b5b34d44c8d57525e22ab4f6e99340","modified":1755672594000},{"_id":"source/img/img10.jpg","hash":"32211bd4859cf36fb6420d9cdfb2e24107d9f61c","modified":1755672594000},{"_id":"source/img/img100.png","hash":"84bf5c0e21f1efd4f774db898cd7bc8c335c9ed3","modified":1755672594000},{"_id":"source/img/img103.png","hash":"0e8f76540333cbb5f49d6e02d4e4a0171146958c","modified":1755672594000},{"_id":"source/img/img102.png","hash":"44ba978d383063a898bef5ff91f715ca25f4310b","modified":1755672594000},{"_id":"source/img/img11.jpg","hash":"1bbfdbf3a7905564da68e9c16214fce2243fe1d4","modified":1755672594000},{"_id":"source/img/img111.png","hash":"4556cbfc18dbca0be61e2cf3b23b12db8e411be7","modified":1756128572000},{"_id":"source/img/img116.png","hash":"499f91ab17e765c9a069ce48df27c871d43119e9","modified":1756213178000},{"_id":"source/img/img12.jpg","hash":"530098fc96b10f80739c0c08f820c5fa351a7e16","modified":1755672594000},{"_id":"source/img/img18.jpg","hash":"60e003df13b81d3793293ff0c8e52c6ee591c898","modified":1755672594000},{"_id":"source/img/img16.jpg","hash":"1b05681382dfb22f05fef03af99ade635b8ae626","modified":1755672594000},{"_id":"source/img/img2.jpg","hash":"1905cfd79db0615fad71b8c20e375ec108232e61","modified":1755672594000},{"_id":"source/img/img20.jpg","hash":"b849f2399f99804ab6942bbe1bf6e45feaa9ed38","modified":1755672594000},{"_id":"source/img/img23.jpg","hash":"3b511c152643f4362329efdb560d452097ebbf97","modified":1755672594000},{"_id":"source/img/img25.jpg","hash":"a02142baa4e1e3febe560a6b62c3086c9e7d6dda","modified":1755672594000},{"_id":"source/img/img27.jpg","hash":"f30fefb3c6440537a64a5bb6994fc9cb5f1525cf","modified":1755672594000},{"_id":"source/img/img26.jpg","hash":"664a1b2caa1730c8f9248996e5366e6d5f34e662","modified":1755672594000},{"_id":"source/img/img35.jpg","hash":"f42483d0b0b5923cd8ecdc52c795e5d5e5030941","modified":1755672594000},{"_id":"source/img/img45.jpg","hash":"4f6b27e16a54d6922be9c15aa66b027ac7ef37fe","modified":1755672594000},{"_id":"source/img/img5.jpg","hash":"390fabab35638fa3a9f2028aa43afd7933e38f64","modified":1755672594000},{"_id":"source/img/img99.png","hash":"bc42f665f492043004c0d02f78946d100b9aced5","modified":1755672594000},{"_id":"source/img/img97.png","hash":"baa729b17b4ccf513100e2182d634504b66f4fcd","modified":1755672594000},{"_id":"source/img/img101.png","hash":"fbfd463f4d8b0e5cdb66971a7c6e0f123788e17d","modified":1755672594000},{"_id":"source/img/img110.png","hash":"4fe6de2fd97c4b869f36a7b44fb6a0a6feaea1b7","modified":1756128564000},{"_id":"source/img/img115.png","hash":"63e48f7947a754341aaa868085f55e88652fbe96","modified":1756190120000},{"_id":"source/img/img15.jpg","hash":"1beeeaaf0a21b5c2885c55ff0ba0e64fae81325e","modified":1755672594000},{"_id":"source/img/img19.jpg","hash":"f110d2040230f83b59180f846c741688452208c2","modified":1755672594000},{"_id":"source/img/img17.jpg","hash":"37481f21b580f8f12ceabb5bfc11e182cdc3649a","modified":1755672594000},{"_id":"source/img/img22.jpg","hash":"85ea6274c58e8f7de609970f511c3ed4de22bbae","modified":1755672594000},{"_id":"source/img/img29.jpg","hash":"799cc8dfe49f5eeefd0a0b0afb06d3c925a11340","modified":1755672594000},{"_id":"source/img/img30.jpg","hash":"b58c33ee800e65d621aefe0dee16a76683518a19","modified":1755672594000},{"_id":"source/img/img32.jpg","hash":"65aba6ca2adb01cf15a6031233fcbc6f0ac1eecb","modified":1755672594000},{"_id":"source/img/img33.jpg","hash":"c30a322f7adaa739c939fd892780db075ee6511a","modified":1755672594000},{"_id":"source/img/img38.jpg","hash":"258284a657e08bccb8f148c2a312e101d22a39fe","modified":1755672594000},{"_id":"source/img/img39.jpg","hash":"c2fcf162e5996e3d3a5d90c18c6bd327d196a362","modified":1755672594000},{"_id":"source/img/img40.jpg","hash":"5433a48bd751a8d82ed1cca7f0ae386f71e8eebf","modified":1755672594000},{"_id":"source/img/img43.jpg","hash":"c2a0e58c2f36469cd63e238548221618bc5322a9","modified":1755672594000},{"_id":"source/img/img42.jpg","hash":"6698dac2c47e2732148a442a441438c800d7b71e","modified":1755672594000},{"_id":"source/img/img48.jpg","hash":"cf17871a0775753b3d6bf4a1bbecb3d58ee3d801","modified":1755672594000},{"_id":"source/img/img49.jpg","hash":"eab222c1c33a9b1d8e744cd5c7e9f432307f104f","modified":1755672594000},{"_id":"source/img/img62.png","hash":"04ab9ef700226a80829f6fef7c02da64276959d1","modified":1755672594000},{"_id":"source/img/img64.png","hash":"1726024768ca99f5937e425670b9e59ee9fafdd8","modified":1755672594000},{"_id":"source/img/img94.png","hash":"72165b71f062ba59a13412e592946a75baae0318","modified":1755672594000},{"_id":"source/img/img119.png","hash":"2fe59c26ac9c91fcaf411aff49bdecf5751cb589","modified":1756217918000},{"_id":"source/img/img122.png","hash":"2b858f6381ead30f0a0bbb2a9e82fcd9f2b3a8ab","modified":1758202889969},{"_id":"source/img/img41.jpg","hash":"f0799298878f45c5c554c2bddda814bd4d4f233d","modified":1755672594000},{"_id":"source/img/img44.png","hash":"8e04c64a13cd8c3a424f8080ffe11aea199c6aca","modified":1755672594000},{"_id":"source/img/img50.jpg","hash":"4357a1ffdd6b5a84ee3ab8cab5bd8596b58ae4e7","modified":1755672594000},{"_id":"source/img/img65.png","hash":"15af7f4af74abebe9be4517c29484abe3b6a53be","modified":1755672594000},{"_id":"source/img/img68.png","hash":"e91db5a724c08028ce6e3b7a833e69b51b67c796","modified":1755672594000},{"_id":"source/img/img69.png","hash":"ded71965eb986dd559949ab570997718dea8141c","modified":1755672594000},{"_id":"source/img/img71.png","hash":"7429c69c9e104d2299b03396be459b096482e556","modified":1755672594000},{"_id":"source/img/img73.png","hash":"572e6ad4a484415612dd1f4c6c2538d5703f8b59","modified":1755672594000},{"_id":"source/img/img75.png","hash":"265ffa53a7bfe10cf6ac87b2576776bb558311e4","modified":1755672594000},{"_id":"source/img/img78.png","hash":"0e06eb817bbdb95b180df7a2030ba497299c36f9","modified":1755672594000},{"_id":"source/img/img79.png","hash":"93d26a39d893f05cc4d29606e034820009464c5e","modified":1755672594000},{"_id":"source/img/img8.jpg","hash":"ec85336e964f6e8e25eb3ca07649199f866bb98b","modified":1755672594000},{"_id":"source/img/img82.png","hash":"fb1069ba7e7c5497f7433bcd5ce1cfe7bff2ef47","modified":1755672594000},{"_id":"source/img/img109.png","hash":"96166e0b2113f5c64c20e7f5d1f2c45e5c324100","modified":1756117450000},{"_id":"source/img/img114.png","hash":"fa36ddaf1bb57feffe19bf35f502806e2bf72586","modified":1756187618000},{"_id":"source/img/img117.png","hash":"2e0d041c31918cbabe4d9824c22ed0f7c0a4e3f9","modified":1756214312000},{"_id":"source/img/img118.png","hash":"3950bc26dd67b8e9b8ab7e1546bdb515bf5dbcd1","modified":1756215296000},{"_id":"source/img/img121.png","hash":"a10fecc6201f0b164fe7248cc3f41b19d2028eb9","modified":1758202815799},{"_id":"source/img/img66.png","hash":"1bf1c58c926240ef45ddde60f232484e585768c4","modified":1755672594000},{"_id":"source/img/img76.png","hash":"3d00aa47a9e028e440cd7f0c9e87cc3d031ff017","modified":1755672594000},{"_id":"source/img/img80.png","hash":"38abfde203101191b7e736e08af4ae16d06d4220","modified":1755672594000},{"_id":"source/img/img86.png","hash":"714e3958fb66187ec40dde5c9eabdd7eb7282bec","modified":1755672594000},{"_id":"source/img/img92.png","hash":"f830219b3984c7f1f4146e40a91c8d626eab3f4d","modified":1755672594000},{"_id":"source/img/img95.png","hash":"40e65bdb3e8144b7f928fbfbd38c4bfd3b17494a","modified":1755672594000},{"_id":"source/img/img98.png","hash":"d22591c682eb4f3454fc40800c5072262e7c3cd0","modified":1755672594000},{"_id":"source/img/img104.png","hash":"a94ee0a283860fab168d1e2e490140c145dc001a","modified":1755672594000},{"_id":"source/img/img106.png","hash":"648b78c82b2a11e38b1022e9fbb286e9e814ed32","modified":1755672594000},{"_id":"source/img/img112.png","hash":"5c698a87b2b42d7261ac826296d5e65ff323582b","modified":1756129832000},{"_id":"source/img/img53.jpg","hash":"bd8192f41af20cfa529d72b07e26431278aef79f","modified":1755672594000},{"_id":"source/img/img63.png","hash":"64c28c733acbad23d4307a73a670b0e22c51ee4a","modified":1755672594000},{"_id":"source/img/img70.png","hash":"48be6b024fb179d19062d2519d5b9ac418595320","modified":1755672594000},{"_id":"source/img/img72.png","hash":"83970b93ae30743d147afe17758a998341e74426","modified":1755672594000},{"_id":"source/img/img74.png","hash":"2b70ad2d122657b6b1c3c973a88e0ef252a6d38d","modified":1755672594000},{"_id":"source/img/img83.png","hash":"e99079e8187208f2675706774b68b2e17f495faf","modified":1755672594000},{"_id":"source/img/img84.png","hash":"25846822290df5a4c374ece60835bf182256a33f","modified":1755672594000},{"_id":"source/img/img88.png","hash":"ddfb6c0b235c9b237ae55d11278ce6903e6eb92f","modified":1755672594000},{"_id":"source/img/img91.png","hash":"6cf75d3547481c9f8fab59f022bd25dcd55e694d","modified":1755672594000},{"_id":"source/img/img96.png","hash":"e7bc25605de47cefdd990817c34f1edbc82943c6","modified":1755672594000},{"_id":"source/img/img105.png","hash":"b09fe76d02ba0ce5d043ab08a6b9c24e062864d3","modified":1755672594000},{"_id":"source/img/img120.png","hash":"3014456264dfa91cb9a9c1e959c6af461bdbf0e8","modified":1758202804620},{"_id":"source/img/img77.png","hash":"707343bf77bb09aee0226344d7fc04455dce9f8f","modified":1755672594000},{"_id":"source/img/img93.png","hash":"049a4f0129f96e950bdcf74b373703a3b531fe3b","modified":1755672594000},{"_id":"source/img/img107.png","hash":"607e9114285483d3c91956d155a57c3ca3133ba2","modified":1756026996000},{"_id":"source/img/img108.png","hash":"e001fbfbff41c8ea9375d31277e49b7ed0d7f41c","modified":1756102786000},{"_id":"source/img/img47.jpg","hash":"691e5f26fa2162e5d41fec69fa813ee6d7d4f412","modified":1755672594000},{"_id":"source/img/img56.jpg","hash":"eed166d2f3bd4659ad3ee3716b37eb5aad42d508","modified":1755672594000},{"_id":"themes/hexo-theme-particlex/.gitignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1758206588885},{"_id":"themes/hexo-theme-particlex/.npmignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1758206588905},{"_id":"themes/hexo-theme-particlex/README.md","hash":"19b124670bc5c9aa8cff0fc191be1e9a40c841a0","modified":1758206588935},{"_id":"themes/hexo-theme-particlex/LICENSE","hash":"22166681aaa54b0041e42147af8371053b8e7db8","modified":1758206588923},{"_id":"themes/hexo-theme-particlex/_config.yml","hash":"7fe2c86f59422046fd7a2bce2fbd4e02e82e566b","modified":1758342179835},{"_id":"themes/hexo-theme-particlex/package.json","hash":"2a903eec28abbd70c440c0c013ae536189c0de10","modified":1758206588956},{"_id":"themes/hexo-theme-particlex/pnpm-lock.yaml","hash":"19568b433e75e603b791332c016d147418e13081","modified":1758206588966},{"_id":"themes/hexo-theme-particlex/layout/archives.ejs","hash":"c3878ffe435aa37ba46a0ee25c34257c2f2a1d87","modified":1758206589026},{"_id":"themes/hexo-theme-particlex/.github/dependabot.yml","hash":"d2adc8df9ae7f28520d2fd5c0579e75dbe352bdc","modified":1758206588996},{"_id":"themes/hexo-theme-particlex/layout/card.ejs","hash":"65e0c46a79c02212982c8a9aef1b16bfc3430429","modified":1758206589037},{"_id":"themes/hexo-theme-particlex/layout/categories.ejs","hash":"2f7caa0751576269ff3f25b75e28f9b9aab5d720","modified":1758206589048},{"_id":"themes/hexo-theme-particlex/layout/comment.ejs","hash":"e57ec81f5efcf505ade5e79963f84532a83a0fe8","modified":1758206589061},{"_id":"themes/hexo-theme-particlex/layout/current.ejs","hash":"4e75c06c9d0b1336c69c210567581e7efded5621","modified":1758206589072},{"_id":"themes/hexo-theme-particlex/layout/footer.ejs","hash":"357b2db2eab031150e06dd47695dc9916d875fc4","modified":1758206589084},{"_id":"themes/hexo-theme-particlex/layout/import.ejs","hash":"7800720150b46a9abaf513316602a05293b3991b","modified":1758206589095},{"_id":"themes/hexo-theme-particlex/layout/layout.ejs","hash":"bc6f2c3c0a47b755590f3345ef6159d58b29683f","modified":1758206589118},{"_id":"themes/hexo-theme-particlex/layout/menu.ejs","hash":"1c78bd05cdfb3ae7a47ed572229a1970335fe8b8","modified":1758206589130},{"_id":"themes/hexo-theme-particlex/layout/post.ejs","hash":"a3e567ac00d1ccd8a84525d20665318248da75a7","modified":1758206589142},{"_id":"themes/hexo-theme-particlex/layout/index.ejs","hash":"b2a3c94092228eccb57a17ab89f3a09d10304699","modified":1758346498284},{"_id":"themes/hexo-theme-particlex/layout/posts.ejs","hash":"71c5fc3d38779179dc1cd4c5948a9a97f180d00a","modified":1758343375455},{"_id":"themes/hexo-theme-particlex/layout/tags.ejs","hash":"0719fa4d9357869d31e7627a6462a93c48effa2c","modified":1758206589165},{"_id":"themes/hexo-theme-particlex/source/css/main.css","hash":"b09bb558a5f029529d5751e11f39ed6662335be3","modified":1758279196502},{"_id":"themes/hexo-theme-particlex/source/images/loading.gif","hash":"9c840c5c3e7b97a184deb390df2f6926d6161708","modified":1758206589289},{"_id":"themes/hexo-theme-particlex/source/js/main.js","hash":"420d9ab7f2e0cb44bdc5335389344ec1e7253db5","modified":1758206589325},{"_id":"themes/hexo-theme-particlex/source/js/lib/crypto.js","hash":"3db8692ac636d9f72dc94127216d21f9793e6602","modified":1758206589354},{"_id":"themes/hexo-theme-particlex/source/js/lib/highlight.js","hash":"58fdb5f2d5e409bfc10aac6ccc464c87327806a5","modified":1758206589366},{"_id":"themes/hexo-theme-particlex/source/js/lib/fireworks.min.js","hash":"6f5ccef48af055cb6f4419b6b6d5990678cb502c","modified":1758271141963},{"_id":"themes/hexo-theme-particlex/source/js/lib/home.js","hash":"5ec113e1d72efaab5eb31addc05eb9dcf26ce1af","modified":1758206589379},{"_id":"themes/hexo-theme-particlex/source/js/lib/math.js","hash":"f7716e83ef236818239fcae91defe730d5bfbc6d","modified":1758206589391},{"_id":"themes/hexo-theme-particlex/source/js/lib/preview.js","hash":"d3050c6ed6d52e451cc1810843c5d595eadb8e5a","modified":1758206589405},{"_id":"themes/hexo-theme-particlex/source/js/lib/search.js","hash":"d507facc680300c046f2b967279959541313e1f9","modified":1758206589418},{"_id":"source/img/img81.png","hash":"45d10592f4563849a86fcb24f187d1c6bb3a6be6","modified":1755672594000},{"_id":"source/img/img89.png","hash":"3486017fc08f07442f5efae53015b598eb67d4a2","modified":1755672594000},{"_id":"source/img/img52.jpg","hash":"95922a69348c76755edeabf37f3a442f165360f3","modified":1755672594000},{"_id":"source/img/img67.png","hash":"38668d273a9c3377013ea930447df900a16b688d","modified":1755672594000},{"_id":"source/img/img87.png","hash":"5edb9ca38f281d96982959d9f1d0e6b8a2950f35","modified":1755672594000},{"_id":"source/img/img113.png","hash":"85ba2a20000ef46a7fa897a04c86e385040388f9","modified":1756130024000},{"_id":"source/img/img51.jpg","hash":"90af55f1b46af4e15b3bab0cd56adf40fd90717c","modified":1755672594000},{"_id":"source/img/img85.png","hash":"3632989eabc845e4e2897f934edb0940b85ad88b","modified":1755672594000},{"_id":"source/img/img46.jpg","hash":"197c546601be344db57fa9b12c316b45018c2114","modified":1755672594000},{"_id":"source/img/img59.jpg","hash":"9b6bae7674671f57df18477aa1d2f25840e96fb2","modified":1755672594000},{"_id":"source/img/img90.png","hash":"716ad1a06a95651e90f3872e1da3114fbab9a6a1","modified":1755672594000},{"_id":"themes/hexo-theme-particlex/source/images/avatar.jpg","hash":"19ca6c77075321089a1843069e0c80b0885d7b9d","modified":1758267585318},{"_id":"source/img/img57.jpg","hash":"88a9ef27db8d13cf67239716ad1d07cdeafb2c59","modified":1755672594000},{"_id":"themes/hexo-theme-particlex/source/images/background.jpg","hash":"6b2042b71e3cb40709cc29757ff16251ca4f7b5e","modified":1758267829229},{"_id":"source/img/img58.jpg","hash":"2891fba33693239b3fff17bc2c7515314fcc7898","modified":1755672594000},{"_id":"source/img/img61.jpg","hash":"01ffec52746147b656b896b820ee361d28b2fc1c","modified":1755672594000},{"_id":"source/img/img55.jpg","hash":"ef5fac5a45fc87d6d659f532da6c0dc45f2c1866","modified":1755672594000},{"_id":"source/img/img60.jpg","hash":"6b727cbaa0d8ab3c931e9f11a3527f204f337478","modified":1755672594000},{"_id":"source/img/img54.jpg","hash":"40eda6fa1a58bcea0ee368f3e49a8cccc2fee944","modified":1755672594000},{"_id":"public/categories/index.html","hash":"eb443f0150a5e501ecb17b077850ad926965838f","modified":1758346573827},{"_id":"public/about/index.html","hash":"2400a88245095089be8326d7992d409f49339808","modified":1758346573827},{"_id":"public/2025/09/18/正则表达式/index.html","hash":"d4839d101b9d7c98e841c49240bd8fcf69e791ea","modified":1758346573827},{"_id":"public/2025/09/14/hello-world/index.html","hash":"28f9bbd5833a43562e238dfc65e72b9e05ce292c","modified":1758346573827},{"_id":"public/2025/09/14/登陆注册数据备份-手动备份/index.html","hash":"c5c43a2b356fecf2b415bbcf5e24a9efe1d8231e","modified":1758346573827},{"_id":"public/2025/09/06/分享功能/index.html","hash":"3c3704f50c4eb059da51d88680a063ab0c486021","modified":1758346573827},{"_id":"public/2025/08/26/计算机中的数据存储/index.html","hash":"b1dd7f9ce8411df58d2cf048e81b6008d401a08d","modified":1758346573827},{"_id":"public/2025/08/25/运算符/index.html","hash":"7ec74c7ee6cfbcc10cf85f083b5587780070cb7b","modified":1758346573827},{"_id":"public/2025/08/26/原码补码反码/index.html","hash":"09eb7e139720837fdac7986791280342d7ed409f","modified":1758346573827},{"_id":"public/2025/08/23/Java基础概念/index.html","hash":"df2905d3034f1ff78d648422f4bb60017ffab63a","modified":1758346573827},{"_id":"public/2025/08/20/CMD/index.html","hash":"83baddc99802bef84a657ae5b929a0339472a817","modified":1758346573827},{"_id":"public/2025/08/23/Java跨平台的原理/index.html","hash":"76e1a26bb2f64b1e5bfd155a987eaad02f5cb0ed","modified":1758346573827},{"_id":"public/2025/08/20/如何给项目引入AI助手/index.html","hash":"46d89d1e9f3f28b6eef2254cc60d30368f7dd2ec","modified":1758346573827},{"_id":"public/2025/08/09/事务篇/index.html","hash":"a65a7f9e0d53ed17f6ff995a76be97a8a3bb045e","modified":1758346573827},{"_id":"public/2025/08/07/SQL多表查询/index.html","hash":"3d2dadcb75837147ba3c6399e225ac6eb7af963c","modified":1758346573827},{"_id":"public/2025/08/06/SQL字段约束/index.html","hash":"6084d1ead008da75244b1539803a8070c9c2d620","modified":1758346573827},{"_id":"public/2025/08/05/SQL函数篇/index.html","hash":"ce1b5dae15906642f019c03389ce037c55561524","modified":1758346573827},{"_id":"public/2025/08/02/SQL基础篇/index.html","hash":"8ebbb9f36ec782d428b22dd6f3ec27c6cb899d75","modified":1758346573827},{"_id":"public/2025/07/06/自定义ViewGroup/index.html","hash":"1162fc2be93d5a9c8c01e3d146d14d24b595e25c","modified":1758346573827},{"_id":"public/2025/07/05/自定义View-二/index.html","hash":"fbac25c3bfb40765ef14381968b151bfcc3ccd2b","modified":1758346573827},{"_id":"public/2025/07/04/自定义View(一)/index.html","hash":"9c303642d5ea41ecf8b08bc1a362cb6dd0953450","modified":1758346573827},{"_id":"public/2025/06/27/高级技巧-Kotlin/index.html","hash":"c04e721f54de3513b145d382528b4430e2537a05","modified":1758346573827},{"_id":"public/2025/06/27/Kotlin使用DSL构建专有语法结构/index.html","hash":"10e48fc2b638d71a609cd49bce133aa99969cd79","modified":1758346573827},{"_id":"public/2025/06/25/Jetpack/index.html","hash":"6e21721fa84f9f1be122b63cf607b8bcbf84c557","modified":1758346573827},{"_id":"public/2025/06/16/编写好用的工具/index.html","hash":"2a29912c1cac55fb28114bd41da2b7ede6014075","modified":1758346573827},{"_id":"public/2025/06/05/Kotlin使用协程编写高效的并发程序/index.html","hash":"c0dc92e2fce452f29d9c58f7ed5ebde8d84552b2","modified":1758346573827},{"_id":"public/2025/06/04/网络技术/index.html","hash":"d1646721220d32e806dd6739c9ed692f0712496f","modified":1758346573827},{"_id":"public/2025/06/15/最美UI体验-Material-Design-Kotlin/index.html","hash":"7b1ee9dc0c7bdd00e5bc963b48ce1854d7a354f2","modified":1758346573827},{"_id":"public/2025/05/29/Kotlin泛型的高级特性/index.html","hash":"6b68116f38ecde0c3d538790ba0c4816554c5103","modified":1758346573827},{"_id":"public/2025/05/26/Kotlin的infix函数/index.html","hash":"64be6880b1e2f189fd99f7b029bc9d7bf0d38a96","modified":1758346573827},{"_id":"public/2025/05/27/Service-Kotlin/index.html","hash":"11d9070b8847875507fae879a0cba742ef09e629","modified":1758346573827},{"_id":"public/2025/05/24/手机多媒体-Kotlin/index.html","hash":"14427664d6fcc0482911047af85ee732b8c36a96","modified":1758346573827},{"_id":"public/2025/05/11/泛型和委托/index.html","hash":"20e6c1367a84c8e7ecdfe4e660a8dd3320925d0f","modified":1758346573827},{"_id":"public/2025/05/11/Kotlin内置函数/index.html","hash":"62d42e8a4a591b780b7a8621fadca49d3a3cf94f","modified":1758346573827},{"_id":"public/2025/05/11/探究ContentProvider-Kotlin/index.html","hash":"ddd77c2ce11c542e9a8a85eca000b78a7f1c6a4f","modified":1758346573827},{"_id":"public/2025/05/08/Kotlin高阶函数的应用/index.html","hash":"d0e7404615eec85b8cfbcc84112b3b4ddbafd64d","modified":1758346573827},{"_id":"public/2025/05/08/数据存储-Kotlin/index.html","hash":"c23c3c264a301e10e2ef69d9c070e506a665be35","modified":1758346573827},{"_id":"public/2025/05/05/Kotlin高阶函数/index.html","hash":"d07701838aa78ad79a43fc6527874d95923605c0","modified":1758346573827},{"_id":"public/2025/05/05/广播机制-Kotlin/index.html","hash":"42b2ffb8b67f71865a3e3e13be16eda7618b4a68","modified":1758346573827},{"_id":"public/2025/05/01/Kotlin扩展函数和运算符重载/index.html","hash":"951b066188c65c7dd86d3d26e42035dbf79a9b69","modified":1758346573827},{"_id":"public/2025/05/01/碎片-1/index.html","hash":"8401538eae657776bb604d035a7b79e1f26dbd88","modified":1758346573827},{"_id":"public/2025/04/25/Kotlin延迟初始化和密封类/index.html","hash":"a5134b2745160f1511036c5d39eb805333c960d9","modified":1758346573827},{"_id":"public/2025/04/24/UI开发-Kotlin/index.html","hash":"9d0106417e7a2e60b595a47280d7dad16d3e38ef","modified":1758346573827},{"_id":"public/2025/04/20/Kotlin定义静态方法/index.html","hash":"fd3e2943df75bfba1e4ba60ad7e1b21aed8a7397","modified":1758346573827},{"_id":"public/2025/04/20/活动-1/index.html","hash":"931db863602805374d6e69fd0d5d826ff9ab46a1","modified":1758346573827},{"_id":"public/2025/04/19/Kotlin标准函数/index.html","hash":"19270e8f5979c6c0dd6773e57125bcd56c20289e","modified":1758346573827},{"_id":"public/2025/04/15/Kotlin语法/index.html","hash":"b058041dddc7f8d38e6d0893d7b6999ff469cb63","modified":1758346573827},{"_id":"public/2025/03/28/高级技巧/index.html","hash":"97222dc06a6cf11a8acf1b03ec07acd5780cf15d","modified":1758346573827},{"_id":"public/2025/03/25/Material-Design/index.html","hash":"615cebd1007f375c6fd70e8629bb2e453430f443","modified":1758346573827},{"_id":"public/2025/03/24/服务/index.html","hash":"8648162975b52b9d07109b5659b75a0a9a676d23","modified":1758346573827},{"_id":"public/2025/03/19/使用网络技术/index.html","hash":"502714ef2f63e8448f4f0e5dff10a2a0c6cad39b","modified":1758346573827},{"_id":"public/2025/03/18/手机多媒体/index.html","hash":"592baba4c93a6ccfeef1622569b0804389ac3f8e","modified":1758346573827},{"_id":"public/2025/03/11/内容提供器/index.html","hash":"b1a464924a7b750a380d4042b23863c077042246","modified":1758346573827},{"_id":"public/2025/03/11/Git/index.html","hash":"e6efc10a47c9c998f30fb89ca644e754ab62c8b8","modified":1758346573827},{"_id":"public/2025/03/07/try-catch和finally/index.html","hash":"440b90fd026bd4f913bbb12e5b2f5ba41ab3da8c","modified":1758346573827},{"_id":"public/2025/03/06/数据存储/index.html","hash":"31b84f3357b4650d5694a89e1be8403bb8643aa2","modified":1758346573827},{"_id":"public/2025/03/03/广播机制/index.html","hash":"d019b560dfbec59b9e6e9458504b8a262c139005","modified":1758346573827},{"_id":"public/2025/02/26/碎片/index.html","hash":"1c3f1ce9bb406639b66943b36111449e5f8902e4","modified":1758346573827},{"_id":"public/2025/02/25/UI开发/index.html","hash":"78014dd8b49949143d2b4776accaf83c61f46850","modified":1758346573827},{"_id":"public/2025/02/24/活动/index.html","hash":"5a0226c3f3eec705c055c976f20ff8a9afbe7b46","modified":1758346573827},{"_id":"public/2025/02/24/Android认识以及入门/index.html","hash":"df34b689198602a52343523b16949d70738b484b","modified":1758346573827},{"_id":"public/categories/Android-Java版/index.html","hash":"2b2130e7d1c6a9cfc01e1a6c56b2d25e2feb6bc0","modified":1758346573827},{"_id":"public/categories/Android-Java版/page/2/index.html","hash":"ad2044b7b4d72b75f9b3b8b8cd19fa2db6803400","modified":1758346573827},{"_id":"public/categories/Java/index.html","hash":"62e2e1319520081e0684e267dcdc9422621f6386","modified":1758346573827},{"_id":"public/categories/Git/index.html","hash":"28362dd907f4ed7a0aab007c4c7e4d187d6bd27d","modified":1758346573827},{"_id":"public/categories/Android-Kotlin版/index.html","hash":"ca19685504e455f56b4c82863244dfa15022997c","modified":1758346573827},{"_id":"public/categories/Android-Kotlin版/page/2/index.html","hash":"3f01c0c0f22a06c4b78a79fae73baf3065efbf53","modified":1758346573827},{"_id":"public/categories/Kotlin/index.html","hash":"f97ed1b33ec32710b4f3397c1470da56becb8516","modified":1758346573827},{"_id":"public/categories/Kotlin/page/2/index.html","hash":"687fb4b97dc231f2551fc02498be169772faf678","modified":1758346573827},{"_id":"public/categories/数据库-SQL/index.html","hash":"3d3c8aa69208feab27b5005b3dd60856627f9d91","modified":1758346573827},{"_id":"public/categories/Android随笔/index.html","hash":"58aad6a13cf537f67882a8ff6518520e0ac731bd","modified":1758346573827},{"_id":"public/categories/计算机底层/index.html","hash":"4db818ff32830c8d02231a563ce7cf92fc9fa1ab","modified":1758346573827},{"_id":"public/categories/AI/index.html","hash":"c58b36a3f4e9f618461df2897a5dab4c4f83b6a6","modified":1758346573827},{"_id":"public/categories/自定义View/index.html","hash":"d0d2ac616e436ccaff66c75cbcf89bd2f9630713","modified":1758346573827},{"_id":"public/archives/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/page/2/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/page/3/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/page/4/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/page/5/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/page/6/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/page/2/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/page/3/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/page/4/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/page/5/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/page/6/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/02/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/03/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/04/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/05/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/05/page/2/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/06/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/07/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/08/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/index.html","hash":"37e00bdd54bb197c38d02e84503e0e40a3a78e1f","modified":1758346573827},{"_id":"public/archives/2025/08/page/2/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/archives/2025/09/index.html","hash":"a9a792e8177648483f84761a84273ffa4625b1c4","modified":1758346573827},{"_id":"public/page/2/index.html","hash":"3696458dec46c0fbcec406d9eef7f223320f3415","modified":1758346573827},{"_id":"public/page/4/index.html","hash":"ef4c8477d013524bdd32642eb8997b282928da7a","modified":1758346573827},{"_id":"public/page/3/index.html","hash":"c7feac59ae619e34a1288a603d15c0e2c9811d53","modified":1758346573827},{"_id":"public/page/5/index.html","hash":"a021c9c04aa8dde22883db85592f75a97188a3a5","modified":1758346573827},{"_id":"public/page/6/index.html","hash":"82f6c08c83a6df1cdacccd5f40bd8f241468e81f","modified":1758346573827},{"_id":"public/page/7/index.html","hash":"7195e71c89cdb9fcd2bb389f1d9a9aa74bedb36a","modified":1758346573827},{"_id":"public/page/8/index.html","hash":"d144e9148e250d0a42cf3f4ed896d99722ad8c3f","modified":1758346573827},{"_id":"public/page/9/index.html","hash":"8ba244f21c779c570bc02519ba4dbaa03702ac4c","modified":1758346573827},{"_id":"public/page/10/index.html","hash":"9d8f9a932d4f270b7b32a9683295ed90493d6e00","modified":1758346573827},{"_id":"public/page/11/index.html","hash":"f8c7f281d87ac686b9549720e1541f79f03ceb13","modified":1758346573827},{"_id":"public/page/12/index.html","hash":"c28ad23ba3a1cc22bc549c609640c8f14247ce6f","modified":1758346573827},{"_id":"public/images/loading.gif","hash":"9c840c5c3e7b97a184deb390df2f6926d6161708","modified":1758346573827},{"_id":"public/img/img13.jpg","hash":"f533f4b1606aea34ed6f6c2d180e7e7cc9c60ecc","modified":1758346573827},{"_id":"public/img/img14.jpg","hash":"af40a112b450d8d51c2f9c756d5fa825ebc77676","modified":1758346573827},{"_id":"public/img/img21.jpg","hash":"868068a20cab607570c0779634aaa98c13f425ae","modified":1758346573827},{"_id":"public/img/img24.jpg","hash":"ba28f819f853a22645f0ca0ccbf9947c5817443a","modified":1758346573827},{"_id":"public/img/img28.jpg","hash":"e45146adc935a3e3fa553ed827aa1f2b8d82a98f","modified":1758346573827},{"_id":"public/img/img31.jpg","hash":"4ec5de7eeec11b2e644089fc4b8451826c3abe6f","modified":1758346573827},{"_id":"public/img/img3.jpg","hash":"ca8528ea95338fb57a93a1ba668b0af0ae985617","modified":1758346573827},{"_id":"public/img/img34.jpg","hash":"0349ddc3556dc1270e71b85745805022b0baf515","modified":1758346573827},{"_id":"public/img/img36.jpg","hash":"23c7f5727f6bd17508b70faa2376140552c170da","modified":1758346573827},{"_id":"public/img/img37.jpg","hash":"fd0fb6965439c25329c16b81f8d10e5c6cb35e51","modified":1758346573827},{"_id":"public/img/img4.jpg","hash":"c50d369b25dd12afd98a36760d6fa5ef7a2fbef0","modified":1758346573827},{"_id":"public/img/img100.png","hash":"84bf5c0e21f1efd4f774db898cd7bc8c335c9ed3","modified":1758346573827},{"_id":"public/img/img1.jpg","hash":"f299895cf3b5b34d44c8d57525e22ab4f6e99340","modified":1758346573827},{"_id":"public/img/img10.jpg","hash":"32211bd4859cf36fb6420d9cdfb2e24107d9f61c","modified":1758346573827},{"_id":"public/img/img102.png","hash":"44ba978d383063a898bef5ff91f715ca25f4310b","modified":1758346573827},{"_id":"public/img/img103.png","hash":"0e8f76540333cbb5f49d6e02d4e4a0171146958c","modified":1758346573827},{"_id":"public/img/img11.jpg","hash":"1bbfdbf3a7905564da68e9c16214fce2243fe1d4","modified":1758346573827},{"_id":"public/img/img111.png","hash":"4556cbfc18dbca0be61e2cf3b23b12db8e411be7","modified":1758346573827},{"_id":"public/img/img116.png","hash":"499f91ab17e765c9a069ce48df27c871d43119e9","modified":1758346573827},{"_id":"public/img/img12.jpg","hash":"530098fc96b10f80739c0c08f820c5fa351a7e16","modified":1758346573827},{"_id":"public/img/img16.jpg","hash":"1b05681382dfb22f05fef03af99ade635b8ae626","modified":1758346573827},{"_id":"public/img/img18.jpg","hash":"60e003df13b81d3793293ff0c8e52c6ee591c898","modified":1758346573827},{"_id":"public/img/img2.jpg","hash":"1905cfd79db0615fad71b8c20e375ec108232e61","modified":1758346573827},{"_id":"public/img/img20.jpg","hash":"b849f2399f99804ab6942bbe1bf6e45feaa9ed38","modified":1758346573827},{"_id":"public/img/img23.jpg","hash":"3b511c152643f4362329efdb560d452097ebbf97","modified":1758346573827},{"_id":"public/img/img25.jpg","hash":"a02142baa4e1e3febe560a6b62c3086c9e7d6dda","modified":1758346573827},{"_id":"public/img/img6.jpg","hash":"bc79480d3955a3b138d7b683bc668dfe64eac888","modified":1758346573827},{"_id":"public/img/img7.jpg","hash":"6d6e01976930a062c6d0ba6cd3913761be6dbeb3","modified":1758346573827},{"_id":"public/css/main.css","hash":"82092ed86a38a777dec4236dc1fc2b850d3709dd","modified":1758346573827},{"_id":"public/js/lib/crypto.js","hash":"bc4a0c41cf5b61faa204a2a820fc042b563142cf","modified":1758346573827},{"_id":"public/js/main.js","hash":"a9cb52bac89783c3957c77cbb4ffc8fbb93a92a1","modified":1758346573827},{"_id":"public/js/lib/highlight.js","hash":"a9ee0fd40904e2e50ab5ecab4c718a49c095836f","modified":1758346573827},{"_id":"public/js/lib/search.js","hash":"b631b87fa126a9a4a81b60b1a0516f765879963e","modified":1758346573827},{"_id":"public/js/lib/home.js","hash":"c2bf22772fd052cff88a9b5f547a30a6eb97e545","modified":1758346573827},{"_id":"public/js/lib/fireworks.min.js","hash":"6f5ccef48af055cb6f4419b6b6d5990678cb502c","modified":1758346573827},{"_id":"public/js/lib/preview.js","hash":"595cfc3aff107b8dd0fdda214995c6f1bb5be39a","modified":1758346573827},{"_id":"public/js/lib/math.js","hash":"24c182cd3f5dd1c0f0192ca4cc143de71e076d2a","modified":1758346573827},{"_id":"public/img/img9.jpg","hash":"90a8f9c87e608624f68fb89dcc25bb8c875a7553","modified":1758346573827},{"_id":"public/img/img26.jpg","hash":"664a1b2caa1730c8f9248996e5366e6d5f34e662","modified":1758346573827},{"_id":"public/img/img27.jpg","hash":"f30fefb3c6440537a64a5bb6994fc9cb5f1525cf","modified":1758346573827},{"_id":"public/img/img35.jpg","hash":"f42483d0b0b5923cd8ecdc52c795e5d5e5030941","modified":1758346573827},{"_id":"public/img/img45.jpg","hash":"4f6b27e16a54d6922be9c15aa66b027ac7ef37fe","modified":1758346573827},{"_id":"public/img/img5.jpg","hash":"390fabab35638fa3a9f2028aa43afd7933e38f64","modified":1758346573827},{"_id":"public/img/img101.png","hash":"fbfd463f4d8b0e5cdb66971a7c6e0f123788e17d","modified":1758346573827},{"_id":"public/img/img110.png","hash":"4fe6de2fd97c4b869f36a7b44fb6a0a6feaea1b7","modified":1758346573827},{"_id":"public/img/img115.png","hash":"63e48f7947a754341aaa868085f55e88652fbe96","modified":1758346573827},{"_id":"public/img/img15.jpg","hash":"1beeeaaf0a21b5c2885c55ff0ba0e64fae81325e","modified":1758346573827},{"_id":"public/img/img17.jpg","hash":"37481f21b580f8f12ceabb5bfc11e182cdc3649a","modified":1758346573827},{"_id":"public/img/img19.jpg","hash":"f110d2040230f83b59180f846c741688452208c2","modified":1758346573827},{"_id":"public/img/img22.jpg","hash":"85ea6274c58e8f7de609970f511c3ed4de22bbae","modified":1758346573827},{"_id":"public/img/img99.png","hash":"bc42f665f492043004c0d02f78946d100b9aced5","modified":1758346573827},{"_id":"public/img/img97.png","hash":"baa729b17b4ccf513100e2182d634504b66f4fcd","modified":1758346573827},{"_id":"public/img/img29.jpg","hash":"799cc8dfe49f5eeefd0a0b0afb06d3c925a11340","modified":1758346573827},{"_id":"public/img/img30.jpg","hash":"b58c33ee800e65d621aefe0dee16a76683518a19","modified":1758346573827},{"_id":"public/img/img32.jpg","hash":"65aba6ca2adb01cf15a6031233fcbc6f0ac1eecb","modified":1758346573827},{"_id":"public/img/img33.jpg","hash":"c30a322f7adaa739c939fd892780db075ee6511a","modified":1758346573827},{"_id":"public/img/img39.jpg","hash":"c2fcf162e5996e3d3a5d90c18c6bd327d196a362","modified":1758346573827},{"_id":"public/img/img38.jpg","hash":"258284a657e08bccb8f148c2a312e101d22a39fe","modified":1758346573827},{"_id":"public/img/img40.jpg","hash":"5433a48bd751a8d82ed1cca7f0ae386f71e8eebf","modified":1758346573827},{"_id":"public/img/img42.jpg","hash":"6698dac2c47e2732148a442a441438c800d7b71e","modified":1758346573827},{"_id":"public/img/img43.jpg","hash":"c2a0e58c2f36469cd63e238548221618bc5322a9","modified":1758346573827},{"_id":"public/img/img48.jpg","hash":"cf17871a0775753b3d6bf4a1bbecb3d58ee3d801","modified":1758346573827},{"_id":"public/img/img49.jpg","hash":"eab222c1c33a9b1d8e744cd5c7e9f432307f104f","modified":1758346573827},{"_id":"public/img/img119.png","hash":"2fe59c26ac9c91fcaf411aff49bdecf5751cb589","modified":1758346573827},{"_id":"public/img/img122.png","hash":"2b858f6381ead30f0a0bbb2a9e82fcd9f2b3a8ab","modified":1758346573827},{"_id":"public/img/img64.png","hash":"1726024768ca99f5937e425670b9e59ee9fafdd8","modified":1758346573827},{"_id":"public/img/img62.png","hash":"04ab9ef700226a80829f6fef7c02da64276959d1","modified":1758346573827},{"_id":"public/img/img94.png","hash":"72165b71f062ba59a13412e592946a75baae0318","modified":1758346573827},{"_id":"public/img/img41.jpg","hash":"f0799298878f45c5c554c2bddda814bd4d4f233d","modified":1758346573827},{"_id":"public/img/img44.png","hash":"8e04c64a13cd8c3a424f8080ffe11aea199c6aca","modified":1758346573827},{"_id":"public/img/img50.jpg","hash":"4357a1ffdd6b5a84ee3ab8cab5bd8596b58ae4e7","modified":1758346573827},{"_id":"public/img/img109.png","hash":"96166e0b2113f5c64c20e7f5d1f2c45e5c324100","modified":1758346573827},{"_id":"public/img/img114.png","hash":"fa36ddaf1bb57feffe19bf35f502806e2bf72586","modified":1758346573827},{"_id":"public/img/img118.png","hash":"3950bc26dd67b8e9b8ab7e1546bdb515bf5dbcd1","modified":1758346573827},{"_id":"public/img/img117.png","hash":"2e0d041c31918cbabe4d9824c22ed0f7c0a4e3f9","modified":1758346573827},{"_id":"public/img/img121.png","hash":"a10fecc6201f0b164fe7248cc3f41b19d2028eb9","modified":1758346573827},{"_id":"public/img/img68.png","hash":"e91db5a724c08028ce6e3b7a833e69b51b67c796","modified":1758346573827},{"_id":"public/img/img65.png","hash":"15af7f4af74abebe9be4517c29484abe3b6a53be","modified":1758346573827},{"_id":"public/img/img69.png","hash":"ded71965eb986dd559949ab570997718dea8141c","modified":1758346573827},{"_id":"public/img/img73.png","hash":"572e6ad4a484415612dd1f4c6c2538d5703f8b59","modified":1758346573827},{"_id":"public/img/img75.png","hash":"265ffa53a7bfe10cf6ac87b2576776bb558311e4","modified":1758346573827},{"_id":"public/img/img71.png","hash":"7429c69c9e104d2299b03396be459b096482e556","modified":1758346573827},{"_id":"public/img/img8.jpg","hash":"ec85336e964f6e8e25eb3ca07649199f866bb98b","modified":1758346573827},{"_id":"public/img/img79.png","hash":"93d26a39d893f05cc4d29606e034820009464c5e","modified":1758346573827},{"_id":"public/img/img82.png","hash":"fb1069ba7e7c5497f7433bcd5ce1cfe7bff2ef47","modified":1758346573827},{"_id":"public/img/img78.png","hash":"0e06eb817bbdb95b180df7a2030ba497299c36f9","modified":1758346573827},{"_id":"public/images/avatar.jpg","hash":"19ca6c77075321089a1843069e0c80b0885d7b9d","modified":1758346573827},{"_id":"public/img/img104.png","hash":"a94ee0a283860fab168d1e2e490140c145dc001a","modified":1758346573827},{"_id":"public/img/img106.png","hash":"648b78c82b2a11e38b1022e9fbb286e9e814ed32","modified":1758346573827},{"_id":"public/img/img112.png","hash":"5c698a87b2b42d7261ac826296d5e65ff323582b","modified":1758346573827},{"_id":"public/img/img66.png","hash":"1bf1c58c926240ef45ddde60f232484e585768c4","modified":1758346573827},{"_id":"public/img/img76.png","hash":"3d00aa47a9e028e440cd7f0c9e87cc3d031ff017","modified":1758346573827},{"_id":"public/img/img80.png","hash":"38abfde203101191b7e736e08af4ae16d06d4220","modified":1758346573827},{"_id":"public/img/img86.png","hash":"714e3958fb66187ec40dde5c9eabdd7eb7282bec","modified":1758346573827},{"_id":"public/img/img95.png","hash":"40e65bdb3e8144b7f928fbfbd38c4bfd3b17494a","modified":1758346573827},{"_id":"public/img/img92.png","hash":"f830219b3984c7f1f4146e40a91c8d626eab3f4d","modified":1758346573827},{"_id":"public/img/img98.png","hash":"d22591c682eb4f3454fc40800c5072262e7c3cd0","modified":1758346573827},{"_id":"public/images/background.jpg","hash":"6b2042b71e3cb40709cc29757ff16251ca4f7b5e","modified":1758346573827},{"_id":"public/img/img53.jpg","hash":"bd8192f41af20cfa529d72b07e26431278aef79f","modified":1758346573827},{"_id":"public/img/img105.png","hash":"b09fe76d02ba0ce5d043ab08a6b9c24e062864d3","modified":1758346573827},{"_id":"public/img/img120.png","hash":"3014456264dfa91cb9a9c1e959c6af461bdbf0e8","modified":1758346573827},{"_id":"public/img/img63.png","hash":"64c28c733acbad23d4307a73a670b0e22c51ee4a","modified":1758346573827},{"_id":"public/img/img70.png","hash":"48be6b024fb179d19062d2519d5b9ac418595320","modified":1758346573827},{"_id":"public/img/img72.png","hash":"83970b93ae30743d147afe17758a998341e74426","modified":1758346573827},{"_id":"public/img/img74.png","hash":"2b70ad2d122657b6b1c3c973a88e0ef252a6d38d","modified":1758346573827},{"_id":"public/img/img83.png","hash":"e99079e8187208f2675706774b68b2e17f495faf","modified":1758346573827},{"_id":"public/img/img84.png","hash":"25846822290df5a4c374ece60835bf182256a33f","modified":1758346573827},{"_id":"public/img/img91.png","hash":"6cf75d3547481c9f8fab59f022bd25dcd55e694d","modified":1758346573827},{"_id":"public/img/img88.png","hash":"ddfb6c0b235c9b237ae55d11278ce6903e6eb92f","modified":1758346573827},{"_id":"public/img/img96.png","hash":"e7bc25605de47cefdd990817c34f1edbc82943c6","modified":1758346573827},{"_id":"public/img/img107.png","hash":"607e9114285483d3c91956d155a57c3ca3133ba2","modified":1758346573827},{"_id":"public/img/img108.png","hash":"e001fbfbff41c8ea9375d31277e49b7ed0d7f41c","modified":1758346573827},{"_id":"public/img/img77.png","hash":"707343bf77bb09aee0226344d7fc04455dce9f8f","modified":1758346573827},{"_id":"public/img/img93.png","hash":"049a4f0129f96e950bdcf74b373703a3b531fe3b","modified":1758346573827},{"_id":"public/img/img47.jpg","hash":"691e5f26fa2162e5d41fec69fa813ee6d7d4f412","modified":1758346573827},{"_id":"public/img/img56.jpg","hash":"eed166d2f3bd4659ad3ee3716b37eb5aad42d508","modified":1758346573827},{"_id":"public/img/img81.png","hash":"45d10592f4563849a86fcb24f187d1c6bb3a6be6","modified":1758346573827},{"_id":"public/img/img89.png","hash":"3486017fc08f07442f5efae53015b598eb67d4a2","modified":1758346573827},{"_id":"public/img/img52.jpg","hash":"95922a69348c76755edeabf37f3a442f165360f3","modified":1758346573827},{"_id":"public/img/img113.png","hash":"85ba2a20000ef46a7fa897a04c86e385040388f9","modified":1758346573827},{"_id":"public/img/img67.png","hash":"38668d273a9c3377013ea930447df900a16b688d","modified":1758346573827},{"_id":"public/img/img87.png","hash":"5edb9ca38f281d96982959d9f1d0e6b8a2950f35","modified":1758346573827},{"_id":"public/img/img51.jpg","hash":"90af55f1b46af4e15b3bab0cd56adf40fd90717c","modified":1758346573827},{"_id":"public/img/img85.png","hash":"3632989eabc845e4e2897f934edb0940b85ad88b","modified":1758346573827},{"_id":"public/img/img46.jpg","hash":"197c546601be344db57fa9b12c316b45018c2114","modified":1758346573827},{"_id":"public/img/img59.jpg","hash":"9b6bae7674671f57df18477aa1d2f25840e96fb2","modified":1758346573827},{"_id":"public/img/img90.png","hash":"716ad1a06a95651e90f3872e1da3114fbab9a6a1","modified":1758346573827},{"_id":"public/img/img57.jpg","hash":"88a9ef27db8d13cf67239716ad1d07cdeafb2c59","modified":1758346573827},{"_id":"public/img/img58.jpg","hash":"2891fba33693239b3fff17bc2c7515314fcc7898","modified":1758346573827},{"_id":"public/img/img61.jpg","hash":"01ffec52746147b656b896b820ee361d28b2fc1c","modified":1758346573827},{"_id":"public/img/img55.jpg","hash":"ef5fac5a45fc87d6d659f532da6c0dc45f2c1866","modified":1758346573827},{"_id":"public/img/img60.jpg","hash":"6b727cbaa0d8ab3c931e9f11a3527f204f337478","modified":1758346573827},{"_id":"public/img/img54.jpg","hash":"40eda6fa1a58bcea0ee368f3e49a8cccc2fee944","modified":1758346573827}],"Category":[{"name":"Android(Java版)","_id":"cmfru5gbo0004s4s779jw8vnc"},{"name":"Java","_id":"cmfru5gbs0008s4s72lfq7nkt"},{"name":"Git","_id":"cmfru5gbu000cs4s79r9a4x9c"},{"name":"Android(Kotlin版)","_id":"cmfru5gbz000ks4s7guvy7kld"},{"name":"Kotlin","_id":"cmfru5gc1000ps4s77oq38n9c"},{"name":"数据库(SQL)","_id":"cmfru5gce001ss4s7dyqg89zf"},{"name":"Android随笔","_id":"cmfru5gcm002hs4s727id5ahu"},{"name":"计算机底层","_id":"cmfru5gcn002ms4s79hhx5eso"},{"name":"AI","_id":"cmfru5gcp002rs4s7hyl8cted"},{"name":"自定义View","_id":"cmfru5gcv003as4s7gvin290o"}],"Data":[],"Page":[{"title":"文章分类","date":"2025-09-19T07:46:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2025-09-19 15:46:04\ntype: categories\n---\n","updated":"2025-09-19T07:49:45.098Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmfru5gbf0000s4s7dqn08x7u","content":"","excerpt":"","more":""},{"title":"关于博客","date":"2025-09-19T07:52:42.000Z","_content":"\n## **欢迎来到我博客，记录了自学习Android之后的计算机相关笔记**\n\n**如果有发现错误可以联系我**：\n\n**GitHub:** [https://github.com/buyu6/buyu6.github.io]\n\n**邮箱:** [yu2006059@gmail.com]\n","source":"about/index.md","raw":"---\ntitle: 关于博客\ndate: 2025-09-19 15:52:42\n---\n\n## **欢迎来到我博客，记录了自学习Android之后的计算机相关笔记**\n\n**如果有发现错误可以联系我**：\n\n**GitHub:** [https://github.com/buyu6/buyu6.github.io]\n\n**邮箱:** [yu2006059@gmail.com]\n","updated":"2025-09-19T08:08:37.830Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmfru5gbl0002s4s7bubj0wsf","content":"<h2 id=\"欢迎来到我博客，记录了自学习Android之后的计算机相关笔记\"><a href=\"#欢迎来到我博客，记录了自学习Android之后的计算机相关笔记\" class=\"headerlink\" title=\"欢迎来到我博客，记录了自学习Android之后的计算机相关笔记\"></a><strong>欢迎来到我博客，记录了自学习Android之后的计算机相关笔记</strong></h2><p><strong>如果有发现错误可以联系我</strong>：</p>\n<p><strong>GitHub:</strong> [<a href=\"https://github.com/buyu6/buyu6.github.io]\">https://github.com/buyu6/buyu6.github.io]</a></p>\n<p><strong>邮箱:</strong> [<a href=\"mailto:&#121;&#x75;&#50;&#48;&#48;&#54;&#48;&#53;&#x39;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;\">yu2006059@gmail.com</a>]</p>\n","excerpt":"欢迎来到我博客，记录了自学习Android之后的计算机相关笔记\n如果有发现错误可以联系我：\n\nGitHub: [https://github.com/buyu6/buyu6.github.io]\n\n邮箱: [yu2006059@gmail.com]","more":"<h2 id=\"欢迎来到我博客，记录了自学习Android之后的计算机相关笔记\"><a href=\"#欢迎来到我博客，记录了自学习Android之后的计算机相关笔记\" class=\"headerlink\" title=\"欢迎来到我博客，记录了自学习Android之后的计算机相关笔记\"></a><strong>欢迎来到我博客，记录了自学习Android之后的计算机相关笔记</strong></h2><p><strong>如果有发现错误可以联系我</strong>：</p>\n<p><strong>GitHub:</strong> [<a href=\"https://github.com/buyu6/buyu6.github.io]\">https://github.com/buyu6/buyu6.github.io]</a></p>\n<p><strong>邮箱:</strong> [<a href=\"mailto:&#121;&#x75;&#50;&#48;&#48;&#54;&#48;&#53;&#x39;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;\">yu2006059@gmail.com</a>]</p>\n"}],"Post":[{"title":"Android认识以及入门","date":"2025-02-24T12:28:01.000Z","_content":"\n# 系统架构\n\n\n\n1.Linux内核层:提供底层驱动\n2.系统运行库层:提供主要的特性支持(通过C/C++库)，同样这一层也有Android运行时库，提供了一些核心库，能允许开发者使用Java来编写应用。\n3.应用框架层:提供了各种API\n4.应用层:安装到手机上的应用程序都属于这一层\n\n---\n\n\n\n# Android应用开发特色\n\n\n\n1.四大组件:活动，服务，广播接收器，内容提供器。\n2.丰富的系统控件\n3.SQLite数据库:让存储数据和读取数据变得更为方便\n4.强大的多媒体\n5.地理位置定位\n\n---\n\n\n\n# 项目中各个文件的作用\n\n\n\n1.gradle:里面含有gradle wrapper配置文件，需要打开的话必须手动按照“导航栏~File~Settings~Bulid,Execution,Deployment~Gradle”这个步骤进行\n2..gitignore:将指定的目录或文件排除在版本控制之外。\n3.gradle.properties:这个文件是全局的gradle配置文件，在这里配置的属性将会影响到项目中所有的gradle编译脚本。\n4.gradlew和gradlew.bat:用来在命令行界面中执行gradle命令的，其中gradle是在Linux或Mac系统使用，gradlew.bat在Windows系统使用\n\n\n\n[^]: ***无需修改或使用的文件这里不做赘述(主要起作用的是app当中文件这里放在下一节进行详细论述)***\n\n---\n\n# app目录详解\n\n\n\n1.libs:jar包存放的地方\n2.Androidtest:编写测试用例，对项目进行自动化测试\n3.Java:放置Java代码的地方\n4.res:\n①图片放在drawable中\n②布局放在layout中\n③字符串，样式，颜色等配置放在values中\n④mipmap中放置一些图标\n5.AndroidManifest.xml:整个Android项目配置文件，四大组件和活动等都需要在这里注册，经常会使用到这个文件。\n6.test:编写测试用例，是对项目自动化测试的另一种方式\n7.build.gradle:这个文件中会指定很多项目构建相关的配置\n8.proguard-rules.pro:指定项目代码的混淆规则\n\n[^]: ***做项目基本在这个文件里进行修改(没多大作用的不再讲解***\n\n---\n\n# 主活动的设定\n\n\n\n即首先启动的活动\n\n```java\n<intent-filter>\n    <action android:name=\"android.intent.action.MAIN\"/>\n    <category android:name=\"android.intent.category.LAUNCHER\"/>\n</intent-filter>\n```\n\n---\n\n# 引用的方法\n\n\n\n1.R.string.hello_world\n2.@string/hello_world\n如果在@和string之间添上一个+就变成了定义\n其中的string可以替换\n\n---\n\n# 日志工具\n\n\n\n从小到大的顺序\nLog.v:打印意义最小的信息\nLog.d:打印调试信息\nLog.i:比较重要的数据\nLog.w:警告信息\nLog.e:错误信息\n传入两个参数:第一个参数是tag，一般传入类名就好主要用于对打印信息的过滤\n第二个参数是msg，即想要打印的内容\n一般与logcat结合使用\n\n---\n","source":"_posts/Android认识以及入门.md","raw":"---\ntitle: Android认识以及入门\ndate: 2025-02-24 20:28:01\ncategories:\n- Android(Java版)\ntags:\n\n---\n\n# 系统架构\n\n\n\n1.Linux内核层:提供底层驱动\n2.系统运行库层:提供主要的特性支持(通过C/C++库)，同样这一层也有Android运行时库，提供了一些核心库，能允许开发者使用Java来编写应用。\n3.应用框架层:提供了各种API\n4.应用层:安装到手机上的应用程序都属于这一层\n\n---\n\n\n\n# Android应用开发特色\n\n\n\n1.四大组件:活动，服务，广播接收器，内容提供器。\n2.丰富的系统控件\n3.SQLite数据库:让存储数据和读取数据变得更为方便\n4.强大的多媒体\n5.地理位置定位\n\n---\n\n\n\n# 项目中各个文件的作用\n\n\n\n1.gradle:里面含有gradle wrapper配置文件，需要打开的话必须手动按照“导航栏~File~Settings~Bulid,Execution,Deployment~Gradle”这个步骤进行\n2..gitignore:将指定的目录或文件排除在版本控制之外。\n3.gradle.properties:这个文件是全局的gradle配置文件，在这里配置的属性将会影响到项目中所有的gradle编译脚本。\n4.gradlew和gradlew.bat:用来在命令行界面中执行gradle命令的，其中gradle是在Linux或Mac系统使用，gradlew.bat在Windows系统使用\n\n\n\n[^]: ***无需修改或使用的文件这里不做赘述(主要起作用的是app当中文件这里放在下一节进行详细论述)***\n\n---\n\n# app目录详解\n\n\n\n1.libs:jar包存放的地方\n2.Androidtest:编写测试用例，对项目进行自动化测试\n3.Java:放置Java代码的地方\n4.res:\n①图片放在drawable中\n②布局放在layout中\n③字符串，样式，颜色等配置放在values中\n④mipmap中放置一些图标\n5.AndroidManifest.xml:整个Android项目配置文件，四大组件和活动等都需要在这里注册，经常会使用到这个文件。\n6.test:编写测试用例，是对项目自动化测试的另一种方式\n7.build.gradle:这个文件中会指定很多项目构建相关的配置\n8.proguard-rules.pro:指定项目代码的混淆规则\n\n[^]: ***做项目基本在这个文件里进行修改(没多大作用的不再讲解***\n\n---\n\n# 主活动的设定\n\n\n\n即首先启动的活动\n\n```java\n<intent-filter>\n    <action android:name=\"android.intent.action.MAIN\"/>\n    <category android:name=\"android.intent.category.LAUNCHER\"/>\n</intent-filter>\n```\n\n---\n\n# 引用的方法\n\n\n\n1.R.string.hello_world\n2.@string/hello_world\n如果在@和string之间添上一个+就变成了定义\n其中的string可以替换\n\n---\n\n# 日志工具\n\n\n\n从小到大的顺序\nLog.v:打印意义最小的信息\nLog.d:打印调试信息\nLog.i:比较重要的数据\nLog.w:警告信息\nLog.e:错误信息\n传入两个参数:第一个参数是tag，一般传入类名就好主要用于对打印信息的过滤\n第二个参数是msg，即想要打印的内容\n一般与logcat结合使用\n\n---\n","slug":"Android认识以及入门","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gbh0001s4s75u7u1e6w","content":"<h1 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h1><p>1.Linux内核层:提供底层驱动<br>2.系统运行库层:提供主要的特性支持(通过C&#x2F;C++库)，同样这一层也有Android运行时库，提供了一些核心库，能允许开发者使用Java来编写应用。<br>3.应用框架层:提供了各种API<br>4.应用层:安装到手机上的应用程序都属于这一层</p>\n<hr>\n<h1 id=\"Android应用开发特色\"><a href=\"#Android应用开发特色\" class=\"headerlink\" title=\"Android应用开发特色\"></a>Android应用开发特色</h1><p>1.四大组件:活动，服务，广播接收器，内容提供器。<br>2.丰富的系统控件<br>3.SQLite数据库:让存储数据和读取数据变得更为方便<br>4.强大的多媒体<br>5.地理位置定位</p>\n<hr>\n<h1 id=\"项目中各个文件的作用\"><a href=\"#项目中各个文件的作用\" class=\"headerlink\" title=\"项目中各个文件的作用\"></a>项目中各个文件的作用</h1><p>1.gradle:里面含有gradle wrapper配置文件，需要打开的话必须手动按照“导航栏<del>File</del>Settings<del>Bulid,Execution,Deployment</del>Gradle”这个步骤进行<br>2..gitignore:将指定的目录或文件排除在版本控制之外。<br>3.gradle.properties:这个文件是全局的gradle配置文件，在这里配置的属性将会影响到项目中所有的gradle编译脚本。<br>4.gradlew和gradlew.bat:用来在命令行界面中执行gradle命令的，其中gradle是在Linux或Mac系统使用，gradlew.bat在Windows系统使用</p>\n<hr>\n<h1 id=\"app目录详解\"><a href=\"#app目录详解\" class=\"headerlink\" title=\"app目录详解\"></a>app目录详解</h1><p>1.libs:jar包存放的地方<br>2.Androidtest:编写测试用例，对项目进行自动化测试<br>3.Java:放置Java代码的地方<br>4.res:<br>①图片放在drawable中<br>②布局放在layout中<br>③字符串，样式，颜色等配置放在values中<br>④mipmap中放置一些图标<br>5.AndroidManifest.xml:整个Android项目配置文件，四大组件和活动等都需要在这里注册，经常会使用到这个文件。<br>6.test:编写测试用例，是对项目自动化测试的另一种方式<br>7.build.gradle:这个文件中会指定很多项目构建相关的配置<br>8.proguard-rules.pro:指定项目代码的混淆规则</p>\n<hr>\n<h1 id=\"主活动的设定\"><a href=\"#主活动的设定\" class=\"headerlink\" title=\"主活动的设定\"></a>主活动的设定</h1><p>即首先启动的活动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;intent-filter&gt;</span><br><span class=\"line\">    &lt;action android:name=<span class=\"string\">&quot;android.intent.action.MAIN&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;category android:name=<span class=\"string\">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"引用的方法\"><a href=\"#引用的方法\" class=\"headerlink\" title=\"引用的方法\"></a>引用的方法</h1><p>1.R.string.hello_world<br>2.@string&#x2F;hello_world<br>如果在@和string之间添上一个+就变成了定义<br>其中的string可以替换</p>\n<hr>\n<h1 id=\"日志工具\"><a href=\"#日志工具\" class=\"headerlink\" title=\"日志工具\"></a>日志工具</h1><p>从小到大的顺序<br>Log.v:打印意义最小的信息<br>Log.d:打印调试信息<br>Log.i:比较重要的数据<br>Log.w:警告信息<br>Log.e:错误信息<br>传入两个参数:第一个参数是tag，一般传入类名就好主要用于对打印信息的过滤<br>第二个参数是msg，即想要打印的内容<br>一般与logcat结合使用</p>\n<hr>\n","excerpt":"系统架构\n1.Linux内核层:提供底层驱动\n2.系统运行库层:提供主要的特性支持(通过C/C++库)，同样这一层也有Android运行时库，提供了一些核心库，能允许开发者使用Java来编写应用。\n3.应用框架层:提供了各种API\n4.应用层:安装到手机上的应用程序都属于这一层\n\n\n\n\nAndroid应用开发特色\n1.四大组件:活动，服务，广播接收器，内容提供器。\n2.丰富的系统控件\n3.SQLite数据库:让存储数据和读取数据变得更为方便\n4.强大的多媒体\n5.地理位置定位\n\n\n\n\n项目中各个文件的作用\n1.gradle:里面含有gradle wrapper配置文件，需要打开的话必须手动按照","more":"<h1 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h1><p>1.Linux内核层:提供底层驱动<br>2.系统运行库层:提供主要的特性支持(通过C&#x2F;C++库)，同样这一层也有Android运行时库，提供了一些核心库，能允许开发者使用Java来编写应用。<br>3.应用框架层:提供了各种API<br>4.应用层:安装到手机上的应用程序都属于这一层</p>\n<hr>\n<h1 id=\"Android应用开发特色\"><a href=\"#Android应用开发特色\" class=\"headerlink\" title=\"Android应用开发特色\"></a>Android应用开发特色</h1><p>1.四大组件:活动，服务，广播接收器，内容提供器。<br>2.丰富的系统控件<br>3.SQLite数据库:让存储数据和读取数据变得更为方便<br>4.强大的多媒体<br>5.地理位置定位</p>\n<hr>\n<h1 id=\"项目中各个文件的作用\"><a href=\"#项目中各个文件的作用\" class=\"headerlink\" title=\"项目中各个文件的作用\"></a>项目中各个文件的作用</h1><p>1.gradle:里面含有gradle wrapper配置文件，需要打开的话必须手动按照“导航栏<del>File</del>Settings<del>Bulid,Execution,Deployment</del>Gradle”这个步骤进行<br>2..gitignore:将指定的目录或文件排除在版本控制之外。<br>3.gradle.properties:这个文件是全局的gradle配置文件，在这里配置的属性将会影响到项目中所有的gradle编译脚本。<br>4.gradlew和gradlew.bat:用来在命令行界面中执行gradle命令的，其中gradle是在Linux或Mac系统使用，gradlew.bat在Windows系统使用</p>\n<hr>\n<h1 id=\"app目录详解\"><a href=\"#app目录详解\" class=\"headerlink\" title=\"app目录详解\"></a>app目录详解</h1><p>1.libs:jar包存放的地方<br>2.Androidtest:编写测试用例，对项目进行自动化测试<br>3.Java:放置Java代码的地方<br>4.res:<br>①图片放在drawable中<br>②布局放在layout中<br>③字符串，样式，颜色等配置放在values中<br>④mipmap中放置一些图标<br>5.AndroidManifest.xml:整个Android项目配置文件，四大组件和活动等都需要在这里注册，经常会使用到这个文件。<br>6.test:编写测试用例，是对项目自动化测试的另一种方式<br>7.build.gradle:这个文件中会指定很多项目构建相关的配置<br>8.proguard-rules.pro:指定项目代码的混淆规则</p>\n<hr>\n<h1 id=\"主活动的设定\"><a href=\"#主活动的设定\" class=\"headerlink\" title=\"主活动的设定\"></a>主活动的设定</h1><p>即首先启动的活动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;intent-filter&gt;</span><br><span class=\"line\">    &lt;action android:name=<span class=\"string\">&quot;android.intent.action.MAIN&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;category android:name=<span class=\"string\">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"引用的方法\"><a href=\"#引用的方法\" class=\"headerlink\" title=\"引用的方法\"></a>引用的方法</h1><p>1.R.string.hello_world<br>2.@string&#x2F;hello_world<br>如果在@和string之间添上一个+就变成了定义<br>其中的string可以替换</p>\n<hr>\n<h1 id=\"日志工具\"><a href=\"#日志工具\" class=\"headerlink\" title=\"日志工具\"></a>日志工具</h1><p>从小到大的顺序<br>Log.v:打印意义最小的信息<br>Log.d:打印调试信息<br>Log.i:比较重要的数据<br>Log.w:警告信息<br>Log.e:错误信息<br>传入两个参数:第一个参数是tag，一般传入类名就好主要用于对打印信息的过滤<br>第二个参数是msg，即想要打印的内容<br>一般与logcat结合使用</p>\n<hr>\n"},{"title":"CMD","date":"2025-08-20T12:31:38.000Z","_content":"\n### 常见CMD命令\n\n- **盘符名称+冒号**切换盘符\n- **dir**查看当前路径下内容(隐藏的也会展示出来)\n- **cd+目录**进入单级目录\n- **cd 目录1\\目录2\\ **进入多级目录\n- **cd ..**回退上一级目录\n- **cd \\ **回退到盘符目录\n- **cls** 清屏\n- **exit** 退出命令窗口\n","source":"_posts/CMD.md","raw":"---\ntitle: CMD\ndate: 2025-08-20 20:31:38\ncategories:\n- Java\ntags:\n---\n\n### 常见CMD命令\n\n- **盘符名称+冒号**切换盘符\n- **dir**查看当前路径下内容(隐藏的也会展示出来)\n- **cd+目录**进入单级目录\n- **cd 目录1\\目录2\\ **进入多级目录\n- **cd ..**回退上一级目录\n- **cd \\ **回退到盘符目录\n- **cls** 清屏\n- **exit** 退出命令窗口\n","slug":"CMD","published":1,"updated":"2025-08-20T13:00:58.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gbm0003s4s76xce74cn","content":"<h3 id=\"常见CMD命令\"><a href=\"#常见CMD命令\" class=\"headerlink\" title=\"常见CMD命令\"></a>常见CMD命令</h3><ul>\n<li><strong>盘符名称+冒号</strong>切换盘符</li>\n<li><strong>dir</strong>查看当前路径下内容(隐藏的也会展示出来)</li>\n<li><strong>cd+目录</strong>进入单级目录</li>\n<li>**cd 目录1\\目录2\\ **进入多级目录</li>\n<li>**cd ..**回退上一级目录</li>\n<li>**cd \\ **回退到盘符目录</li>\n<li><strong>cls</strong> 清屏</li>\n<li><strong>exit</strong> 退出命令窗口</li>\n</ul>\n","excerpt":"常见CMD命令\n * 盘符名称+冒号切换盘符\n * dir查看当前路径下内容(隐藏的也会展示出来)\n * cd+目录进入单级目录\n * **cd 目录1\\目录2\\ **进入多级目录\n * **cd ..**回退上一级目录\n * **cd \\ **回退到盘符目录\n * cls 清屏\n * exit 退出命令窗口","more":"<h3 id=\"常见CMD命令\"><a href=\"#常见CMD命令\" class=\"headerlink\" title=\"常见CMD命令\"></a>常见CMD命令</h3><ul>\n<li><strong>盘符名称+冒号</strong>切换盘符</li>\n<li><strong>dir</strong>查看当前路径下内容(隐藏的也会展示出来)</li>\n<li><strong>cd+目录</strong>进入单级目录</li>\n<li>**cd 目录1\\目录2\\ **进入多级目录</li>\n<li>**cd ..**回退上一级目录</li>\n<li>**cd \\ **回退到盘符目录</li>\n<li><strong>cls</strong> 清屏</li>\n<li><strong>exit</strong> 退出命令窗口</li>\n</ul>\n"},{"title":"Git","date":"2025-03-11T06:56:07.000Z","_content":"\n# 创建代码仓库\n\n首先配置身份，利用：\n\n`git config --global user.name  \"  \"`\n\n`git config --global user.email  \"  \"`\n\n可以利用`git config --list`对配置信息进行查看\n\n然后进入到想要创建仓库的相应项目文件中利用 cd \n\n然后在该目录中输入`git init`\n\n项目创建完成后会在目录中生成一个隐藏的**.git**文件夹，这个文件夹用来记录本地所有的Git操作，可以通过**ls -al**命令来查看\n\n如果想删除该仓库，只需删除这个文件夹即可\n\n------\n\n\n\n# 提交本地代码\n\n可以使用**add**和**commit**提交\n\nadd是先将想要提交的代码添加进来，commit则是真正的去执行提交操作\n\n添加单个文件：git add+文件名\n\n添加目录：git add+目录名\n\n添加所有文件：`git add .`\n\n提交：`git commit -m \"First commit.\"`一定要有-m加上提交的描述信息。\n\n------\n\n# 忽略文件\n\n如果不想把app文件下的内容添加到版本控制中，那么可以修改**app/.gitignore**文件中的内容：\n\n/build\n\n/src/test\n\n/src/androidTest\n\n现在就可以提交代码：\n\n`git add .`\n\n`git commit -m \"First commit.\"`\n\n------\n\n# 查看修改内容\n\n1.在项目根目录下输入以下指令：\n\n*git status*\n\n2.修改数据后再次使用该指令可以发现文件已更改\n\n3.利用git diff app/src/main/java/com/example/providertest/MainActivity.java查看更改的内容\n\n------\n\n# 撤销未提交的修改\n\n1.利用git checkout app/src/main/java/com/example/providertest/MainActivity.java指令可以使一切修改撤销\n\n2.输入*git status*进行检查\n\n3.不过这种撤销方式只适合于那些没有执行过add添加的文件\n\n如果是已经添加过的文件需要先使用`git reset app/src/main/java/com/example/providertest/MainActivity.java`指令取消添加\n\n------\n\n# 查看提交记录\n\n1.用git log查看历史提交信息\n\n2.若只想查其中一条记录，可以在命令中指定该条记录的id并加上**-1**参数表示只想看到这一行\n\n3.如果想看这条记录具体修改了什么可以加个 **-p**，其中减号代表删除，加号代表添加的部分。\n\n------\n\n# 分支的用法\n\n- git branch查看分支\n\n- git branch+名字用于创建分支\n\n- git checkout +名字 切换分支\n\n- git checkout+分支1\n\n  git merge+分支2  可以把分支2上修改并提交的内容合并到分支1上\n\n- git branch -D +分支名用于删除分支\n\n------\n\n# 与远程版本库协作\n\n- git clone 地址表示将代码下载到本地\n- git push origin master  表示将本地修改的内容同步到远程版本库（origin指定的是远程版本库的Git地址）\n- git fetch origin master  表示将远程版本库内容同步到本地，会存放到origin/master 分支上\n- git diff origin/master 查看远程版本库上到底修改了什么\n- git merge origin/master将origin/master分支上的修改合并到主分支上\n- git pull origin master相当于将fetch和merge两个命令放一块执行，它可以从远程版本库上获取最新代码并合并到本地\n\n------\n\n","source":"_posts/Git.md","raw":"---\ntitle: Git\ndate: 2025-03-11 14:56:07\ncategories:\n  - Git\ntags:\n---\n\n# 创建代码仓库\n\n首先配置身份，利用：\n\n`git config --global user.name  \"  \"`\n\n`git config --global user.email  \"  \"`\n\n可以利用`git config --list`对配置信息进行查看\n\n然后进入到想要创建仓库的相应项目文件中利用 cd \n\n然后在该目录中输入`git init`\n\n项目创建完成后会在目录中生成一个隐藏的**.git**文件夹，这个文件夹用来记录本地所有的Git操作，可以通过**ls -al**命令来查看\n\n如果想删除该仓库，只需删除这个文件夹即可\n\n------\n\n\n\n# 提交本地代码\n\n可以使用**add**和**commit**提交\n\nadd是先将想要提交的代码添加进来，commit则是真正的去执行提交操作\n\n添加单个文件：git add+文件名\n\n添加目录：git add+目录名\n\n添加所有文件：`git add .`\n\n提交：`git commit -m \"First commit.\"`一定要有-m加上提交的描述信息。\n\n------\n\n# 忽略文件\n\n如果不想把app文件下的内容添加到版本控制中，那么可以修改**app/.gitignore**文件中的内容：\n\n/build\n\n/src/test\n\n/src/androidTest\n\n现在就可以提交代码：\n\n`git add .`\n\n`git commit -m \"First commit.\"`\n\n------\n\n# 查看修改内容\n\n1.在项目根目录下输入以下指令：\n\n*git status*\n\n2.修改数据后再次使用该指令可以发现文件已更改\n\n3.利用git diff app/src/main/java/com/example/providertest/MainActivity.java查看更改的内容\n\n------\n\n# 撤销未提交的修改\n\n1.利用git checkout app/src/main/java/com/example/providertest/MainActivity.java指令可以使一切修改撤销\n\n2.输入*git status*进行检查\n\n3.不过这种撤销方式只适合于那些没有执行过add添加的文件\n\n如果是已经添加过的文件需要先使用`git reset app/src/main/java/com/example/providertest/MainActivity.java`指令取消添加\n\n------\n\n# 查看提交记录\n\n1.用git log查看历史提交信息\n\n2.若只想查其中一条记录，可以在命令中指定该条记录的id并加上**-1**参数表示只想看到这一行\n\n3.如果想看这条记录具体修改了什么可以加个 **-p**，其中减号代表删除，加号代表添加的部分。\n\n------\n\n# 分支的用法\n\n- git branch查看分支\n\n- git branch+名字用于创建分支\n\n- git checkout +名字 切换分支\n\n- git checkout+分支1\n\n  git merge+分支2  可以把分支2上修改并提交的内容合并到分支1上\n\n- git branch -D +分支名用于删除分支\n\n------\n\n# 与远程版本库协作\n\n- git clone 地址表示将代码下载到本地\n- git push origin master  表示将本地修改的内容同步到远程版本库（origin指定的是远程版本库的Git地址）\n- git fetch origin master  表示将远程版本库内容同步到本地，会存放到origin/master 分支上\n- git diff origin/master 查看远程版本库上到底修改了什么\n- git merge origin/master将origin/master分支上的修改合并到主分支上\n- git pull origin master相当于将fetch和merge两个命令放一块执行，它可以从远程版本库上获取最新代码并合并到本地\n\n------\n\n","slug":"Git","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gbp0005s4s7378bb4fc","content":"<h1 id=\"创建代码仓库\"><a href=\"#创建代码仓库\" class=\"headerlink\" title=\"创建代码仓库\"></a>创建代码仓库</h1><p>首先配置身份，利用：</p>\n<p><code>git config --global user.name  &quot;  &quot;</code></p>\n<p><code>git config --global user.email  &quot;  &quot;</code></p>\n<p>可以利用<code>git config --list</code>对配置信息进行查看</p>\n<p>然后进入到想要创建仓库的相应项目文件中利用 cd </p>\n<p>然后在该目录中输入<code>git init</code></p>\n<p>项目创建完成后会在目录中生成一个隐藏的**.git<strong>文件夹，这个文件夹用来记录本地所有的Git操作，可以通过</strong>ls -al**命令来查看</p>\n<p>如果想删除该仓库，只需删除这个文件夹即可</p>\n<hr>\n<h1 id=\"提交本地代码\"><a href=\"#提交本地代码\" class=\"headerlink\" title=\"提交本地代码\"></a>提交本地代码</h1><p>可以使用<strong>add</strong>和<strong>commit</strong>提交</p>\n<p>add是先将想要提交的代码添加进来，commit则是真正的去执行提交操作</p>\n<p>添加单个文件：git add+文件名</p>\n<p>添加目录：git add+目录名</p>\n<p>添加所有文件：<code>git add .</code></p>\n<p>提交：<code>git commit -m &quot;First commit.&quot;</code>一定要有-m加上提交的描述信息。</p>\n<hr>\n<h1 id=\"忽略文件\"><a href=\"#忽略文件\" class=\"headerlink\" title=\"忽略文件\"></a>忽略文件</h1><p>如果不想把app文件下的内容添加到版本控制中，那么可以修改<strong>app&#x2F;.gitignore</strong>文件中的内容：</p>\n<p>&#x2F;build</p>\n<p>&#x2F;src&#x2F;test</p>\n<p>&#x2F;src&#x2F;androidTest</p>\n<p>现在就可以提交代码：</p>\n<p><code>git add .</code></p>\n<p><code>git commit -m &quot;First commit.&quot;</code></p>\n<hr>\n<h1 id=\"查看修改内容\"><a href=\"#查看修改内容\" class=\"headerlink\" title=\"查看修改内容\"></a>查看修改内容</h1><p>1.在项目根目录下输入以下指令：</p>\n<p><em>git status</em></p>\n<p>2.修改数据后再次使用该指令可以发现文件已更改</p>\n<p>3.利用git diff app&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;example&#x2F;providertest&#x2F;MainActivity.java查看更改的内容</p>\n<hr>\n<h1 id=\"撤销未提交的修改\"><a href=\"#撤销未提交的修改\" class=\"headerlink\" title=\"撤销未提交的修改\"></a>撤销未提交的修改</h1><p>1.利用git checkout app&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;example&#x2F;providertest&#x2F;MainActivity.java指令可以使一切修改撤销</p>\n<p>2.输入<em>git status</em>进行检查</p>\n<p>3.不过这种撤销方式只适合于那些没有执行过add添加的文件</p>\n<p>如果是已经添加过的文件需要先使用<code>git reset app/src/main/java/com/example/providertest/MainActivity.java</code>指令取消添加</p>\n<hr>\n<h1 id=\"查看提交记录\"><a href=\"#查看提交记录\" class=\"headerlink\" title=\"查看提交记录\"></a>查看提交记录</h1><p>1.用git log查看历史提交信息</p>\n<p>2.若只想查其中一条记录，可以在命令中指定该条记录的id并加上**-1**参数表示只想看到这一行</p>\n<p>3.如果想看这条记录具体修改了什么可以加个 <strong>-p</strong>，其中减号代表删除，加号代表添加的部分。</p>\n<hr>\n<h1 id=\"分支的用法\"><a href=\"#分支的用法\" class=\"headerlink\" title=\"分支的用法\"></a>分支的用法</h1><ul>\n<li><p>git branch查看分支</p>\n</li>\n<li><p>git branch+名字用于创建分支</p>\n</li>\n<li><p>git checkout +名字 切换分支</p>\n</li>\n<li><p>git checkout+分支1</p>\n<p>git merge+分支2  可以把分支2上修改并提交的内容合并到分支1上</p>\n</li>\n<li><p>git branch -D +分支名用于删除分支</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"与远程版本库协作\"><a href=\"#与远程版本库协作\" class=\"headerlink\" title=\"与远程版本库协作\"></a>与远程版本库协作</h1><ul>\n<li>git clone 地址表示将代码下载到本地</li>\n<li>git push origin master  表示将本地修改的内容同步到远程版本库（origin指定的是远程版本库的Git地址）</li>\n<li>git fetch origin master  表示将远程版本库内容同步到本地，会存放到origin&#x2F;master 分支上</li>\n<li>git diff origin&#x2F;master 查看远程版本库上到底修改了什么</li>\n<li>git merge origin&#x2F;master将origin&#x2F;master分支上的修改合并到主分支上</li>\n<li>git pull origin master相当于将fetch和merge两个命令放一块执行，它可以从远程版本库上获取最新代码并合并到本地</li>\n</ul>\n<hr>\n","excerpt":"创建代码仓库\n首先配置身份，利用：\n\ngit config --global user.name \" \"\n\ngit config --global user.email \" \"\n\n可以利用git config --list对配置信息进行查看\n\n然后进入到想要创建仓库的相应项目文件中利用 cd \n\n然后在该目录中输入git init\n\n项目创建完成后会在目录中生成一个隐藏的**.git文件夹，这个文件夹用来记录本地所有的Git操作，可以通过ls -al**命令来查看\n\n如果想删除该仓库，只需删除这个文件夹即可\n\n\n\n\n提交本地代码\n可以使用add和commit提交\n\nadd是先将想要提交的代码添","more":"<h1 id=\"创建代码仓库\"><a href=\"#创建代码仓库\" class=\"headerlink\" title=\"创建代码仓库\"></a>创建代码仓库</h1><p>首先配置身份，利用：</p>\n<p><code>git config --global user.name  &quot;  &quot;</code></p>\n<p><code>git config --global user.email  &quot;  &quot;</code></p>\n<p>可以利用<code>git config --list</code>对配置信息进行查看</p>\n<p>然后进入到想要创建仓库的相应项目文件中利用 cd </p>\n<p>然后在该目录中输入<code>git init</code></p>\n<p>项目创建完成后会在目录中生成一个隐藏的**.git<strong>文件夹，这个文件夹用来记录本地所有的Git操作，可以通过</strong>ls -al**命令来查看</p>\n<p>如果想删除该仓库，只需删除这个文件夹即可</p>\n<hr>\n<h1 id=\"提交本地代码\"><a href=\"#提交本地代码\" class=\"headerlink\" title=\"提交本地代码\"></a>提交本地代码</h1><p>可以使用<strong>add</strong>和<strong>commit</strong>提交</p>\n<p>add是先将想要提交的代码添加进来，commit则是真正的去执行提交操作</p>\n<p>添加单个文件：git add+文件名</p>\n<p>添加目录：git add+目录名</p>\n<p>添加所有文件：<code>git add .</code></p>\n<p>提交：<code>git commit -m &quot;First commit.&quot;</code>一定要有-m加上提交的描述信息。</p>\n<hr>\n<h1 id=\"忽略文件\"><a href=\"#忽略文件\" class=\"headerlink\" title=\"忽略文件\"></a>忽略文件</h1><p>如果不想把app文件下的内容添加到版本控制中，那么可以修改<strong>app&#x2F;.gitignore</strong>文件中的内容：</p>\n<p>&#x2F;build</p>\n<p>&#x2F;src&#x2F;test</p>\n<p>&#x2F;src&#x2F;androidTest</p>\n<p>现在就可以提交代码：</p>\n<p><code>git add .</code></p>\n<p><code>git commit -m &quot;First commit.&quot;</code></p>\n<hr>\n<h1 id=\"查看修改内容\"><a href=\"#查看修改内容\" class=\"headerlink\" title=\"查看修改内容\"></a>查看修改内容</h1><p>1.在项目根目录下输入以下指令：</p>\n<p><em>git status</em></p>\n<p>2.修改数据后再次使用该指令可以发现文件已更改</p>\n<p>3.利用git diff app&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;example&#x2F;providertest&#x2F;MainActivity.java查看更改的内容</p>\n<hr>\n<h1 id=\"撤销未提交的修改\"><a href=\"#撤销未提交的修改\" class=\"headerlink\" title=\"撤销未提交的修改\"></a>撤销未提交的修改</h1><p>1.利用git checkout app&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;example&#x2F;providertest&#x2F;MainActivity.java指令可以使一切修改撤销</p>\n<p>2.输入<em>git status</em>进行检查</p>\n<p>3.不过这种撤销方式只适合于那些没有执行过add添加的文件</p>\n<p>如果是已经添加过的文件需要先使用<code>git reset app/src/main/java/com/example/providertest/MainActivity.java</code>指令取消添加</p>\n<hr>\n<h1 id=\"查看提交记录\"><a href=\"#查看提交记录\" class=\"headerlink\" title=\"查看提交记录\"></a>查看提交记录</h1><p>1.用git log查看历史提交信息</p>\n<p>2.若只想查其中一条记录，可以在命令中指定该条记录的id并加上**-1**参数表示只想看到这一行</p>\n<p>3.如果想看这条记录具体修改了什么可以加个 <strong>-p</strong>，其中减号代表删除，加号代表添加的部分。</p>\n<hr>\n<h1 id=\"分支的用法\"><a href=\"#分支的用法\" class=\"headerlink\" title=\"分支的用法\"></a>分支的用法</h1><ul>\n<li><p>git branch查看分支</p>\n</li>\n<li><p>git branch+名字用于创建分支</p>\n</li>\n<li><p>git checkout +名字 切换分支</p>\n</li>\n<li><p>git checkout+分支1</p>\n<p>git merge+分支2  可以把分支2上修改并提交的内容合并到分支1上</p>\n</li>\n<li><p>git branch -D +分支名用于删除分支</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"与远程版本库协作\"><a href=\"#与远程版本库协作\" class=\"headerlink\" title=\"与远程版本库协作\"></a>与远程版本库协作</h1><ul>\n<li>git clone 地址表示将代码下载到本地</li>\n<li>git push origin master  表示将本地修改的内容同步到远程版本库（origin指定的是远程版本库的Git地址）</li>\n<li>git fetch origin master  表示将远程版本库内容同步到本地，会存放到origin&#x2F;master 分支上</li>\n<li>git diff origin&#x2F;master 查看远程版本库上到底修改了什么</li>\n<li>git merge origin&#x2F;master将origin&#x2F;master分支上的修改合并到主分支上</li>\n<li>git pull origin master相当于将fetch和merge两个命令放一块执行，它可以从远程版本库上获取最新代码并合并到本地</li>\n</ul>\n<hr>\n"},{"title":"Java基础概念","date":"2025-08-23T13:38:00.000Z","_content":"\n# 注释\n\n### 注释的定义\n\n- 注释是在程序指定位置添加的说明性信息\n- 对代码的解释，不参与编译\n\n### 分类\n\n- 单行注释  格式`//注释信息`\n- 多行注释  格式`/* 注释信息 */`\n- 文档注释 格式`/**注释信息*/`\n\n------\n\n# 关键字\n\n### 特点及定义\n\n- 被java赋予特定含义的英文单词\n- 关键字字母全部小写\n\n### class\n\n- 用于创建或定义一个类\n- 类是java最基本的组成单元\n\n------\n\n# 字面量\n\n### 分类\n\n![](../img/img107.png)\n\n### '\\t'制表符\n\n在打印的时候，把前面字符串的长度补齐到8，或者8的整数倍。最少补1个空格，最多补8个。\n\n------\n\n# 数据类型\n\n### 分类\n\n基本数据类型和引用数据类型\n\n### 基本数据类型\n\n![](../img/img108.png)\n\n- **long**和**float**数据类型后面需要分别加上**L**和**F**标识\n\n### 取值范围大小关系\n\ndouble>float>long>int>short>byte\n\n------\n\n# 标识符\n\n### 命名规则-----硬性规则\n\n- 由数字，字母，下划线，美元符组成\n- 不能以数字开头\n- 不能是关键字\n- 区分大小写\n\n### 命名规则-----软性建议\n\n1. **小驼峰命名法(适用于方法，变量)**\n   - 标识符是一个单词时，全部小写\n   - 标识符是多个单词时，第一个单词首字母小写其他单词首字母大写\n2. **大驼峰命名法(适用于类名)**\n   - 标识符是一个单词时，首字母大写\n   - 标识符是多个单词时，每个单词的首字母大写\n\n------\n\n","source":"_posts/Java基础概念.md","raw":"---\ntitle: Java基础概念\ndate: 2025-08-23 21:38:00\ncategories:\n- Java\ntags:\n---\n\n# 注释\n\n### 注释的定义\n\n- 注释是在程序指定位置添加的说明性信息\n- 对代码的解释，不参与编译\n\n### 分类\n\n- 单行注释  格式`//注释信息`\n- 多行注释  格式`/* 注释信息 */`\n- 文档注释 格式`/**注释信息*/`\n\n------\n\n# 关键字\n\n### 特点及定义\n\n- 被java赋予特定含义的英文单词\n- 关键字字母全部小写\n\n### class\n\n- 用于创建或定义一个类\n- 类是java最基本的组成单元\n\n------\n\n# 字面量\n\n### 分类\n\n![](../img/img107.png)\n\n### '\\t'制表符\n\n在打印的时候，把前面字符串的长度补齐到8，或者8的整数倍。最少补1个空格，最多补8个。\n\n------\n\n# 数据类型\n\n### 分类\n\n基本数据类型和引用数据类型\n\n### 基本数据类型\n\n![](../img/img108.png)\n\n- **long**和**float**数据类型后面需要分别加上**L**和**F**标识\n\n### 取值范围大小关系\n\ndouble>float>long>int>short>byte\n\n------\n\n# 标识符\n\n### 命名规则-----硬性规则\n\n- 由数字，字母，下划线，美元符组成\n- 不能以数字开头\n- 不能是关键字\n- 区分大小写\n\n### 命名规则-----软性建议\n\n1. **小驼峰命名法(适用于方法，变量)**\n   - 标识符是一个单词时，全部小写\n   - 标识符是多个单词时，第一个单词首字母小写其他单词首字母大写\n2. **大驼峰命名法(适用于类名)**\n   - 标识符是一个单词时，首字母大写\n   - 标识符是多个单词时，每个单词的首字母大写\n\n------\n\n","slug":"Java基础概念","published":1,"updated":"2025-08-25T10:16:10.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gbr0006s4s7bwgb1ynd","content":"<h1 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h1><h3 id=\"注释的定义\"><a href=\"#注释的定义\" class=\"headerlink\" title=\"注释的定义\"></a>注释的定义</h3><ul>\n<li>注释是在程序指定位置添加的说明性信息</li>\n<li>对代码的解释，不参与编译</li>\n</ul>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>单行注释  格式<code>//注释信息</code></li>\n<li>多行注释  格式<code>/* 注释信息 */</code></li>\n<li>文档注释 格式<code>/**注释信息*/</code></li>\n</ul>\n<hr>\n<h1 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h1><h3 id=\"特点及定义\"><a href=\"#特点及定义\" class=\"headerlink\" title=\"特点及定义\"></a>特点及定义</h3><ul>\n<li>被java赋予特定含义的英文单词</li>\n<li>关键字字母全部小写</li>\n</ul>\n<h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h3><ul>\n<li>用于创建或定义一个类</li>\n<li>类是java最基本的组成单元</li>\n</ul>\n<hr>\n<h1 id=\"字面量\"><a href=\"#字面量\" class=\"headerlink\" title=\"字面量\"></a>字面量</h1><h3 id=\"分类-1\"><a href=\"#分类-1\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p><img src=\"/../img/img107.png\"></p>\n<h3 id=\"‘-t’制表符\"><a href=\"#‘-t’制表符\" class=\"headerlink\" title=\"‘\\t’制表符\"></a>‘\\t’制表符</h3><p>在打印的时候，把前面字符串的长度补齐到8，或者8的整数倍。最少补1个空格，最多补8个。</p>\n<hr>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h3 id=\"分类-2\"><a href=\"#分类-2\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p>基本数据类型和引用数据类型</p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><p><img src=\"/../img/img108.png\"></p>\n<ul>\n<li><strong>long</strong>和<strong>float</strong>数据类型后面需要分别加上<strong>L</strong>和<strong>F</strong>标识</li>\n</ul>\n<h3 id=\"取值范围大小关系\"><a href=\"#取值范围大小关系\" class=\"headerlink\" title=\"取值范围大小关系\"></a>取值范围大小关系</h3><p>double&gt;float&gt;long&gt;int&gt;short&gt;byte</p>\n<hr>\n<h1 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h1><h3 id=\"命名规则—–硬性规则\"><a href=\"#命名规则—–硬性规则\" class=\"headerlink\" title=\"命名规则—–硬性规则\"></a>命名规则—–硬性规则</h3><ul>\n<li>由数字，字母，下划线，美元符组成</li>\n<li>不能以数字开头</li>\n<li>不能是关键字</li>\n<li>区分大小写</li>\n</ul>\n<h3 id=\"命名规则—–软性建议\"><a href=\"#命名规则—–软性建议\" class=\"headerlink\" title=\"命名规则—–软性建议\"></a>命名规则—–软性建议</h3><ol>\n<li><strong>小驼峰命名法(适用于方法，变量)</strong><ul>\n<li>标识符是一个单词时，全部小写</li>\n<li>标识符是多个单词时，第一个单词首字母小写其他单词首字母大写</li>\n</ul>\n</li>\n<li><strong>大驼峰命名法(适用于类名)</strong><ul>\n<li>标识符是一个单词时，首字母大写</li>\n<li>标识符是多个单词时，每个单词的首字母大写</li>\n</ul>\n</li>\n</ol>\n<hr>\n","excerpt":"注释\n注释的定义\n * 注释是在程序指定位置添加的说明性信息\n * 对代码的解释，不参与编译\n\n分类\n * 单行注释 格式//注释信息\n * 多行注释 格式/* 注释信息 */\n * 文档注释 格式/**注释信息*/\n\n\n\n\n关键字\n特点及定义\n * 被java赋予特定含义的英文单词\n * 关键字字母全部小写\n\nclass\n * 用于创建或定义一个类\n * 类是java最基本的组成单元\n\n\n\n\n字面量\n分类\n\n\n‘\\t’制表符\n在打印的时候，把前面字符串的长度补齐到8，或者8的整数倍。最少补1个空格，最多补8个。\n\n\n\n\n数据类型\n分类\n基本数据类型和引用数据类型\n\n基本数据类型\n\n\n * l","more":"<h1 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h1><h3 id=\"注释的定义\"><a href=\"#注释的定义\" class=\"headerlink\" title=\"注释的定义\"></a>注释的定义</h3><ul>\n<li>注释是在程序指定位置添加的说明性信息</li>\n<li>对代码的解释，不参与编译</li>\n</ul>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>单行注释  格式<code>//注释信息</code></li>\n<li>多行注释  格式<code>/* 注释信息 */</code></li>\n<li>文档注释 格式<code>/**注释信息*/</code></li>\n</ul>\n<hr>\n<h1 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h1><h3 id=\"特点及定义\"><a href=\"#特点及定义\" class=\"headerlink\" title=\"特点及定义\"></a>特点及定义</h3><ul>\n<li>被java赋予特定含义的英文单词</li>\n<li>关键字字母全部小写</li>\n</ul>\n<h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h3><ul>\n<li>用于创建或定义一个类</li>\n<li>类是java最基本的组成单元</li>\n</ul>\n<hr>\n<h1 id=\"字面量\"><a href=\"#字面量\" class=\"headerlink\" title=\"字面量\"></a>字面量</h1><h3 id=\"分类-1\"><a href=\"#分类-1\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p><img src=\"/../img/img107.png\"></p>\n<h3 id=\"‘-t’制表符\"><a href=\"#‘-t’制表符\" class=\"headerlink\" title=\"‘\\t’制表符\"></a>‘\\t’制表符</h3><p>在打印的时候，把前面字符串的长度补齐到8，或者8的整数倍。最少补1个空格，最多补8个。</p>\n<hr>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h3 id=\"分类-2\"><a href=\"#分类-2\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p>基本数据类型和引用数据类型</p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><p><img src=\"/../img/img108.png\"></p>\n<ul>\n<li><strong>long</strong>和<strong>float</strong>数据类型后面需要分别加上<strong>L</strong>和<strong>F</strong>标识</li>\n</ul>\n<h3 id=\"取值范围大小关系\"><a href=\"#取值范围大小关系\" class=\"headerlink\" title=\"取值范围大小关系\"></a>取值范围大小关系</h3><p>double&gt;float&gt;long&gt;int&gt;short&gt;byte</p>\n<hr>\n<h1 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h1><h3 id=\"命名规则—–硬性规则\"><a href=\"#命名规则—–硬性规则\" class=\"headerlink\" title=\"命名规则—–硬性规则\"></a>命名规则—–硬性规则</h3><ul>\n<li>由数字，字母，下划线，美元符组成</li>\n<li>不能以数字开头</li>\n<li>不能是关键字</li>\n<li>区分大小写</li>\n</ul>\n<h3 id=\"命名规则—–软性建议\"><a href=\"#命名规则—–软性建议\" class=\"headerlink\" title=\"命名规则—–软性建议\"></a>命名规则—–软性建议</h3><ol>\n<li><strong>小驼峰命名法(适用于方法，变量)</strong><ul>\n<li>标识符是一个单词时，全部小写</li>\n<li>标识符是多个单词时，第一个单词首字母小写其他单词首字母大写</li>\n</ul>\n</li>\n<li><strong>大驼峰命名法(适用于类名)</strong><ul>\n<li>标识符是一个单词时，首字母大写</li>\n<li>标识符是多个单词时，每个单词的首字母大写</li>\n</ul>\n</li>\n</ol>\n<hr>\n"},{"title":"Jetpack(Kotlin)","date":"2025-06-25T10:30:24.000Z","_content":"\n# Jetpack\n\n### Jetpack全家福\n\n![](../img/img60.jpg)\n\n------\n\n# ViewModel\n\n### 作用\n\n帮助Activity分担一部分工作，专门用于存放与界面相关的数据的，他可以保证在手机屏幕发生旋转时不会被重新创建，数据不会丢失\n\n### 生命周期\n\n![](../img/img61.jpg)\n\n### 用法\n\n- 添加依赖\n\n- 创建一个ViewModel类继承自ViewModel()\n\n- 把界面相关的数据都放入其中\n\n- 在Activity或fragment中创建其实例\n\n- 构建相关逻辑\n\n  ```kotlin\n  implementation (\"androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2\") // Kotlin 版本\n  implementation (\"androidx.lifecycle:lifecycle-viewmodel:2.6.2\")     // Java 版本\n  ```\n\n  ```kotlin\n  class MainViewModel(countReserved: Int) : ViewModel() {\n  \tvar counter=0\n  }\n  ```\n\n  ```kotlin\n  class MainActivity : AppCompatActivity() {\n      private lateinit var binding: ActivityMainBinding\n      lateinit var viewModel: MainViewModel\n      override fun onCreate(savedInstanceState: Bundle?) {\n          super.onCreate(savedInstanceState)\n          binding=ActivityMainBinding.inflate(layoutInflater)\n          setContentView(binding.root)\n          //获取实例\n          viewModel=ViewModelProvider(this).get(MainViewModel::class.java)\n          binding.plus.setOnClickListener {\n              viewModel.counter++\n              refreshCounter()\n          }\n          refreshCounter()\n  }\n      private fun refreshCounter(){\n          binding.infoText.text=viewModel.counter.toString()\n      }o\n  }\n  ```\n\n### 像ViewModel传递参数\n\n- 添加参数\n\n- 新建ViewModelFactory类，实现ViewModelProvider.Factory接口\n\n- 利用SharedPreferences保存数据\n\n- 读取数据，将数据传入到ViewModelFactory的构造函数中\n\n  ```kotlin\n  class MainViewModel(countReserved: Int) : ViewModel() {\n     var counter=countReserved\n  }\n  ```\n\n  ```kotlin\n  class MainViewModelFactory(private val countReserved:Int):ViewModelProvider.Factory {\n      override fun <T : ViewModel> create(modelClass: Class<T>): T {\n          return MainViewModel(countReserved) as T\n      }\n  }\n  ```\n\n  ```kotlin\n  class MainActivity : AppCompatActivity() {\n      private lateinit var binding: ActivityMainBinding\n      lateinit var viewModel: MainViewModel\n      lateinit var sp:SharedPreferences\n      override fun onCreate(savedInstanceState: Bundle?) {\n          super.onCreate(savedInstanceState)\n          binding=ActivityMainBinding.inflate(layoutInflater)\n          setContentView(binding.root)\n          sp=getPreferences(Context.MODE_PRIVATE)\n          val contReserved=sp.getInt(\"count_reserved\",0)\n          viewModel=ViewModelProvider(this,MainViewModelFactory(contReserved)).get(MainViewModel::class.java)\n          binding.plus.setOnClickListener {\n              viewModel.counter++\n              refreshCounter()\n          }\n          binding.clear.setOnClickListener {\n              viewModel.counter=0\n              refreshCounter()\n          }\n          refreshCounter() \n      }\n      private fun refreshCounter(){\n          binding.infoText.text=viewModel.counter.toString()\n      }\n  \n      override fun onPause() {\n          super.onPause()\n          sp.edit {\n              putInt(\"count_reserved\",viewModel.counter.value?:0)\n          }\n      }\n  }\n  ```\n\n------\n\n# Lifecycles\n\n### 作用\n\n他可以让任何一个类轻松地感知到Activity生命周期\n\n### 用法\n\n- 新建一个类\n\n- 借助注解能力编写逻辑代码\n\n- 获取LifecycleOwer实例，Activity或者Fragment本身就是一个LifecycleOwer实例\n\n- 在活动中进行调用(也可以在任何地方调用lifecycle.currentState来主动获取当前生命周期状态)\n\n  ```kotlin\n  class MyObserver(val lifecycle: Lifecycle):LifecycleObserver {\n      @OnLifecycleEvent(Lifecycle.Event.ON_START)\n      fun activityStart(){\n          Log.d(\"MyObserver\", \"activityStart: \")\n      }\n      @OnLifecycleEvent(Lifecycle.Event.ON_STOP)\n      fun activityStop(){\n          Log.d(\"MyObserve\", \"activityStop: \")\n      }\n  }\n  ```\n\n  ```kotlin\n  lifecycle.addObserver(MyObserver())\n  ```\n\n------\n\n# LiveData\n\n### 基本用法\n\n- **添加依赖**\n\n  ```kotlin\n   implementation \"androidx.lifecycle:lifecycle-livedata-ktx:2.5.1\"\n  ```\n\n- **创建LiveData**\n\n  ```kotlin\n  class MyViewModel (countReserved:Int): ViewModel() {\n      // 创建 LiveData\n      private val _counter = MutableLiveData<Int>()\n      val counter: LiveData<Int> get() = _counter\n  \n      init {\n          _counter.value = countReserved\n      }\n  \n      // 更新 LiveData 数据\n      fun incrementCounter() {\n          _counter.value = (_counter.value ?: 0) + 1\n      }\n  }\n  ```\n\n  - **MutableLiveData**: 可变的 LiveData 类型，允许数据更新。\n  - **LiveData**: 不可变的 LiveData 类型，只能观察数据，不能直接修改数据。\n\n- #### **在 Activity 或 Fragment 中观察 LiveData**\n\n  在 Activity 或 Fragment 中，你可以通过 `observe()` 方法观察 LiveData。当数据发生变化时，LiveData 才会发送更新。\n\n  ```kotlin\n  class MainActivity : AppCompatActivity() {\n  \n      // 获取 ViewModel 实例\n      private val myViewModel: MyViewModel by viewModels()\n  \n      override fun onCreate(savedInstanceState: Bundle?) {\n          super.onCreate(savedInstanceState)\n          setContentView(R.layout.activity_main)\n  \n          // 观察 LiveData 数据\n          myViewModel.counter.observe(this){ count ->\n              // 更新 UI\n              counterText.text = count.toString()\n          }\n  \n          // 设置按钮点击事件\n          incrementButton.setOnClickListener {\n              myViewModel.incrementCounter()\n          }\n      }\n  }\n  ```\n\n  \n\n### map和switchMap\n\n- **map**\n\n  - 作用：将实际包含数据的LiveData和仅用于观察数据的LiveData进行转换\n\n  - 用法：\n\n    ```kotlin\n    class MyViewModel : ViewModel() {\n        private val _userName = MutableLiveData<String>()\n        val userName: LiveData<String> get() = _userName\n    \n        // 使用 map 将原始数据转换为需要的格式\n        val userGreeting: LiveData<String> = userName.map { name ->\n            \"Hello, $name\"\n        }\n    \n        fun updateUserName(name: String) {\n            _userName.value = name\n        }\n    }\n    ```\n\n- **switchMap**\n\n  - 使用场景：当ViewModel中某个liveData对象是调用另外的方法获取的时候用switchMap\n\n  - 用法：\n\n    ```kotlin\n    class MyViewModel : ViewModel() {\n        private val _searchQuery = MutableLiveData<String>()\n        val searchQuery: LiveData<String> get() = _searchQuery\n    \n        // 使用 switchMap 来根据 searchQuery 触发新的搜索请求\n        val searchResults: LiveData<List<String>> = searchQuery.switchMap { query ->\n            // 假设搜索是一个异步操作，这里模拟为一个简单的列表\n            MutableLiveData<List<String>>().apply {\n                value = listOf(\"Result for $query\")\n            }\n        }\n    \n        fun updateSearchQuery(query: String) {\n            _searchQuery.value = query\n        }\n    }\n    ```\n\n    - `searchQuery` 是一个包含搜索关键字的 LiveData。\n    - `switchMap` 将每次更新的 `searchQuery` 映射到一个新的 LiveData（这里模拟为搜索结果）。\n    - 当 `searchQuery` 更新时，`switchMap` 会取消之前的查询并触发新的查询。\n\n------\n\n# Room\n\n### 基本特征\n\n**Room** 是 Jetpack 提供的一个数据库库，简化了 SQLite 的操作。它提供了一个抽象层，允许开发者更方便、更安全地访问本地数据库。Room 提供了注解（annotation）支持，结合 Kotlin 的数据类和架构组件，能够更高效地管理数据持久化操作。\n\nRoom 提供了一个 **DAO（数据访问对象）** 层来进行数据库操作，DAO 使用 SQL 查询语句来与数据库交互。Room 会在编译时生成实际的实现代码，减少了手动编写 SQL 语句的繁琐。\n\n- **简单易用**：相比直接使用 SQLite，Room 提供了更简单、类型安全的 API。\n- **SQLite 完全支持**：它是基于 SQLite 的，可以执行 SQL 查询、插入、更新和删除操作。\n- **注解支持**：使用注解定义数据库实体、DAO 和数据库版本。\n- **与 LiveData 兼容**：Room 支持与 LiveData 结合使用，当数据改变时，Room 可以自动通知观察者。\n\n### 添加依赖和插件\n\n```kotlin\nkotlin(\"kapt\")\n```\n\n```kotlin\n    implementation(\"androidx.room:room-runtime:2.6.1\")  // Room 的运行时库\n    kapt(\"androidx.room:room-compiler:2.6.1\")  // Room 的编译器，使用 KAPT 注解处理\n    implementation(\"androidx.room:room-ktx:2.6.1\")  // Room 的扩展库，提供了一些扩展函数和属性.\n```\n\n### 定义实体类(Entity)\n\n```kotlin\n@Entity\ndata class User (var firstName:String,var lastName:String,var age:Int){\n    @PrimaryKey(autoGenerate = true)\n    var id:Long=0\n}\n```\n\n- **@Entity** 注解标识这个类是一个数据库表。\n- **@PrimaryKey** 注解指定主键，并可以设置 `autoGenerate = true` 让 Room 自动生成主键。\n\n### 定义Dao\n\n- Room关键部分，所有数据库操作均封装在这里\n\n```kotlin\n@Dao\ninterface UserDao {\n    @Insert\n    fun insertUser(user:User):Long\n    @Update\n    fun updateUser(newUser: User)\n    @Query(\"select * from User\")\n    fun loadAllUsers():List<User>\n    @Query(\"select * from User where age> :age\")\n    fun loadUsersOlderThan(age:Int):List<User>\n    @Delete\n    fun deleteUser(user: User)\n    @Query(\"delete from User where lastName=:lastName\")\n    fun deleteUserByLastName(lastName:String):Int\n}\n```\n\n- **@Dao** 注解标识这个接口是 DAO。\n- **@Insert** 注解用于插入数据。\n- **@Query** 注解定义 SQL 查询语句。\n- **@Update**注解用于更新数据\n- **@Delete**注解用于删除数据\n- 利用非实体类参数来增删改数据时都要用**@Query**注解\n\n### 定义数据库(Database)\n\n```kotlin\n@Database(version = 1, entities = [User::class])\nabstract class AppDatabase:RoomDatabase(){\n    abstract fun userDao():UserDao\n    companion object{\n        private var instance:AppDatabase?=null\n        @Synchronized\n        fun getDatabase(context: Context):AppDatabase{\n            instance?.let {\n                return  it\n            }\n            return Room.databaseBuilder(context.applicationContext,AppDatabase::class.java,\"app_database\"          \n                .build().apply {\n                    instance=this\n                }\n        }\n    }\n\n} \n```\n\n- **@Database** 注解用于定义数据库，并指定包含的实体类和数据库版本，实体类之间用逗号隔开。\n- `abstract fun userDao()` 方法提供对 DAO 的访问。\n- 通过 `Room.databaseBuilder()` 方法获取数据库实例\n- 由于数据库操作均为耗时操作故需要在子线程中进行\n\n### 数据库升级\n\n1. 更新版本和包含的实体类\n2. 实现 Migration的匿名类\n3. 构建实例时加入addMigrations方法\n\n```kotlin\n@Database(version = 3, entities = [User::class, Book::class])\nabstract class AppDatabase : RoomDatabase() {\n\n    /**\n     * UserDao 是用于操作 User 实体的 DAO（Data Access Object）。\n     */\n    abstract fun userDao(): UserDao\n\n    /**\n     * BookDao 是用于操作 Book 实体的 DAO（Data Access Object）。\n     */\n    abstract fun bookDao(): BookDao\n\n    /**\n     * Companion 对象用于存储数据库的迁移信息和实例。\n     */\n    companion object {\n\n        /**\n         * MIGRATION_1_2 是从数据库版本 1 到 2 的迁移。\n         */\n        val MIGRATION_1_2 = object : Migration(1, 2) {\n            /**\n             * migrate 方法用于执行从版本 1 到 2 的迁移。\n             * 在这个例子中，我们创建了一个名为 Book 的新表。\n             */\n            override fun migrate(database: SupportSQLiteDatabase) {\n                database.execSQL(\"\"\"\n                    CREATE TABLE Book (\n                        id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\n                        name TEXT NOT NULL,\n                        pages INTEGER NOT NULL,\n                        author TEXT NOT NULL\n                    )\n                \"\"\".trimIndent())\n            }\n        }\n\n        /**\n         * MIGRATION_2_3 是从数据库版本 2 到 3 的迁移。\n         */\n        val MIGRATION_2_3 = object : Migration(2, 3) {\n            /**\n             * migrate 方法用于执行从版本 2 到 3 的迁移。\n             * 在这个例子中，我们添加了一个名为 author 的新列到 User 表中。\n             */\n            override fun migrate(database: SupportSQLiteDatabase) {\n                database.execSQL(\"\"\"\n                    ALTER TABLE User ADD COLUMN \n                    author TEXT NOT NULL DEFAULT 'unknown'\n                    \"\"\")\n            }\n        }\n\n        /**\n         * instance 是 AppDatabase 的实例。\n         */\n        private var instance: AppDatabase? = null\n\n        /**\n         * getDatabase 方法用于获取 AppDatabase 的实例。\n         * 如果实例已经存在，则直接返回实例。\n         * 否则，则创建一个新的实例并返回。\n         */\n        @Synchronized\n        fun getDatabase(context: Context): AppDatabase {\n            instance?.let { return it }\n            return Room.databaseBuilder(\n                context.applicationContext,\n                AppDatabase::class.java,\n                \"app_database\"\n            )\n                .addMigrations(MIGRATION_1_2, MIGRATION_2_3)\n                .build().apply { instance = this }\n        }\n    }\n}\n\n```\n\n------\n\n# WorkManager\n\n### 作用\n\n处理一些要求定时执行的任务，可以根据操作系统的版本自动选择是使用AlarmManager还是JobScheduler实现。另外还能支持周期性任务，链式任务处理等功能。它很适合执行一些定期和服务器交互的任务，比如周期性的同步数据\n\n### 基本用法\n\n1.  添加依赖\n\n   ```kotlin\n   implementation (\"androidx.work:work-runtime:2.8.1\") // Java\n       implementation (\"androidx.work:work-runtime-ktx:2.8.1\") // Kotlin + Coroutines\n   ```\n\n   \n\n2. 定义后台任务并实现具体的任务逻辑\n\n   ```kotlin\n   class SimpleWorker(context: Context,params:WorkerParameters):Worker(context,params) {\n       override fun doWork(): Result {\n           //编写具体的后台任务逻辑\n           Log.d(\"SimpleWorker\", \"do work in simpleworker\")\n           return  Result.success()\n       }\n   \n   }\n   ```\n\n   -  返回Result.success()表示成功\n   - 返回Result.failure()表示失败\n   - 返回Result.retry()也表示失败，只是可以结合WorkRequest.Builder的setBackoffCriteria()方法来重新执行任务\n\n3. 配置该后台任务的运行条件和约束信息，并构建后台任务请求\n\n   ```kotlin\n   val workRequest = OneTimeWorkRequest.Builder(SimpleWorker::class.java)\n       .build()\n   \n   ```\n\n   ```kotlin\n   val periodicWorkRequest = PeriodicWorkRequest.Builder(MyWorker::class.java, 1, TimeUnit.HOURS)\n       .build()\n   ```\n\n   - **OneTimeWorkRequest** 来执行一次性任务\n   - **PeriodicWorkRequest** 来执行定期任务。\n\n4. 将该后台任务请求传入WorkManager的enqueue()的方法中，系统会在合适的时间运行\n\n   ```kotlin\n   WorkManager.getInstance(applicationContext).enqueue(workRequest)\n   ```\n\n### 处理复杂任务\n\n- **设置约束信息**\n\n  ```kotlin\n  val workRequest = OneTimeWorkRequest.Builder(MyWorker::class.java)\n  \t.setInitialDelay(5,TimeUnit.MINUTES)\n      .addTag(\"simple\")\n      .build()\n  ```\n\n- **取消后台任务请求**\n\n  ```kotlin\n  WorkManager.getInstance(applicationContext).cancelWorkByTag(\"simple\")\n  ```\n\n  ```kotlin\n  WorkManager.getInstance(applicationContext).cancelWorkById(workRequest.id)\n  ```\n\n  ```kotlin\n  WorkManager.getInstance(applicationContext).cancelAllwork()//一次性取消所有后台任务\n  ```\n\n  使用id只能取消单个任务，使用标签可以取消同一标签名的所有任务\n\n- **任务重试**\n\n  当doWork方法中返回Result.retry()时可以结合setBackoffCriteria方法重新执行任务\n\n  ```kotlin\n  //第一个参数指的是如果任务再次执行失败，下次重试的时间应以什么形式延迟\n  val workRequest = OneTimeWorkRequest.Builder(MyWorker::class.java)\n      .setBackoffCriteria(BackoffPolicy.EXPONENTIAL, 10, TimeUnit.SECONDS)\n      .build()\n  \n  WorkManager.getInstance(applicationContext).enqueue(workRequest)\n  ```\n\n- ###### **观察任务状态**\n\n  ```kotlin\n  WorkManager.getInstance(applicationContext)\n      .getWorkInfoByIdLiveData(workRequest.id)\n      .observe(this, Observer { workInfo ->\n          if (workInfo != null) {\n              when (workInfo.state) {\n                  WorkInfo.State.SUCCEEDED -> {\n                      // 任务成功\n                  }\n                  WorkInfo.State.FAILED -> {\n                      // 任务失败\n                  }\n                  WorkInfo.State.RUNNING -> {\n                      // 任务正在运行\n                  }\n                  else -> {\n                      // 任务还未开始或已经完成\n                  }\n              }\n          }\n      })\n  ```\n\n-  **链式任务**\n\n  ```kotlin\n  val firstRequest = OneTimeWorkRequest.Builder(MyWorker::class.java).build()\n  val secondRequest = OneTimeWorkRequest.Builder(SecondWorker::class.java).build()\n  \n  WorkManager.getInstance(applicationContext)\n      .beginWith(firstRequest)\n      .then(secondRequest)\n      .enqueue()\n  ```\n\n  **注：**千万别依赖其去实现一些核心功能，它在国产手机上是不稳定的\n\n------\n\n","source":"_posts/Jetpack.md","raw":"---\ntitle: Jetpack(Kotlin)\ndate: 2025-06-25 18:30:24\ncategories:\n- Android(Kotlin版)\ntags:\n---\n\n# Jetpack\n\n### Jetpack全家福\n\n![](../img/img60.jpg)\n\n------\n\n# ViewModel\n\n### 作用\n\n帮助Activity分担一部分工作，专门用于存放与界面相关的数据的，他可以保证在手机屏幕发生旋转时不会被重新创建，数据不会丢失\n\n### 生命周期\n\n![](../img/img61.jpg)\n\n### 用法\n\n- 添加依赖\n\n- 创建一个ViewModel类继承自ViewModel()\n\n- 把界面相关的数据都放入其中\n\n- 在Activity或fragment中创建其实例\n\n- 构建相关逻辑\n\n  ```kotlin\n  implementation (\"androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2\") // Kotlin 版本\n  implementation (\"androidx.lifecycle:lifecycle-viewmodel:2.6.2\")     // Java 版本\n  ```\n\n  ```kotlin\n  class MainViewModel(countReserved: Int) : ViewModel() {\n  \tvar counter=0\n  }\n  ```\n\n  ```kotlin\n  class MainActivity : AppCompatActivity() {\n      private lateinit var binding: ActivityMainBinding\n      lateinit var viewModel: MainViewModel\n      override fun onCreate(savedInstanceState: Bundle?) {\n          super.onCreate(savedInstanceState)\n          binding=ActivityMainBinding.inflate(layoutInflater)\n          setContentView(binding.root)\n          //获取实例\n          viewModel=ViewModelProvider(this).get(MainViewModel::class.java)\n          binding.plus.setOnClickListener {\n              viewModel.counter++\n              refreshCounter()\n          }\n          refreshCounter()\n  }\n      private fun refreshCounter(){\n          binding.infoText.text=viewModel.counter.toString()\n      }o\n  }\n  ```\n\n### 像ViewModel传递参数\n\n- 添加参数\n\n- 新建ViewModelFactory类，实现ViewModelProvider.Factory接口\n\n- 利用SharedPreferences保存数据\n\n- 读取数据，将数据传入到ViewModelFactory的构造函数中\n\n  ```kotlin\n  class MainViewModel(countReserved: Int) : ViewModel() {\n     var counter=countReserved\n  }\n  ```\n\n  ```kotlin\n  class MainViewModelFactory(private val countReserved:Int):ViewModelProvider.Factory {\n      override fun <T : ViewModel> create(modelClass: Class<T>): T {\n          return MainViewModel(countReserved) as T\n      }\n  }\n  ```\n\n  ```kotlin\n  class MainActivity : AppCompatActivity() {\n      private lateinit var binding: ActivityMainBinding\n      lateinit var viewModel: MainViewModel\n      lateinit var sp:SharedPreferences\n      override fun onCreate(savedInstanceState: Bundle?) {\n          super.onCreate(savedInstanceState)\n          binding=ActivityMainBinding.inflate(layoutInflater)\n          setContentView(binding.root)\n          sp=getPreferences(Context.MODE_PRIVATE)\n          val contReserved=sp.getInt(\"count_reserved\",0)\n          viewModel=ViewModelProvider(this,MainViewModelFactory(contReserved)).get(MainViewModel::class.java)\n          binding.plus.setOnClickListener {\n              viewModel.counter++\n              refreshCounter()\n          }\n          binding.clear.setOnClickListener {\n              viewModel.counter=0\n              refreshCounter()\n          }\n          refreshCounter() \n      }\n      private fun refreshCounter(){\n          binding.infoText.text=viewModel.counter.toString()\n      }\n  \n      override fun onPause() {\n          super.onPause()\n          sp.edit {\n              putInt(\"count_reserved\",viewModel.counter.value?:0)\n          }\n      }\n  }\n  ```\n\n------\n\n# Lifecycles\n\n### 作用\n\n他可以让任何一个类轻松地感知到Activity生命周期\n\n### 用法\n\n- 新建一个类\n\n- 借助注解能力编写逻辑代码\n\n- 获取LifecycleOwer实例，Activity或者Fragment本身就是一个LifecycleOwer实例\n\n- 在活动中进行调用(也可以在任何地方调用lifecycle.currentState来主动获取当前生命周期状态)\n\n  ```kotlin\n  class MyObserver(val lifecycle: Lifecycle):LifecycleObserver {\n      @OnLifecycleEvent(Lifecycle.Event.ON_START)\n      fun activityStart(){\n          Log.d(\"MyObserver\", \"activityStart: \")\n      }\n      @OnLifecycleEvent(Lifecycle.Event.ON_STOP)\n      fun activityStop(){\n          Log.d(\"MyObserve\", \"activityStop: \")\n      }\n  }\n  ```\n\n  ```kotlin\n  lifecycle.addObserver(MyObserver())\n  ```\n\n------\n\n# LiveData\n\n### 基本用法\n\n- **添加依赖**\n\n  ```kotlin\n   implementation \"androidx.lifecycle:lifecycle-livedata-ktx:2.5.1\"\n  ```\n\n- **创建LiveData**\n\n  ```kotlin\n  class MyViewModel (countReserved:Int): ViewModel() {\n      // 创建 LiveData\n      private val _counter = MutableLiveData<Int>()\n      val counter: LiveData<Int> get() = _counter\n  \n      init {\n          _counter.value = countReserved\n      }\n  \n      // 更新 LiveData 数据\n      fun incrementCounter() {\n          _counter.value = (_counter.value ?: 0) + 1\n      }\n  }\n  ```\n\n  - **MutableLiveData**: 可变的 LiveData 类型，允许数据更新。\n  - **LiveData**: 不可变的 LiveData 类型，只能观察数据，不能直接修改数据。\n\n- #### **在 Activity 或 Fragment 中观察 LiveData**\n\n  在 Activity 或 Fragment 中，你可以通过 `observe()` 方法观察 LiveData。当数据发生变化时，LiveData 才会发送更新。\n\n  ```kotlin\n  class MainActivity : AppCompatActivity() {\n  \n      // 获取 ViewModel 实例\n      private val myViewModel: MyViewModel by viewModels()\n  \n      override fun onCreate(savedInstanceState: Bundle?) {\n          super.onCreate(savedInstanceState)\n          setContentView(R.layout.activity_main)\n  \n          // 观察 LiveData 数据\n          myViewModel.counter.observe(this){ count ->\n              // 更新 UI\n              counterText.text = count.toString()\n          }\n  \n          // 设置按钮点击事件\n          incrementButton.setOnClickListener {\n              myViewModel.incrementCounter()\n          }\n      }\n  }\n  ```\n\n  \n\n### map和switchMap\n\n- **map**\n\n  - 作用：将实际包含数据的LiveData和仅用于观察数据的LiveData进行转换\n\n  - 用法：\n\n    ```kotlin\n    class MyViewModel : ViewModel() {\n        private val _userName = MutableLiveData<String>()\n        val userName: LiveData<String> get() = _userName\n    \n        // 使用 map 将原始数据转换为需要的格式\n        val userGreeting: LiveData<String> = userName.map { name ->\n            \"Hello, $name\"\n        }\n    \n        fun updateUserName(name: String) {\n            _userName.value = name\n        }\n    }\n    ```\n\n- **switchMap**\n\n  - 使用场景：当ViewModel中某个liveData对象是调用另外的方法获取的时候用switchMap\n\n  - 用法：\n\n    ```kotlin\n    class MyViewModel : ViewModel() {\n        private val _searchQuery = MutableLiveData<String>()\n        val searchQuery: LiveData<String> get() = _searchQuery\n    \n        // 使用 switchMap 来根据 searchQuery 触发新的搜索请求\n        val searchResults: LiveData<List<String>> = searchQuery.switchMap { query ->\n            // 假设搜索是一个异步操作，这里模拟为一个简单的列表\n            MutableLiveData<List<String>>().apply {\n                value = listOf(\"Result for $query\")\n            }\n        }\n    \n        fun updateSearchQuery(query: String) {\n            _searchQuery.value = query\n        }\n    }\n    ```\n\n    - `searchQuery` 是一个包含搜索关键字的 LiveData。\n    - `switchMap` 将每次更新的 `searchQuery` 映射到一个新的 LiveData（这里模拟为搜索结果）。\n    - 当 `searchQuery` 更新时，`switchMap` 会取消之前的查询并触发新的查询。\n\n------\n\n# Room\n\n### 基本特征\n\n**Room** 是 Jetpack 提供的一个数据库库，简化了 SQLite 的操作。它提供了一个抽象层，允许开发者更方便、更安全地访问本地数据库。Room 提供了注解（annotation）支持，结合 Kotlin 的数据类和架构组件，能够更高效地管理数据持久化操作。\n\nRoom 提供了一个 **DAO（数据访问对象）** 层来进行数据库操作，DAO 使用 SQL 查询语句来与数据库交互。Room 会在编译时生成实际的实现代码，减少了手动编写 SQL 语句的繁琐。\n\n- **简单易用**：相比直接使用 SQLite，Room 提供了更简单、类型安全的 API。\n- **SQLite 完全支持**：它是基于 SQLite 的，可以执行 SQL 查询、插入、更新和删除操作。\n- **注解支持**：使用注解定义数据库实体、DAO 和数据库版本。\n- **与 LiveData 兼容**：Room 支持与 LiveData 结合使用，当数据改变时，Room 可以自动通知观察者。\n\n### 添加依赖和插件\n\n```kotlin\nkotlin(\"kapt\")\n```\n\n```kotlin\n    implementation(\"androidx.room:room-runtime:2.6.1\")  // Room 的运行时库\n    kapt(\"androidx.room:room-compiler:2.6.1\")  // Room 的编译器，使用 KAPT 注解处理\n    implementation(\"androidx.room:room-ktx:2.6.1\")  // Room 的扩展库，提供了一些扩展函数和属性.\n```\n\n### 定义实体类(Entity)\n\n```kotlin\n@Entity\ndata class User (var firstName:String,var lastName:String,var age:Int){\n    @PrimaryKey(autoGenerate = true)\n    var id:Long=0\n}\n```\n\n- **@Entity** 注解标识这个类是一个数据库表。\n- **@PrimaryKey** 注解指定主键，并可以设置 `autoGenerate = true` 让 Room 自动生成主键。\n\n### 定义Dao\n\n- Room关键部分，所有数据库操作均封装在这里\n\n```kotlin\n@Dao\ninterface UserDao {\n    @Insert\n    fun insertUser(user:User):Long\n    @Update\n    fun updateUser(newUser: User)\n    @Query(\"select * from User\")\n    fun loadAllUsers():List<User>\n    @Query(\"select * from User where age> :age\")\n    fun loadUsersOlderThan(age:Int):List<User>\n    @Delete\n    fun deleteUser(user: User)\n    @Query(\"delete from User where lastName=:lastName\")\n    fun deleteUserByLastName(lastName:String):Int\n}\n```\n\n- **@Dao** 注解标识这个接口是 DAO。\n- **@Insert** 注解用于插入数据。\n- **@Query** 注解定义 SQL 查询语句。\n- **@Update**注解用于更新数据\n- **@Delete**注解用于删除数据\n- 利用非实体类参数来增删改数据时都要用**@Query**注解\n\n### 定义数据库(Database)\n\n```kotlin\n@Database(version = 1, entities = [User::class])\nabstract class AppDatabase:RoomDatabase(){\n    abstract fun userDao():UserDao\n    companion object{\n        private var instance:AppDatabase?=null\n        @Synchronized\n        fun getDatabase(context: Context):AppDatabase{\n            instance?.let {\n                return  it\n            }\n            return Room.databaseBuilder(context.applicationContext,AppDatabase::class.java,\"app_database\"          \n                .build().apply {\n                    instance=this\n                }\n        }\n    }\n\n} \n```\n\n- **@Database** 注解用于定义数据库，并指定包含的实体类和数据库版本，实体类之间用逗号隔开。\n- `abstract fun userDao()` 方法提供对 DAO 的访问。\n- 通过 `Room.databaseBuilder()` 方法获取数据库实例\n- 由于数据库操作均为耗时操作故需要在子线程中进行\n\n### 数据库升级\n\n1. 更新版本和包含的实体类\n2. 实现 Migration的匿名类\n3. 构建实例时加入addMigrations方法\n\n```kotlin\n@Database(version = 3, entities = [User::class, Book::class])\nabstract class AppDatabase : RoomDatabase() {\n\n    /**\n     * UserDao 是用于操作 User 实体的 DAO（Data Access Object）。\n     */\n    abstract fun userDao(): UserDao\n\n    /**\n     * BookDao 是用于操作 Book 实体的 DAO（Data Access Object）。\n     */\n    abstract fun bookDao(): BookDao\n\n    /**\n     * Companion 对象用于存储数据库的迁移信息和实例。\n     */\n    companion object {\n\n        /**\n         * MIGRATION_1_2 是从数据库版本 1 到 2 的迁移。\n         */\n        val MIGRATION_1_2 = object : Migration(1, 2) {\n            /**\n             * migrate 方法用于执行从版本 1 到 2 的迁移。\n             * 在这个例子中，我们创建了一个名为 Book 的新表。\n             */\n            override fun migrate(database: SupportSQLiteDatabase) {\n                database.execSQL(\"\"\"\n                    CREATE TABLE Book (\n                        id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\n                        name TEXT NOT NULL,\n                        pages INTEGER NOT NULL,\n                        author TEXT NOT NULL\n                    )\n                \"\"\".trimIndent())\n            }\n        }\n\n        /**\n         * MIGRATION_2_3 是从数据库版本 2 到 3 的迁移。\n         */\n        val MIGRATION_2_3 = object : Migration(2, 3) {\n            /**\n             * migrate 方法用于执行从版本 2 到 3 的迁移。\n             * 在这个例子中，我们添加了一个名为 author 的新列到 User 表中。\n             */\n            override fun migrate(database: SupportSQLiteDatabase) {\n                database.execSQL(\"\"\"\n                    ALTER TABLE User ADD COLUMN \n                    author TEXT NOT NULL DEFAULT 'unknown'\n                    \"\"\")\n            }\n        }\n\n        /**\n         * instance 是 AppDatabase 的实例。\n         */\n        private var instance: AppDatabase? = null\n\n        /**\n         * getDatabase 方法用于获取 AppDatabase 的实例。\n         * 如果实例已经存在，则直接返回实例。\n         * 否则，则创建一个新的实例并返回。\n         */\n        @Synchronized\n        fun getDatabase(context: Context): AppDatabase {\n            instance?.let { return it }\n            return Room.databaseBuilder(\n                context.applicationContext,\n                AppDatabase::class.java,\n                \"app_database\"\n            )\n                .addMigrations(MIGRATION_1_2, MIGRATION_2_3)\n                .build().apply { instance = this }\n        }\n    }\n}\n\n```\n\n------\n\n# WorkManager\n\n### 作用\n\n处理一些要求定时执行的任务，可以根据操作系统的版本自动选择是使用AlarmManager还是JobScheduler实现。另外还能支持周期性任务，链式任务处理等功能。它很适合执行一些定期和服务器交互的任务，比如周期性的同步数据\n\n### 基本用法\n\n1.  添加依赖\n\n   ```kotlin\n   implementation (\"androidx.work:work-runtime:2.8.1\") // Java\n       implementation (\"androidx.work:work-runtime-ktx:2.8.1\") // Kotlin + Coroutines\n   ```\n\n   \n\n2. 定义后台任务并实现具体的任务逻辑\n\n   ```kotlin\n   class SimpleWorker(context: Context,params:WorkerParameters):Worker(context,params) {\n       override fun doWork(): Result {\n           //编写具体的后台任务逻辑\n           Log.d(\"SimpleWorker\", \"do work in simpleworker\")\n           return  Result.success()\n       }\n   \n   }\n   ```\n\n   -  返回Result.success()表示成功\n   - 返回Result.failure()表示失败\n   - 返回Result.retry()也表示失败，只是可以结合WorkRequest.Builder的setBackoffCriteria()方法来重新执行任务\n\n3. 配置该后台任务的运行条件和约束信息，并构建后台任务请求\n\n   ```kotlin\n   val workRequest = OneTimeWorkRequest.Builder(SimpleWorker::class.java)\n       .build()\n   \n   ```\n\n   ```kotlin\n   val periodicWorkRequest = PeriodicWorkRequest.Builder(MyWorker::class.java, 1, TimeUnit.HOURS)\n       .build()\n   ```\n\n   - **OneTimeWorkRequest** 来执行一次性任务\n   - **PeriodicWorkRequest** 来执行定期任务。\n\n4. 将该后台任务请求传入WorkManager的enqueue()的方法中，系统会在合适的时间运行\n\n   ```kotlin\n   WorkManager.getInstance(applicationContext).enqueue(workRequest)\n   ```\n\n### 处理复杂任务\n\n- **设置约束信息**\n\n  ```kotlin\n  val workRequest = OneTimeWorkRequest.Builder(MyWorker::class.java)\n  \t.setInitialDelay(5,TimeUnit.MINUTES)\n      .addTag(\"simple\")\n      .build()\n  ```\n\n- **取消后台任务请求**\n\n  ```kotlin\n  WorkManager.getInstance(applicationContext).cancelWorkByTag(\"simple\")\n  ```\n\n  ```kotlin\n  WorkManager.getInstance(applicationContext).cancelWorkById(workRequest.id)\n  ```\n\n  ```kotlin\n  WorkManager.getInstance(applicationContext).cancelAllwork()//一次性取消所有后台任务\n  ```\n\n  使用id只能取消单个任务，使用标签可以取消同一标签名的所有任务\n\n- **任务重试**\n\n  当doWork方法中返回Result.retry()时可以结合setBackoffCriteria方法重新执行任务\n\n  ```kotlin\n  //第一个参数指的是如果任务再次执行失败，下次重试的时间应以什么形式延迟\n  val workRequest = OneTimeWorkRequest.Builder(MyWorker::class.java)\n      .setBackoffCriteria(BackoffPolicy.EXPONENTIAL, 10, TimeUnit.SECONDS)\n      .build()\n  \n  WorkManager.getInstance(applicationContext).enqueue(workRequest)\n  ```\n\n- ###### **观察任务状态**\n\n  ```kotlin\n  WorkManager.getInstance(applicationContext)\n      .getWorkInfoByIdLiveData(workRequest.id)\n      .observe(this, Observer { workInfo ->\n          if (workInfo != null) {\n              when (workInfo.state) {\n                  WorkInfo.State.SUCCEEDED -> {\n                      // 任务成功\n                  }\n                  WorkInfo.State.FAILED -> {\n                      // 任务失败\n                  }\n                  WorkInfo.State.RUNNING -> {\n                      // 任务正在运行\n                  }\n                  else -> {\n                      // 任务还未开始或已经完成\n                  }\n              }\n          }\n      })\n  ```\n\n-  **链式任务**\n\n  ```kotlin\n  val firstRequest = OneTimeWorkRequest.Builder(MyWorker::class.java).build()\n  val secondRequest = OneTimeWorkRequest.Builder(SecondWorker::class.java).build()\n  \n  WorkManager.getInstance(applicationContext)\n      .beginWith(firstRequest)\n      .then(secondRequest)\n      .enqueue()\n  ```\n\n  **注：**千万别依赖其去实现一些核心功能，它在国产手机上是不稳定的\n\n------\n\n","slug":"Jetpack","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gbr0007s4s72pn9c9zd","content":"<h1 id=\"Jetpack\"><a href=\"#Jetpack\" class=\"headerlink\" title=\"Jetpack\"></a>Jetpack</h1><h3 id=\"Jetpack全家福\"><a href=\"#Jetpack全家福\" class=\"headerlink\" title=\"Jetpack全家福\"></a>Jetpack全家福</h3><p><img src=\"/../img/img60.jpg\"></p>\n<hr>\n<h1 id=\"ViewModel\"><a href=\"#ViewModel\" class=\"headerlink\" title=\"ViewModel\"></a>ViewModel</h1><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>帮助Activity分担一部分工作，专门用于存放与界面相关的数据的，他可以保证在手机屏幕发生旋转时不会被重新创建，数据不会丢失</p>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><p><img src=\"/../img/img61.jpg\"></p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><ul>\n<li><p>添加依赖</p>\n</li>\n<li><p>创建一个ViewModel类继承自ViewModel()</p>\n</li>\n<li><p>把界面相关的数据都放入其中</p>\n</li>\n<li><p>在Activity或fragment中创建其实例</p>\n</li>\n<li><p>构建相关逻辑</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2&quot;</span>) <span class=\"comment\">// Kotlin 版本</span></span><br><span class=\"line\">implementation (<span class=\"string\">&quot;androidx.lifecycle:lifecycle-viewmodel:2.6.2&quot;</span>)     <span class=\"comment\">// Java 版本</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainViewModel</span>(countReserved: <span class=\"built_in\">Int</span>) : ViewModel() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> counter=<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding: ActivityMainBinding</span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> viewModel: MainViewModel</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        <span class=\"comment\">//获取实例</span></span><br><span class=\"line\">        viewModel=ViewModelProvider(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(MainViewModel::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        binding.plus.setOnClickListener &#123;</span><br><span class=\"line\">            viewModel.counter++</span><br><span class=\"line\">            refreshCounter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        refreshCounter()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">refreshCounter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        binding.infoText.text=viewModel.counter.toString()</span><br><span class=\"line\">    &#125;o</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"像ViewModel传递参数\"><a href=\"#像ViewModel传递参数\" class=\"headerlink\" title=\"像ViewModel传递参数\"></a>像ViewModel传递参数</h3><ul>\n<li><p>添加参数</p>\n</li>\n<li><p>新建ViewModelFactory类，实现ViewModelProvider.Factory接口</p>\n</li>\n<li><p>利用SharedPreferences保存数据</p>\n</li>\n<li><p>读取数据，将数据传入到ViewModelFactory的构造函数中</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainViewModel</span>(countReserved: <span class=\"built_in\">Int</span>) : ViewModel() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> counter=countReserved</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainViewModelFactory</span>(<span class=\"keyword\">private</span> <span class=\"keyword\">val</span> countReserved:<span class=\"built_in\">Int</span>):ViewModelProvider.Factory &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T : ViewModel&gt;</span> <span class=\"title\">create</span><span class=\"params\">(modelClass: <span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>: T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MainViewModel(countReserved) <span class=\"keyword\">as</span> T</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding: ActivityMainBinding</span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> viewModel: MainViewModel</span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> sp:SharedPreferences</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        sp=getPreferences(Context.MODE_PRIVATE)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> contReserved=sp.getInt(<span class=\"string\">&quot;count_reserved&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">        viewModel=ViewModelProvider(<span class=\"keyword\">this</span>,MainViewModelFactory(contReserved)).<span class=\"keyword\">get</span>(MainViewModel::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        binding.plus.setOnClickListener &#123;</span><br><span class=\"line\">            viewModel.counter++</span><br><span class=\"line\">            refreshCounter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.clear.setOnClickListener &#123;</span><br><span class=\"line\">            viewModel.counter=<span class=\"number\">0</span></span><br><span class=\"line\">            refreshCounter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        refreshCounter() </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">refreshCounter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        binding.infoText.text=viewModel.counter.toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onPause</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause()</span><br><span class=\"line\">        sp.edit &#123;</span><br><span class=\"line\">            putInt(<span class=\"string\">&quot;count_reserved&quot;</span>,viewModel.counter.value?:<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"Lifecycles\"><a href=\"#Lifecycles\" class=\"headerlink\" title=\"Lifecycles\"></a>Lifecycles</h1><h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>他可以让任何一个类轻松地感知到Activity生命周期</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><ul>\n<li><p>新建一个类</p>\n</li>\n<li><p>借助注解能力编写逻辑代码</p>\n</li>\n<li><p>获取LifecycleOwer实例，Activity或者Fragment本身就是一个LifecycleOwer实例</p>\n</li>\n<li><p>在活动中进行调用(也可以在任何地方调用lifecycle.currentState来主动获取当前生命周期状态)</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyObserver</span>(<span class=\"keyword\">val</span> lifecycle: Lifecycle):LifecycleObserver &#123;</span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_START)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">activityStart</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyObserver&quot;</span>, <span class=\"string\">&quot;activityStart: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_STOP)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">activityStop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyObserve&quot;</span>, <span class=\"string\">&quot;activityStop: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lifecycle.addObserver(MyObserver())</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"LiveData\"><a href=\"#LiveData\" class=\"headerlink\" title=\"LiveData\"></a>LiveData</h1><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><ul>\n<li><p><strong>添加依赖</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.5.1&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>创建LiveData</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> (countReserved:<span class=\"built_in\">Int</span>): ViewModel() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建 LiveData</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _counter = MutableLiveData&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> counter: LiveData&lt;<span class=\"built_in\">Int</span>&gt; <span class=\"keyword\">get</span>() = _counter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        _counter.value = countReserved</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新 LiveData 数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">incrementCounter</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        _counter.value = (_counter.value ?: <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>MutableLiveData</strong>: 可变的 LiveData 类型，允许数据更新。</li>\n<li><strong>LiveData</strong>: 不可变的 LiveData 类型，只能观察数据，不能直接修改数据。</li>\n</ul>\n</li>\n<li><h4 id=\"在-Activity-或-Fragment-中观察-LiveData\"><a href=\"#在-Activity-或-Fragment-中观察-LiveData\" class=\"headerlink\" title=\"在 Activity 或 Fragment 中观察 LiveData\"></a><strong>在 Activity 或 Fragment 中观察 LiveData</strong></h4><p>在 Activity 或 Fragment 中，你可以通过 <code>observe()</code> 方法观察 LiveData。当数据发生变化时，LiveData 才会发送更新。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 ViewModel 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> myViewModel: MyViewModel <span class=\"keyword\">by</span> viewModels()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 观察 LiveData 数据</span></span><br><span class=\"line\">        myViewModel.counter.observe(<span class=\"keyword\">this</span>)&#123; count -&gt;</span><br><span class=\"line\">            <span class=\"comment\">// 更新 UI</span></span><br><span class=\"line\">            counterText.text = count.toString()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置按钮点击事件</span></span><br><span class=\"line\">        incrementButton.setOnClickListener &#123;</span><br><span class=\"line\">            myViewModel.incrementCounter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"map和switchMap\"><a href=\"#map和switchMap\" class=\"headerlink\" title=\"map和switchMap\"></a>map和switchMap</h3><ul>\n<li><p><strong>map</strong></p>\n<ul>\n<li><p>作用：将实际包含数据的LiveData和仅用于观察数据的LiveData进行转换</p>\n</li>\n<li><p>用法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _userName = MutableLiveData&lt;String&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> userName: LiveData&lt;String&gt; <span class=\"keyword\">get</span>() = _userName</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 map 将原始数据转换为需要的格式</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> userGreeting: LiveData&lt;String&gt; = userName.map &#123; name -&gt;</span><br><span class=\"line\">        <span class=\"string\">&quot;Hello, <span class=\"variable\">$name</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateUserName</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        _userName.value = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>switchMap</strong></p>\n<ul>\n<li><p>使用场景：当ViewModel中某个liveData对象是调用另外的方法获取的时候用switchMap</p>\n</li>\n<li><p>用法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _searchQuery = MutableLiveData&lt;String&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> searchQuery: LiveData&lt;String&gt; <span class=\"keyword\">get</span>() = _searchQuery</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 switchMap 来根据 searchQuery 触发新的搜索请求</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> searchResults: LiveData&lt;List&lt;String&gt;&gt; = searchQuery.switchMap &#123; query -&gt;</span><br><span class=\"line\">        <span class=\"comment\">// 假设搜索是一个异步操作，这里模拟为一个简单的列表</span></span><br><span class=\"line\">        MutableLiveData&lt;List&lt;String&gt;&gt;().apply &#123;</span><br><span class=\"line\">            value = listOf(<span class=\"string\">&quot;Result for <span class=\"variable\">$query</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateSearchQuery</span><span class=\"params\">(query: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        _searchQuery.value = query</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>searchQuery</code> 是一个包含搜索关键字的 LiveData。</li>\n<li><code>switchMap</code> 将每次更新的 <code>searchQuery</code> 映射到一个新的 LiveData（这里模拟为搜索结果）。</li>\n<li>当 <code>searchQuery</code> 更新时，<code>switchMap</code> 会取消之前的查询并触发新的查询。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"Room\"><a href=\"#Room\" class=\"headerlink\" title=\"Room\"></a>Room</h1><h3 id=\"基本特征\"><a href=\"#基本特征\" class=\"headerlink\" title=\"基本特征\"></a>基本特征</h3><p><strong>Room</strong> 是 Jetpack 提供的一个数据库库，简化了 SQLite 的操作。它提供了一个抽象层，允许开发者更方便、更安全地访问本地数据库。Room 提供了注解（annotation）支持，结合 Kotlin 的数据类和架构组件，能够更高效地管理数据持久化操作。</p>\n<p>Room 提供了一个 <strong>DAO（数据访问对象）</strong> 层来进行数据库操作，DAO 使用 SQL 查询语句来与数据库交互。Room 会在编译时生成实际的实现代码，减少了手动编写 SQL 语句的繁琐。</p>\n<ul>\n<li><strong>简单易用</strong>：相比直接使用 SQLite，Room 提供了更简单、类型安全的 API。</li>\n<li><strong>SQLite 完全支持</strong>：它是基于 SQLite 的，可以执行 SQL 查询、插入、更新和删除操作。</li>\n<li><strong>注解支持</strong>：使用注解定义数据库实体、DAO 和数据库版本。</li>\n<li><strong>与 LiveData 兼容</strong>：Room 支持与 LiveData 结合使用，当数据改变时，Room 可以自动通知观察者。</li>\n</ul>\n<h3 id=\"添加依赖和插件\"><a href=\"#添加依赖和插件\" class=\"headerlink\" title=\"添加依赖和插件\"></a>添加依赖和插件</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kotlin(<span class=\"string\">&quot;kapt&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;androidx.room:room-runtime:2.6.1&quot;</span>)  <span class=\"comment\">// Room 的运行时库</span></span><br><span class=\"line\">kapt(<span class=\"string\">&quot;androidx.room:room-compiler:2.6.1&quot;</span>)  <span class=\"comment\">// Room 的编译器，使用 KAPT 注解处理</span></span><br><span class=\"line\">implementation(<span class=\"string\">&quot;androidx.room:room-ktx:2.6.1&quot;</span>)  <span class=\"comment\">// Room 的扩展库，提供了一些扩展函数和属性.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义实体类-Entity\"><a href=\"#定义实体类-Entity\" class=\"headerlink\" title=\"定义实体类(Entity)\"></a>定义实体类(Entity)</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> (<span class=\"keyword\">var</span> firstName:String,<span class=\"keyword\">var</span> lastName:String,<span class=\"keyword\">var</span> age:<span class=\"built_in\">Int</span>)&#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey(autoGenerate = true)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> id:<span class=\"built_in\">Long</span>=<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>@Entity</strong> 注解标识这个类是一个数据库表。</li>\n<li><strong>@PrimaryKey</strong> 注解指定主键，并可以设置 <code>autoGenerate = true</code> 让 Room 自动生成主键。</li>\n</ul>\n<h3 id=\"定义Dao\"><a href=\"#定义Dao\" class=\"headerlink\" title=\"定义Dao\"></a>定义Dao</h3><ul>\n<li>Room关键部分，所有数据库操作均封装在这里</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Insert</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">insertUser</span><span class=\"params\">(user:<span class=\"type\">User</span>)</span></span>:<span class=\"built_in\">Long</span></span><br><span class=\"line\">    <span class=\"meta\">@Update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateUser</span><span class=\"params\">(newUser: <span class=\"type\">User</span>)</span></span></span><br><span class=\"line\">    <span class=\"meta\">@Query(<span class=\"string\">&quot;select * from User&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadAllUsers</span><span class=\"params\">()</span></span>:List&lt;User&gt;</span><br><span class=\"line\">    <span class=\"meta\">@Query(<span class=\"string\">&quot;select * from User where age&gt; :age&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadUsersOlderThan</span><span class=\"params\">(age:<span class=\"type\">Int</span>)</span></span>:List&lt;User&gt;</span><br><span class=\"line\">    <span class=\"meta\">@Delete</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteUser</span><span class=\"params\">(user: <span class=\"type\">User</span>)</span></span></span><br><span class=\"line\">    <span class=\"meta\">@Query(<span class=\"string\">&quot;delete from User where lastName=:lastName&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteUserByLastName</span><span class=\"params\">(lastName:<span class=\"type\">String</span>)</span></span>:<span class=\"built_in\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>@Dao</strong> 注解标识这个接口是 DAO。</li>\n<li><strong>@Insert</strong> 注解用于插入数据。</li>\n<li><strong>@Query</strong> 注解定义 SQL 查询语句。</li>\n<li><strong>@Update</strong>注解用于更新数据</li>\n<li><strong>@Delete</strong>注解用于删除数据</li>\n<li>利用非实体类参数来增删改数据时都要用**@Query**注解</li>\n</ul>\n<h3 id=\"定义数据库-Database\"><a href=\"#定义数据库-Database\" class=\"headerlink\" title=\"定义数据库(Database)\"></a>定义数据库(Database)</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Database(version = 1, entities = [User::class])</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppDatabase</span>:<span class=\"type\">RoomDatabase</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">userDao</span><span class=\"params\">()</span></span>:UserDao</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> instance:AppDatabase?=<span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"meta\">@Synchronized</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getDatabase</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span>:AppDatabase&#123;</span><br><span class=\"line\">            instance?.let &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>  it</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Room.databaseBuilder(context.applicationContext,AppDatabase::<span class=\"keyword\">class</span>.java,<span class=\"string\">&quot;app_database&quot;</span>          </span><br><span class=\"line\">                .build().apply &#123;</span><br><span class=\"line\">                    instance=<span class=\"keyword\">this</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>@Database</strong> 注解用于定义数据库，并指定包含的实体类和数据库版本，实体类之间用逗号隔开。</li>\n<li><code>abstract fun userDao()</code> 方法提供对 DAO 的访问。</li>\n<li>通过 <code>Room.databaseBuilder()</code> 方法获取数据库实例</li>\n<li>由于数据库操作均为耗时操作故需要在子线程中进行</li>\n</ul>\n<h3 id=\"数据库升级\"><a href=\"#数据库升级\" class=\"headerlink\" title=\"数据库升级\"></a>数据库升级</h3><ol>\n<li>更新版本和包含的实体类</li>\n<li>实现 Migration的匿名类</li>\n<li>构建实例时加入addMigrations方法</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Database(version = 3, entities = [User::class, Book::class])</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppDatabase</span> : <span class=\"type\">RoomDatabase</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * UserDao 是用于操作 User 实体的 DAO（Data Access Object）。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">userDao</span><span class=\"params\">()</span></span>: UserDao</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * BookDao 是用于操作 Book 实体的 DAO（Data Access Object）。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bookDao</span><span class=\"params\">()</span></span>: BookDao</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Companion 对象用于存储数据库的迁移信息和实例。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * MIGRATION_1_2 是从数据库版本 1 到 2 的迁移。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> MIGRATION_1_2 = <span class=\"keyword\">object</span> : Migration(<span class=\"number\">1</span>, <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * migrate 方法用于执行从版本 1 到 2 的迁移。</span></span><br><span class=\"line\"><span class=\"comment\">             * 在这个例子中，我们创建了一个名为 Book 的新表。</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">migrate</span><span class=\"params\">(database: <span class=\"type\">SupportSQLiteDatabase</span>)</span></span> &#123;</span><br><span class=\"line\">                database.execSQL(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    CREATE TABLE Book (</span></span><br><span class=\"line\"><span class=\"string\">                        id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">                        name TEXT NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">                        pages INTEGER NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">                        author TEXT NOT NULL</span></span><br><span class=\"line\"><span class=\"string\">                    )</span></span><br><span class=\"line\"><span class=\"string\">                &quot;&quot;&quot;</span>.trimIndent())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * MIGRATION_2_3 是从数据库版本 2 到 3 的迁移。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> MIGRATION_2_3 = <span class=\"keyword\">object</span> : Migration(<span class=\"number\">2</span>, <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * migrate 方法用于执行从版本 2 到 3 的迁移。</span></span><br><span class=\"line\"><span class=\"comment\">             * 在这个例子中，我们添加了一个名为 author 的新列到 User 表中。</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">migrate</span><span class=\"params\">(database: <span class=\"type\">SupportSQLiteDatabase</span>)</span></span> &#123;</span><br><span class=\"line\">                database.execSQL(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    ALTER TABLE User ADD COLUMN </span></span><br><span class=\"line\"><span class=\"string\">                    author TEXT NOT NULL DEFAULT &#x27;unknown&#x27;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;&quot;&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * instance 是 AppDatabase 的实例。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> instance: AppDatabase? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * getDatabase 方法用于获取 AppDatabase 的实例。</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果实例已经存在，则直接返回实例。</span></span><br><span class=\"line\"><span class=\"comment\">         * 否则，则创建一个新的实例并返回。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Synchronized</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getDatabase</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span>: AppDatabase &#123;</span><br><span class=\"line\">            instance?.let &#123; <span class=\"keyword\">return</span> it &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Room.databaseBuilder(</span><br><span class=\"line\">                context.applicationContext,</span><br><span class=\"line\">                AppDatabase::<span class=\"keyword\">class</span>.java,</span><br><span class=\"line\">                <span class=\"string\">&quot;app_database&quot;</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">                .addMigrations(MIGRATION_1_2, MIGRATION_2_3)</span><br><span class=\"line\">                .build().apply &#123; instance = <span class=\"keyword\">this</span> &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"WorkManager\"><a href=\"#WorkManager\" class=\"headerlink\" title=\"WorkManager\"></a>WorkManager</h1><h3 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>处理一些要求定时执行的任务，可以根据操作系统的版本自动选择是使用AlarmManager还是JobScheduler实现。另外还能支持周期性任务，链式任务处理等功能。它很适合执行一些定期和服务器交互的任务，比如周期性的同步数据</p>\n<h3 id=\"基本用法-1\"><a href=\"#基本用法-1\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><ol>\n<li>添加依赖</li>\n</ol>\n   <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;androidx.work:work-runtime:2.8.1&quot;</span>) <span class=\"comment\">// Java</span></span><br><span class=\"line\">    implementation (<span class=\"string\">&quot;androidx.work:work-runtime-ktx:2.8.1&quot;</span>) <span class=\"comment\">// Kotlin + Coroutines</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>定义后台任务并实现具体的任务逻辑</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SimpleWorker</span>(context: Context,params:WorkerParameters):Worker(context,params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>: Result &#123;</span><br><span class=\"line\">        <span class=\"comment\">//编写具体的后台任务逻辑</span></span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;SimpleWorker&quot;</span>, <span class=\"string\">&quot;do work in simpleworker&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  Result.success()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>返回Result.success()表示成功</li>\n<li>返回Result.failure()表示失败</li>\n<li>返回Result.retry()也表示失败，只是可以结合WorkRequest.Builder的setBackoffCriteria()方法来重新执行任务</li>\n</ul>\n</li>\n<li><p>配置该后台任务的运行条件和约束信息，并构建后台任务请求</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> workRequest = OneTimeWorkRequest.Builder(SimpleWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">    .build()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> periodicWorkRequest = PeriodicWorkRequest.Builder(MyWorker::<span class=\"keyword\">class</span>.java, <span class=\"number\">1</span>, TimeUnit.HOURS)</span><br><span class=\"line\">    .build()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>OneTimeWorkRequest</strong> 来执行一次性任务</li>\n<li><strong>PeriodicWorkRequest</strong> 来执行定期任务。</li>\n</ul>\n</li>\n<li><p>将该后台任务请求传入WorkManager的enqueue()的方法中，系统会在合适的时间运行</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).enqueue(workRequest)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"处理复杂任务\"><a href=\"#处理复杂任务\" class=\"headerlink\" title=\"处理复杂任务\"></a>处理复杂任务</h3><ul>\n<li><p><strong>设置约束信息</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> workRequest = OneTimeWorkRequest.Builder(MyWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">\t.setInitialDelay(<span class=\"number\">5</span>,TimeUnit.MINUTES)</span><br><span class=\"line\">    .addTag(<span class=\"string\">&quot;simple&quot;</span>)</span><br><span class=\"line\">    .build()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>取消后台任务请求</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).cancelWorkByTag(<span class=\"string\">&quot;simple&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).cancelWorkById(workRequest.id)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).cancelAllwork()<span class=\"comment\">//一次性取消所有后台任务</span></span><br></pre></td></tr></table></figure>\n\n<p>使用id只能取消单个任务，使用标签可以取消同一标签名的所有任务</p>\n</li>\n<li><p><strong>任务重试</strong></p>\n<p>当doWork方法中返回Result.retry()时可以结合setBackoffCriteria方法重新执行任务</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一个参数指的是如果任务再次执行失败，下次重试的时间应以什么形式延迟</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> workRequest = OneTimeWorkRequest.Builder(MyWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">    .setBackoffCriteria(BackoffPolicy.EXPONENTIAL, <span class=\"number\">10</span>, TimeUnit.SECONDS)</span><br><span class=\"line\">    .build()</span><br><span class=\"line\"></span><br><span class=\"line\">WorkManager.getInstance(applicationContext).enqueue(workRequest)</span><br></pre></td></tr></table></figure>\n</li>\n<li><h6 id=\"观察任务状态\"><a href=\"#观察任务状态\" class=\"headerlink\" title=\"观察任务状态\"></a><strong>观察任务状态</strong></h6><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext)</span><br><span class=\"line\">    .getWorkInfoByIdLiveData(workRequest.id)</span><br><span class=\"line\">    .observe(<span class=\"keyword\">this</span>, Observer &#123; workInfo -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (workInfo != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">when</span> (workInfo.state) &#123;</span><br><span class=\"line\">                WorkInfo.State.SUCCEEDED -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 任务成功</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                WorkInfo.State.FAILED -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 任务失败</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                WorkInfo.State.RUNNING -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 任务正在运行</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 任务还未开始或已经完成</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>链式任务</strong></p>\n</li>\n</ul>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> firstRequest = OneTimeWorkRequest.Builder(MyWorker::<span class=\"keyword\">class</span>.java).build()</span><br><span class=\"line\"><span class=\"keyword\">val</span> secondRequest = OneTimeWorkRequest.Builder(SecondWorker::<span class=\"keyword\">class</span>.java).build()</span><br><span class=\"line\"></span><br><span class=\"line\">WorkManager.getInstance(applicationContext)</span><br><span class=\"line\">    .beginWith(firstRequest)</span><br><span class=\"line\">    .then(secondRequest)</span><br><span class=\"line\">    .enqueue()</span><br></pre></td></tr></table></figure>\n\n<p>  **注：**千万别依赖其去实现一些核心功能，它在国产手机上是不稳定的</p>\n<hr>\n","excerpt":"Jetpack\nJetpack全家福\n\n\n\n\n\nViewModel\n作用\n帮助Activity分担一部分工作，专门用于存放与界面相关的数据的，他可以保证在手机屏幕发生旋转时不会被重新创建，数据不会丢失\n\n生命周期\n\n\n用法\n * 添加依赖\n   \n   \n * 创建一个ViewModel类继承自ViewModel()\n   \n   \n * 把界面相关的数据都放入其中\n   \n   \n * 在Activity或fragment中创建其实例\n   \n   \n * 构建相关逻辑\n   \n   1\n   2\n   \n   \n   implementation (\"androidx.lifecycle:","more":"<h1 id=\"Jetpack\"><a href=\"#Jetpack\" class=\"headerlink\" title=\"Jetpack\"></a>Jetpack</h1><h3 id=\"Jetpack全家福\"><a href=\"#Jetpack全家福\" class=\"headerlink\" title=\"Jetpack全家福\"></a>Jetpack全家福</h3><p><img src=\"/../img/img60.jpg\"></p>\n<hr>\n<h1 id=\"ViewModel\"><a href=\"#ViewModel\" class=\"headerlink\" title=\"ViewModel\"></a>ViewModel</h1><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>帮助Activity分担一部分工作，专门用于存放与界面相关的数据的，他可以保证在手机屏幕发生旋转时不会被重新创建，数据不会丢失</p>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><p><img src=\"/../img/img61.jpg\"></p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><ul>\n<li><p>添加依赖</p>\n</li>\n<li><p>创建一个ViewModel类继承自ViewModel()</p>\n</li>\n<li><p>把界面相关的数据都放入其中</p>\n</li>\n<li><p>在Activity或fragment中创建其实例</p>\n</li>\n<li><p>构建相关逻辑</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2&quot;</span>) <span class=\"comment\">// Kotlin 版本</span></span><br><span class=\"line\">implementation (<span class=\"string\">&quot;androidx.lifecycle:lifecycle-viewmodel:2.6.2&quot;</span>)     <span class=\"comment\">// Java 版本</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainViewModel</span>(countReserved: <span class=\"built_in\">Int</span>) : ViewModel() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> counter=<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding: ActivityMainBinding</span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> viewModel: MainViewModel</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        <span class=\"comment\">//获取实例</span></span><br><span class=\"line\">        viewModel=ViewModelProvider(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(MainViewModel::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        binding.plus.setOnClickListener &#123;</span><br><span class=\"line\">            viewModel.counter++</span><br><span class=\"line\">            refreshCounter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        refreshCounter()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">refreshCounter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        binding.infoText.text=viewModel.counter.toString()</span><br><span class=\"line\">    &#125;o</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"像ViewModel传递参数\"><a href=\"#像ViewModel传递参数\" class=\"headerlink\" title=\"像ViewModel传递参数\"></a>像ViewModel传递参数</h3><ul>\n<li><p>添加参数</p>\n</li>\n<li><p>新建ViewModelFactory类，实现ViewModelProvider.Factory接口</p>\n</li>\n<li><p>利用SharedPreferences保存数据</p>\n</li>\n<li><p>读取数据，将数据传入到ViewModelFactory的构造函数中</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainViewModel</span>(countReserved: <span class=\"built_in\">Int</span>) : ViewModel() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> counter=countReserved</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainViewModelFactory</span>(<span class=\"keyword\">private</span> <span class=\"keyword\">val</span> countReserved:<span class=\"built_in\">Int</span>):ViewModelProvider.Factory &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T : ViewModel&gt;</span> <span class=\"title\">create</span><span class=\"params\">(modelClass: <span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>: T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MainViewModel(countReserved) <span class=\"keyword\">as</span> T</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding: ActivityMainBinding</span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> viewModel: MainViewModel</span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> sp:SharedPreferences</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        sp=getPreferences(Context.MODE_PRIVATE)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> contReserved=sp.getInt(<span class=\"string\">&quot;count_reserved&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">        viewModel=ViewModelProvider(<span class=\"keyword\">this</span>,MainViewModelFactory(contReserved)).<span class=\"keyword\">get</span>(MainViewModel::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        binding.plus.setOnClickListener &#123;</span><br><span class=\"line\">            viewModel.counter++</span><br><span class=\"line\">            refreshCounter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.clear.setOnClickListener &#123;</span><br><span class=\"line\">            viewModel.counter=<span class=\"number\">0</span></span><br><span class=\"line\">            refreshCounter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        refreshCounter() </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">refreshCounter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        binding.infoText.text=viewModel.counter.toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onPause</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause()</span><br><span class=\"line\">        sp.edit &#123;</span><br><span class=\"line\">            putInt(<span class=\"string\">&quot;count_reserved&quot;</span>,viewModel.counter.value?:<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"Lifecycles\"><a href=\"#Lifecycles\" class=\"headerlink\" title=\"Lifecycles\"></a>Lifecycles</h1><h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>他可以让任何一个类轻松地感知到Activity生命周期</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><ul>\n<li><p>新建一个类</p>\n</li>\n<li><p>借助注解能力编写逻辑代码</p>\n</li>\n<li><p>获取LifecycleOwer实例，Activity或者Fragment本身就是一个LifecycleOwer实例</p>\n</li>\n<li><p>在活动中进行调用(也可以在任何地方调用lifecycle.currentState来主动获取当前生命周期状态)</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyObserver</span>(<span class=\"keyword\">val</span> lifecycle: Lifecycle):LifecycleObserver &#123;</span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_START)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">activityStart</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyObserver&quot;</span>, <span class=\"string\">&quot;activityStart: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_STOP)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">activityStop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyObserve&quot;</span>, <span class=\"string\">&quot;activityStop: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lifecycle.addObserver(MyObserver())</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"LiveData\"><a href=\"#LiveData\" class=\"headerlink\" title=\"LiveData\"></a>LiveData</h1><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><ul>\n<li><p><strong>添加依赖</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.5.1&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>创建LiveData</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> (countReserved:<span class=\"built_in\">Int</span>): ViewModel() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建 LiveData</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _counter = MutableLiveData&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> counter: LiveData&lt;<span class=\"built_in\">Int</span>&gt; <span class=\"keyword\">get</span>() = _counter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        _counter.value = countReserved</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新 LiveData 数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">incrementCounter</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        _counter.value = (_counter.value ?: <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>MutableLiveData</strong>: 可变的 LiveData 类型，允许数据更新。</li>\n<li><strong>LiveData</strong>: 不可变的 LiveData 类型，只能观察数据，不能直接修改数据。</li>\n</ul>\n</li>\n<li><h4 id=\"在-Activity-或-Fragment-中观察-LiveData\"><a href=\"#在-Activity-或-Fragment-中观察-LiveData\" class=\"headerlink\" title=\"在 Activity 或 Fragment 中观察 LiveData\"></a><strong>在 Activity 或 Fragment 中观察 LiveData</strong></h4><p>在 Activity 或 Fragment 中，你可以通过 <code>observe()</code> 方法观察 LiveData。当数据发生变化时，LiveData 才会发送更新。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 ViewModel 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> myViewModel: MyViewModel <span class=\"keyword\">by</span> viewModels()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 观察 LiveData 数据</span></span><br><span class=\"line\">        myViewModel.counter.observe(<span class=\"keyword\">this</span>)&#123; count -&gt;</span><br><span class=\"line\">            <span class=\"comment\">// 更新 UI</span></span><br><span class=\"line\">            counterText.text = count.toString()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置按钮点击事件</span></span><br><span class=\"line\">        incrementButton.setOnClickListener &#123;</span><br><span class=\"line\">            myViewModel.incrementCounter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"map和switchMap\"><a href=\"#map和switchMap\" class=\"headerlink\" title=\"map和switchMap\"></a>map和switchMap</h3><ul>\n<li><p><strong>map</strong></p>\n<ul>\n<li><p>作用：将实际包含数据的LiveData和仅用于观察数据的LiveData进行转换</p>\n</li>\n<li><p>用法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _userName = MutableLiveData&lt;String&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> userName: LiveData&lt;String&gt; <span class=\"keyword\">get</span>() = _userName</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 map 将原始数据转换为需要的格式</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> userGreeting: LiveData&lt;String&gt; = userName.map &#123; name -&gt;</span><br><span class=\"line\">        <span class=\"string\">&quot;Hello, <span class=\"variable\">$name</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateUserName</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        _userName.value = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>switchMap</strong></p>\n<ul>\n<li><p>使用场景：当ViewModel中某个liveData对象是调用另外的方法获取的时候用switchMap</p>\n</li>\n<li><p>用法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _searchQuery = MutableLiveData&lt;String&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> searchQuery: LiveData&lt;String&gt; <span class=\"keyword\">get</span>() = _searchQuery</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 switchMap 来根据 searchQuery 触发新的搜索请求</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> searchResults: LiveData&lt;List&lt;String&gt;&gt; = searchQuery.switchMap &#123; query -&gt;</span><br><span class=\"line\">        <span class=\"comment\">// 假设搜索是一个异步操作，这里模拟为一个简单的列表</span></span><br><span class=\"line\">        MutableLiveData&lt;List&lt;String&gt;&gt;().apply &#123;</span><br><span class=\"line\">            value = listOf(<span class=\"string\">&quot;Result for <span class=\"variable\">$query</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateSearchQuery</span><span class=\"params\">(query: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        _searchQuery.value = query</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>searchQuery</code> 是一个包含搜索关键字的 LiveData。</li>\n<li><code>switchMap</code> 将每次更新的 <code>searchQuery</code> 映射到一个新的 LiveData（这里模拟为搜索结果）。</li>\n<li>当 <code>searchQuery</code> 更新时，<code>switchMap</code> 会取消之前的查询并触发新的查询。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"Room\"><a href=\"#Room\" class=\"headerlink\" title=\"Room\"></a>Room</h1><h3 id=\"基本特征\"><a href=\"#基本特征\" class=\"headerlink\" title=\"基本特征\"></a>基本特征</h3><p><strong>Room</strong> 是 Jetpack 提供的一个数据库库，简化了 SQLite 的操作。它提供了一个抽象层，允许开发者更方便、更安全地访问本地数据库。Room 提供了注解（annotation）支持，结合 Kotlin 的数据类和架构组件，能够更高效地管理数据持久化操作。</p>\n<p>Room 提供了一个 <strong>DAO（数据访问对象）</strong> 层来进行数据库操作，DAO 使用 SQL 查询语句来与数据库交互。Room 会在编译时生成实际的实现代码，减少了手动编写 SQL 语句的繁琐。</p>\n<ul>\n<li><strong>简单易用</strong>：相比直接使用 SQLite，Room 提供了更简单、类型安全的 API。</li>\n<li><strong>SQLite 完全支持</strong>：它是基于 SQLite 的，可以执行 SQL 查询、插入、更新和删除操作。</li>\n<li><strong>注解支持</strong>：使用注解定义数据库实体、DAO 和数据库版本。</li>\n<li><strong>与 LiveData 兼容</strong>：Room 支持与 LiveData 结合使用，当数据改变时，Room 可以自动通知观察者。</li>\n</ul>\n<h3 id=\"添加依赖和插件\"><a href=\"#添加依赖和插件\" class=\"headerlink\" title=\"添加依赖和插件\"></a>添加依赖和插件</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kotlin(<span class=\"string\">&quot;kapt&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;androidx.room:room-runtime:2.6.1&quot;</span>)  <span class=\"comment\">// Room 的运行时库</span></span><br><span class=\"line\">kapt(<span class=\"string\">&quot;androidx.room:room-compiler:2.6.1&quot;</span>)  <span class=\"comment\">// Room 的编译器，使用 KAPT 注解处理</span></span><br><span class=\"line\">implementation(<span class=\"string\">&quot;androidx.room:room-ktx:2.6.1&quot;</span>)  <span class=\"comment\">// Room 的扩展库，提供了一些扩展函数和属性.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义实体类-Entity\"><a href=\"#定义实体类-Entity\" class=\"headerlink\" title=\"定义实体类(Entity)\"></a>定义实体类(Entity)</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> (<span class=\"keyword\">var</span> firstName:String,<span class=\"keyword\">var</span> lastName:String,<span class=\"keyword\">var</span> age:<span class=\"built_in\">Int</span>)&#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey(autoGenerate = true)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> id:<span class=\"built_in\">Long</span>=<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>@Entity</strong> 注解标识这个类是一个数据库表。</li>\n<li><strong>@PrimaryKey</strong> 注解指定主键，并可以设置 <code>autoGenerate = true</code> 让 Room 自动生成主键。</li>\n</ul>\n<h3 id=\"定义Dao\"><a href=\"#定义Dao\" class=\"headerlink\" title=\"定义Dao\"></a>定义Dao</h3><ul>\n<li>Room关键部分，所有数据库操作均封装在这里</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Insert</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">insertUser</span><span class=\"params\">(user:<span class=\"type\">User</span>)</span></span>:<span class=\"built_in\">Long</span></span><br><span class=\"line\">    <span class=\"meta\">@Update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateUser</span><span class=\"params\">(newUser: <span class=\"type\">User</span>)</span></span></span><br><span class=\"line\">    <span class=\"meta\">@Query(<span class=\"string\">&quot;select * from User&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadAllUsers</span><span class=\"params\">()</span></span>:List&lt;User&gt;</span><br><span class=\"line\">    <span class=\"meta\">@Query(<span class=\"string\">&quot;select * from User where age&gt; :age&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadUsersOlderThan</span><span class=\"params\">(age:<span class=\"type\">Int</span>)</span></span>:List&lt;User&gt;</span><br><span class=\"line\">    <span class=\"meta\">@Delete</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteUser</span><span class=\"params\">(user: <span class=\"type\">User</span>)</span></span></span><br><span class=\"line\">    <span class=\"meta\">@Query(<span class=\"string\">&quot;delete from User where lastName=:lastName&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteUserByLastName</span><span class=\"params\">(lastName:<span class=\"type\">String</span>)</span></span>:<span class=\"built_in\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>@Dao</strong> 注解标识这个接口是 DAO。</li>\n<li><strong>@Insert</strong> 注解用于插入数据。</li>\n<li><strong>@Query</strong> 注解定义 SQL 查询语句。</li>\n<li><strong>@Update</strong>注解用于更新数据</li>\n<li><strong>@Delete</strong>注解用于删除数据</li>\n<li>利用非实体类参数来增删改数据时都要用**@Query**注解</li>\n</ul>\n<h3 id=\"定义数据库-Database\"><a href=\"#定义数据库-Database\" class=\"headerlink\" title=\"定义数据库(Database)\"></a>定义数据库(Database)</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Database(version = 1, entities = [User::class])</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppDatabase</span>:<span class=\"type\">RoomDatabase</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">userDao</span><span class=\"params\">()</span></span>:UserDao</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> instance:AppDatabase?=<span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"meta\">@Synchronized</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getDatabase</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span>:AppDatabase&#123;</span><br><span class=\"line\">            instance?.let &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>  it</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Room.databaseBuilder(context.applicationContext,AppDatabase::<span class=\"keyword\">class</span>.java,<span class=\"string\">&quot;app_database&quot;</span>          </span><br><span class=\"line\">                .build().apply &#123;</span><br><span class=\"line\">                    instance=<span class=\"keyword\">this</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>@Database</strong> 注解用于定义数据库，并指定包含的实体类和数据库版本，实体类之间用逗号隔开。</li>\n<li><code>abstract fun userDao()</code> 方法提供对 DAO 的访问。</li>\n<li>通过 <code>Room.databaseBuilder()</code> 方法获取数据库实例</li>\n<li>由于数据库操作均为耗时操作故需要在子线程中进行</li>\n</ul>\n<h3 id=\"数据库升级\"><a href=\"#数据库升级\" class=\"headerlink\" title=\"数据库升级\"></a>数据库升级</h3><ol>\n<li>更新版本和包含的实体类</li>\n<li>实现 Migration的匿名类</li>\n<li>构建实例时加入addMigrations方法</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Database(version = 3, entities = [User::class, Book::class])</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppDatabase</span> : <span class=\"type\">RoomDatabase</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * UserDao 是用于操作 User 实体的 DAO（Data Access Object）。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">userDao</span><span class=\"params\">()</span></span>: UserDao</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * BookDao 是用于操作 Book 实体的 DAO（Data Access Object）。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bookDao</span><span class=\"params\">()</span></span>: BookDao</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Companion 对象用于存储数据库的迁移信息和实例。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * MIGRATION_1_2 是从数据库版本 1 到 2 的迁移。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> MIGRATION_1_2 = <span class=\"keyword\">object</span> : Migration(<span class=\"number\">1</span>, <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * migrate 方法用于执行从版本 1 到 2 的迁移。</span></span><br><span class=\"line\"><span class=\"comment\">             * 在这个例子中，我们创建了一个名为 Book 的新表。</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">migrate</span><span class=\"params\">(database: <span class=\"type\">SupportSQLiteDatabase</span>)</span></span> &#123;</span><br><span class=\"line\">                database.execSQL(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    CREATE TABLE Book (</span></span><br><span class=\"line\"><span class=\"string\">                        id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">                        name TEXT NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">                        pages INTEGER NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">                        author TEXT NOT NULL</span></span><br><span class=\"line\"><span class=\"string\">                    )</span></span><br><span class=\"line\"><span class=\"string\">                &quot;&quot;&quot;</span>.trimIndent())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * MIGRATION_2_3 是从数据库版本 2 到 3 的迁移。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> MIGRATION_2_3 = <span class=\"keyword\">object</span> : Migration(<span class=\"number\">2</span>, <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * migrate 方法用于执行从版本 2 到 3 的迁移。</span></span><br><span class=\"line\"><span class=\"comment\">             * 在这个例子中，我们添加了一个名为 author 的新列到 User 表中。</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">migrate</span><span class=\"params\">(database: <span class=\"type\">SupportSQLiteDatabase</span>)</span></span> &#123;</span><br><span class=\"line\">                database.execSQL(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    ALTER TABLE User ADD COLUMN </span></span><br><span class=\"line\"><span class=\"string\">                    author TEXT NOT NULL DEFAULT &#x27;unknown&#x27;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;&quot;&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * instance 是 AppDatabase 的实例。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> instance: AppDatabase? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * getDatabase 方法用于获取 AppDatabase 的实例。</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果实例已经存在，则直接返回实例。</span></span><br><span class=\"line\"><span class=\"comment\">         * 否则，则创建一个新的实例并返回。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Synchronized</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getDatabase</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span>: AppDatabase &#123;</span><br><span class=\"line\">            instance?.let &#123; <span class=\"keyword\">return</span> it &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Room.databaseBuilder(</span><br><span class=\"line\">                context.applicationContext,</span><br><span class=\"line\">                AppDatabase::<span class=\"keyword\">class</span>.java,</span><br><span class=\"line\">                <span class=\"string\">&quot;app_database&quot;</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">                .addMigrations(MIGRATION_1_2, MIGRATION_2_3)</span><br><span class=\"line\">                .build().apply &#123; instance = <span class=\"keyword\">this</span> &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"WorkManager\"><a href=\"#WorkManager\" class=\"headerlink\" title=\"WorkManager\"></a>WorkManager</h1><h3 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>处理一些要求定时执行的任务，可以根据操作系统的版本自动选择是使用AlarmManager还是JobScheduler实现。另外还能支持周期性任务，链式任务处理等功能。它很适合执行一些定期和服务器交互的任务，比如周期性的同步数据</p>\n<h3 id=\"基本用法-1\"><a href=\"#基本用法-1\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><ol>\n<li>添加依赖</li>\n</ol>\n   <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;androidx.work:work-runtime:2.8.1&quot;</span>) <span class=\"comment\">// Java</span></span><br><span class=\"line\">    implementation (<span class=\"string\">&quot;androidx.work:work-runtime-ktx:2.8.1&quot;</span>) <span class=\"comment\">// Kotlin + Coroutines</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>定义后台任务并实现具体的任务逻辑</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SimpleWorker</span>(context: Context,params:WorkerParameters):Worker(context,params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>: Result &#123;</span><br><span class=\"line\">        <span class=\"comment\">//编写具体的后台任务逻辑</span></span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;SimpleWorker&quot;</span>, <span class=\"string\">&quot;do work in simpleworker&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  Result.success()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>返回Result.success()表示成功</li>\n<li>返回Result.failure()表示失败</li>\n<li>返回Result.retry()也表示失败，只是可以结合WorkRequest.Builder的setBackoffCriteria()方法来重新执行任务</li>\n</ul>\n</li>\n<li><p>配置该后台任务的运行条件和约束信息，并构建后台任务请求</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> workRequest = OneTimeWorkRequest.Builder(SimpleWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">    .build()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> periodicWorkRequest = PeriodicWorkRequest.Builder(MyWorker::<span class=\"keyword\">class</span>.java, <span class=\"number\">1</span>, TimeUnit.HOURS)</span><br><span class=\"line\">    .build()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>OneTimeWorkRequest</strong> 来执行一次性任务</li>\n<li><strong>PeriodicWorkRequest</strong> 来执行定期任务。</li>\n</ul>\n</li>\n<li><p>将该后台任务请求传入WorkManager的enqueue()的方法中，系统会在合适的时间运行</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).enqueue(workRequest)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"处理复杂任务\"><a href=\"#处理复杂任务\" class=\"headerlink\" title=\"处理复杂任务\"></a>处理复杂任务</h3><ul>\n<li><p><strong>设置约束信息</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> workRequest = OneTimeWorkRequest.Builder(MyWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">\t.setInitialDelay(<span class=\"number\">5</span>,TimeUnit.MINUTES)</span><br><span class=\"line\">    .addTag(<span class=\"string\">&quot;simple&quot;</span>)</span><br><span class=\"line\">    .build()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>取消后台任务请求</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).cancelWorkByTag(<span class=\"string\">&quot;simple&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).cancelWorkById(workRequest.id)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext).cancelAllwork()<span class=\"comment\">//一次性取消所有后台任务</span></span><br></pre></td></tr></table></figure>\n\n<p>使用id只能取消单个任务，使用标签可以取消同一标签名的所有任务</p>\n</li>\n<li><p><strong>任务重试</strong></p>\n<p>当doWork方法中返回Result.retry()时可以结合setBackoffCriteria方法重新执行任务</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一个参数指的是如果任务再次执行失败，下次重试的时间应以什么形式延迟</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> workRequest = OneTimeWorkRequest.Builder(MyWorker::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">    .setBackoffCriteria(BackoffPolicy.EXPONENTIAL, <span class=\"number\">10</span>, TimeUnit.SECONDS)</span><br><span class=\"line\">    .build()</span><br><span class=\"line\"></span><br><span class=\"line\">WorkManager.getInstance(applicationContext).enqueue(workRequest)</span><br></pre></td></tr></table></figure>\n</li>\n<li><h6 id=\"观察任务状态\"><a href=\"#观察任务状态\" class=\"headerlink\" title=\"观察任务状态\"></a><strong>观察任务状态</strong></h6><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(applicationContext)</span><br><span class=\"line\">    .getWorkInfoByIdLiveData(workRequest.id)</span><br><span class=\"line\">    .observe(<span class=\"keyword\">this</span>, Observer &#123; workInfo -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (workInfo != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">when</span> (workInfo.state) &#123;</span><br><span class=\"line\">                WorkInfo.State.SUCCEEDED -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 任务成功</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                WorkInfo.State.FAILED -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 任务失败</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                WorkInfo.State.RUNNING -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 任务正在运行</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 任务还未开始或已经完成</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>链式任务</strong></p>\n</li>\n</ul>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> firstRequest = OneTimeWorkRequest.Builder(MyWorker::<span class=\"keyword\">class</span>.java).build()</span><br><span class=\"line\"><span class=\"keyword\">val</span> secondRequest = OneTimeWorkRequest.Builder(SecondWorker::<span class=\"keyword\">class</span>.java).build()</span><br><span class=\"line\"></span><br><span class=\"line\">WorkManager.getInstance(applicationContext)</span><br><span class=\"line\">    .beginWith(firstRequest)</span><br><span class=\"line\">    .then(secondRequest)</span><br><span class=\"line\">    .enqueue()</span><br></pre></td></tr></table></figure>\n\n<p>  **注：**千万别依赖其去实现一些核心功能，它在国产手机上是不稳定的</p>\n<hr>\n"},{"title":"Kotlin使用DSL构建专有语法结构","date":"2025-06-26T18:01:25.000Z","_content":"\n### DSL构建专有的语法结构\n\nDSL 是专为特定领域（如数据库查询、配置文件、UI布局等）设计的编程语言或语言的一个子集。Kotlin 提供了丰富的支持，帮助开发者用 Kotlin 代码构建出自己的 DSL 语言结构，以使得代码更加易读和易写。\n\n- **扩展函数**：你可以通过扩展函数给现有类添加自定义功能，从而实现新的语法结构。\n- **高阶函数**：Kotlin 允许将函数作为参数传递给其他函数，这使得定义和构建 DSL 成为可能。\n- **Lambda 表达式**：你可以通过 lambda 表达式使代码更加简洁，形成类似声明式的语法。\n- **智能类型推断**：这使得你无需显式声明类型，语法更清晰，推导更自然。\n\n### Lambda with Receiver（接收者 lambda）\n\n接收者 lambda 允许在 lambda 中访问外部对象的成员，而不需要显式的引用对象。通过这种方式，你可以通过一个语法块来访问和操作对象，类似于嵌套调用的结构。\n\n```kotlin\nclass DSL {\n    fun sayHello() = println(\"Hello, World!\")\n}\n\nfun dslExample(init: DSL.() -> Unit) {\n    val dsl = DSL()\n    dsl.init()\n}\n\nfun main() {\n    dslExample {\n        sayHello()  // 直接调用 DSL 中的方法，类似于在 \"this\" 上调用方法\n    }\n}\n```\n\n在这个例子中，`init` 是一个扩展函数 `DSL.() -> Unit`，其中 `DSL` 是接收者类型，而 `init` 是一个 lambda 表达式，它可以直接访问 `DSL` 类的成员。\n\n### 构建层次结构\n\n你可以使用 lambda 表达式来构建一个嵌套的结构，这在构建树形结构或配置文件时特别有用。例如，构建 UI 或 HTML 模板时，嵌套的 DSL 会让代码看起来更简洁。\n\n```kotlin\nclass Td{\n    var content=\"\"\n    fun html()=\"\\n\\t\\t<td>$content</td>\"\n}\nclass Tr{\n    private val children=ArrayList<Td>()\n    fun td(block:Td.()->String){\n        val td=Td()\n        td.content=td.block()\n        children.add(td)\n    }\n    fun html():String{\n        val builder=StringBuilder()\n        builder.append(\"\\n\\t<tr>\")\n        for (childTag in children){\n            builder.append(childTag.html())\n        }\n        builder.append(\"\\n\\t<tr>\")\n        return builder.toString()\n    }\n}\nclass Table{\n    private val children=ArrayList<Tr>()\n    fun tr(block: Tr.() -> Unit){\n        val tr=Tr()\n        tr.block()\n        children.add(tr)\n    }\n    fun html():String{\n        val builder=StringBuilder()\n        builder.append(\"<table>\")\n        for (childTag in children){\n            builder.append(childTag.html())\n        }\n        builder.append(\"\\n</table>\")\n        return builder.toString()\n    }\n}\nfun table(block:Table.()->Unit):String{\n    val table=Table()\n    table.block()\n    return table.html()\n}\nfun main(){\n    /*val table=Table()\n    table.tr {\n        td{\"Apple\"}\n        td{\"Grape\"}\n        td{\"Orange\"}\n    }\n    table.tr {\n        td{\"Pear\"}\n        td{\"Banana\"}\n        td{\"Watermelon\"}\n    }*/\n    val html= table {\n        tr {\n            td{\"Apple\"}\n            td{\"Grape\"}\n            td{\"Orange\"}\n        }\n        tr {\n            td{\"Pear\"}\n            td{\"Banana\"}\n            td{\"Watermelon\"}\n        }\n    }\n    println(html)\n}\n```\n\n这里，我们创建了一个简单的 HTML 构建器 DSL。你可以在外部 `html` 块中定义结构，从而形成一个层次化的结构。\n\n------\n\n","source":"_posts/Kotlin使用DSL构建专有语法结构.md","raw":"---\ntitle: Kotlin使用DSL构建专有语法结构\ndate: 2025-06-27 02:01:25\ncategories:\n- Kotlin\ntags:\n---\n\n### DSL构建专有的语法结构\n\nDSL 是专为特定领域（如数据库查询、配置文件、UI布局等）设计的编程语言或语言的一个子集。Kotlin 提供了丰富的支持，帮助开发者用 Kotlin 代码构建出自己的 DSL 语言结构，以使得代码更加易读和易写。\n\n- **扩展函数**：你可以通过扩展函数给现有类添加自定义功能，从而实现新的语法结构。\n- **高阶函数**：Kotlin 允许将函数作为参数传递给其他函数，这使得定义和构建 DSL 成为可能。\n- **Lambda 表达式**：你可以通过 lambda 表达式使代码更加简洁，形成类似声明式的语法。\n- **智能类型推断**：这使得你无需显式声明类型，语法更清晰，推导更自然。\n\n### Lambda with Receiver（接收者 lambda）\n\n接收者 lambda 允许在 lambda 中访问外部对象的成员，而不需要显式的引用对象。通过这种方式，你可以通过一个语法块来访问和操作对象，类似于嵌套调用的结构。\n\n```kotlin\nclass DSL {\n    fun sayHello() = println(\"Hello, World!\")\n}\n\nfun dslExample(init: DSL.() -> Unit) {\n    val dsl = DSL()\n    dsl.init()\n}\n\nfun main() {\n    dslExample {\n        sayHello()  // 直接调用 DSL 中的方法，类似于在 \"this\" 上调用方法\n    }\n}\n```\n\n在这个例子中，`init` 是一个扩展函数 `DSL.() -> Unit`，其中 `DSL` 是接收者类型，而 `init` 是一个 lambda 表达式，它可以直接访问 `DSL` 类的成员。\n\n### 构建层次结构\n\n你可以使用 lambda 表达式来构建一个嵌套的结构，这在构建树形结构或配置文件时特别有用。例如，构建 UI 或 HTML 模板时，嵌套的 DSL 会让代码看起来更简洁。\n\n```kotlin\nclass Td{\n    var content=\"\"\n    fun html()=\"\\n\\t\\t<td>$content</td>\"\n}\nclass Tr{\n    private val children=ArrayList<Td>()\n    fun td(block:Td.()->String){\n        val td=Td()\n        td.content=td.block()\n        children.add(td)\n    }\n    fun html():String{\n        val builder=StringBuilder()\n        builder.append(\"\\n\\t<tr>\")\n        for (childTag in children){\n            builder.append(childTag.html())\n        }\n        builder.append(\"\\n\\t<tr>\")\n        return builder.toString()\n    }\n}\nclass Table{\n    private val children=ArrayList<Tr>()\n    fun tr(block: Tr.() -> Unit){\n        val tr=Tr()\n        tr.block()\n        children.add(tr)\n    }\n    fun html():String{\n        val builder=StringBuilder()\n        builder.append(\"<table>\")\n        for (childTag in children){\n            builder.append(childTag.html())\n        }\n        builder.append(\"\\n</table>\")\n        return builder.toString()\n    }\n}\nfun table(block:Table.()->Unit):String{\n    val table=Table()\n    table.block()\n    return table.html()\n}\nfun main(){\n    /*val table=Table()\n    table.tr {\n        td{\"Apple\"}\n        td{\"Grape\"}\n        td{\"Orange\"}\n    }\n    table.tr {\n        td{\"Pear\"}\n        td{\"Banana\"}\n        td{\"Watermelon\"}\n    }*/\n    val html= table {\n        tr {\n            td{\"Apple\"}\n            td{\"Grape\"}\n            td{\"Orange\"}\n        }\n        tr {\n            td{\"Pear\"}\n            td{\"Banana\"}\n            td{\"Watermelon\"}\n        }\n    }\n    println(html)\n}\n```\n\n这里，我们创建了一个简单的 HTML 构建器 DSL。你可以在外部 `html` 块中定义结构，从而形成一个层次化的结构。\n\n------\n\n","slug":"Kotlin使用DSL构建专有语法结构","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gbt0009s4s7h6xo9g8h","content":"<h3 id=\"DSL构建专有的语法结构\"><a href=\"#DSL构建专有的语法结构\" class=\"headerlink\" title=\"DSL构建专有的语法结构\"></a>DSL构建专有的语法结构</h3><p>DSL 是专为特定领域（如数据库查询、配置文件、UI布局等）设计的编程语言或语言的一个子集。Kotlin 提供了丰富的支持，帮助开发者用 Kotlin 代码构建出自己的 DSL 语言结构，以使得代码更加易读和易写。</p>\n<ul>\n<li><strong>扩展函数</strong>：你可以通过扩展函数给现有类添加自定义功能，从而实现新的语法结构。</li>\n<li><strong>高阶函数</strong>：Kotlin 允许将函数作为参数传递给其他函数，这使得定义和构建 DSL 成为可能。</li>\n<li><strong>Lambda 表达式</strong>：你可以通过 lambda 表达式使代码更加简洁，形成类似声明式的语法。</li>\n<li><strong>智能类型推断</strong>：这使得你无需显式声明类型，语法更清晰，推导更自然。</li>\n</ul>\n<h3 id=\"Lambda-with-Receiver（接收者-lambda）\"><a href=\"#Lambda-with-Receiver（接收者-lambda）\" class=\"headerlink\" title=\"Lambda with Receiver（接收者 lambda）\"></a>Lambda with Receiver（接收者 lambda）</h3><p>接收者 lambda 允许在 lambda 中访问外部对象的成员，而不需要显式的引用对象。通过这种方式，你可以通过一个语法块来访问和操作对象，类似于嵌套调用的结构。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DSL</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> = println(<span class=\"string\">&quot;Hello, World!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">dslExample</span><span class=\"params\">(<span class=\"keyword\">init</span>: <span class=\"type\">DSL</span>.() -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> dsl = DSL()</span><br><span class=\"line\">    dsl.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    dslExample &#123;</span><br><span class=\"line\">        sayHello()  <span class=\"comment\">// 直接调用 DSL 中的方法，类似于在 &quot;this&quot; 上调用方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>init</code> 是一个扩展函数 <code>DSL.() -&gt; Unit</code>，其中 <code>DSL</code> 是接收者类型，而 <code>init</code> 是一个 lambda 表达式，它可以直接访问 <code>DSL</code> 类的成员。</p>\n<h3 id=\"构建层次结构\"><a href=\"#构建层次结构\" class=\"headerlink\" title=\"构建层次结构\"></a>构建层次结构</h3><p>你可以使用 lambda 表达式来构建一个嵌套的结构，这在构建树形结构或配置文件时特别有用。例如，构建 UI 或 HTML 模板时，嵌套的 DSL 会让代码看起来更简洁。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Td</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> content=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">html</span><span class=\"params\">()</span></span>=<span class=\"string\">&quot;\\n\\t\\t&lt;td&gt;<span class=\"variable\">$content</span>&lt;/td&gt;&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tr</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> children=ArrayList&lt;Td&gt;()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">td</span><span class=\"params\">(block:<span class=\"type\">Td</span>.()-&gt;<span class=\"type\">String</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> td=Td()</span><br><span class=\"line\">        td.content=td.block()</span><br><span class=\"line\">        children.add(td)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">html</span><span class=\"params\">()</span></span>:String&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> builder=StringBuilder()</span><br><span class=\"line\">        builder.append(<span class=\"string\">&quot;\\n\\t&lt;tr&gt;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (childTag <span class=\"keyword\">in</span> children)&#123;</span><br><span class=\"line\">            builder.append(childTag.html())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        builder.append(<span class=\"string\">&quot;\\n\\t&lt;tr&gt;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Table</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> children=ArrayList&lt;Tr&gt;()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">tr</span><span class=\"params\">(block: <span class=\"type\">Tr</span>.() -&gt; <span class=\"type\">Unit</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> tr=Tr()</span><br><span class=\"line\">        tr.block()</span><br><span class=\"line\">        children.add(tr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">html</span><span class=\"params\">()</span></span>:String&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> builder=StringBuilder()</span><br><span class=\"line\">        builder.append(<span class=\"string\">&quot;&lt;table&gt;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (childTag <span class=\"keyword\">in</span> children)&#123;</span><br><span class=\"line\">            builder.append(childTag.html())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        builder.append(<span class=\"string\">&quot;\\n&lt;/table&gt;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">table</span><span class=\"params\">(block:<span class=\"type\">Table</span>.()-&gt;<span class=\"type\">Unit</span>)</span></span>:String&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> table=Table()</span><br><span class=\"line\">    table.block()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> table.html()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*val table=Table()</span></span><br><span class=\"line\"><span class=\"comment\">    table.tr &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        td&#123;&quot;Apple&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        td&#123;&quot;Grape&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        td&#123;&quot;Orange&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    table.tr &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        td&#123;&quot;Pear&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        td&#123;&quot;Banana&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        td&#123;&quot;Watermelon&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> html= table &#123;</span><br><span class=\"line\">        tr &#123;</span><br><span class=\"line\">            td&#123;<span class=\"string\">&quot;Apple&quot;</span>&#125;</span><br><span class=\"line\">            td&#123;<span class=\"string\">&quot;Grape&quot;</span>&#125;</span><br><span class=\"line\">            td&#123;<span class=\"string\">&quot;Orange&quot;</span>&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tr &#123;</span><br><span class=\"line\">            td&#123;<span class=\"string\">&quot;Pear&quot;</span>&#125;</span><br><span class=\"line\">            td&#123;<span class=\"string\">&quot;Banana&quot;</span>&#125;</span><br><span class=\"line\">            td&#123;<span class=\"string\">&quot;Watermelon&quot;</span>&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(html)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们创建了一个简单的 HTML 构建器 DSL。你可以在外部 <code>html</code> 块中定义结构，从而形成一个层次化的结构。</p>\n<hr>\n","excerpt":"DSL构建专有的语法结构\nDSL 是专为特定领域（如数据库查询、配置文件、UI布局等）设计的编程语言或语言的一个子集。Kotlin 提供了丰富的支持，帮助开发者用 Kotlin 代码构建出自己的 DSL 语言结构，以使得代码更加易读和易写。\n\n * 扩展函数：你可以通过扩展函数给现有类添加自定义功能，从而实现新的语法结构。\n * 高阶函数：Kotlin 允许将函数作为参数传递给其他函数，这使得定义和构建 DSL 成为可能。\n * Lambda 表达式：你可以通过 lambda 表达式使代码更加简洁，形成类似声明式的语法。\n * 智能类型推断：这使得你无需显式声明类型，语法更清晰，推导更自然。\n","more":"<h3 id=\"DSL构建专有的语法结构\"><a href=\"#DSL构建专有的语法结构\" class=\"headerlink\" title=\"DSL构建专有的语法结构\"></a>DSL构建专有的语法结构</h3><p>DSL 是专为特定领域（如数据库查询、配置文件、UI布局等）设计的编程语言或语言的一个子集。Kotlin 提供了丰富的支持，帮助开发者用 Kotlin 代码构建出自己的 DSL 语言结构，以使得代码更加易读和易写。</p>\n<ul>\n<li><strong>扩展函数</strong>：你可以通过扩展函数给现有类添加自定义功能，从而实现新的语法结构。</li>\n<li><strong>高阶函数</strong>：Kotlin 允许将函数作为参数传递给其他函数，这使得定义和构建 DSL 成为可能。</li>\n<li><strong>Lambda 表达式</strong>：你可以通过 lambda 表达式使代码更加简洁，形成类似声明式的语法。</li>\n<li><strong>智能类型推断</strong>：这使得你无需显式声明类型，语法更清晰，推导更自然。</li>\n</ul>\n<h3 id=\"Lambda-with-Receiver（接收者-lambda）\"><a href=\"#Lambda-with-Receiver（接收者-lambda）\" class=\"headerlink\" title=\"Lambda with Receiver（接收者 lambda）\"></a>Lambda with Receiver（接收者 lambda）</h3><p>接收者 lambda 允许在 lambda 中访问外部对象的成员，而不需要显式的引用对象。通过这种方式，你可以通过一个语法块来访问和操作对象，类似于嵌套调用的结构。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DSL</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span> = println(<span class=\"string\">&quot;Hello, World!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">dslExample</span><span class=\"params\">(<span class=\"keyword\">init</span>: <span class=\"type\">DSL</span>.() -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> dsl = DSL()</span><br><span class=\"line\">    dsl.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    dslExample &#123;</span><br><span class=\"line\">        sayHello()  <span class=\"comment\">// 直接调用 DSL 中的方法，类似于在 &quot;this&quot; 上调用方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>init</code> 是一个扩展函数 <code>DSL.() -&gt; Unit</code>，其中 <code>DSL</code> 是接收者类型，而 <code>init</code> 是一个 lambda 表达式，它可以直接访问 <code>DSL</code> 类的成员。</p>\n<h3 id=\"构建层次结构\"><a href=\"#构建层次结构\" class=\"headerlink\" title=\"构建层次结构\"></a>构建层次结构</h3><p>你可以使用 lambda 表达式来构建一个嵌套的结构，这在构建树形结构或配置文件时特别有用。例如，构建 UI 或 HTML 模板时，嵌套的 DSL 会让代码看起来更简洁。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Td</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> content=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">html</span><span class=\"params\">()</span></span>=<span class=\"string\">&quot;\\n\\t\\t&lt;td&gt;<span class=\"variable\">$content</span>&lt;/td&gt;&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tr</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> children=ArrayList&lt;Td&gt;()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">td</span><span class=\"params\">(block:<span class=\"type\">Td</span>.()-&gt;<span class=\"type\">String</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> td=Td()</span><br><span class=\"line\">        td.content=td.block()</span><br><span class=\"line\">        children.add(td)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">html</span><span class=\"params\">()</span></span>:String&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> builder=StringBuilder()</span><br><span class=\"line\">        builder.append(<span class=\"string\">&quot;\\n\\t&lt;tr&gt;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (childTag <span class=\"keyword\">in</span> children)&#123;</span><br><span class=\"line\">            builder.append(childTag.html())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        builder.append(<span class=\"string\">&quot;\\n\\t&lt;tr&gt;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Table</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> children=ArrayList&lt;Tr&gt;()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">tr</span><span class=\"params\">(block: <span class=\"type\">Tr</span>.() -&gt; <span class=\"type\">Unit</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> tr=Tr()</span><br><span class=\"line\">        tr.block()</span><br><span class=\"line\">        children.add(tr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">html</span><span class=\"params\">()</span></span>:String&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> builder=StringBuilder()</span><br><span class=\"line\">        builder.append(<span class=\"string\">&quot;&lt;table&gt;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (childTag <span class=\"keyword\">in</span> children)&#123;</span><br><span class=\"line\">            builder.append(childTag.html())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        builder.append(<span class=\"string\">&quot;\\n&lt;/table&gt;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">table</span><span class=\"params\">(block:<span class=\"type\">Table</span>.()-&gt;<span class=\"type\">Unit</span>)</span></span>:String&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> table=Table()</span><br><span class=\"line\">    table.block()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> table.html()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*val table=Table()</span></span><br><span class=\"line\"><span class=\"comment\">    table.tr &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        td&#123;&quot;Apple&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        td&#123;&quot;Grape&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        td&#123;&quot;Orange&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    table.tr &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        td&#123;&quot;Pear&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        td&#123;&quot;Banana&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        td&#123;&quot;Watermelon&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> html= table &#123;</span><br><span class=\"line\">        tr &#123;</span><br><span class=\"line\">            td&#123;<span class=\"string\">&quot;Apple&quot;</span>&#125;</span><br><span class=\"line\">            td&#123;<span class=\"string\">&quot;Grape&quot;</span>&#125;</span><br><span class=\"line\">            td&#123;<span class=\"string\">&quot;Orange&quot;</span>&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tr &#123;</span><br><span class=\"line\">            td&#123;<span class=\"string\">&quot;Pear&quot;</span>&#125;</span><br><span class=\"line\">            td&#123;<span class=\"string\">&quot;Banana&quot;</span>&#125;</span><br><span class=\"line\">            td&#123;<span class=\"string\">&quot;Watermelon&quot;</span>&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(html)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们创建了一个简单的 HTML 构建器 DSL。你可以在外部 <code>html</code> 块中定义结构，从而形成一个层次化的结构。</p>\n<hr>\n"},{"title":"Java跨平台的原理","date":"2025-08-23T13:14:18.000Z","_content":"\n- 通过虚拟机实现的\n- Java语言不是直接运行在操作系统里面的，而是运行在虚拟机中\n- 针对于不同的操作系统，安装不同的虚拟机即可\n","source":"_posts/Java跨平台的原理.md","raw":"---\ntitle: Java跨平台的原理\ndate: 2025-08-23 21:14:18\ncategories:\n- Java\ntags:\n---\n\n- 通过虚拟机实现的\n- Java语言不是直接运行在操作系统里面的，而是运行在虚拟机中\n- 针对于不同的操作系统，安装不同的虚拟机即可\n","slug":"Java跨平台的原理","published":1,"updated":"2025-08-23T13:18:10.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gbu000as4s7e8ew1zes","content":"<ul>\n<li>通过虚拟机实现的</li>\n<li>Java语言不是直接运行在操作系统里面的，而是运行在虚拟机中</li>\n<li>针对于不同的操作系统，安装不同的虚拟机即可</li>\n</ul>\n","excerpt":"* 通过虚拟机实现的\n * Java语言不是直接运行在操作系统里面的，而是运行在虚拟机中\n * 针对于不同的操作系统，安装不同的虚拟机即可","more":"<ul>\n<li>通过虚拟机实现的</li>\n<li>Java语言不是直接运行在操作系统里面的，而是运行在虚拟机中</li>\n<li>针对于不同的操作系统，安装不同的虚拟机即可</li>\n</ul>\n"},{"title":"Kotlin使用协程编写高效的并发程序","date":"2025-06-05T13:42:16.000Z","_content":"\n### 协程的基本用法\n\n- **优点**\n\n  协程允许我们在单线程模式下模拟多线程编程的效果\n\n- **依赖库**\n\n  ```kotlin\n  // Gradle 依赖\n  implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0\")\n  //Android扩展\n  implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.0\")\n  ```\n\n- **Global.launch函数创建协程作用域**\n\n  - Global.launch创建的是一个顶层协程，这种协程当应用程序结束时也会跟着结束\n  - 使用Thread.sleep可以让主线程堵塞一定时长\n  - delay()可以让当前协程延长指定时间后再运行，是一个非阻塞式的挂起函数，只会挂起当前协程，对其他线程或协程无影响\n  - 最大的问题就是可能代码还没运行结束应用程序就结束了，代码运行强制中断\n\n  ```kotlin\n   GlobalScope.launch {\n          println(\"codes run in coroutine scope\")\n          delay(1500)\n          println(\"codes run in coroutine scope finished\")\n      }\n      Thread.sleep(1000)\n  ```\n\n- **runBlocking函数**\n\n  - 可以保证作用域内所有代码和子线程未执行完之前一直阻塞当前线程\n  - **需要注意**runBlocking 一般只在测试环境使用，正式环境容易出现性能问题\n  - 可以在作用域中使用launch函数创建多个协程\n  - **子线程的特点**如果外层作用域协程结束子线程也会结束\n\n  ```kotlin\n  runBlocking {\n              launch {\n                  println(\"launch1\")\n                  delay(1000)\n                  println(\"launch1 finished\")\n              }\n              launch {\n                  println(\"launch2\")\n                  delay(1000)\n                  println(\"launch2 finished\")\n              }\n  ```\n\n- **suspend关键字**\n\n  - 可以将任何函数声明成挂起函数\n  - 无法提供协程作用域\n\n  ```kotlin\n  suspend fun printDot(){\n      println(\".\")\n      delay(1000)\n  }\n  ```\n\n- **coroutineScope函数**\n\n  会继承外部的协程的作用域并创建一个子协程\n\n  ```kotlin\n  suspend fun printDot()=coroutineScope{\n      launch{\n      println(\".\")\n      delay(1000)\n      }\n  }\n  ```\n\n- **coroutineScope函数和runBlocking函数的区别**\n  - coroutineScope将外部协程挂起，当作用域内代码执行完毕coroutineScope函数之后的代码才可以执行\n  - coroutineScope函数只会阻塞当前线程既不影响其他协程又不影响其他线程，因此不会造成任何性能上的问题\n  - runBlocking会造成性能上的问题，不推荐在项目中使用\n\n------\n\n### 更多的作用域构建器\n\n- **实际项目中常用写法**\n\n  ```kotlin\n  val job=Job()\n  val scope=CoroutineScope(job)\n  scope.launch{\n      //处理具体逻辑\n  }\n  job.cancel()\n  ```\n\n  这样创建所有调用CoroutineScope的launch函数所创建的协程，都会被关联在Job对象作用域下，这样只需调用一次cancel就可以将同一作用域内的所有协程全部取消\n\n- **async获取执行结果**\n\n  - async必须在协程作用域中调用\n  - 创建一个新的协程并返回一个Deferred对象，并调用await()方法获取结果\n  - 在最后一起调用await方法可以大大提高效率，会使两个async函数变为并行关系\n\n  ```kotlin\n  fun main(){\n      /*runBlocking {\n          val result=async {\n              5+5\n          }.await()\n          println(result)\n      }*/\n      runBlocking {\n          val result1=async {\n              5+5\n          }\n          val result2=async {\n              4+6\n          }\n          println(\"result is ${result1.await()+result2.await()}\")\n      }\n  }\n  \n  ```\n\n- **withContext()函数(async函数的简化版)**\n\n  - 当代码全部执行完会将最后一行结果作为返回值返回\n  - 强制要求指定一个线程参数\n  - 线程参数有三个可选值：Dispatchers.Default,Dispatchers.IO和Dispatchers.Main.Dispatchers.Default表示默认低并发策略，当执行代码属于计算密集型任务时，开启过高的并发反而影响效率。Dispatchers.IO表示较高并发的线程策略，执行代码大多数时间在阻塞和等待中。Dispatchers.Main表示不会开启子线程，但这个值只能在Android项目中使用，纯Kotlin程序中使用会出错。\n  \n  ```kotlin\n  fun main(){\n      runBlocking {\n          val result= withContext(Dispatchers.Default){\n              5+5\n          }\n          println(result)\n      }\n  }\n  ```\n  \n\n------\n\n### 使用协程简化回调方法\n\n- **发送网络请求的回调**\n\n  - suspendCoroutine函数必须在协程作用域或挂起函数中才能调用，主要作用是把当前协程立刻挂起，然后在普通线程中执行lambda表达式代码\n  - Lambda表达式会传入continuation参数，调用他的resume方法或resumeWithException方法可以使协程恢复\n\n  ```kotlin\n   suspend  fun request(adress:String):String{\n          return suspendCoroutine {\n              continuation ->\n             HttpUtil.sendRequestWithHttpURLConnection(adress,object:HttpCallbackListener{\n                 override fun onFinish(response: String) {\n                     continuation.resume(response)\n                 }\n  \n                 override fun onError(e: Exception) {\n                     continuation.resumeWithException(e)\n                 }\n             })\n          }\n      }\n  //调用\n      suspend  fun getBaiduResponse(){\n          try{\n              val response=request(\"http://www.baidu.com/\")\n              //对服务器响应数据进行处理\n          }catch(e:Exception){\n              //对异常情况处理\n          }\n      }\n  ```\n\n- **Retrofit发送请求的回调**\n\n  ```kotlin\n  suspend fun<T> Call<T>.await():T{\n      return suspendCoroutine{continuation ->\n                              enqueue(object:Callback<T>{\n                                   override fun onResponse(\n                      call: Call<T>,\n                      response: Response<T>\n                  ) {\n                    val body=response.body()\n                    if(body!=null){\n                        continuation.resume(body)\n                    } \n                   else   continuation.resumeWithException(\n                       RuntimeException(\"response body is null\")\n                   )                 \n                  }\n                  override fun onFailure(call: Call<T>, t:Throwable) {\n                    continuation.resumeWithException(t)\n                  }\n                              })\n          \n      }\n  }\n  //调用\n  suspend fun getAppData(){\n      try{\n          val appList=ServiceCreator.create<AppService>().getAppData().await()\n          //对服务器响应的数据进行处理\n      }catch(e:Exception){\n          //对异常进行处理\n      }\n  }\n  ```\n\n  \n\n------\n\n","source":"_posts/Kotlin使用协程编写高效的并发程序.md","raw":"---\ntitle: Kotlin使用协程编写高效的并发程序\ndate: 2025-06-05 21:42:16\ncategories:\n- Kotlin\ntags:\n---\n\n### 协程的基本用法\n\n- **优点**\n\n  协程允许我们在单线程模式下模拟多线程编程的效果\n\n- **依赖库**\n\n  ```kotlin\n  // Gradle 依赖\n  implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0\")\n  //Android扩展\n  implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.0\")\n  ```\n\n- **Global.launch函数创建协程作用域**\n\n  - Global.launch创建的是一个顶层协程，这种协程当应用程序结束时也会跟着结束\n  - 使用Thread.sleep可以让主线程堵塞一定时长\n  - delay()可以让当前协程延长指定时间后再运行，是一个非阻塞式的挂起函数，只会挂起当前协程，对其他线程或协程无影响\n  - 最大的问题就是可能代码还没运行结束应用程序就结束了，代码运行强制中断\n\n  ```kotlin\n   GlobalScope.launch {\n          println(\"codes run in coroutine scope\")\n          delay(1500)\n          println(\"codes run in coroutine scope finished\")\n      }\n      Thread.sleep(1000)\n  ```\n\n- **runBlocking函数**\n\n  - 可以保证作用域内所有代码和子线程未执行完之前一直阻塞当前线程\n  - **需要注意**runBlocking 一般只在测试环境使用，正式环境容易出现性能问题\n  - 可以在作用域中使用launch函数创建多个协程\n  - **子线程的特点**如果外层作用域协程结束子线程也会结束\n\n  ```kotlin\n  runBlocking {\n              launch {\n                  println(\"launch1\")\n                  delay(1000)\n                  println(\"launch1 finished\")\n              }\n              launch {\n                  println(\"launch2\")\n                  delay(1000)\n                  println(\"launch2 finished\")\n              }\n  ```\n\n- **suspend关键字**\n\n  - 可以将任何函数声明成挂起函数\n  - 无法提供协程作用域\n\n  ```kotlin\n  suspend fun printDot(){\n      println(\".\")\n      delay(1000)\n  }\n  ```\n\n- **coroutineScope函数**\n\n  会继承外部的协程的作用域并创建一个子协程\n\n  ```kotlin\n  suspend fun printDot()=coroutineScope{\n      launch{\n      println(\".\")\n      delay(1000)\n      }\n  }\n  ```\n\n- **coroutineScope函数和runBlocking函数的区别**\n  - coroutineScope将外部协程挂起，当作用域内代码执行完毕coroutineScope函数之后的代码才可以执行\n  - coroutineScope函数只会阻塞当前线程既不影响其他协程又不影响其他线程，因此不会造成任何性能上的问题\n  - runBlocking会造成性能上的问题，不推荐在项目中使用\n\n------\n\n### 更多的作用域构建器\n\n- **实际项目中常用写法**\n\n  ```kotlin\n  val job=Job()\n  val scope=CoroutineScope(job)\n  scope.launch{\n      //处理具体逻辑\n  }\n  job.cancel()\n  ```\n\n  这样创建所有调用CoroutineScope的launch函数所创建的协程，都会被关联在Job对象作用域下，这样只需调用一次cancel就可以将同一作用域内的所有协程全部取消\n\n- **async获取执行结果**\n\n  - async必须在协程作用域中调用\n  - 创建一个新的协程并返回一个Deferred对象，并调用await()方法获取结果\n  - 在最后一起调用await方法可以大大提高效率，会使两个async函数变为并行关系\n\n  ```kotlin\n  fun main(){\n      /*runBlocking {\n          val result=async {\n              5+5\n          }.await()\n          println(result)\n      }*/\n      runBlocking {\n          val result1=async {\n              5+5\n          }\n          val result2=async {\n              4+6\n          }\n          println(\"result is ${result1.await()+result2.await()}\")\n      }\n  }\n  \n  ```\n\n- **withContext()函数(async函数的简化版)**\n\n  - 当代码全部执行完会将最后一行结果作为返回值返回\n  - 强制要求指定一个线程参数\n  - 线程参数有三个可选值：Dispatchers.Default,Dispatchers.IO和Dispatchers.Main.Dispatchers.Default表示默认低并发策略，当执行代码属于计算密集型任务时，开启过高的并发反而影响效率。Dispatchers.IO表示较高并发的线程策略，执行代码大多数时间在阻塞和等待中。Dispatchers.Main表示不会开启子线程，但这个值只能在Android项目中使用，纯Kotlin程序中使用会出错。\n  \n  ```kotlin\n  fun main(){\n      runBlocking {\n          val result= withContext(Dispatchers.Default){\n              5+5\n          }\n          println(result)\n      }\n  }\n  ```\n  \n\n------\n\n### 使用协程简化回调方法\n\n- **发送网络请求的回调**\n\n  - suspendCoroutine函数必须在协程作用域或挂起函数中才能调用，主要作用是把当前协程立刻挂起，然后在普通线程中执行lambda表达式代码\n  - Lambda表达式会传入continuation参数，调用他的resume方法或resumeWithException方法可以使协程恢复\n\n  ```kotlin\n   suspend  fun request(adress:String):String{\n          return suspendCoroutine {\n              continuation ->\n             HttpUtil.sendRequestWithHttpURLConnection(adress,object:HttpCallbackListener{\n                 override fun onFinish(response: String) {\n                     continuation.resume(response)\n                 }\n  \n                 override fun onError(e: Exception) {\n                     continuation.resumeWithException(e)\n                 }\n             })\n          }\n      }\n  //调用\n      suspend  fun getBaiduResponse(){\n          try{\n              val response=request(\"http://www.baidu.com/\")\n              //对服务器响应数据进行处理\n          }catch(e:Exception){\n              //对异常情况处理\n          }\n      }\n  ```\n\n- **Retrofit发送请求的回调**\n\n  ```kotlin\n  suspend fun<T> Call<T>.await():T{\n      return suspendCoroutine{continuation ->\n                              enqueue(object:Callback<T>{\n                                   override fun onResponse(\n                      call: Call<T>,\n                      response: Response<T>\n                  ) {\n                    val body=response.body()\n                    if(body!=null){\n                        continuation.resume(body)\n                    } \n                   else   continuation.resumeWithException(\n                       RuntimeException(\"response body is null\")\n                   )                 \n                  }\n                  override fun onFailure(call: Call<T>, t:Throwable) {\n                    continuation.resumeWithException(t)\n                  }\n                              })\n          \n      }\n  }\n  //调用\n  suspend fun getAppData(){\n      try{\n          val appList=ServiceCreator.create<AppService>().getAppData().await()\n          //对服务器响应的数据进行处理\n      }catch(e:Exception){\n          //对异常进行处理\n      }\n  }\n  ```\n\n  \n\n------\n\n","slug":"Kotlin使用协程编写高效的并发程序","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gbv000ds4s7empa5p2j","content":"<h3 id=\"协程的基本用法\"><a href=\"#协程的基本用法\" class=\"headerlink\" title=\"协程的基本用法\"></a>协程的基本用法</h3><ul>\n<li><p><strong>优点</strong></p>\n<p>协程允许我们在单线程模式下模拟多线程编程的效果</p>\n</li>\n<li><p><strong>依赖库</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Gradle 依赖</span></span><br><span class=\"line\">implementation(<span class=\"string\">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//Android扩展</span></span><br><span class=\"line\">implementation(<span class=\"string\">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Global.launch函数创建协程作用域</strong></p>\n<ul>\n<li>Global.launch创建的是一个顶层协程，这种协程当应用程序结束时也会跟着结束</li>\n<li>使用Thread.sleep可以让主线程堵塞一定时长</li>\n<li>delay()可以让当前协程延长指定时间后再运行，是一个非阻塞式的挂起函数，只会挂起当前协程，对其他线程或协程无影响</li>\n<li>最大的问题就是可能代码还没运行结束应用程序就结束了，代码运行强制中断</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalScope.launch &#123;</span><br><span class=\"line\">       println(<span class=\"string\">&quot;codes run in coroutine scope&quot;</span>)</span><br><span class=\"line\">       delay(<span class=\"number\">1500</span>)</span><br><span class=\"line\">       println(<span class=\"string\">&quot;codes run in coroutine scope finished&quot;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   Thread.sleep(<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>runBlocking函数</strong></p>\n<ul>\n<li>可以保证作用域内所有代码和子线程未执行完之前一直阻塞当前线程</li>\n<li><strong>需要注意</strong>runBlocking 一般只在测试环境使用，正式环境容易出现性能问题</li>\n<li>可以在作用域中使用launch函数创建多个协程</li>\n<li><strong>子线程的特点</strong>如果外层作用域协程结束子线程也会结束</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runBlocking &#123;</span><br><span class=\"line\">            launch &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;launch1&quot;</span>)</span><br><span class=\"line\">                delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">                println(<span class=\"string\">&quot;launch1 finished&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            launch &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;launch2&quot;</span>)</span><br><span class=\"line\">                delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">                println(<span class=\"string\">&quot;launch2 finished&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>suspend关键字</strong></p>\n<ul>\n<li>可以将任何函数声明成挂起函数</li>\n<li>无法提供协程作用域</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printDot</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>coroutineScope函数</strong></p>\n<p>会继承外部的协程的作用域并创建一个子协程</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printDot</span><span class=\"params\">()</span></span>=coroutineScope&#123;</span><br><span class=\"line\">    launch&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>coroutineScope函数和runBlocking函数的区别</strong></p>\n<ul>\n<li>coroutineScope将外部协程挂起，当作用域内代码执行完毕coroutineScope函数之后的代码才可以执行</li>\n<li>coroutineScope函数只会阻塞当前线程既不影响其他协程又不影响其他线程，因此不会造成任何性能上的问题</li>\n<li>runBlocking会造成性能上的问题，不推荐在项目中使用</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"更多的作用域构建器\"><a href=\"#更多的作用域构建器\" class=\"headerlink\" title=\"更多的作用域构建器\"></a>更多的作用域构建器</h3><ul>\n<li><p><strong>实际项目中常用写法</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> job=Job()</span><br><span class=\"line\"><span class=\"keyword\">val</span> scope=CoroutineScope(job)</span><br><span class=\"line\">scope.launch&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理具体逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">job.cancel()</span><br></pre></td></tr></table></figure>\n\n<p>这样创建所有调用CoroutineScope的launch函数所创建的协程，都会被关联在Job对象作用域下，这样只需调用一次cancel就可以将同一作用域内的所有协程全部取消</p>\n</li>\n<li><p><strong>async获取执行结果</strong></p>\n<ul>\n<li>async必须在协程作用域中调用</li>\n<li>创建一个新的协程并返回一个Deferred对象，并调用await()方法获取结果</li>\n<li>在最后一起调用await方法可以大大提高效率，会使两个async函数变为并行关系</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*runBlocking &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        val result=async &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            5+5</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;.await()</span></span><br><span class=\"line\"><span class=\"comment\">        println(result)</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\">    runBlocking &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result1=async &#123;</span><br><span class=\"line\">            <span class=\"number\">5</span>+<span class=\"number\">5</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result2=async &#123;</span><br><span class=\"line\">            <span class=\"number\">4</span>+<span class=\"number\">6</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;result is <span class=\"subst\">$&#123;result1.await()+result2.await()&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>withContext()函数(async函数的简化版)</strong></p>\n<ul>\n<li>当代码全部执行完会将最后一行结果作为返回值返回</li>\n<li>强制要求指定一个线程参数</li>\n<li>线程参数有三个可选值：Dispatchers.Default,Dispatchers.IO和Dispatchers.Main.Dispatchers.Default表示默认低并发策略，当执行代码属于计算密集型任务时，开启过高的并发反而影响效率。Dispatchers.IO表示较高并发的线程策略，执行代码大多数时间在阻塞和等待中。Dispatchers.Main表示不会开启子线程，但这个值只能在Android项目中使用，纯Kotlin程序中使用会出错。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    runBlocking &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result= withContext(Dispatchers.Default)&#123;</span><br><span class=\"line\">            <span class=\"number\">5</span>+<span class=\"number\">5</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        println(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"使用协程简化回调方法\"><a href=\"#使用协程简化回调方法\" class=\"headerlink\" title=\"使用协程简化回调方法\"></a>使用协程简化回调方法</h3><ul>\n<li><p><strong>发送网络请求的回调</strong></p>\n<ul>\n<li>suspendCoroutine函数必须在协程作用域或挂起函数中才能调用，主要作用是把当前协程立刻挂起，然后在普通线程中执行lambda表达式代码</li>\n<li>Lambda表达式会传入continuation参数，调用他的resume方法或resumeWithException方法可以使协程恢复</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">suspend</span>  <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">request</span><span class=\"params\">(adress:<span class=\"type\">String</span>)</span></span>:String&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> suspendCoroutine &#123;</span><br><span class=\"line\">            continuation -&gt;</span><br><span class=\"line\">           HttpUtil.sendRequestWithHttpURLConnection(adress,<span class=\"keyword\">object</span>:HttpCallbackListener&#123;</span><br><span class=\"line\">               <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFinish</span><span class=\"params\">(response: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">                   continuation.resume(response)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onError</span><span class=\"params\">(e: <span class=\"type\">Exception</span>)</span></span> &#123;</span><br><span class=\"line\">                   continuation.resumeWithException(e)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">    <span class=\"keyword\">suspend</span>  <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getBaiduResponse</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> response=request(<span class=\"string\">&quot;http://www.baidu.com/&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\">//对服务器响应数据进行处理</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(e:Exception)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//对异常情况处理</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Retrofit发送请求的回调</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span><span class=\"type\">&lt;T&gt;</span> Call<span class=\"type\">&lt;T&gt;</span>.<span class=\"title\">await</span><span class=\"params\">()</span></span>:T&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> suspendCoroutine&#123;continuation -&gt;</span><br><span class=\"line\">                            enqueue(<span class=\"keyword\">object</span>:Callback&lt;T&gt;&#123;</span><br><span class=\"line\">                                 <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResponse</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    call: <span class=\"type\">Call</span>&lt;<span class=\"type\">T</span>&gt;,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    response: <span class=\"type\">Response</span>&lt;<span class=\"type\">T</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                )</span></span> &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">val</span> body=response.body()</span><br><span class=\"line\">                  <span class=\"keyword\">if</span>(body!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                      continuation.resume(body)</span><br><span class=\"line\">                  &#125; </span><br><span class=\"line\">                 <span class=\"keyword\">else</span>   continuation.resumeWithException(</span><br><span class=\"line\">                     RuntimeException(<span class=\"string\">&quot;response body is null&quot;</span>)</span><br><span class=\"line\">                 )                 </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFailure</span><span class=\"params\">(call: <span class=\"type\">Call</span>&lt;<span class=\"type\">T</span>&gt;, t:<span class=\"type\">Throwable</span>)</span></span> &#123;</span><br><span class=\"line\">                  continuation.resumeWithException(t)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                            &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getAppData</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> appList=ServiceCreator.create&lt;AppService&gt;().getAppData().await()</span><br><span class=\"line\">        <span class=\"comment\">//对服务器响应的数据进行处理</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e:Exception)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//对异常进行处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n","excerpt":"协程的基本用法\n * 优点\n   \n   协程允许我们在单线程模式下模拟多线程编程的效果\n   \n   \n * 依赖库\n   \n   1\n   2\n   3\n   4\n   \n   \n   // Gradle 依赖\n   implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0\")\n   //Android扩展\n   implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.0\")\n   \n   \n   \n * Global.launch","more":"<h3 id=\"协程的基本用法\"><a href=\"#协程的基本用法\" class=\"headerlink\" title=\"协程的基本用法\"></a>协程的基本用法</h3><ul>\n<li><p><strong>优点</strong></p>\n<p>协程允许我们在单线程模式下模拟多线程编程的效果</p>\n</li>\n<li><p><strong>依赖库</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Gradle 依赖</span></span><br><span class=\"line\">implementation(<span class=\"string\">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//Android扩展</span></span><br><span class=\"line\">implementation(<span class=\"string\">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Global.launch函数创建协程作用域</strong></p>\n<ul>\n<li>Global.launch创建的是一个顶层协程，这种协程当应用程序结束时也会跟着结束</li>\n<li>使用Thread.sleep可以让主线程堵塞一定时长</li>\n<li>delay()可以让当前协程延长指定时间后再运行，是一个非阻塞式的挂起函数，只会挂起当前协程，对其他线程或协程无影响</li>\n<li>最大的问题就是可能代码还没运行结束应用程序就结束了，代码运行强制中断</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalScope.launch &#123;</span><br><span class=\"line\">       println(<span class=\"string\">&quot;codes run in coroutine scope&quot;</span>)</span><br><span class=\"line\">       delay(<span class=\"number\">1500</span>)</span><br><span class=\"line\">       println(<span class=\"string\">&quot;codes run in coroutine scope finished&quot;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   Thread.sleep(<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>runBlocking函数</strong></p>\n<ul>\n<li>可以保证作用域内所有代码和子线程未执行完之前一直阻塞当前线程</li>\n<li><strong>需要注意</strong>runBlocking 一般只在测试环境使用，正式环境容易出现性能问题</li>\n<li>可以在作用域中使用launch函数创建多个协程</li>\n<li><strong>子线程的特点</strong>如果外层作用域协程结束子线程也会结束</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runBlocking &#123;</span><br><span class=\"line\">            launch &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;launch1&quot;</span>)</span><br><span class=\"line\">                delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">                println(<span class=\"string\">&quot;launch1 finished&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            launch &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;launch2&quot;</span>)</span><br><span class=\"line\">                delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">                println(<span class=\"string\">&quot;launch2 finished&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>suspend关键字</strong></p>\n<ul>\n<li>可以将任何函数声明成挂起函数</li>\n<li>无法提供协程作用域</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printDot</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>coroutineScope函数</strong></p>\n<p>会继承外部的协程的作用域并创建一个子协程</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printDot</span><span class=\"params\">()</span></span>=coroutineScope&#123;</span><br><span class=\"line\">    launch&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>coroutineScope函数和runBlocking函数的区别</strong></p>\n<ul>\n<li>coroutineScope将外部协程挂起，当作用域内代码执行完毕coroutineScope函数之后的代码才可以执行</li>\n<li>coroutineScope函数只会阻塞当前线程既不影响其他协程又不影响其他线程，因此不会造成任何性能上的问题</li>\n<li>runBlocking会造成性能上的问题，不推荐在项目中使用</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"更多的作用域构建器\"><a href=\"#更多的作用域构建器\" class=\"headerlink\" title=\"更多的作用域构建器\"></a>更多的作用域构建器</h3><ul>\n<li><p><strong>实际项目中常用写法</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> job=Job()</span><br><span class=\"line\"><span class=\"keyword\">val</span> scope=CoroutineScope(job)</span><br><span class=\"line\">scope.launch&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理具体逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">job.cancel()</span><br></pre></td></tr></table></figure>\n\n<p>这样创建所有调用CoroutineScope的launch函数所创建的协程，都会被关联在Job对象作用域下，这样只需调用一次cancel就可以将同一作用域内的所有协程全部取消</p>\n</li>\n<li><p><strong>async获取执行结果</strong></p>\n<ul>\n<li>async必须在协程作用域中调用</li>\n<li>创建一个新的协程并返回一个Deferred对象，并调用await()方法获取结果</li>\n<li>在最后一起调用await方法可以大大提高效率，会使两个async函数变为并行关系</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*runBlocking &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        val result=async &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            5+5</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;.await()</span></span><br><span class=\"line\"><span class=\"comment\">        println(result)</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\">    runBlocking &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result1=async &#123;</span><br><span class=\"line\">            <span class=\"number\">5</span>+<span class=\"number\">5</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result2=async &#123;</span><br><span class=\"line\">            <span class=\"number\">4</span>+<span class=\"number\">6</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;result is <span class=\"subst\">$&#123;result1.await()+result2.await()&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>withContext()函数(async函数的简化版)</strong></p>\n<ul>\n<li>当代码全部执行完会将最后一行结果作为返回值返回</li>\n<li>强制要求指定一个线程参数</li>\n<li>线程参数有三个可选值：Dispatchers.Default,Dispatchers.IO和Dispatchers.Main.Dispatchers.Default表示默认低并发策略，当执行代码属于计算密集型任务时，开启过高的并发反而影响效率。Dispatchers.IO表示较高并发的线程策略，执行代码大多数时间在阻塞和等待中。Dispatchers.Main表示不会开启子线程，但这个值只能在Android项目中使用，纯Kotlin程序中使用会出错。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    runBlocking &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result= withContext(Dispatchers.Default)&#123;</span><br><span class=\"line\">            <span class=\"number\">5</span>+<span class=\"number\">5</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        println(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"使用协程简化回调方法\"><a href=\"#使用协程简化回调方法\" class=\"headerlink\" title=\"使用协程简化回调方法\"></a>使用协程简化回调方法</h3><ul>\n<li><p><strong>发送网络请求的回调</strong></p>\n<ul>\n<li>suspendCoroutine函数必须在协程作用域或挂起函数中才能调用，主要作用是把当前协程立刻挂起，然后在普通线程中执行lambda表达式代码</li>\n<li>Lambda表达式会传入continuation参数，调用他的resume方法或resumeWithException方法可以使协程恢复</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">suspend</span>  <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">request</span><span class=\"params\">(adress:<span class=\"type\">String</span>)</span></span>:String&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> suspendCoroutine &#123;</span><br><span class=\"line\">            continuation -&gt;</span><br><span class=\"line\">           HttpUtil.sendRequestWithHttpURLConnection(adress,<span class=\"keyword\">object</span>:HttpCallbackListener&#123;</span><br><span class=\"line\">               <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFinish</span><span class=\"params\">(response: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">                   continuation.resume(response)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onError</span><span class=\"params\">(e: <span class=\"type\">Exception</span>)</span></span> &#123;</span><br><span class=\"line\">                   continuation.resumeWithException(e)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">    <span class=\"keyword\">suspend</span>  <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getBaiduResponse</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> response=request(<span class=\"string\">&quot;http://www.baidu.com/&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\">//对服务器响应数据进行处理</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(e:Exception)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//对异常情况处理</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Retrofit发送请求的回调</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span><span class=\"type\">&lt;T&gt;</span> Call<span class=\"type\">&lt;T&gt;</span>.<span class=\"title\">await</span><span class=\"params\">()</span></span>:T&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> suspendCoroutine&#123;continuation -&gt;</span><br><span class=\"line\">                            enqueue(<span class=\"keyword\">object</span>:Callback&lt;T&gt;&#123;</span><br><span class=\"line\">                                 <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResponse</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    call: <span class=\"type\">Call</span>&lt;<span class=\"type\">T</span>&gt;,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                    response: <span class=\"type\">Response</span>&lt;<span class=\"type\">T</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                )</span></span> &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">val</span> body=response.body()</span><br><span class=\"line\">                  <span class=\"keyword\">if</span>(body!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                      continuation.resume(body)</span><br><span class=\"line\">                  &#125; </span><br><span class=\"line\">                 <span class=\"keyword\">else</span>   continuation.resumeWithException(</span><br><span class=\"line\">                     RuntimeException(<span class=\"string\">&quot;response body is null&quot;</span>)</span><br><span class=\"line\">                 )                 </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFailure</span><span class=\"params\">(call: <span class=\"type\">Call</span>&lt;<span class=\"type\">T</span>&gt;, t:<span class=\"type\">Throwable</span>)</span></span> &#123;</span><br><span class=\"line\">                  continuation.resumeWithException(t)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                            &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getAppData</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> appList=ServiceCreator.create&lt;AppService&gt;().getAppData().await()</span><br><span class=\"line\">        <span class=\"comment\">//对服务器响应的数据进行处理</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e:Exception)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//对异常进行处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n"},{"title":"Kotlin内置函数","date":"2025-05-11T15:42:00.000Z","_content":"\n### 内置函数\n\n- **use**\n\n  可以保证Lambda表达式中的所有代码执行完毕后自动将外层的流关闭，这样就不用再编写finally语句手动关闭了\n\n- **forEachLine**\n\n  它会将读取的每行内容回调到Lambda表达式，在lambda中完成拼接逻辑\n\n- **arrayOf**\n\n  用于便捷创建数组\n\n- **by lazy**\n\n  懒加载技术，可以先不执行，第一次调用时再执行其中的逻辑\n\n","source":"_posts/Kotlin内置函数.md","raw":"---\ntitle: Kotlin内置函数\ndate: 2025-05-11 23:42:00\ncategories:\n- Kotlin\ntags:\n---\n\n### 内置函数\n\n- **use**\n\n  可以保证Lambda表达式中的所有代码执行完毕后自动将外层的流关闭，这样就不用再编写finally语句手动关闭了\n\n- **forEachLine**\n\n  它会将读取的每行内容回调到Lambda表达式，在lambda中完成拼接逻辑\n\n- **arrayOf**\n\n  用于便捷创建数组\n\n- **by lazy**\n\n  懒加载技术，可以先不执行，第一次调用时再执行其中的逻辑\n\n","slug":"Kotlin内置函数","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gbw000es4s7byot8rpb","content":"<h3 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h3><ul>\n<li><p><strong>use</strong></p>\n<p>可以保证Lambda表达式中的所有代码执行完毕后自动将外层的流关闭，这样就不用再编写finally语句手动关闭了</p>\n</li>\n<li><p><strong>forEachLine</strong></p>\n<p>它会将读取的每行内容回调到Lambda表达式，在lambda中完成拼接逻辑</p>\n</li>\n<li><p><strong>arrayOf</strong></p>\n<p>用于便捷创建数组</p>\n</li>\n<li><p><strong>by lazy</strong></p>\n<p>懒加载技术，可以先不执行，第一次调用时再执行其中的逻辑</p>\n</li>\n</ul>\n","excerpt":"内置函数\n * use\n   \n   可以保证Lambda表达式中的所有代码执行完毕后自动将外层的流关闭，这样就不用再编写finally语句手动关闭了\n   \n   \n * forEachLine\n   \n   它会将读取的每行内容回调到Lambda表达式，在lambda中完成拼接逻辑\n   \n   \n * arrayOf\n   \n   用于便捷创建数组\n   \n   \n * by lazy\n   \n   懒加载技术，可以先不执行，第一次调用时再执行其中的逻辑","more":"<h3 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h3><ul>\n<li><p><strong>use</strong></p>\n<p>可以保证Lambda表达式中的所有代码执行完毕后自动将外层的流关闭，这样就不用再编写finally语句手动关闭了</p>\n</li>\n<li><p><strong>forEachLine</strong></p>\n<p>它会将读取的每行内容回调到Lambda表达式，在lambda中完成拼接逻辑</p>\n</li>\n<li><p><strong>arrayOf</strong></p>\n<p>用于便捷创建数组</p>\n</li>\n<li><p><strong>by lazy</strong></p>\n<p>懒加载技术，可以先不执行，第一次调用时再执行其中的逻辑</p>\n</li>\n</ul>\n"},{"title":"Kotlin定义静态方法","date":"2025-04-20T14:51:42.000Z","_content":"\n# 类静态方法\n\nkotlin特有，有与静态方法同样的语法特点但并非静态方法\n\n静态方法特点是可以直接使用(**类.方法**)的形式调用\n\n### 单例类\n\n```kotlin\nobject Util{\n    fun doAction(){\n        println(\"do action\")\n    }\n}\n```\n\n单例类中所以方法皆可以视为静态方法\n\n如果只想某一方法变为静态方法可以使用**companion object{}**\n\n```kotlin\nclass Util{\n    fun doAction1(){\n        println(\"do action1\")\n    }\n    companion object{\n     fun doAction2(){\n        println(\"do action2\")\n    }\n    }\n}\n```\n\n------\n\n# 静态方法\n\n### 注解法（不常用）\n\n使用@JvmStatic注解(只能加在单例类或companion object{}中的方法上)\n\n```kotlin\nclass Util{\n    fun doAction1(){\n        println(\"do action1\")\n    }\n    companion object{\n        @JvmStatic\n     fun doAction2(){\n        println(\"do action2\")\n    }\n    }\n}\n```\n\n### 顶层方法\n\n1.定义：Kotlin编译器会将所有顶层方法编译成静态方法\n\n2.建立一个kotlin文件：\n\n任意包名->New->Kotlin File/Class在弹窗中选择File类型，该文件中的方法全都是顶层方法\n\n------\n\n","source":"_posts/Kotlin定义静态方法.md","raw":"---\ntitle: Kotlin定义静态方法\ndate: 2025-04-20 22:51:42\ncategories:\n- Kotlin\ntags:\n---\n\n# 类静态方法\n\nkotlin特有，有与静态方法同样的语法特点但并非静态方法\n\n静态方法特点是可以直接使用(**类.方法**)的形式调用\n\n### 单例类\n\n```kotlin\nobject Util{\n    fun doAction(){\n        println(\"do action\")\n    }\n}\n```\n\n单例类中所以方法皆可以视为静态方法\n\n如果只想某一方法变为静态方法可以使用**companion object{}**\n\n```kotlin\nclass Util{\n    fun doAction1(){\n        println(\"do action1\")\n    }\n    companion object{\n     fun doAction2(){\n        println(\"do action2\")\n    }\n    }\n}\n```\n\n------\n\n# 静态方法\n\n### 注解法（不常用）\n\n使用@JvmStatic注解(只能加在单例类或companion object{}中的方法上)\n\n```kotlin\nclass Util{\n    fun doAction1(){\n        println(\"do action1\")\n    }\n    companion object{\n        @JvmStatic\n     fun doAction2(){\n        println(\"do action2\")\n    }\n    }\n}\n```\n\n### 顶层方法\n\n1.定义：Kotlin编译器会将所有顶层方法编译成静态方法\n\n2.建立一个kotlin文件：\n\n任意包名->New->Kotlin File/Class在弹窗中选择File类型，该文件中的方法全都是顶层方法\n\n------\n\n","slug":"Kotlin定义静态方法","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gbx000hs4s7cnm27yef","content":"<h1 id=\"类静态方法\"><a href=\"#类静态方法\" class=\"headerlink\" title=\"类静态方法\"></a>类静态方法</h1><p>kotlin特有，有与静态方法同样的语法特点但并非静态方法</p>\n<p>静态方法特点是可以直接使用(<strong>类.方法</strong>)的形式调用</p>\n<h3 id=\"单例类\"><a href=\"#单例类\" class=\"headerlink\" title=\"单例类\"></a>单例类</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> Util&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doAction</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do action&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单例类中所以方法皆可以视为静态方法</p>\n<p>如果只想某一方法变为静态方法可以使用<strong>companion object{}</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Util</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doAction1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do action1&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doAction2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do action2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h1><h3 id=\"注解法（不常用）\"><a href=\"#注解法（不常用）\" class=\"headerlink\" title=\"注解法（不常用）\"></a>注解法（不常用）</h3><p>使用@JvmStatic注解(只能加在单例类或companion object{}中的方法上)</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Util</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doAction1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do action1&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doAction2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do action2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"顶层方法\"><a href=\"#顶层方法\" class=\"headerlink\" title=\"顶层方法\"></a>顶层方法</h3><p>1.定义：Kotlin编译器会将所有顶层方法编译成静态方法</p>\n<p>2.建立一个kotlin文件：</p>\n<p>任意包名-&gt;New-&gt;Kotlin File&#x2F;Class在弹窗中选择File类型，该文件中的方法全都是顶层方法</p>\n<hr>\n","excerpt":"类静态方法\nkotlin特有，有与静态方法同样的语法特点但并非静态方法\n\n静态方法特点是可以直接使用(类.方法)的形式调用\n\n单例类\n1\n2\n3\n4\n5\n\n\nobject Util{\n    fun doAction(){\n        println(\"do action\")\n    }\n}\n\n\n单例类中所以方法皆可以视为静态方法\n\n如果只想某一方法变为静态方法可以使用companion object{}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nclass Util{\n    fun doAction1(){\n        println(\"do action1\")\n    }\n","more":"<h1 id=\"类静态方法\"><a href=\"#类静态方法\" class=\"headerlink\" title=\"类静态方法\"></a>类静态方法</h1><p>kotlin特有，有与静态方法同样的语法特点但并非静态方法</p>\n<p>静态方法特点是可以直接使用(<strong>类.方法</strong>)的形式调用</p>\n<h3 id=\"单例类\"><a href=\"#单例类\" class=\"headerlink\" title=\"单例类\"></a>单例类</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> Util&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doAction</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do action&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单例类中所以方法皆可以视为静态方法</p>\n<p>如果只想某一方法变为静态方法可以使用<strong>companion object{}</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Util</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doAction1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do action1&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doAction2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do action2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h1><h3 id=\"注解法（不常用）\"><a href=\"#注解法（不常用）\" class=\"headerlink\" title=\"注解法（不常用）\"></a>注解法（不常用）</h3><p>使用@JvmStatic注解(只能加在单例类或companion object{}中的方法上)</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Util</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doAction1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do action1&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doAction2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do action2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"顶层方法\"><a href=\"#顶层方法\" class=\"headerlink\" title=\"顶层方法\"></a>顶层方法</h3><p>1.定义：Kotlin编译器会将所有顶层方法编译成静态方法</p>\n<p>2.建立一个kotlin文件：</p>\n<p>任意包名-&gt;New-&gt;Kotlin File&#x2F;Class在弹窗中选择File类型，该文件中的方法全都是顶层方法</p>\n<hr>\n"},{"title":"Kotlin扩展函数和运算符重载","date":"2025-05-01T08:13:13.000Z","_content":"\n# 扩展函数\n\n### 语法结构\n\n```kotlin\nfun ClassName.methodName(param1:Int,param2:Int):Int{\nreturn 0\n}\n```\n\n### 实例\n\n```kotlin\n//构建扩展函数\nfun String.lettersCount():Int{\n    var count=0\n    for(char in this){\n        if(char.isLetter()){\n            count++\n        }\n    }\n    return count\n}\n```\n\n```kotlin\n//调用\nfun main(){\n    val cnt=\"ABC123xyz!@#\".lettersCount()\n    println(cnt)\n}\n```\n\n------\n\n# 运算符重载\n\n### 语法结构(可以实现同一个运算符多重重载)\n\n```kotlin\n//重载\nclass obj{\n    operator fun plus(obj:Obj):Obj{\n        //处理相加的逻辑\n    }\n}\n//调用\nval obj1=Obj()\nval obj2=Obj()\nval obj3=obj1+obj2\n```\n\n### 实例\n\n1.Money实例\n\n```kotlin\nclass Money(val value: Int) {\n    //对象和对象相加\n    operator fun plus(money:Money):Money{\n        val sum=value+money.value\n        return Money(sum)\n    }\n    //对象和数字相加\n    operator fun plus(newValue: Int):Money{\n        val sum=value+newValue\n        return Money(sum)\n    }\n}\nfun main(){\n    val m1=Money(5)\n    val m2=Money(10)\n    val m3=m1+m2\n    val m4=m3+20\nprintln(m4.value)\n}\n```\n\n2.**a in b**实例\n\n```kotlin\n//判断hello中有没有he\nif(\"he\" in \"hello\"){\n    \n}\n```\n\n3.扩展函数和运算符重载综合使用实例\n\n```kotlin\n//重载\noperator fun String.times(n:Int):String{\n    val builder=StringBuilder()\n  repeat(n){\n      builder.append(this)\n  }\n    return builder.toString()\n}\n//重载简化\noperator fun String.times(n:Int)= repeat(n)\n//调用\nfun main(){\n    val str=\"abc\"*3\n    println(str)\n}\n```\n\n------\n\n","source":"_posts/Kotlin扩展函数和运算符重载.md","raw":"---\ntitle: Kotlin扩展函数和运算符重载\ndate: 2025-05-01 16:13:13\ncategories:\n- Kotlin\ntags:\n---\n\n# 扩展函数\n\n### 语法结构\n\n```kotlin\nfun ClassName.methodName(param1:Int,param2:Int):Int{\nreturn 0\n}\n```\n\n### 实例\n\n```kotlin\n//构建扩展函数\nfun String.lettersCount():Int{\n    var count=0\n    for(char in this){\n        if(char.isLetter()){\n            count++\n        }\n    }\n    return count\n}\n```\n\n```kotlin\n//调用\nfun main(){\n    val cnt=\"ABC123xyz!@#\".lettersCount()\n    println(cnt)\n}\n```\n\n------\n\n# 运算符重载\n\n### 语法结构(可以实现同一个运算符多重重载)\n\n```kotlin\n//重载\nclass obj{\n    operator fun plus(obj:Obj):Obj{\n        //处理相加的逻辑\n    }\n}\n//调用\nval obj1=Obj()\nval obj2=Obj()\nval obj3=obj1+obj2\n```\n\n### 实例\n\n1.Money实例\n\n```kotlin\nclass Money(val value: Int) {\n    //对象和对象相加\n    operator fun plus(money:Money):Money{\n        val sum=value+money.value\n        return Money(sum)\n    }\n    //对象和数字相加\n    operator fun plus(newValue: Int):Money{\n        val sum=value+newValue\n        return Money(sum)\n    }\n}\nfun main(){\n    val m1=Money(5)\n    val m2=Money(10)\n    val m3=m1+m2\n    val m4=m3+20\nprintln(m4.value)\n}\n```\n\n2.**a in b**实例\n\n```kotlin\n//判断hello中有没有he\nif(\"he\" in \"hello\"){\n    \n}\n```\n\n3.扩展函数和运算符重载综合使用实例\n\n```kotlin\n//重载\noperator fun String.times(n:Int):String{\n    val builder=StringBuilder()\n  repeat(n){\n      builder.append(this)\n  }\n    return builder.toString()\n}\n//重载简化\noperator fun String.times(n:Int)= repeat(n)\n//调用\nfun main(){\n    val str=\"abc\"*3\n    println(str)\n}\n```\n\n------\n\n","slug":"Kotlin扩展函数和运算符重载","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gby000js4s77ddrdpdy","content":"<h1 id=\"扩展函数\"><a href=\"#扩展函数\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h1><h3 id=\"语法结构\"><a href=\"#语法结构\" class=\"headerlink\" title=\"语法结构\"></a>语法结构</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> ClassName.<span class=\"title\">methodName</span><span class=\"params\">(param1:<span class=\"type\">Int</span>,param2:<span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构建扩展函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> String.<span class=\"title\">lettersCount</span><span class=\"params\">()</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(char <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(char.isLetter())&#123;</span><br><span class=\"line\">            count++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> cnt=<span class=\"string\">&quot;ABC123xyz!@#&quot;</span>.lettersCount()</span><br><span class=\"line\">    println(cnt)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"运算符重载\"><a href=\"#运算符重载\" class=\"headerlink\" title=\"运算符重载\"></a>运算符重载</h1><h3 id=\"语法结构-可以实现同一个运算符多重重载\"><a href=\"#语法结构-可以实现同一个运算符多重重载\" class=\"headerlink\" title=\"语法结构(可以实现同一个运算符多重重载)\"></a>语法结构(可以实现同一个运算符多重重载)</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重载</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">obj</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">plus</span><span class=\"params\">(obj:<span class=\"type\">Obj</span>)</span></span>:Obj&#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理相加的逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> obj1=Obj()</span><br><span class=\"line\"><span class=\"keyword\">val</span> obj2=Obj()</span><br><span class=\"line\"><span class=\"keyword\">val</span> obj3=obj1+obj2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>1.Money实例</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Money</span>(<span class=\"keyword\">val</span> value: <span class=\"built_in\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//对象和对象相加</span></span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">plus</span><span class=\"params\">(money:<span class=\"type\">Money</span>)</span></span>:Money&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> sum=value+money.value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Money(sum)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//对象和数字相加</span></span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">plus</span><span class=\"params\">(newValue: <span class=\"type\">Int</span>)</span></span>:Money&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> sum=value+newValue</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Money(sum)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> m1=Money(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> m2=Money(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> m3=m1+m2</span><br><span class=\"line\">    <span class=\"keyword\">val</span> m4=m3+<span class=\"number\">20</span></span><br><span class=\"line\">println(m4.value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.<strong>a in b</strong>实例</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断hello中有没有he</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">&quot;he&quot;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;hello&quot;</span>)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.扩展函数和运算符重载综合使用实例</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重载</span></span><br><span class=\"line\"><span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> String.<span class=\"title\">times</span><span class=\"params\">(n:<span class=\"type\">Int</span>)</span></span>:String&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> builder=StringBuilder()</span><br><span class=\"line\">  repeat(n)&#123;</span><br><span class=\"line\">      builder.append(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> builder.toString()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//重载简化</span></span><br><span class=\"line\"><span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> String.<span class=\"title\">times</span><span class=\"params\">(n:<span class=\"type\">Int</span>)</span></span>= repeat(n)</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> str=<span class=\"string\">&quot;abc&quot;</span>*<span class=\"number\">3</span></span><br><span class=\"line\">    println(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"扩展函数\n语法结构\n1\n2\n3\n\n\nfun ClassName.methodName(param1:Int,param2:Int):Int{\nreturn 0\n}\n\n\n实例\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n//构建扩展函数\nfun String.lettersCount():Int{\n    var count=0\n    for(char in this){\n        if(char.isLetter()){\n            count++\n        }\n    }\n    return count\n}\n\n\n1\n2\n3\n4\n5\n\n\n//调用\nfun main","more":"<h1 id=\"扩展函数\"><a href=\"#扩展函数\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h1><h3 id=\"语法结构\"><a href=\"#语法结构\" class=\"headerlink\" title=\"语法结构\"></a>语法结构</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> ClassName.<span class=\"title\">methodName</span><span class=\"params\">(param1:<span class=\"type\">Int</span>,param2:<span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构建扩展函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> String.<span class=\"title\">lettersCount</span><span class=\"params\">()</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(char <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(char.isLetter())&#123;</span><br><span class=\"line\">            count++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> cnt=<span class=\"string\">&quot;ABC123xyz!@#&quot;</span>.lettersCount()</span><br><span class=\"line\">    println(cnt)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"运算符重载\"><a href=\"#运算符重载\" class=\"headerlink\" title=\"运算符重载\"></a>运算符重载</h1><h3 id=\"语法结构-可以实现同一个运算符多重重载\"><a href=\"#语法结构-可以实现同一个运算符多重重载\" class=\"headerlink\" title=\"语法结构(可以实现同一个运算符多重重载)\"></a>语法结构(可以实现同一个运算符多重重载)</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重载</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">obj</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">plus</span><span class=\"params\">(obj:<span class=\"type\">Obj</span>)</span></span>:Obj&#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理相加的逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> obj1=Obj()</span><br><span class=\"line\"><span class=\"keyword\">val</span> obj2=Obj()</span><br><span class=\"line\"><span class=\"keyword\">val</span> obj3=obj1+obj2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>1.Money实例</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Money</span>(<span class=\"keyword\">val</span> value: <span class=\"built_in\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//对象和对象相加</span></span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">plus</span><span class=\"params\">(money:<span class=\"type\">Money</span>)</span></span>:Money&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> sum=value+money.value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Money(sum)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//对象和数字相加</span></span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">plus</span><span class=\"params\">(newValue: <span class=\"type\">Int</span>)</span></span>:Money&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> sum=value+newValue</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Money(sum)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> m1=Money(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> m2=Money(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> m3=m1+m2</span><br><span class=\"line\">    <span class=\"keyword\">val</span> m4=m3+<span class=\"number\">20</span></span><br><span class=\"line\">println(m4.value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.<strong>a in b</strong>实例</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断hello中有没有he</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">&quot;he&quot;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;hello&quot;</span>)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.扩展函数和运算符重载综合使用实例</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重载</span></span><br><span class=\"line\"><span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> String.<span class=\"title\">times</span><span class=\"params\">(n:<span class=\"type\">Int</span>)</span></span>:String&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> builder=StringBuilder()</span><br><span class=\"line\">  repeat(n)&#123;</span><br><span class=\"line\">      builder.append(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> builder.toString()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//重载简化</span></span><br><span class=\"line\"><span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> String.<span class=\"title\">times</span><span class=\"params\">(n:<span class=\"type\">Int</span>)</span></span>= repeat(n)</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> str=<span class=\"string\">&quot;abc&quot;</span>*<span class=\"number\">3</span></span><br><span class=\"line\">    println(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"Kotlin延迟初始化和密封类","date":"2025-04-25T13:41:59.000Z","_content":"\n# 变量延迟初始化\n\n### 关键字\n\n**lateinit**\n\n### 作用\n\n如果一个变量是全局变量且初始化在后面的过程中进行时该变量不得不赋值为null，但如果这样进行后面调用其任何方法都需要进行判空处理相对麻烦，所以这里可以使用延迟初始化，就不需要将其赋值为null了\n\n### 注意\n\n使用延迟初始化时一定要保证后续某处对其完成了初始化\n\n还可以通过代码进行判断是否完成了初始化\n\n```kotlin\n//::adapter.isInitialized表示已经初始化\nif(!::adapter.isInitialized){\n    adapter=MsgAdapter(msgList)\n}\n```\n\n------\n\n# 密封类\n\n### 关键字\n\n**sealed class**\n\n### 作用\n\n解决因语法原因导致的多余分支问题\n\n### 实例\n\n```kotlin\nsealed class Result\nclass Success(val msg:String):Result()\nclass Failure(val error:Exception):Result()\n```\n\n```kotlin\nfun getResultMsg(result:Result)=when(result){\n    is Success -> result.msg\n    is Failure -> \"Error is ${result.error.message}\"\n}\n```\n\n### 注意\n\n密封类及其子类只能定义在同一文件的顶层位置，不能嵌套在其他类中\n\n------\n\n","source":"_posts/Kotlin延迟初始化和密封类.md","raw":"---\ntitle: Kotlin延迟初始化和密封类\ndate: 2025-04-25 21:41:59\ncategories:\n- Kotlin\ntags:\n---\n\n# 变量延迟初始化\n\n### 关键字\n\n**lateinit**\n\n### 作用\n\n如果一个变量是全局变量且初始化在后面的过程中进行时该变量不得不赋值为null，但如果这样进行后面调用其任何方法都需要进行判空处理相对麻烦，所以这里可以使用延迟初始化，就不需要将其赋值为null了\n\n### 注意\n\n使用延迟初始化时一定要保证后续某处对其完成了初始化\n\n还可以通过代码进行判断是否完成了初始化\n\n```kotlin\n//::adapter.isInitialized表示已经初始化\nif(!::adapter.isInitialized){\n    adapter=MsgAdapter(msgList)\n}\n```\n\n------\n\n# 密封类\n\n### 关键字\n\n**sealed class**\n\n### 作用\n\n解决因语法原因导致的多余分支问题\n\n### 实例\n\n```kotlin\nsealed class Result\nclass Success(val msg:String):Result()\nclass Failure(val error:Exception):Result()\n```\n\n```kotlin\nfun getResultMsg(result:Result)=when(result){\n    is Success -> result.msg\n    is Failure -> \"Error is ${result.error.message}\"\n}\n```\n\n### 注意\n\n密封类及其子类只能定义在同一文件的顶层位置，不能嵌套在其他类中\n\n------\n\n","slug":"Kotlin延迟初始化和密封类","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gc0000ms4s78c7ie5dk","content":"<h1 id=\"变量延迟初始化\"><a href=\"#变量延迟初始化\" class=\"headerlink\" title=\"变量延迟初始化\"></a>变量延迟初始化</h1><h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p><strong>lateinit</strong></p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>如果一个变量是全局变量且初始化在后面的过程中进行时该变量不得不赋值为null，但如果这样进行后面调用其任何方法都需要进行判空处理相对麻烦，所以这里可以使用延迟初始化，就不需要将其赋值为null了</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>使用延迟初始化时一定要保证后续某处对其完成了初始化</p>\n<p>还可以通过代码进行判断是否完成了初始化</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//::adapter.isInitialized表示已经初始化</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!::adapter.isInitialized)&#123;</span><br><span class=\"line\">    adapter=MsgAdapter(msgList)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"密封类\"><a href=\"#密封类\" class=\"headerlink\" title=\"密封类\"></a>密封类</h1><h3 id=\"关键字-1\"><a href=\"#关键字-1\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p><strong>sealed class</strong></p>\n<h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>解决因语法原因导致的多余分支问题</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Result</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Success</span>(<span class=\"keyword\">val</span> msg:String):Result()</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Failure</span>(<span class=\"keyword\">val</span> error:Exception):Result()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getResultMsg</span><span class=\"params\">(result:<span class=\"type\">Result</span>)</span></span>=<span class=\"keyword\">when</span>(result)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">is</span> Success -&gt; result.msg</span><br><span class=\"line\">    <span class=\"keyword\">is</span> Failure -&gt; <span class=\"string\">&quot;Error is <span class=\"subst\">$&#123;result.error.message&#125;</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>密封类及其子类只能定义在同一文件的顶层位置，不能嵌套在其他类中</p>\n<hr>\n","excerpt":"变量延迟初始化\n关键字\nlateinit\n\n作用\n如果一个变量是全局变量且初始化在后面的过程中进行时该变量不得不赋值为null，但如果这样进行后面调用其任何方法都需要进行判空处理相对麻烦，所以这里可以使用延迟初始化，就不需要将其赋值为null了\n\n注意\n使用延迟初始化时一定要保证后续某处对其完成了初始化\n\n还可以通过代码进行判断是否完成了初始化\n\n1\n2\n3\n4\n\n\n//::adapter.isInitialized表示已经初始化\nif(!::adapter.isInitialized){\n    adapter=MsgAdapter(msgList)\n}\n\n\n\n\n\n密封类\n关键字\nseale","more":"<h1 id=\"变量延迟初始化\"><a href=\"#变量延迟初始化\" class=\"headerlink\" title=\"变量延迟初始化\"></a>变量延迟初始化</h1><h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p><strong>lateinit</strong></p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>如果一个变量是全局变量且初始化在后面的过程中进行时该变量不得不赋值为null，但如果这样进行后面调用其任何方法都需要进行判空处理相对麻烦，所以这里可以使用延迟初始化，就不需要将其赋值为null了</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>使用延迟初始化时一定要保证后续某处对其完成了初始化</p>\n<p>还可以通过代码进行判断是否完成了初始化</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//::adapter.isInitialized表示已经初始化</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!::adapter.isInitialized)&#123;</span><br><span class=\"line\">    adapter=MsgAdapter(msgList)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"密封类\"><a href=\"#密封类\" class=\"headerlink\" title=\"密封类\"></a>密封类</h1><h3 id=\"关键字-1\"><a href=\"#关键字-1\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p><strong>sealed class</strong></p>\n<h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>解决因语法原因导致的多余分支问题</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Result</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Success</span>(<span class=\"keyword\">val</span> msg:String):Result()</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Failure</span>(<span class=\"keyword\">val</span> error:Exception):Result()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getResultMsg</span><span class=\"params\">(result:<span class=\"type\">Result</span>)</span></span>=<span class=\"keyword\">when</span>(result)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">is</span> Success -&gt; result.msg</span><br><span class=\"line\">    <span class=\"keyword\">is</span> Failure -&gt; <span class=\"string\">&quot;Error is <span class=\"subst\">$&#123;result.error.message&#125;</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>密封类及其子类只能定义在同一文件的顶层位置，不能嵌套在其他类中</p>\n<hr>\n"},{"title":"Kotlin标准函数","date":"2025-04-19T13:56:44.000Z","_content":"\n# with\n\n作用：可以在连续调用同一个对象的多个方法时让代码变得更简便\n\n标准形式：\n\n```kotlin\nval result = with (obj){\n    //这里是obj的上下文\n    \"value\"//with函数返回值\n}\n```\n\n实例：\n\n```kotlin\nval list= listOf(\"Apple\",\"Banana\",\"Pear\")\n    val result=with(StringBuilder()){\n        append(\"Start eating fruits.\\n\")\n        for(fruit in list){\n            append(fruit).append(\"\\n\")\n        }\n        append(\"Ate all Fruits\")\n        toString()\n    }\n    println(result)\n```\n\n------\n\n# run\n\n作用：同with相同只是通常不会直接调用而是在对象的基础上调用\n\n标准形式：\n\n```kotlin\nval result =obj.run{\n    //这里是obj的上下文\n    \"value\"//run函数返回值\n}\n```\n\n实例：\n\n```kotlin\nval list= listOf(\"Apple\",\"Banana\",\"Pear\")\n    val result=StringBuilder().run{\n        append(\"Start eating fruits.\\n\")\n        for(fruit in list){\n            append(fruit).append(\"\\n\")\n        }\n        append(\"Ate all Fruits\")\n        toString()\n    }\n    println(result)\n```\n\n\n\n------\n\n# apply\n\n作用：作用和run类似只是无法指定返回值\n\n标准形式：\n\n```kotlin\nval result =obj.apply{\n    //这里是obj的上下文\n}\nresult==obj\n```\n\n实例：\n\n```kotlin\n    val list= listOf(\"Apple\",\"Banana\",\"Pear\")\n    val result=StringBuilder().apply{\n        append(\"Start eating fruits.\\n\")\n        for(fruit in list){\n            append(fruit).append(\"\\n\")\n        }\n        append(\"Ate all Fruits\")\n    }\n    println(result.toString())\n```\n\n**利用Intent传递数据时也可以使用apply函数**\n\n```kotlin\nval intent=Intent(context,SecondActivity::class.java).apply{\n    putExtra(\"param1\",\"data1\")\n    putExtra(\"param2\",\"data2\")\n}\ncontext.startActivity(intent)\n```\n\n\n\n------\n\n# repeat\n\n传入一个值n然后lambda表达式中的内容执行n遍\n\n------\n\n","source":"_posts/Kotlin标准函数.md","raw":"---\ntitle: Kotlin标准函数\ndate: 2025-04-19 21:56:44\ncategories:\n- Kotlin\ntags:\n---\n\n# with\n\n作用：可以在连续调用同一个对象的多个方法时让代码变得更简便\n\n标准形式：\n\n```kotlin\nval result = with (obj){\n    //这里是obj的上下文\n    \"value\"//with函数返回值\n}\n```\n\n实例：\n\n```kotlin\nval list= listOf(\"Apple\",\"Banana\",\"Pear\")\n    val result=with(StringBuilder()){\n        append(\"Start eating fruits.\\n\")\n        for(fruit in list){\n            append(fruit).append(\"\\n\")\n        }\n        append(\"Ate all Fruits\")\n        toString()\n    }\n    println(result)\n```\n\n------\n\n# run\n\n作用：同with相同只是通常不会直接调用而是在对象的基础上调用\n\n标准形式：\n\n```kotlin\nval result =obj.run{\n    //这里是obj的上下文\n    \"value\"//run函数返回值\n}\n```\n\n实例：\n\n```kotlin\nval list= listOf(\"Apple\",\"Banana\",\"Pear\")\n    val result=StringBuilder().run{\n        append(\"Start eating fruits.\\n\")\n        for(fruit in list){\n            append(fruit).append(\"\\n\")\n        }\n        append(\"Ate all Fruits\")\n        toString()\n    }\n    println(result)\n```\n\n\n\n------\n\n# apply\n\n作用：作用和run类似只是无法指定返回值\n\n标准形式：\n\n```kotlin\nval result =obj.apply{\n    //这里是obj的上下文\n}\nresult==obj\n```\n\n实例：\n\n```kotlin\n    val list= listOf(\"Apple\",\"Banana\",\"Pear\")\n    val result=StringBuilder().apply{\n        append(\"Start eating fruits.\\n\")\n        for(fruit in list){\n            append(fruit).append(\"\\n\")\n        }\n        append(\"Ate all Fruits\")\n    }\n    println(result.toString())\n```\n\n**利用Intent传递数据时也可以使用apply函数**\n\n```kotlin\nval intent=Intent(context,SecondActivity::class.java).apply{\n    putExtra(\"param1\",\"data1\")\n    putExtra(\"param2\",\"data2\")\n}\ncontext.startActivity(intent)\n```\n\n\n\n------\n\n# repeat\n\n传入一个值n然后lambda表达式中的内容执行n遍\n\n------\n\n","slug":"Kotlin标准函数","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gc0000ns4s7hibyfjqs","content":"<h1 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h1><p>作用：可以在连续调用同一个对象的多个方法时让代码变得更简便</p>\n<p>标准形式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = with (obj)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是obj的上下文</span></span><br><span class=\"line\">    <span class=\"string\">&quot;value&quot;</span><span class=\"comment\">//with函数返回值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result=with(StringBuilder())&#123;</span><br><span class=\"line\">        append(<span class=\"string\">&quot;Start eating fruits.\\n&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(fruit <span class=\"keyword\">in</span> list)&#123;</span><br><span class=\"line\">            append(fruit).append(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        append(<span class=\"string\">&quot;Ate all Fruits&quot;</span>)</span><br><span class=\"line\">        toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(result)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h1><p>作用：同with相同只是通常不会直接调用而是在对象的基础上调用</p>\n<p>标准形式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result =obj.run&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是obj的上下文</span></span><br><span class=\"line\">    <span class=\"string\">&quot;value&quot;</span><span class=\"comment\">//run函数返回值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result=StringBuilder().run&#123;</span><br><span class=\"line\">        append(<span class=\"string\">&quot;Start eating fruits.\\n&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(fruit <span class=\"keyword\">in</span> list)&#123;</span><br><span class=\"line\">            append(fruit).append(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        append(<span class=\"string\">&quot;Ate all Fruits&quot;</span>)</span><br><span class=\"line\">        toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(result)</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h1><p>作用：作用和run类似只是无法指定返回值</p>\n<p>标准形式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result =obj.apply&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是obj的上下文</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">result==obj</span><br></pre></td></tr></table></figure>\n\n<p>实例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> result=StringBuilder().apply&#123;</span><br><span class=\"line\">    append(<span class=\"string\">&quot;Start eating fruits.\\n&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(fruit <span class=\"keyword\">in</span> list)&#123;</span><br><span class=\"line\">        append(fruit).append(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    append(<span class=\"string\">&quot;Ate all Fruits&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(result.toString())</span><br></pre></td></tr></table></figure>\n\n<p><strong>利用Intent传递数据时也可以使用apply函数</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> intent=Intent(context,SecondActivity::<span class=\"keyword\">class</span>.java).apply&#123;</span><br><span class=\"line\">    putExtra(<span class=\"string\">&quot;param1&quot;</span>,<span class=\"string\">&quot;data1&quot;</span>)</span><br><span class=\"line\">    putExtra(<span class=\"string\">&quot;param2&quot;</span>,<span class=\"string\">&quot;data2&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">context.startActivity(intent)</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat\"></a>repeat</h1><p>传入一个值n然后lambda表达式中的内容执行n遍</p>\n<hr>\n","excerpt":"with\n作用：可以在连续调用同一个对象的多个方法时让代码变得更简便\n\n标准形式：\n\n1\n2\n3\n4\n\n\nval result = with (obj){\n    //这里是obj的上下文\n    \"value\"//with函数返回值\n}\n\n\n实例：\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nval list= listOf(\"Apple\",\"Banana\",\"Pear\")\n    val result=with(StringBuilder()){\n        append(\"Start eating fruits.\\n\")\n        for(fruit in list){\n ","more":"<h1 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h1><p>作用：可以在连续调用同一个对象的多个方法时让代码变得更简便</p>\n<p>标准形式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = with (obj)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是obj的上下文</span></span><br><span class=\"line\">    <span class=\"string\">&quot;value&quot;</span><span class=\"comment\">//with函数返回值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result=with(StringBuilder())&#123;</span><br><span class=\"line\">        append(<span class=\"string\">&quot;Start eating fruits.\\n&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(fruit <span class=\"keyword\">in</span> list)&#123;</span><br><span class=\"line\">            append(fruit).append(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        append(<span class=\"string\">&quot;Ate all Fruits&quot;</span>)</span><br><span class=\"line\">        toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(result)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h1><p>作用：同with相同只是通常不会直接调用而是在对象的基础上调用</p>\n<p>标准形式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result =obj.run&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是obj的上下文</span></span><br><span class=\"line\">    <span class=\"string\">&quot;value&quot;</span><span class=\"comment\">//run函数返回值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result=StringBuilder().run&#123;</span><br><span class=\"line\">        append(<span class=\"string\">&quot;Start eating fruits.\\n&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(fruit <span class=\"keyword\">in</span> list)&#123;</span><br><span class=\"line\">            append(fruit).append(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        append(<span class=\"string\">&quot;Ate all Fruits&quot;</span>)</span><br><span class=\"line\">        toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(result)</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h1><p>作用：作用和run类似只是无法指定返回值</p>\n<p>标准形式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result =obj.apply&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是obj的上下文</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">result==obj</span><br></pre></td></tr></table></figure>\n\n<p>实例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> result=StringBuilder().apply&#123;</span><br><span class=\"line\">    append(<span class=\"string\">&quot;Start eating fruits.\\n&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(fruit <span class=\"keyword\">in</span> list)&#123;</span><br><span class=\"line\">        append(fruit).append(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    append(<span class=\"string\">&quot;Ate all Fruits&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(result.toString())</span><br></pre></td></tr></table></figure>\n\n<p><strong>利用Intent传递数据时也可以使用apply函数</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> intent=Intent(context,SecondActivity::<span class=\"keyword\">class</span>.java).apply&#123;</span><br><span class=\"line\">    putExtra(<span class=\"string\">&quot;param1&quot;</span>,<span class=\"string\">&quot;data1&quot;</span>)</span><br><span class=\"line\">    putExtra(<span class=\"string\">&quot;param2&quot;</span>,<span class=\"string\">&quot;data2&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">context.startActivity(intent)</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat\"></a>repeat</h1><p>传入一个值n然后lambda表达式中的内容执行n遍</p>\n<hr>\n"},{"title":"Kotlin的infix函数","date":"2025-05-26T13:22:12.000Z","_content":"\n### 特点\n\n`infix` [关键字](https://so.csdn.net/so/search?q=关键字&spm=1001.2101.3001.7020)可以让 **单参数的函数** 以 **更自然的语法** 书写，使代码更易读。\n你可以把它理解为 **一种特殊的调用方式**，不需要 `.` 和 `()`，让代码像 **自然语言** 一样流畅。例如mapOf中的键值对(A to B实际等价于A.to(B))省略了  `.`  和  `（）`。\n\n### 条件\n\n要使用 `infix`，需要满足 **三个条件**：\n\n1. **必须是成员函数或扩展函数**（它必须属于某个类或某种类型）。\n2. **必须只有且只能有一个参数**（如果有多个参数，就不能用 `infix`）。\n3. ⭐⭐⭐⭐⭐⭐**调用时可以省略 `.` 和 `()`**（但仍然可以用 `.` 调用）。\n\n### 实例\n\n```kotlin\ninfix fun <T> Collection<T>.has(element:T)=contains(element)\nval list =listOf(\"Apple\",\"Banana\",\"Orange\",\"Pear\",\"Grape\")\nif(list has \"Banana\"){\n    //处理具体逻辑\n}\n```\n\n------\n\n","source":"_posts/Kotlin的infix函数.md","raw":"---\ntitle: Kotlin的infix函数\ndate: 2025-05-26 21:22:12\ncategories:\n- Kotlin\ntags:\n---\n\n### 特点\n\n`infix` [关键字](https://so.csdn.net/so/search?q=关键字&spm=1001.2101.3001.7020)可以让 **单参数的函数** 以 **更自然的语法** 书写，使代码更易读。\n你可以把它理解为 **一种特殊的调用方式**，不需要 `.` 和 `()`，让代码像 **自然语言** 一样流畅。例如mapOf中的键值对(A to B实际等价于A.to(B))省略了  `.`  和  `（）`。\n\n### 条件\n\n要使用 `infix`，需要满足 **三个条件**：\n\n1. **必须是成员函数或扩展函数**（它必须属于某个类或某种类型）。\n2. **必须只有且只能有一个参数**（如果有多个参数，就不能用 `infix`）。\n3. ⭐⭐⭐⭐⭐⭐**调用时可以省略 `.` 和 `()`**（但仍然可以用 `.` 调用）。\n\n### 实例\n\n```kotlin\ninfix fun <T> Collection<T>.has(element:T)=contains(element)\nval list =listOf(\"Apple\",\"Banana\",\"Orange\",\"Pear\",\"Grape\")\nif(list has \"Banana\"){\n    //处理具体逻辑\n}\n```\n\n------\n\n","slug":"Kotlin的infix函数","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gc1000qs4s7cb0sbx0d","content":"<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p><code>infix</code> <a href=\"https://so.csdn.net/so/search?q=%E5%85%B3%E9%94%AE%E5%AD%97&spm=1001.2101.3001.7020\">关键字</a>可以让 <strong>单参数的函数</strong> 以 <strong>更自然的语法</strong> 书写，使代码更易读。<br>你可以把它理解为 <strong>一种特殊的调用方式</strong>，不需要 <code>.</code> 和 <code>()</code>，让代码像 <strong>自然语言</strong> 一样流畅。例如mapOf中的键值对(A to B实际等价于A.to(B))省略了  <code>.</code>  和  <code>（）</code>。</p>\n<h3 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h3><p>要使用 <code>infix</code>，需要满足 <strong>三个条件</strong>：</p>\n<ol>\n<li><strong>必须是成员函数或扩展函数</strong>（它必须属于某个类或某种类型）。</li>\n<li><strong>必须只有且只能有一个参数</strong>（如果有多个参数，就不能用 <code>infix</code>）。</li>\n<li>⭐⭐⭐⭐⭐⭐<strong>调用时可以省略 <code>.</code> 和 <code>()</code></strong>（但仍然可以用 <code>.</code> 调用）。</li>\n</ol>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">infix</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> Collection<span class=\"type\">&lt;T&gt;</span>.<span class=\"title\">has</span><span class=\"params\">(element:<span class=\"type\">T</span>)</span></span>=contains(element)</span><br><span class=\"line\"><span class=\"keyword\">val</span> list =listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Orange&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>,<span class=\"string\">&quot;Grape&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(list has <span class=\"string\">&quot;Banana&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理具体逻辑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"特点\ninfix 关键字可以让 单参数的函数 以 更自然的语法 书写，使代码更易读。\n你可以把它理解为 一种特殊的调用方式，不需要 . 和 ()，让代码像 自然语言 一样流畅。例如mapOf中的键值对(A to B实际等价于A.to(B))省略了 . 和 （）。\n\n条件\n要使用 infix，需要满足 三个条件：\n\n 1. 必须是成员函数或扩展函数（它必须属于某个类或某种类型）。\n 2. 必须只有且只能有一个参数（如果有多个参数，就不能用 infix）。\n 3. ⭐⭐⭐⭐⭐⭐调用时可以省略 . 和 ()（但仍然可以用 . 调用）。\n\n实例\n1\n2\n3\n4\n5\n\n\ninfix fun <T> Co","more":"<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p><code>infix</code> <a href=\"https://so.csdn.net/so/search?q=%E5%85%B3%E9%94%AE%E5%AD%97&spm=1001.2101.3001.7020\">关键字</a>可以让 <strong>单参数的函数</strong> 以 <strong>更自然的语法</strong> 书写，使代码更易读。<br>你可以把它理解为 <strong>一种特殊的调用方式</strong>，不需要 <code>.</code> 和 <code>()</code>，让代码像 <strong>自然语言</strong> 一样流畅。例如mapOf中的键值对(A to B实际等价于A.to(B))省略了  <code>.</code>  和  <code>（）</code>。</p>\n<h3 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h3><p>要使用 <code>infix</code>，需要满足 <strong>三个条件</strong>：</p>\n<ol>\n<li><strong>必须是成员函数或扩展函数</strong>（它必须属于某个类或某种类型）。</li>\n<li><strong>必须只有且只能有一个参数</strong>（如果有多个参数，就不能用 <code>infix</code>）。</li>\n<li>⭐⭐⭐⭐⭐⭐<strong>调用时可以省略 <code>.</code> 和 <code>()</code></strong>（但仍然可以用 <code>.</code> 调用）。</li>\n</ol>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">infix</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> Collection<span class=\"type\">&lt;T&gt;</span>.<span class=\"title\">has</span><span class=\"params\">(element:<span class=\"type\">T</span>)</span></span>=contains(element)</span><br><span class=\"line\"><span class=\"keyword\">val</span> list =listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Orange&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>,<span class=\"string\">&quot;Grape&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(list has <span class=\"string\">&quot;Banana&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理具体逻辑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"Kotlin泛型的高级特性","date":"2025-05-29T11:25:42.000Z","_content":"\n### 泛型的实化\n\n**条件**\n\n- 内联函数\n- reified关键字修饰\n\n**举例**\n\n```kotlin\ninline fun <reified T> getGenericType(){\n    \n}\n```\n\n**应用**\n\n启动活动\n\n- 新建一个reified.kt文件\n\n```kotlin\ninline fun <reified T> startActivity(context:Context,block:Intent.()->Unit){\n    val intent= Intent(context,T::class.java)\n    //高阶函数用于传递数据\n    intent.block()\n    context.startActivity(intent)\n}\n```\n\n- 启动活动\n\n```kotlin\nstartActivity<Test>(this){\n                putExtra(\"param1\",\"data\")\n                putExtra(\"param2\",123)\n            }\n```\n\n### 泛型的协变\n\n**定义**\n\n假如定义一个MyClass<T>的泛型类，其中A是B的子类型，同时MyClass<A>是MyClass<B>的子类型，就称MyClass在T这个泛型上是协变的\n\n**条件**\n\n一个泛型类在其泛型类型的数据上是只读的情况，简而言之，T只能出现在out位置上，而不能出现在in位置\n\n**实例**\n\n```kotlin\n//在T前使用out关键字声明表示T只能出现在out位置上\nclass SimpleData<out T>(val data:T?){\n    fun get():T?{\n        return data\n    }\n}\n```\n\n```kotlin\nfun main(){\n    val student=Student(\"Tom\",19)\n    val data=SimpleData<Student>(student)\n    handleMyData(data)\n    val studentData=data.get()\n}\nfun handleMyData(data:SimpleData<Person>){\n    val personData=data.get()\n}\n```\n\n### 泛型的逆变\n\n**定义**\n\n假如定义一个MyClass<T>的泛型类，其中A是B的子类型，同时MyClass<B>是MyClass<A>的子类型，就称MyClass在T这个泛型上是逆变的\n\n**条件**\n\n泛型T前加上in关键字声明，简而言之，T只能出现在in位置上，而不能出现在out位置\n\n**实例**\n\n```kotlin\n//在T前使用out关键字声明表示T只能出现在out位置上\ninterface Transformer<in T>{\n    fun transform(t:T):String\n}\n```\n\n```kotlin\nfun main(){\n    val trans=object:Transformer<Person>{\n        override fun transform(t:Person):String{\n            return \"${t.name} ${t.age}\"\n        }\n    }\n    handleTransformer(trans)\n}\nhandleTransformer(trans:Transformer<Student>){\n        val student=Student(\"Tom\",19)\n    \tval result=trans.transform(student)\n    }\n```\n\n------\n\n","source":"_posts/Kotlin泛型的高级特性.md","raw":"---\ntitle: Kotlin泛型的高级特性\ndate: 2025-05-29 19:25:42\ncategories:\n- Kotlin\ntags:\n---\n\n### 泛型的实化\n\n**条件**\n\n- 内联函数\n- reified关键字修饰\n\n**举例**\n\n```kotlin\ninline fun <reified T> getGenericType(){\n    \n}\n```\n\n**应用**\n\n启动活动\n\n- 新建一个reified.kt文件\n\n```kotlin\ninline fun <reified T> startActivity(context:Context,block:Intent.()->Unit){\n    val intent= Intent(context,T::class.java)\n    //高阶函数用于传递数据\n    intent.block()\n    context.startActivity(intent)\n}\n```\n\n- 启动活动\n\n```kotlin\nstartActivity<Test>(this){\n                putExtra(\"param1\",\"data\")\n                putExtra(\"param2\",123)\n            }\n```\n\n### 泛型的协变\n\n**定义**\n\n假如定义一个MyClass<T>的泛型类，其中A是B的子类型，同时MyClass<A>是MyClass<B>的子类型，就称MyClass在T这个泛型上是协变的\n\n**条件**\n\n一个泛型类在其泛型类型的数据上是只读的情况，简而言之，T只能出现在out位置上，而不能出现在in位置\n\n**实例**\n\n```kotlin\n//在T前使用out关键字声明表示T只能出现在out位置上\nclass SimpleData<out T>(val data:T?){\n    fun get():T?{\n        return data\n    }\n}\n```\n\n```kotlin\nfun main(){\n    val student=Student(\"Tom\",19)\n    val data=SimpleData<Student>(student)\n    handleMyData(data)\n    val studentData=data.get()\n}\nfun handleMyData(data:SimpleData<Person>){\n    val personData=data.get()\n}\n```\n\n### 泛型的逆变\n\n**定义**\n\n假如定义一个MyClass<T>的泛型类，其中A是B的子类型，同时MyClass<B>是MyClass<A>的子类型，就称MyClass在T这个泛型上是逆变的\n\n**条件**\n\n泛型T前加上in关键字声明，简而言之，T只能出现在in位置上，而不能出现在out位置\n\n**实例**\n\n```kotlin\n//在T前使用out关键字声明表示T只能出现在out位置上\ninterface Transformer<in T>{\n    fun transform(t:T):String\n}\n```\n\n```kotlin\nfun main(){\n    val trans=object:Transformer<Person>{\n        override fun transform(t:Person):String{\n            return \"${t.name} ${t.age}\"\n        }\n    }\n    handleTransformer(trans)\n}\nhandleTransformer(trans:Transformer<Student>){\n        val student=Student(\"Tom\",19)\n    \tval result=trans.transform(student)\n    }\n```\n\n------\n\n","slug":"Kotlin泛型的高级特性","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gc2000rs4s76xenf828","content":"<h3 id=\"泛型的实化\"><a href=\"#泛型的实化\" class=\"headerlink\" title=\"泛型的实化\"></a>泛型的实化</h3><p><strong>条件</strong></p>\n<ul>\n<li>内联函数</li>\n<li>reified关键字修饰</li>\n</ul>\n<p><strong>举例</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">getGenericType</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>应用</strong></p>\n<p>启动活动</p>\n<ul>\n<li>新建一个reified.kt文件</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">startActivity</span><span class=\"params\">(context:<span class=\"type\">Context</span>,block:<span class=\"type\">Intent</span>.()-&gt;<span class=\"type\">Unit</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> intent= Intent(context,T::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">    <span class=\"comment\">//高阶函数用于传递数据</span></span><br><span class=\"line\">    intent.block()</span><br><span class=\"line\">    context.startActivity(intent)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动活动</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">startActivity&lt;Test&gt;(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">                putExtra(<span class=\"string\">&quot;param1&quot;</span>,<span class=\"string\">&quot;data&quot;</span>)</span><br><span class=\"line\">                putExtra(<span class=\"string\">&quot;param2&quot;</span>,<span class=\"number\">123</span>)</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型的协变\"><a href=\"#泛型的协变\" class=\"headerlink\" title=\"泛型的协变\"></a>泛型的协变</h3><p><strong>定义</strong></p>\n<p>假如定义一个MyClass<T>的泛型类，其中A是B的子类型，同时MyClass<A>是MyClass<B>的子类型，就称MyClass在T这个泛型上是协变的</p>\n<p><strong>条件</strong></p>\n<p>一个泛型类在其泛型类型的数据上是只读的情况，简而言之，T只能出现在out位置上，而不能出现在in位置</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在T前使用out关键字声明表示T只能出现在out位置上</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SimpleData</span>&lt;<span class=\"type\">out T</span>&gt;(<span class=\"keyword\">val</span> <span class=\"keyword\">data</span>:T?)&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">get</span><span class=\"params\">()</span></span>:T?&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> student=Student(<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"number\">19</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">data</span>=SimpleData&lt;Student&gt;(student)</span><br><span class=\"line\">    handleMyData(<span class=\"keyword\">data</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> studentData=<span class=\"keyword\">data</span>.<span class=\"keyword\">get</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">handleMyData</span><span class=\"params\">(<span class=\"keyword\">data</span>:<span class=\"type\">SimpleData</span>&lt;<span class=\"type\">Person</span>&gt;)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> personData=<span class=\"keyword\">data</span>.<span class=\"keyword\">get</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型的逆变\"><a href=\"#泛型的逆变\" class=\"headerlink\" title=\"泛型的逆变\"></a>泛型的逆变</h3><p><strong>定义</strong></p>\n<p>假如定义一个MyClass<T>的泛型类，其中A是B的子类型，同时MyClass<B>是MyClass<A>的子类型，就称MyClass在T这个泛型上是逆变的</p>\n<p><strong>条件</strong></p>\n<p>泛型T前加上in关键字声明，简而言之，T只能出现在in位置上，而不能出现在out位置</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在T前使用out关键字声明表示T只能出现在out位置上</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Transformer</span>&lt;<span class=\"type\">in T</span>&gt;&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">transform</span><span class=\"params\">(t:<span class=\"type\">T</span>)</span></span>:String</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> trans=<span class=\"keyword\">object</span>:Transformer&lt;Person&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">transform</span><span class=\"params\">(t:<span class=\"type\">Person</span>)</span></span>:String&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;<span class=\"subst\">$&#123;t.name&#125;</span> <span class=\"subst\">$&#123;t.age&#125;</span>&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    handleTransformer(trans)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handleTransformer(trans:Transformer&lt;Student&gt;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> student=Student(<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"number\">19</span>)</span><br><span class=\"line\">    \t<span class=\"keyword\">val</span> result=trans.transform(student)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"泛型的实化\n条件\n\n * 内联函数\n * reified关键字修饰\n\n举例\n\n1\n2\n3\n\n\ninline fun <reified T> getGenericType(){\n    \n}\n\n\n应用\n\n启动活动\n\n * 新建一个reified.kt文件\n\n1\n2\n3\n4\n5\n6\n\n\ninline fun <reified T> startActivity(context:Context,block:Intent.()->Unit){\n    val intent= Intent(context,T::class.java)\n    //高阶函数用于传递数据\n    intent.block()","more":"<h3 id=\"泛型的实化\"><a href=\"#泛型的实化\" class=\"headerlink\" title=\"泛型的实化\"></a>泛型的实化</h3><p><strong>条件</strong></p>\n<ul>\n<li>内联函数</li>\n<li>reified关键字修饰</li>\n</ul>\n<p><strong>举例</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">getGenericType</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>应用</strong></p>\n<p>启动活动</p>\n<ul>\n<li>新建一个reified.kt文件</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">startActivity</span><span class=\"params\">(context:<span class=\"type\">Context</span>,block:<span class=\"type\">Intent</span>.()-&gt;<span class=\"type\">Unit</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> intent= Intent(context,T::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">    <span class=\"comment\">//高阶函数用于传递数据</span></span><br><span class=\"line\">    intent.block()</span><br><span class=\"line\">    context.startActivity(intent)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动活动</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">startActivity&lt;Test&gt;(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">                putExtra(<span class=\"string\">&quot;param1&quot;</span>,<span class=\"string\">&quot;data&quot;</span>)</span><br><span class=\"line\">                putExtra(<span class=\"string\">&quot;param2&quot;</span>,<span class=\"number\">123</span>)</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型的协变\"><a href=\"#泛型的协变\" class=\"headerlink\" title=\"泛型的协变\"></a>泛型的协变</h3><p><strong>定义</strong></p>\n<p>假如定义一个MyClass<T>的泛型类，其中A是B的子类型，同时MyClass<A>是MyClass<B>的子类型，就称MyClass在T这个泛型上是协变的</p>\n<p><strong>条件</strong></p>\n<p>一个泛型类在其泛型类型的数据上是只读的情况，简而言之，T只能出现在out位置上，而不能出现在in位置</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在T前使用out关键字声明表示T只能出现在out位置上</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SimpleData</span>&lt;<span class=\"type\">out T</span>&gt;(<span class=\"keyword\">val</span> <span class=\"keyword\">data</span>:T?)&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">get</span><span class=\"params\">()</span></span>:T?&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> student=Student(<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"number\">19</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">data</span>=SimpleData&lt;Student&gt;(student)</span><br><span class=\"line\">    handleMyData(<span class=\"keyword\">data</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> studentData=<span class=\"keyword\">data</span>.<span class=\"keyword\">get</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">handleMyData</span><span class=\"params\">(<span class=\"keyword\">data</span>:<span class=\"type\">SimpleData</span>&lt;<span class=\"type\">Person</span>&gt;)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> personData=<span class=\"keyword\">data</span>.<span class=\"keyword\">get</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型的逆变\"><a href=\"#泛型的逆变\" class=\"headerlink\" title=\"泛型的逆变\"></a>泛型的逆变</h3><p><strong>定义</strong></p>\n<p>假如定义一个MyClass<T>的泛型类，其中A是B的子类型，同时MyClass<B>是MyClass<A>的子类型，就称MyClass在T这个泛型上是逆变的</p>\n<p><strong>条件</strong></p>\n<p>泛型T前加上in关键字声明，简而言之，T只能出现在in位置上，而不能出现在out位置</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在T前使用out关键字声明表示T只能出现在out位置上</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Transformer</span>&lt;<span class=\"type\">in T</span>&gt;&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">transform</span><span class=\"params\">(t:<span class=\"type\">T</span>)</span></span>:String</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> trans=<span class=\"keyword\">object</span>:Transformer&lt;Person&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">transform</span><span class=\"params\">(t:<span class=\"type\">Person</span>)</span></span>:String&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;<span class=\"subst\">$&#123;t.name&#125;</span> <span class=\"subst\">$&#123;t.age&#125;</span>&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    handleTransformer(trans)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handleTransformer(trans:Transformer&lt;Student&gt;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> student=Student(<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"number\">19</span>)</span><br><span class=\"line\">    \t<span class=\"keyword\">val</span> result=trans.transform(student)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"Kotlin语法","date":"2025-04-15T12:59:56.000Z","_content":"\n# 变量和函数\n\n### 变量\n\n1.由val和var声明变量，其中val声明不可变变量，var声明可变变量(**建议所有变量开始由val修饰，后根据需要选择用var修饰**)\n\n2.也可以显示的声明变量类型，如`val a : Int = 10`\n\n3.数据类型：\n\n![](../img/img51.jpg)\n\n### 函数\n\n1.标准形式：\n\n```kotlin\nfun methodName(param1: Int, param2: Int):Int{\nreturn 0\n}\n```\n\n2.语法糖：\n\n当一个函数只有一行代码时，可以直接将那行代码直接写在函数定义的尾部用等号连接\n\n`fun largeNumber(num1: Int, num2: Int) = max(num1,num2)`\n\n------\n\n# 程序的逻辑控制\n\n### if条件句\n\n1.写法和Java的一样\n\n2.和java不一样的点在于它可以有返回值，如：\n\n```kotlin\nfun largeNumber(num1: Int, num2: Int) : Int{\n    return if(num1 > num2){\n        num1\n    }else{\n        num2\n    }\n}\n```\n\n可以用语法糖简化为：\n\n```kotlin\nfun largeNumber(num1: Int, num2: Int) = if(num1 > num2) num1 else num2\n```\n\n\n\n### when条件句\n\n1.由这个例子说明：\n\n```kotlin\nfun getScore(name:String)=if(name==\"Tom\"){\n    86\n}else if (name==\"Jim\"){\n    77\n}else if (name==\"Jack\"){\n    95\n}else if (name==\"Lily\"){\n    100\n}else{\n    0\n}\n```\n\n这段显得冗杂可以用when简化\n\n```kotlin\nfun getScore(name:String)=when(name){\n    \"Tom\"->86\n    \"Jim\"->77\n    \"Jack\"->95\n    \"Lily\"->100\n    else->0\n}\n```\n\n2.标准格式：\n\n匹配值 -> { 执行逻辑 }（执行逻辑只有一行时括号可省）\n\n3.类型匹配：\n\n```kotlin\nfun checkNumber(num:Number)=when(num){\n    is Int->println(\"number is Int\")\n    is Double->println(\"number is Double\")\n    else->println(\"number not support\")\n}\n```\n\n4.不在when中传入参数：（用得少）\n\n```kotlin\nfun getScore(name:String)=when{\n   name == \"Tom\"->86\n   name == \"Jim\"->77\n   name ==  \"Jack\"->95\n   name ==  \"Lily\"->100\n    else->0\n}\n```\n\n5.有些情况必须用4中方法：\n\n假设所有名字以“Tom”开头的人分数只有86：\n\n```kotlin\nfun getScore(name:String)=when{\n   name.startsWith(\"Tom\")->86\n   name == \"Jim\"->77\n   name ==  \"Jack\"->95\n   name ==  \"Lily\"->100\n    else->0\n}\n```\n\n\n\n### 循环语句\n\n1.while循环和之前学的一样不再赘述\n\n2.Kotlin中区间表示：\n\n`val range = 0..10`两端都是闭区间\n\n`val range = 0 until 10`左闭右开区间\n\n`val range = 10 downTo 1`降序区间两端都是闭区间\n\n3.**step**关键字相当于**i++**\n\n2.for-in循环：\n\n```kotlin\nfor(i in 0..10){\n    println(i)\n}\nfor(i in 0 until 10 step 2){\n    println(i)\n}\nfor(i in 10 downTo 1){\n    println(i)\n}\n```\n\n\n\n------\n\n# 面向对象编程\n\n### 类和对象\n\n创建方法和之前的一样，实例化有区别,去掉了new关键字：\n\n`val p=Person()`\n\n### 继承与构造函数\n\n1.开放继承权限(kotlin中非抽象类默认不可继承)，在类前加上**open**关键字即可\n\n```kotlin\nopen class person{\n...\n}\n```\n\n2.继承，关键字由之前的extends变为了冒号，例如：\n\n```kotlin\nclass Student : Person(){\n    var sno= \"\"\n    var grade=0\n}\n```\n\nPerson后有一个括号是因为子类构造函数必须调用父类的构造函数\n\n3.构造函数分为**主构造函数**和**次构造函数**：\n\n**主构造函数**(没有函数体，逻辑写在init中)：\n\n```kotlin\nclass Student(val sno String,val grade :Int):Person(){\n    init{\n        println(sno)\n        println(grade)\n    }\n}\n```\n\n继承来的数据不需要用val或var修饰\n\n```kotlin\nclass Student(val sno :String,val grade :Int, name:String,age:Int):Person(name,age){\n}\n```\n\n**次构造函数**(几乎不会用到)\n\n当一个类既有主构造又有次构造函数，所有次构造函数都必须直接或间接调用主构造函数：\n\n```kotlin\nclass Student(val sno :String,val grade :Int, name:String,age:Int):Person(name,age){\n    constructor(name:String,age:Int):this(\"\",0,name,age){}//直接调用主构造函数\n    constructor():this(\"\",0){}//间接调用主构造函数\n}\n```\n\n只有次构造而没有主构造时：\n\n```kotlin\nclass Student:Person{\n    constructor(name:String,age:Int):super(name,age){}\n}\n```\n\n此时没有显式的定义主构造函数，又有次构造可以认为其没有主构造，既然没有主构造，那么Person类后也不需要加括号了\n\n### 接口\n\n1.接口和java也基本一样，接口中函数不要求有函数体\n\n```kotlin\ninterface Study {\n    fun readBooks()\n    fun doHomework()\n}\n```\n\n2.接口关键字也使用冒号\n\n```kotlin\nclass Student(name:String,age:Int):Person(name,age),Study {\n    override fun readBooks() {\n        println(name+\" is reading!\")\n    }\n\n    override fun doHomework() {\n        println(name+\" is doing homework\")\n    }\n}\n```\n\n调用如下：\n\n```kotlin\nfun main(){\n   val s=Student(\"Jack\" ,18)\n    doStudy(s)\n}\nfun doStudy(study:Study){\n    study.readBooks()\n    study.doHomework()\n}\n```\n\n3.kotlin中特有的功能：允许对接口中定义的函数进行默认实现\n\n```kotlin\ninterface Study {\n    fun readBooks()\n    fun doHomework(){\n        println(\"do homework default implementation.\")\n    }\n}\n```\n\n### 修饰符\n\n**1.public:**\n\n默认项，和java的一致\n\n**2.private：**\n\n只对当前类内部可见\n\n**3.protected:**\n\n只对当前类和子类可见\n\n**4.internal:**\n\n只对同一模块中的类可见\n\n![](../img/img52.jpg)\n\n### 数据类与单例类\n\n**1.数据类:**\n\n在class前加上data关键字\n\n**2.单例类:**\n\n作用：避免创建重复的对象\n\n用法：将class换成object即可\n\n调用：\n\n```kotlin\nobject Singleton{\n    fun singletonTest(){\n        println(\"singletonTest is called\")\n    }\n}\nfun main(){\n       Singleton.singletonTest()\n}\n```\n\n------\n\n# 集合的创建和遍历\n\n### listOf(不可变集合)\n\n创建和遍历：\n\n```kotlin\n val list= listOf(\"Apple\",\"Banana\",\"Pear\")\n    for (fruit in list){\n        println(fruit)\n    }\n```\n\n### mutableListOf(可变集合)\n\n创建和遍历：\n\n```kotlin\nval list= *mutableListOf*(\"Apple\",\"Banana\",\"Pear\")\nlist.add(\"Watermeleon\")\nfor (fruit in list){\n    *println*(fruit)\n}\n```\n\n### setOf和mutableSetOf\n\n用法和**listOf**和**mutableListOf**一模一样，只是**setOf**和**mutableSetOf**中不能放重复元素\n\n### Map集合(键值对形式)\n\n1.添加和读取数据用下标法\n\n```kotlin\nval map=HashMap<String,Int>()\nmap[\"Apple\"]=1//添加\nval number=map[\"Apple\"]//读取\n```\n\n2.简化(使用mapOf和mutableMapOf):\n\n```kotlin\nval map= mapOf(\"Apple\" to 1,\"Banana\" to 2,\"Oramge\" to 3)\n    for((fruit,number) in map){\n        println(\"fruit is \"+fruit+\",number is ,\" +number)\n    }\n```\n\n------\n\n# Lambda\n\n**1.语法结构：**\n\n{参数名1：参数类型，参数名2：参数类型  -> 函数体}（函数体可以编写任一行代码，最后一行代码会自动作为返回值）\n\n**2.一些简化点：（函数API实例说明）**\n\n```kotlin\nval maxLengthFruit = list.maxBy({fruit:String->fruit.length})\n```\n\n(1)当Lambda参数是函数最后一个参数时可以将**lambda**表达式移到函数括号的外面\n\n```kotlin\nval maxLengthFruit = list.maxBy(){fruit:String->fruit.length}\n```\n\n(2)当Lambda参数是函数唯一一个参数时可以将函数的括号删掉\n\n```kotlin\nval maxLengthFruit = list.maxBy{fruit:String->fruit.length}\n```\n\n(3)因为Kotlin具有类型推到机制大多情况不需声明类型\n\n```kotlin\nval maxLengthFruit = list.maxBy{fruit->fruit.length}\n```\n\n(4)当表达式参数列表只有一个参数时，也可以不声明参数名，用it来代替\n\n```kotlin\nval maxLengthFruit = list.maxBy{it.length}\n```\n\n**3.map函数(对集合元素映射转化)**\n\n```kotlin\nval list= listOf(\"Apple\",\"Banana\",\"Pear\")\nval newList =list.map{it.toUpperCase()}\nfor(fruit in newlist){\n    println(fruit)\n}\n```\n\n**4.filter函数(过滤集合中的数据)**\n\n```kotlin\nval list= listOf(\"Apple\",\"Banana\",\"Pear\")\nval newList =list.filter{it.length<=5}//保留五个字母以内的水果\n                 .map{it.toUpperCase()}\nfor(fruit in newlist){\n    println(fruit)\n}\n```\n\n这里先调用filter再调用map效率更高\n\n**5.any和all函数**\n\nany函数用来判断集合中是否至少存在一个元素满足指定条件\n\nall函数用来判断集合中是否所有元素都满足指定条件\n\n```kotlin\nval list= listOf(\"Apple\",\"Banana\",\"Pear\")\nval anyResult =list.any{it.length<=5}\nval allResult =list.all{it.length<=5}    \nprintln(\"anyResult is \"+anyResult+\",allResult is \"+allResult)\n```\n\n------\n\n# Java函数式API的使用\n\n**1.使用前提：**\n\nkotlin中调用一个java方法，并且该方法接收一个java单抽象方法接口参数，就可以使用函数式API(Java单抽象方法接口指的是接口中只有一个待实现的方法)\n\n**2.实例说明：**\n\n（1）Runnable实例kotlin形式\n\n```kotlin\nThread(object:Runnable{\n    override fun run(){\n        println(\"Thread is running\")\n    }\n}).start()\n```\n\n(2)只有一个方法可以将方法名省去\n\n```kotlin\nThread(Runnable{\n        println(\"Thread is running\")\n}).start()\n```\n\n(3)如果一个java方法参数列表中有且仅有一个java单抽象方法接口参数，可以将接口名省去\n\n```kotlin\nThread({\n        println(\"Thread is running\")\n}).start()\n```\n\n(4)根据lambda表达式可以更精简为\n\n```kotlin\nThread{      println(\"Thread is running\")\n}.start()\n```\n\n------\n\n# 空指针检查\n\nkotlin将空指针判定提前到了编译环节\n\n### 可空类型系统\n\n在类名的后面加一个问号表示可为空的类型\n\n如Int表示不可为空的整型，Int？表示可为空的整型\n\n### 判空辅助工具\n\n**1.\"?.\"操作符:**\n\n当对象不为空时正常调用，为空时啥也不干\n\n**2.“？:”操作符：**\n\n操作符左右两边均接收一个表达式，如果左边表达式不为空就返回左边否则返回右边\n\n以上两种方法结合使用：\n\n```kotlin\nfun getTextLength(text:String?)=text?.length?:0\n```\n\n**3.空指针检查机制可能出问题：**\n\n可以使用非空断言工具，在对象后面加**“！！”**，使其强行通过编译(写法有风险，谨慎使用)\n\n```kotlin\nval upperCase=content!!.toUpperCase()\n```\n\n**4.辅助工具----let：(函数)(let可以处理全局判空问题而if无法做到)**\n\n（1）形式：\n\n```kotlin\nobj.let{ obj2->\n//编写具体的逻辑\n}\n```\n\n其中obj2和obj是一个对象，防止变量重名故改为obj2\n\n(2)优化：\n\n？.和let结合使用\n\n```kotlin\nfun doStudy(study:Study?){\n      study?.let{\n          stu->\n          stu.readBooks()\n          stu.doHomeWork()\n      }\n}\n```\n\n可以简化为\n\n```kotlin\nfun doStudy(study:Study?){\n      study?.let{\n          it.readBooks()\n          it.doHomeWork()\n      }\n}\n```\n\n\n\n------\n\n# Kotlin一些小技巧\n\n### 字符串内嵌表达式\n\n可以用**${}**语法结构来代替加号连接符\n\n```kotlin\nprintln(\"hello,${obj.name}.nice to meet you!\")\n```\n\n如果表达式仅有一个变量时还可以将大括号省去\n\n### 函数的参数默认值\n\n不需要一一对应，可以使用键值对传参\n\n```kotlin\nfun printParams(num:Int=100,str:String){//num:Int=100即设定了默认值\n    println(\"num is $num，str is $str\")\n}\nfun main(){\n    printParams(str=\"world\")\n}\n```\n\n### 下划线写法\n\n在一些方法中如果只有部分参数使用到，未使用的参数可以用下划线代替\n\n------\n\n# as\n\nkotlin中类型强制转换时使用的关键字\n\n------\n\n# 内部类\n\n用**inner class**关键字来定义内部类\n\n------\n\n","source":"_posts/Kotlin语法.md","raw":"---\ntitle: Kotlin语法\ndate: 2025-04-15 20:59:56\ncategories:\n- Kotlin\ntags:\n---\n\n# 变量和函数\n\n### 变量\n\n1.由val和var声明变量，其中val声明不可变变量，var声明可变变量(**建议所有变量开始由val修饰，后根据需要选择用var修饰**)\n\n2.也可以显示的声明变量类型，如`val a : Int = 10`\n\n3.数据类型：\n\n![](../img/img51.jpg)\n\n### 函数\n\n1.标准形式：\n\n```kotlin\nfun methodName(param1: Int, param2: Int):Int{\nreturn 0\n}\n```\n\n2.语法糖：\n\n当一个函数只有一行代码时，可以直接将那行代码直接写在函数定义的尾部用等号连接\n\n`fun largeNumber(num1: Int, num2: Int) = max(num1,num2)`\n\n------\n\n# 程序的逻辑控制\n\n### if条件句\n\n1.写法和Java的一样\n\n2.和java不一样的点在于它可以有返回值，如：\n\n```kotlin\nfun largeNumber(num1: Int, num2: Int) : Int{\n    return if(num1 > num2){\n        num1\n    }else{\n        num2\n    }\n}\n```\n\n可以用语法糖简化为：\n\n```kotlin\nfun largeNumber(num1: Int, num2: Int) = if(num1 > num2) num1 else num2\n```\n\n\n\n### when条件句\n\n1.由这个例子说明：\n\n```kotlin\nfun getScore(name:String)=if(name==\"Tom\"){\n    86\n}else if (name==\"Jim\"){\n    77\n}else if (name==\"Jack\"){\n    95\n}else if (name==\"Lily\"){\n    100\n}else{\n    0\n}\n```\n\n这段显得冗杂可以用when简化\n\n```kotlin\nfun getScore(name:String)=when(name){\n    \"Tom\"->86\n    \"Jim\"->77\n    \"Jack\"->95\n    \"Lily\"->100\n    else->0\n}\n```\n\n2.标准格式：\n\n匹配值 -> { 执行逻辑 }（执行逻辑只有一行时括号可省）\n\n3.类型匹配：\n\n```kotlin\nfun checkNumber(num:Number)=when(num){\n    is Int->println(\"number is Int\")\n    is Double->println(\"number is Double\")\n    else->println(\"number not support\")\n}\n```\n\n4.不在when中传入参数：（用得少）\n\n```kotlin\nfun getScore(name:String)=when{\n   name == \"Tom\"->86\n   name == \"Jim\"->77\n   name ==  \"Jack\"->95\n   name ==  \"Lily\"->100\n    else->0\n}\n```\n\n5.有些情况必须用4中方法：\n\n假设所有名字以“Tom”开头的人分数只有86：\n\n```kotlin\nfun getScore(name:String)=when{\n   name.startsWith(\"Tom\")->86\n   name == \"Jim\"->77\n   name ==  \"Jack\"->95\n   name ==  \"Lily\"->100\n    else->0\n}\n```\n\n\n\n### 循环语句\n\n1.while循环和之前学的一样不再赘述\n\n2.Kotlin中区间表示：\n\n`val range = 0..10`两端都是闭区间\n\n`val range = 0 until 10`左闭右开区间\n\n`val range = 10 downTo 1`降序区间两端都是闭区间\n\n3.**step**关键字相当于**i++**\n\n2.for-in循环：\n\n```kotlin\nfor(i in 0..10){\n    println(i)\n}\nfor(i in 0 until 10 step 2){\n    println(i)\n}\nfor(i in 10 downTo 1){\n    println(i)\n}\n```\n\n\n\n------\n\n# 面向对象编程\n\n### 类和对象\n\n创建方法和之前的一样，实例化有区别,去掉了new关键字：\n\n`val p=Person()`\n\n### 继承与构造函数\n\n1.开放继承权限(kotlin中非抽象类默认不可继承)，在类前加上**open**关键字即可\n\n```kotlin\nopen class person{\n...\n}\n```\n\n2.继承，关键字由之前的extends变为了冒号，例如：\n\n```kotlin\nclass Student : Person(){\n    var sno= \"\"\n    var grade=0\n}\n```\n\nPerson后有一个括号是因为子类构造函数必须调用父类的构造函数\n\n3.构造函数分为**主构造函数**和**次构造函数**：\n\n**主构造函数**(没有函数体，逻辑写在init中)：\n\n```kotlin\nclass Student(val sno String,val grade :Int):Person(){\n    init{\n        println(sno)\n        println(grade)\n    }\n}\n```\n\n继承来的数据不需要用val或var修饰\n\n```kotlin\nclass Student(val sno :String,val grade :Int, name:String,age:Int):Person(name,age){\n}\n```\n\n**次构造函数**(几乎不会用到)\n\n当一个类既有主构造又有次构造函数，所有次构造函数都必须直接或间接调用主构造函数：\n\n```kotlin\nclass Student(val sno :String,val grade :Int, name:String,age:Int):Person(name,age){\n    constructor(name:String,age:Int):this(\"\",0,name,age){}//直接调用主构造函数\n    constructor():this(\"\",0){}//间接调用主构造函数\n}\n```\n\n只有次构造而没有主构造时：\n\n```kotlin\nclass Student:Person{\n    constructor(name:String,age:Int):super(name,age){}\n}\n```\n\n此时没有显式的定义主构造函数，又有次构造可以认为其没有主构造，既然没有主构造，那么Person类后也不需要加括号了\n\n### 接口\n\n1.接口和java也基本一样，接口中函数不要求有函数体\n\n```kotlin\ninterface Study {\n    fun readBooks()\n    fun doHomework()\n}\n```\n\n2.接口关键字也使用冒号\n\n```kotlin\nclass Student(name:String,age:Int):Person(name,age),Study {\n    override fun readBooks() {\n        println(name+\" is reading!\")\n    }\n\n    override fun doHomework() {\n        println(name+\" is doing homework\")\n    }\n}\n```\n\n调用如下：\n\n```kotlin\nfun main(){\n   val s=Student(\"Jack\" ,18)\n    doStudy(s)\n}\nfun doStudy(study:Study){\n    study.readBooks()\n    study.doHomework()\n}\n```\n\n3.kotlin中特有的功能：允许对接口中定义的函数进行默认实现\n\n```kotlin\ninterface Study {\n    fun readBooks()\n    fun doHomework(){\n        println(\"do homework default implementation.\")\n    }\n}\n```\n\n### 修饰符\n\n**1.public:**\n\n默认项，和java的一致\n\n**2.private：**\n\n只对当前类内部可见\n\n**3.protected:**\n\n只对当前类和子类可见\n\n**4.internal:**\n\n只对同一模块中的类可见\n\n![](../img/img52.jpg)\n\n### 数据类与单例类\n\n**1.数据类:**\n\n在class前加上data关键字\n\n**2.单例类:**\n\n作用：避免创建重复的对象\n\n用法：将class换成object即可\n\n调用：\n\n```kotlin\nobject Singleton{\n    fun singletonTest(){\n        println(\"singletonTest is called\")\n    }\n}\nfun main(){\n       Singleton.singletonTest()\n}\n```\n\n------\n\n# 集合的创建和遍历\n\n### listOf(不可变集合)\n\n创建和遍历：\n\n```kotlin\n val list= listOf(\"Apple\",\"Banana\",\"Pear\")\n    for (fruit in list){\n        println(fruit)\n    }\n```\n\n### mutableListOf(可变集合)\n\n创建和遍历：\n\n```kotlin\nval list= *mutableListOf*(\"Apple\",\"Banana\",\"Pear\")\nlist.add(\"Watermeleon\")\nfor (fruit in list){\n    *println*(fruit)\n}\n```\n\n### setOf和mutableSetOf\n\n用法和**listOf**和**mutableListOf**一模一样，只是**setOf**和**mutableSetOf**中不能放重复元素\n\n### Map集合(键值对形式)\n\n1.添加和读取数据用下标法\n\n```kotlin\nval map=HashMap<String,Int>()\nmap[\"Apple\"]=1//添加\nval number=map[\"Apple\"]//读取\n```\n\n2.简化(使用mapOf和mutableMapOf):\n\n```kotlin\nval map= mapOf(\"Apple\" to 1,\"Banana\" to 2,\"Oramge\" to 3)\n    for((fruit,number) in map){\n        println(\"fruit is \"+fruit+\",number is ,\" +number)\n    }\n```\n\n------\n\n# Lambda\n\n**1.语法结构：**\n\n{参数名1：参数类型，参数名2：参数类型  -> 函数体}（函数体可以编写任一行代码，最后一行代码会自动作为返回值）\n\n**2.一些简化点：（函数API实例说明）**\n\n```kotlin\nval maxLengthFruit = list.maxBy({fruit:String->fruit.length})\n```\n\n(1)当Lambda参数是函数最后一个参数时可以将**lambda**表达式移到函数括号的外面\n\n```kotlin\nval maxLengthFruit = list.maxBy(){fruit:String->fruit.length}\n```\n\n(2)当Lambda参数是函数唯一一个参数时可以将函数的括号删掉\n\n```kotlin\nval maxLengthFruit = list.maxBy{fruit:String->fruit.length}\n```\n\n(3)因为Kotlin具有类型推到机制大多情况不需声明类型\n\n```kotlin\nval maxLengthFruit = list.maxBy{fruit->fruit.length}\n```\n\n(4)当表达式参数列表只有一个参数时，也可以不声明参数名，用it来代替\n\n```kotlin\nval maxLengthFruit = list.maxBy{it.length}\n```\n\n**3.map函数(对集合元素映射转化)**\n\n```kotlin\nval list= listOf(\"Apple\",\"Banana\",\"Pear\")\nval newList =list.map{it.toUpperCase()}\nfor(fruit in newlist){\n    println(fruit)\n}\n```\n\n**4.filter函数(过滤集合中的数据)**\n\n```kotlin\nval list= listOf(\"Apple\",\"Banana\",\"Pear\")\nval newList =list.filter{it.length<=5}//保留五个字母以内的水果\n                 .map{it.toUpperCase()}\nfor(fruit in newlist){\n    println(fruit)\n}\n```\n\n这里先调用filter再调用map效率更高\n\n**5.any和all函数**\n\nany函数用来判断集合中是否至少存在一个元素满足指定条件\n\nall函数用来判断集合中是否所有元素都满足指定条件\n\n```kotlin\nval list= listOf(\"Apple\",\"Banana\",\"Pear\")\nval anyResult =list.any{it.length<=5}\nval allResult =list.all{it.length<=5}    \nprintln(\"anyResult is \"+anyResult+\",allResult is \"+allResult)\n```\n\n------\n\n# Java函数式API的使用\n\n**1.使用前提：**\n\nkotlin中调用一个java方法，并且该方法接收一个java单抽象方法接口参数，就可以使用函数式API(Java单抽象方法接口指的是接口中只有一个待实现的方法)\n\n**2.实例说明：**\n\n（1）Runnable实例kotlin形式\n\n```kotlin\nThread(object:Runnable{\n    override fun run(){\n        println(\"Thread is running\")\n    }\n}).start()\n```\n\n(2)只有一个方法可以将方法名省去\n\n```kotlin\nThread(Runnable{\n        println(\"Thread is running\")\n}).start()\n```\n\n(3)如果一个java方法参数列表中有且仅有一个java单抽象方法接口参数，可以将接口名省去\n\n```kotlin\nThread({\n        println(\"Thread is running\")\n}).start()\n```\n\n(4)根据lambda表达式可以更精简为\n\n```kotlin\nThread{      println(\"Thread is running\")\n}.start()\n```\n\n------\n\n# 空指针检查\n\nkotlin将空指针判定提前到了编译环节\n\n### 可空类型系统\n\n在类名的后面加一个问号表示可为空的类型\n\n如Int表示不可为空的整型，Int？表示可为空的整型\n\n### 判空辅助工具\n\n**1.\"?.\"操作符:**\n\n当对象不为空时正常调用，为空时啥也不干\n\n**2.“？:”操作符：**\n\n操作符左右两边均接收一个表达式，如果左边表达式不为空就返回左边否则返回右边\n\n以上两种方法结合使用：\n\n```kotlin\nfun getTextLength(text:String?)=text?.length?:0\n```\n\n**3.空指针检查机制可能出问题：**\n\n可以使用非空断言工具，在对象后面加**“！！”**，使其强行通过编译(写法有风险，谨慎使用)\n\n```kotlin\nval upperCase=content!!.toUpperCase()\n```\n\n**4.辅助工具----let：(函数)(let可以处理全局判空问题而if无法做到)**\n\n（1）形式：\n\n```kotlin\nobj.let{ obj2->\n//编写具体的逻辑\n}\n```\n\n其中obj2和obj是一个对象，防止变量重名故改为obj2\n\n(2)优化：\n\n？.和let结合使用\n\n```kotlin\nfun doStudy(study:Study?){\n      study?.let{\n          stu->\n          stu.readBooks()\n          stu.doHomeWork()\n      }\n}\n```\n\n可以简化为\n\n```kotlin\nfun doStudy(study:Study?){\n      study?.let{\n          it.readBooks()\n          it.doHomeWork()\n      }\n}\n```\n\n\n\n------\n\n# Kotlin一些小技巧\n\n### 字符串内嵌表达式\n\n可以用**${}**语法结构来代替加号连接符\n\n```kotlin\nprintln(\"hello,${obj.name}.nice to meet you!\")\n```\n\n如果表达式仅有一个变量时还可以将大括号省去\n\n### 函数的参数默认值\n\n不需要一一对应，可以使用键值对传参\n\n```kotlin\nfun printParams(num:Int=100,str:String){//num:Int=100即设定了默认值\n    println(\"num is $num，str is $str\")\n}\nfun main(){\n    printParams(str=\"world\")\n}\n```\n\n### 下划线写法\n\n在一些方法中如果只有部分参数使用到，未使用的参数可以用下划线代替\n\n------\n\n# as\n\nkotlin中类型强制转换时使用的关键字\n\n------\n\n# 内部类\n\n用**inner class**关键字来定义内部类\n\n------\n\n","slug":"Kotlin语法","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gc3000ts4s73tboaekl","content":"<h1 id=\"变量和函数\"><a href=\"#变量和函数\" class=\"headerlink\" title=\"变量和函数\"></a>变量和函数</h1><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>1.由val和var声明变量，其中val声明不可变变量，var声明可变变量(<strong>建议所有变量开始由val修饰，后根据需要选择用var修饰</strong>)</p>\n<p>2.也可以显示的声明变量类型，如<code>val a : Int = 10</code></p>\n<p>3.数据类型：</p>\n<p><img src=\"/../img/img51.jpg\"></p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>1.标准形式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">methodName</span><span class=\"params\">(param1: <span class=\"type\">Int</span>, param2: <span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.语法糖：</p>\n<p>当一个函数只有一行代码时，可以直接将那行代码直接写在函数定义的尾部用等号连接</p>\n<p><code>fun largeNumber(num1: Int, num2: Int) = max(num1,num2)</code></p>\n<hr>\n<h1 id=\"程序的逻辑控制\"><a href=\"#程序的逻辑控制\" class=\"headerlink\" title=\"程序的逻辑控制\"></a>程序的逻辑控制</h1><h3 id=\"if条件句\"><a href=\"#if条件句\" class=\"headerlink\" title=\"if条件句\"></a>if条件句</h3><p>1.写法和Java的一样</p>\n<p>2.和java不一样的点在于它可以有返回值，如：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">largeNumber</span><span class=\"params\">(num1: <span class=\"type\">Int</span>, num2: <span class=\"type\">Int</span>)</span></span> : <span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">if</span>(num1 &gt; num2)&#123;</span><br><span class=\"line\">        num1</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        num2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以用语法糖简化为：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">largeNumber</span><span class=\"params\">(num1: <span class=\"type\">Int</span>, num2: <span class=\"type\">Int</span>)</span></span> = <span class=\"keyword\">if</span>(num1 &gt; num2) num1 <span class=\"keyword\">else</span> num2</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"when条件句\"><a href=\"#when条件句\" class=\"headerlink\" title=\"when条件句\"></a>when条件句</h3><p>1.由这个例子说明：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScore</span><span class=\"params\">(name:<span class=\"type\">String</span>)</span></span>=<span class=\"keyword\">if</span>(name==<span class=\"string\">&quot;Tom&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"number\">86</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (name==<span class=\"string\">&quot;Jim&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"number\">77</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (name==<span class=\"string\">&quot;Jack&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"number\">95</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (name==<span class=\"string\">&quot;Lily&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"number\">100</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段显得冗杂可以用when简化</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScore</span><span class=\"params\">(name:<span class=\"type\">String</span>)</span></span>=<span class=\"keyword\">when</span>(name)&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Tom&quot;</span>-&gt;<span class=\"number\">86</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Jim&quot;</span>-&gt;<span class=\"number\">77</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Jack&quot;</span>-&gt;<span class=\"number\">95</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Lily&quot;</span>-&gt;<span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>-&gt;<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.标准格式：</p>\n<p>匹配值 -&gt; { 执行逻辑 }（执行逻辑只有一行时括号可省）</p>\n<p>3.类型匹配：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">checkNumber</span><span class=\"params\">(num:<span class=\"type\">Number</span>)</span></span>=<span class=\"keyword\">when</span>(num)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">is</span> <span class=\"built_in\">Int</span>-&gt;println(<span class=\"string\">&quot;number is Int&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">is</span> <span class=\"built_in\">Double</span>-&gt;println(<span class=\"string\">&quot;number is Double&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>-&gt;println(<span class=\"string\">&quot;number not support&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.不在when中传入参数：（用得少）</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScore</span><span class=\"params\">(name:<span class=\"type\">String</span>)</span></span>=<span class=\"keyword\">when</span>&#123;</span><br><span class=\"line\">   name == <span class=\"string\">&quot;Tom&quot;</span>-&gt;<span class=\"number\">86</span></span><br><span class=\"line\">   name == <span class=\"string\">&quot;Jim&quot;</span>-&gt;<span class=\"number\">77</span></span><br><span class=\"line\">   name ==  <span class=\"string\">&quot;Jack&quot;</span>-&gt;<span class=\"number\">95</span></span><br><span class=\"line\">   name ==  <span class=\"string\">&quot;Lily&quot;</span>-&gt;<span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>-&gt;<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.有些情况必须用4中方法：</p>\n<p>假设所有名字以“Tom”开头的人分数只有86：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScore</span><span class=\"params\">(name:<span class=\"type\">String</span>)</span></span>=<span class=\"keyword\">when</span>&#123;</span><br><span class=\"line\">   name.startsWith(<span class=\"string\">&quot;Tom&quot;</span>)-&gt;<span class=\"number\">86</span></span><br><span class=\"line\">   name == <span class=\"string\">&quot;Jim&quot;</span>-&gt;<span class=\"number\">77</span></span><br><span class=\"line\">   name ==  <span class=\"string\">&quot;Jack&quot;</span>-&gt;<span class=\"number\">95</span></span><br><span class=\"line\">   name ==  <span class=\"string\">&quot;Lily&quot;</span>-&gt;<span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>-&gt;<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h3><p>1.while循环和之前学的一样不再赘述</p>\n<p>2.Kotlin中区间表示：</p>\n<p><code>val range = 0..10</code>两端都是闭区间</p>\n<p><code>val range = 0 until 10</code>左闭右开区间</p>\n<p><code>val range = 10 downTo 1</code>降序区间两端都是闭区间</p>\n<p>3.<strong>step</strong>关键字相当于<strong>i++</strong></p>\n<p>2.for-in循环：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.10</span>)&#123;</span><br><span class=\"line\">    println(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">10</span> step <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    println(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">10</span> downTo <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    println(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h1><h3 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h3><p>创建方法和之前的一样，实例化有区别,去掉了new关键字：</p>\n<p><code>val p=Person()</code></p>\n<h3 id=\"继承与构造函数\"><a href=\"#继承与构造函数\" class=\"headerlink\" title=\"继承与构造函数\"></a>继承与构造函数</h3><p>1.开放继承权限(kotlin中非抽象类默认不可继承)，在类前加上<strong>open</strong>关键字即可</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">person</span>&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.继承，关键字由之前的extends变为了冒号，例如：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> : <span class=\"type\">Person</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sno= <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> grade=<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Person后有一个括号是因为子类构造函数必须调用父类的构造函数</p>\n<p>3.构造函数分为<strong>主构造函数</strong>和<strong>次构造函数</strong>：</p>\n<p><strong>主构造函数</strong>(没有函数体，逻辑写在init中)：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"keyword\">val</span> sno String,<span class=\"keyword\">val</span> grade :<span class=\"built_in\">Int</span>):Person()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>&#123;</span><br><span class=\"line\">        println(sno)</span><br><span class=\"line\">        println(grade)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继承来的数据不需要用val或var修饰</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"keyword\">val</span> sno :String,<span class=\"keyword\">val</span> grade :<span class=\"built_in\">Int</span>, name:String,age:<span class=\"built_in\">Int</span>):Person(name,age)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>次构造函数</strong>(几乎不会用到)</p>\n<p>当一个类既有主构造又有次构造函数，所有次构造函数都必须直接或间接调用主构造函数：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"keyword\">val</span> sno :String,<span class=\"keyword\">val</span> grade :<span class=\"built_in\">Int</span>, name:String,age:<span class=\"built_in\">Int</span>):Person(name,age)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name:String,age:<span class=\"built_in\">Int</span>):<span class=\"keyword\">this</span>(<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>,name,age)&#123;&#125;<span class=\"comment\">//直接调用主构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>():<span class=\"keyword\">this</span>(<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>)&#123;&#125;<span class=\"comment\">//间接调用主构造函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只有次构造而没有主构造时：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>:<span class=\"type\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name:String,age:<span class=\"built_in\">Int</span>):<span class=\"keyword\">super</span>(name,age)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时没有显式的定义主构造函数，又有次构造可以认为其没有主构造，既然没有主构造，那么Person类后也不需要加括号了</p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>1.接口和java也基本一样，接口中函数不要求有函数体</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Study</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">readBooks</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doHomework</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.接口关键字也使用冒号</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(name:String,age:<span class=\"built_in\">Int</span>):Person(name,age),Study &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">readBooks</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(name+<span class=\"string\">&quot; is reading!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doHomework</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(name+<span class=\"string\">&quot; is doing homework&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">val</span> s=Student(<span class=\"string\">&quot;Jack&quot;</span> ,<span class=\"number\">18</span>)</span><br><span class=\"line\">    doStudy(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doStudy</span><span class=\"params\">(study:<span class=\"type\">Study</span>)</span></span>&#123;</span><br><span class=\"line\">    study.readBooks()</span><br><span class=\"line\">    study.doHomework()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.kotlin中特有的功能：允许对接口中定义的函数进行默认实现</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Study</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">readBooks</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doHomework</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do homework default implementation.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><p><strong>1.public:</strong></p>\n<p>默认项，和java的一致</p>\n<p><strong>2.private：</strong></p>\n<p>只对当前类内部可见</p>\n<p><strong>3.protected:</strong></p>\n<p>只对当前类和子类可见</p>\n<p><strong>4.internal:</strong></p>\n<p>只对同一模块中的类可见</p>\n<p><img src=\"/../img/img52.jpg\"></p>\n<h3 id=\"数据类与单例类\"><a href=\"#数据类与单例类\" class=\"headerlink\" title=\"数据类与单例类\"></a>数据类与单例类</h3><p><strong>1.数据类:</strong></p>\n<p>在class前加上data关键字</p>\n<p><strong>2.单例类:</strong></p>\n<p>作用：避免创建重复的对象</p>\n<p>用法：将class换成object即可</p>\n<p>调用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> Singleton&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">singletonTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;singletonTest is called&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       Singleton.singletonTest()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"集合的创建和遍历\"><a href=\"#集合的创建和遍历\" class=\"headerlink\" title=\"集合的创建和遍历\"></a>集合的创建和遍历</h1><h3 id=\"listOf-不可变集合\"><a href=\"#listOf-不可变集合\" class=\"headerlink\" title=\"listOf(不可变集合)\"></a>listOf(不可变集合)</h3><p>创建和遍历：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (fruit <span class=\"keyword\">in</span> list)&#123;</span><br><span class=\"line\">       println(fruit)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mutableListOf-可变集合\"><a href=\"#mutableListOf-可变集合\" class=\"headerlink\" title=\"mutableListOf(可变集合)\"></a>mutableListOf(可变集合)</h3><p>创建和遍历：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= *mutableListOf*(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;Watermeleon&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (fruit <span class=\"keyword\">in</span> list)&#123;</span><br><span class=\"line\">    *println*(fruit)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setOf和mutableSetOf\"><a href=\"#setOf和mutableSetOf\" class=\"headerlink\" title=\"setOf和mutableSetOf\"></a>setOf和mutableSetOf</h3><p>用法和<strong>listOf</strong>和<strong>mutableListOf</strong>一模一样，只是<strong>setOf</strong>和<strong>mutableSetOf</strong>中不能放重复元素</p>\n<h3 id=\"Map集合-键值对形式\"><a href=\"#Map集合-键值对形式\" class=\"headerlink\" title=\"Map集合(键值对形式)\"></a>Map集合(键值对形式)</h3><p>1.添加和读取数据用下标法</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map=HashMap&lt;String,<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">map[<span class=\"string\">&quot;Apple&quot;</span>]=<span class=\"number\">1</span><span class=\"comment\">//添加</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> number=map[<span class=\"string\">&quot;Apple&quot;</span>]<span class=\"comment\">//读取</span></span><br></pre></td></tr></table></figure>\n\n<p>2.简化(使用mapOf和mutableMapOf):</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map= mapOf(<span class=\"string\">&quot;Apple&quot;</span> to <span class=\"number\">1</span>,<span class=\"string\">&quot;Banana&quot;</span> to <span class=\"number\">2</span>,<span class=\"string\">&quot;Oramge&quot;</span> to <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>((fruit,number) <span class=\"keyword\">in</span> map)&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;fruit is &quot;</span>+fruit+<span class=\"string\">&quot;,number is ,&quot;</span> +number)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h1><p><strong>1.语法结构：</strong></p>\n<p>{参数名1：参数类型，参数名2：参数类型  -&gt; 函数体}（函数体可以编写任一行代码，最后一行代码会自动作为返回值）</p>\n<p><strong>2.一些简化点：（函数API实例说明）</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> maxLengthFruit = list.maxBy(&#123;fruit:String-&gt;fruit.length&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>(1)当Lambda参数是函数最后一个参数时可以将<strong>lambda</strong>表达式移到函数括号的外面</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> maxLengthFruit = list.maxBy()&#123;fruit:String-&gt;fruit.length&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2)当Lambda参数是函数唯一一个参数时可以将函数的括号删掉</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> maxLengthFruit = list.maxBy&#123;fruit:String-&gt;fruit.length&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(3)因为Kotlin具有类型推到机制大多情况不需声明类型</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> maxLengthFruit = list.maxBy&#123;fruit-&gt;fruit.length&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(4)当表达式参数列表只有一个参数时，也可以不声明参数名，用it来代替</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> maxLengthFruit = list.maxBy&#123;it.length&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.map函数(对集合元素映射转化)</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> newList =list.map&#123;it.toUpperCase()&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(fruit <span class=\"keyword\">in</span> newlist)&#123;</span><br><span class=\"line\">    println(fruit)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.filter函数(过滤集合中的数据)</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> newList =list.filter&#123;it.length&lt;=<span class=\"number\">5</span>&#125;<span class=\"comment\">//保留五个字母以内的水果</span></span><br><span class=\"line\">                 .map&#123;it.toUpperCase()&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(fruit <span class=\"keyword\">in</span> newlist)&#123;</span><br><span class=\"line\">    println(fruit)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里先调用filter再调用map效率更高</p>\n<p><strong>5.any和all函数</strong></p>\n<p>any函数用来判断集合中是否至少存在一个元素满足指定条件</p>\n<p>all函数用来判断集合中是否所有元素都满足指定条件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> anyResult =list.any&#123;it.length&lt;=<span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">val</span> allResult =list.all&#123;it.length&lt;=<span class=\"number\">5</span>&#125;    </span><br><span class=\"line\">println(<span class=\"string\">&quot;anyResult is &quot;</span>+anyResult+<span class=\"string\">&quot;,allResult is &quot;</span>+allResult)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Java函数式API的使用\"><a href=\"#Java函数式API的使用\" class=\"headerlink\" title=\"Java函数式API的使用\"></a>Java函数式API的使用</h1><p><strong>1.使用前提：</strong></p>\n<p>kotlin中调用一个java方法，并且该方法接收一个java单抽象方法接口参数，就可以使用函数式API(Java单抽象方法接口指的是接口中只有一个待实现的方法)</p>\n<p><strong>2.实例说明：</strong></p>\n<p>（1）Runnable实例kotlin形式</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread(<span class=\"keyword\">object</span>:Runnable&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Thread is running&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).start()</span><br></pre></td></tr></table></figure>\n\n<p>(2)只有一个方法可以将方法名省去</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread(Runnable&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Thread is running&quot;</span>)</span><br><span class=\"line\">&#125;).start()</span><br></pre></td></tr></table></figure>\n\n<p>(3)如果一个java方法参数列表中有且仅有一个java单抽象方法接口参数，可以将接口名省去</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread(&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Thread is running&quot;</span>)</span><br><span class=\"line\">&#125;).start()</span><br></pre></td></tr></table></figure>\n\n<p>(4)根据lambda表达式可以更精简为</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread&#123;      println(<span class=\"string\">&quot;Thread is running&quot;</span>)</span><br><span class=\"line\">&#125;.start()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"空指针检查\"><a href=\"#空指针检查\" class=\"headerlink\" title=\"空指针检查\"></a>空指针检查</h1><p>kotlin将空指针判定提前到了编译环节</p>\n<h3 id=\"可空类型系统\"><a href=\"#可空类型系统\" class=\"headerlink\" title=\"可空类型系统\"></a>可空类型系统</h3><p>在类名的后面加一个问号表示可为空的类型</p>\n<p>如Int表示不可为空的整型，Int？表示可为空的整型</p>\n<h3 id=\"判空辅助工具\"><a href=\"#判空辅助工具\" class=\"headerlink\" title=\"判空辅助工具\"></a>判空辅助工具</h3><p><strong>1.”?.”操作符:</strong></p>\n<p>当对象不为空时正常调用，为空时啥也不干</p>\n<p><strong>2.“？:”操作符：</strong></p>\n<p>操作符左右两边均接收一个表达式，如果左边表达式不为空就返回左边否则返回右边</p>\n<p>以上两种方法结合使用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getTextLength</span><span class=\"params\">(text:<span class=\"type\">String</span>?)</span></span>=text?.length?:<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3.空指针检查机制可能出问题：</strong></p>\n<p>可以使用非空断言工具，在对象后面加**“！！”**，使其强行通过编译(写法有风险，谨慎使用)</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> upperCase=content!!.toUpperCase()</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.辅助工具—-let：(函数)(let可以处理全局判空问题而if无法做到)</strong></p>\n<p>（1）形式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.let&#123; obj2-&gt;</span><br><span class=\"line\"><span class=\"comment\">//编写具体的逻辑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中obj2和obj是一个对象，防止变量重名故改为obj2</p>\n<p>(2)优化：</p>\n<p>？.和let结合使用</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doStudy</span><span class=\"params\">(study:<span class=\"type\">Study</span>?)</span></span>&#123;</span><br><span class=\"line\">      study?.let&#123;</span><br><span class=\"line\">          stu-&gt;</span><br><span class=\"line\">          stu.readBooks()</span><br><span class=\"line\">          stu.doHomeWork()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以简化为</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doStudy</span><span class=\"params\">(study:<span class=\"type\">Study</span>?)</span></span>&#123;</span><br><span class=\"line\">      study?.let&#123;</span><br><span class=\"line\">          it.readBooks()</span><br><span class=\"line\">          it.doHomeWork()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"Kotlin一些小技巧\"><a href=\"#Kotlin一些小技巧\" class=\"headerlink\" title=\"Kotlin一些小技巧\"></a>Kotlin一些小技巧</h1><h3 id=\"字符串内嵌表达式\"><a href=\"#字符串内嵌表达式\" class=\"headerlink\" title=\"字符串内嵌表达式\"></a>字符串内嵌表达式</h3><p>可以用**${}**语法结构来代替加号连接符</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(<span class=\"string\">&quot;hello,<span class=\"subst\">$&#123;obj.name&#125;</span>.nice to meet you!&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果表达式仅有一个变量时还可以将大括号省去</p>\n<h3 id=\"函数的参数默认值\"><a href=\"#函数的参数默认值\" class=\"headerlink\" title=\"函数的参数默认值\"></a>函数的参数默认值</h3><p>不需要一一对应，可以使用键值对传参</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printParams</span><span class=\"params\">(num:<span class=\"type\">Int</span>=<span class=\"number\">100</span>,str:<span class=\"type\">String</span>)</span></span>&#123;<span class=\"comment\">//num:Int=100即设定了默认值</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;num is <span class=\"variable\">$num</span>，str is <span class=\"variable\">$str</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    printParams(str=<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下划线写法\"><a href=\"#下划线写法\" class=\"headerlink\" title=\"下划线写法\"></a>下划线写法</h3><p>在一些方法中如果只有部分参数使用到，未使用的参数可以用下划线代替</p>\n<hr>\n<h1 id=\"as\"><a href=\"#as\" class=\"headerlink\" title=\"as\"></a>as</h1><p>kotlin中类型强制转换时使用的关键字</p>\n<hr>\n<h1 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h1><p>用<strong>inner class</strong>关键字来定义内部类</p>\n<hr>\n","excerpt":"变量和函数\n变量\n1.由val和var声明变量，其中val声明不可变变量，var声明可变变量(建议所有变量开始由val修饰，后根据需要选择用var修饰)\n\n2.也可以显示的声明变量类型，如val a : Int = 10\n\n3.数据类型：\n\n\n\n函数\n1.标准形式：\n\n1\n2\n3\n\n\nfun methodName(param1: Int, param2: Int):Int{\nreturn 0\n}\n\n\n2.语法糖：\n\n当一个函数只有一行代码时，可以直接将那行代码直接写在函数定义的尾部用等号连接\n\nfun largeNumber(num1: Int, num2: Int) = max(num1,n","more":"<h1 id=\"变量和函数\"><a href=\"#变量和函数\" class=\"headerlink\" title=\"变量和函数\"></a>变量和函数</h1><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>1.由val和var声明变量，其中val声明不可变变量，var声明可变变量(<strong>建议所有变量开始由val修饰，后根据需要选择用var修饰</strong>)</p>\n<p>2.也可以显示的声明变量类型，如<code>val a : Int = 10</code></p>\n<p>3.数据类型：</p>\n<p><img src=\"/../img/img51.jpg\"></p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>1.标准形式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">methodName</span><span class=\"params\">(param1: <span class=\"type\">Int</span>, param2: <span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.语法糖：</p>\n<p>当一个函数只有一行代码时，可以直接将那行代码直接写在函数定义的尾部用等号连接</p>\n<p><code>fun largeNumber(num1: Int, num2: Int) = max(num1,num2)</code></p>\n<hr>\n<h1 id=\"程序的逻辑控制\"><a href=\"#程序的逻辑控制\" class=\"headerlink\" title=\"程序的逻辑控制\"></a>程序的逻辑控制</h1><h3 id=\"if条件句\"><a href=\"#if条件句\" class=\"headerlink\" title=\"if条件句\"></a>if条件句</h3><p>1.写法和Java的一样</p>\n<p>2.和java不一样的点在于它可以有返回值，如：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">largeNumber</span><span class=\"params\">(num1: <span class=\"type\">Int</span>, num2: <span class=\"type\">Int</span>)</span></span> : <span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">if</span>(num1 &gt; num2)&#123;</span><br><span class=\"line\">        num1</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        num2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以用语法糖简化为：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">largeNumber</span><span class=\"params\">(num1: <span class=\"type\">Int</span>, num2: <span class=\"type\">Int</span>)</span></span> = <span class=\"keyword\">if</span>(num1 &gt; num2) num1 <span class=\"keyword\">else</span> num2</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"when条件句\"><a href=\"#when条件句\" class=\"headerlink\" title=\"when条件句\"></a>when条件句</h3><p>1.由这个例子说明：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScore</span><span class=\"params\">(name:<span class=\"type\">String</span>)</span></span>=<span class=\"keyword\">if</span>(name==<span class=\"string\">&quot;Tom&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"number\">86</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (name==<span class=\"string\">&quot;Jim&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"number\">77</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (name==<span class=\"string\">&quot;Jack&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"number\">95</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (name==<span class=\"string\">&quot;Lily&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"number\">100</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段显得冗杂可以用when简化</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScore</span><span class=\"params\">(name:<span class=\"type\">String</span>)</span></span>=<span class=\"keyword\">when</span>(name)&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Tom&quot;</span>-&gt;<span class=\"number\">86</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Jim&quot;</span>-&gt;<span class=\"number\">77</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Jack&quot;</span>-&gt;<span class=\"number\">95</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Lily&quot;</span>-&gt;<span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>-&gt;<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.标准格式：</p>\n<p>匹配值 -&gt; { 执行逻辑 }（执行逻辑只有一行时括号可省）</p>\n<p>3.类型匹配：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">checkNumber</span><span class=\"params\">(num:<span class=\"type\">Number</span>)</span></span>=<span class=\"keyword\">when</span>(num)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">is</span> <span class=\"built_in\">Int</span>-&gt;println(<span class=\"string\">&quot;number is Int&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">is</span> <span class=\"built_in\">Double</span>-&gt;println(<span class=\"string\">&quot;number is Double&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>-&gt;println(<span class=\"string\">&quot;number not support&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.不在when中传入参数：（用得少）</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScore</span><span class=\"params\">(name:<span class=\"type\">String</span>)</span></span>=<span class=\"keyword\">when</span>&#123;</span><br><span class=\"line\">   name == <span class=\"string\">&quot;Tom&quot;</span>-&gt;<span class=\"number\">86</span></span><br><span class=\"line\">   name == <span class=\"string\">&quot;Jim&quot;</span>-&gt;<span class=\"number\">77</span></span><br><span class=\"line\">   name ==  <span class=\"string\">&quot;Jack&quot;</span>-&gt;<span class=\"number\">95</span></span><br><span class=\"line\">   name ==  <span class=\"string\">&quot;Lily&quot;</span>-&gt;<span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>-&gt;<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.有些情况必须用4中方法：</p>\n<p>假设所有名字以“Tom”开头的人分数只有86：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScore</span><span class=\"params\">(name:<span class=\"type\">String</span>)</span></span>=<span class=\"keyword\">when</span>&#123;</span><br><span class=\"line\">   name.startsWith(<span class=\"string\">&quot;Tom&quot;</span>)-&gt;<span class=\"number\">86</span></span><br><span class=\"line\">   name == <span class=\"string\">&quot;Jim&quot;</span>-&gt;<span class=\"number\">77</span></span><br><span class=\"line\">   name ==  <span class=\"string\">&quot;Jack&quot;</span>-&gt;<span class=\"number\">95</span></span><br><span class=\"line\">   name ==  <span class=\"string\">&quot;Lily&quot;</span>-&gt;<span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>-&gt;<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h3><p>1.while循环和之前学的一样不再赘述</p>\n<p>2.Kotlin中区间表示：</p>\n<p><code>val range = 0..10</code>两端都是闭区间</p>\n<p><code>val range = 0 until 10</code>左闭右开区间</p>\n<p><code>val range = 10 downTo 1</code>降序区间两端都是闭区间</p>\n<p>3.<strong>step</strong>关键字相当于<strong>i++</strong></p>\n<p>2.for-in循环：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.10</span>)&#123;</span><br><span class=\"line\">    println(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">10</span> step <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    println(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">10</span> downTo <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    println(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h1><h3 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h3><p>创建方法和之前的一样，实例化有区别,去掉了new关键字：</p>\n<p><code>val p=Person()</code></p>\n<h3 id=\"继承与构造函数\"><a href=\"#继承与构造函数\" class=\"headerlink\" title=\"继承与构造函数\"></a>继承与构造函数</h3><p>1.开放继承权限(kotlin中非抽象类默认不可继承)，在类前加上<strong>open</strong>关键字即可</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">person</span>&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.继承，关键字由之前的extends变为了冒号，例如：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> : <span class=\"type\">Person</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sno= <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> grade=<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Person后有一个括号是因为子类构造函数必须调用父类的构造函数</p>\n<p>3.构造函数分为<strong>主构造函数</strong>和<strong>次构造函数</strong>：</p>\n<p><strong>主构造函数</strong>(没有函数体，逻辑写在init中)：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"keyword\">val</span> sno String,<span class=\"keyword\">val</span> grade :<span class=\"built_in\">Int</span>):Person()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>&#123;</span><br><span class=\"line\">        println(sno)</span><br><span class=\"line\">        println(grade)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继承来的数据不需要用val或var修饰</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"keyword\">val</span> sno :String,<span class=\"keyword\">val</span> grade :<span class=\"built_in\">Int</span>, name:String,age:<span class=\"built_in\">Int</span>):Person(name,age)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>次构造函数</strong>(几乎不会用到)</p>\n<p>当一个类既有主构造又有次构造函数，所有次构造函数都必须直接或间接调用主构造函数：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"keyword\">val</span> sno :String,<span class=\"keyword\">val</span> grade :<span class=\"built_in\">Int</span>, name:String,age:<span class=\"built_in\">Int</span>):Person(name,age)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name:String,age:<span class=\"built_in\">Int</span>):<span class=\"keyword\">this</span>(<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>,name,age)&#123;&#125;<span class=\"comment\">//直接调用主构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>():<span class=\"keyword\">this</span>(<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>)&#123;&#125;<span class=\"comment\">//间接调用主构造函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只有次构造而没有主构造时：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>:<span class=\"type\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name:String,age:<span class=\"built_in\">Int</span>):<span class=\"keyword\">super</span>(name,age)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时没有显式的定义主构造函数，又有次构造可以认为其没有主构造，既然没有主构造，那么Person类后也不需要加括号了</p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>1.接口和java也基本一样，接口中函数不要求有函数体</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Study</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">readBooks</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doHomework</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.接口关键字也使用冒号</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(name:String,age:<span class=\"built_in\">Int</span>):Person(name,age),Study &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">readBooks</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(name+<span class=\"string\">&quot; is reading!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doHomework</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(name+<span class=\"string\">&quot; is doing homework&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">val</span> s=Student(<span class=\"string\">&quot;Jack&quot;</span> ,<span class=\"number\">18</span>)</span><br><span class=\"line\">    doStudy(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doStudy</span><span class=\"params\">(study:<span class=\"type\">Study</span>)</span></span>&#123;</span><br><span class=\"line\">    study.readBooks()</span><br><span class=\"line\">    study.doHomework()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.kotlin中特有的功能：允许对接口中定义的函数进行默认实现</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Study</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">readBooks</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doHomework</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do homework default implementation.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><p><strong>1.public:</strong></p>\n<p>默认项，和java的一致</p>\n<p><strong>2.private：</strong></p>\n<p>只对当前类内部可见</p>\n<p><strong>3.protected:</strong></p>\n<p>只对当前类和子类可见</p>\n<p><strong>4.internal:</strong></p>\n<p>只对同一模块中的类可见</p>\n<p><img src=\"/../img/img52.jpg\"></p>\n<h3 id=\"数据类与单例类\"><a href=\"#数据类与单例类\" class=\"headerlink\" title=\"数据类与单例类\"></a>数据类与单例类</h3><p><strong>1.数据类:</strong></p>\n<p>在class前加上data关键字</p>\n<p><strong>2.单例类:</strong></p>\n<p>作用：避免创建重复的对象</p>\n<p>用法：将class换成object即可</p>\n<p>调用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> Singleton&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">singletonTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;singletonTest is called&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       Singleton.singletonTest()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"集合的创建和遍历\"><a href=\"#集合的创建和遍历\" class=\"headerlink\" title=\"集合的创建和遍历\"></a>集合的创建和遍历</h1><h3 id=\"listOf-不可变集合\"><a href=\"#listOf-不可变集合\" class=\"headerlink\" title=\"listOf(不可变集合)\"></a>listOf(不可变集合)</h3><p>创建和遍历：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (fruit <span class=\"keyword\">in</span> list)&#123;</span><br><span class=\"line\">       println(fruit)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mutableListOf-可变集合\"><a href=\"#mutableListOf-可变集合\" class=\"headerlink\" title=\"mutableListOf(可变集合)\"></a>mutableListOf(可变集合)</h3><p>创建和遍历：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= *mutableListOf*(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;Watermeleon&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (fruit <span class=\"keyword\">in</span> list)&#123;</span><br><span class=\"line\">    *println*(fruit)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setOf和mutableSetOf\"><a href=\"#setOf和mutableSetOf\" class=\"headerlink\" title=\"setOf和mutableSetOf\"></a>setOf和mutableSetOf</h3><p>用法和<strong>listOf</strong>和<strong>mutableListOf</strong>一模一样，只是<strong>setOf</strong>和<strong>mutableSetOf</strong>中不能放重复元素</p>\n<h3 id=\"Map集合-键值对形式\"><a href=\"#Map集合-键值对形式\" class=\"headerlink\" title=\"Map集合(键值对形式)\"></a>Map集合(键值对形式)</h3><p>1.添加和读取数据用下标法</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map=HashMap&lt;String,<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">map[<span class=\"string\">&quot;Apple&quot;</span>]=<span class=\"number\">1</span><span class=\"comment\">//添加</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> number=map[<span class=\"string\">&quot;Apple&quot;</span>]<span class=\"comment\">//读取</span></span><br></pre></td></tr></table></figure>\n\n<p>2.简化(使用mapOf和mutableMapOf):</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map= mapOf(<span class=\"string\">&quot;Apple&quot;</span> to <span class=\"number\">1</span>,<span class=\"string\">&quot;Banana&quot;</span> to <span class=\"number\">2</span>,<span class=\"string\">&quot;Oramge&quot;</span> to <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>((fruit,number) <span class=\"keyword\">in</span> map)&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;fruit is &quot;</span>+fruit+<span class=\"string\">&quot;,number is ,&quot;</span> +number)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h1><p><strong>1.语法结构：</strong></p>\n<p>{参数名1：参数类型，参数名2：参数类型  -&gt; 函数体}（函数体可以编写任一行代码，最后一行代码会自动作为返回值）</p>\n<p><strong>2.一些简化点：（函数API实例说明）</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> maxLengthFruit = list.maxBy(&#123;fruit:String-&gt;fruit.length&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>(1)当Lambda参数是函数最后一个参数时可以将<strong>lambda</strong>表达式移到函数括号的外面</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> maxLengthFruit = list.maxBy()&#123;fruit:String-&gt;fruit.length&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2)当Lambda参数是函数唯一一个参数时可以将函数的括号删掉</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> maxLengthFruit = list.maxBy&#123;fruit:String-&gt;fruit.length&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(3)因为Kotlin具有类型推到机制大多情况不需声明类型</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> maxLengthFruit = list.maxBy&#123;fruit-&gt;fruit.length&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(4)当表达式参数列表只有一个参数时，也可以不声明参数名，用it来代替</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> maxLengthFruit = list.maxBy&#123;it.length&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.map函数(对集合元素映射转化)</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> newList =list.map&#123;it.toUpperCase()&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(fruit <span class=\"keyword\">in</span> newlist)&#123;</span><br><span class=\"line\">    println(fruit)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.filter函数(过滤集合中的数据)</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> newList =list.filter&#123;it.length&lt;=<span class=\"number\">5</span>&#125;<span class=\"comment\">//保留五个字母以内的水果</span></span><br><span class=\"line\">                 .map&#123;it.toUpperCase()&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(fruit <span class=\"keyword\">in</span> newlist)&#123;</span><br><span class=\"line\">    println(fruit)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里先调用filter再调用map效率更高</p>\n<p><strong>5.any和all函数</strong></p>\n<p>any函数用来判断集合中是否至少存在一个元素满足指定条件</p>\n<p>all函数用来判断集合中是否所有元素都满足指定条件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> anyResult =list.any&#123;it.length&lt;=<span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">val</span> allResult =list.all&#123;it.length&lt;=<span class=\"number\">5</span>&#125;    </span><br><span class=\"line\">println(<span class=\"string\">&quot;anyResult is &quot;</span>+anyResult+<span class=\"string\">&quot;,allResult is &quot;</span>+allResult)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Java函数式API的使用\"><a href=\"#Java函数式API的使用\" class=\"headerlink\" title=\"Java函数式API的使用\"></a>Java函数式API的使用</h1><p><strong>1.使用前提：</strong></p>\n<p>kotlin中调用一个java方法，并且该方法接收一个java单抽象方法接口参数，就可以使用函数式API(Java单抽象方法接口指的是接口中只有一个待实现的方法)</p>\n<p><strong>2.实例说明：</strong></p>\n<p>（1）Runnable实例kotlin形式</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread(<span class=\"keyword\">object</span>:Runnable&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Thread is running&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).start()</span><br></pre></td></tr></table></figure>\n\n<p>(2)只有一个方法可以将方法名省去</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread(Runnable&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Thread is running&quot;</span>)</span><br><span class=\"line\">&#125;).start()</span><br></pre></td></tr></table></figure>\n\n<p>(3)如果一个java方法参数列表中有且仅有一个java单抽象方法接口参数，可以将接口名省去</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread(&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Thread is running&quot;</span>)</span><br><span class=\"line\">&#125;).start()</span><br></pre></td></tr></table></figure>\n\n<p>(4)根据lambda表达式可以更精简为</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread&#123;      println(<span class=\"string\">&quot;Thread is running&quot;</span>)</span><br><span class=\"line\">&#125;.start()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"空指针检查\"><a href=\"#空指针检查\" class=\"headerlink\" title=\"空指针检查\"></a>空指针检查</h1><p>kotlin将空指针判定提前到了编译环节</p>\n<h3 id=\"可空类型系统\"><a href=\"#可空类型系统\" class=\"headerlink\" title=\"可空类型系统\"></a>可空类型系统</h3><p>在类名的后面加一个问号表示可为空的类型</p>\n<p>如Int表示不可为空的整型，Int？表示可为空的整型</p>\n<h3 id=\"判空辅助工具\"><a href=\"#判空辅助工具\" class=\"headerlink\" title=\"判空辅助工具\"></a>判空辅助工具</h3><p><strong>1.”?.”操作符:</strong></p>\n<p>当对象不为空时正常调用，为空时啥也不干</p>\n<p><strong>2.“？:”操作符：</strong></p>\n<p>操作符左右两边均接收一个表达式，如果左边表达式不为空就返回左边否则返回右边</p>\n<p>以上两种方法结合使用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getTextLength</span><span class=\"params\">(text:<span class=\"type\">String</span>?)</span></span>=text?.length?:<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3.空指针检查机制可能出问题：</strong></p>\n<p>可以使用非空断言工具，在对象后面加**“！！”**，使其强行通过编译(写法有风险，谨慎使用)</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> upperCase=content!!.toUpperCase()</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.辅助工具—-let：(函数)(let可以处理全局判空问题而if无法做到)</strong></p>\n<p>（1）形式：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.let&#123; obj2-&gt;</span><br><span class=\"line\"><span class=\"comment\">//编写具体的逻辑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中obj2和obj是一个对象，防止变量重名故改为obj2</p>\n<p>(2)优化：</p>\n<p>？.和let结合使用</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doStudy</span><span class=\"params\">(study:<span class=\"type\">Study</span>?)</span></span>&#123;</span><br><span class=\"line\">      study?.let&#123;</span><br><span class=\"line\">          stu-&gt;</span><br><span class=\"line\">          stu.readBooks()</span><br><span class=\"line\">          stu.doHomeWork()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以简化为</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doStudy</span><span class=\"params\">(study:<span class=\"type\">Study</span>?)</span></span>&#123;</span><br><span class=\"line\">      study?.let&#123;</span><br><span class=\"line\">          it.readBooks()</span><br><span class=\"line\">          it.doHomeWork()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"Kotlin一些小技巧\"><a href=\"#Kotlin一些小技巧\" class=\"headerlink\" title=\"Kotlin一些小技巧\"></a>Kotlin一些小技巧</h1><h3 id=\"字符串内嵌表达式\"><a href=\"#字符串内嵌表达式\" class=\"headerlink\" title=\"字符串内嵌表达式\"></a>字符串内嵌表达式</h3><p>可以用**${}**语法结构来代替加号连接符</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(<span class=\"string\">&quot;hello,<span class=\"subst\">$&#123;obj.name&#125;</span>.nice to meet you!&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果表达式仅有一个变量时还可以将大括号省去</p>\n<h3 id=\"函数的参数默认值\"><a href=\"#函数的参数默认值\" class=\"headerlink\" title=\"函数的参数默认值\"></a>函数的参数默认值</h3><p>不需要一一对应，可以使用键值对传参</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printParams</span><span class=\"params\">(num:<span class=\"type\">Int</span>=<span class=\"number\">100</span>,str:<span class=\"type\">String</span>)</span></span>&#123;<span class=\"comment\">//num:Int=100即设定了默认值</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;num is <span class=\"variable\">$num</span>，str is <span class=\"variable\">$str</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    printParams(str=<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下划线写法\"><a href=\"#下划线写法\" class=\"headerlink\" title=\"下划线写法\"></a>下划线写法</h3><p>在一些方法中如果只有部分参数使用到，未使用的参数可以用下划线代替</p>\n<hr>\n<h1 id=\"as\"><a href=\"#as\" class=\"headerlink\" title=\"as\"></a>as</h1><p>kotlin中类型强制转换时使用的关键字</p>\n<hr>\n<h1 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h1><p>用<strong>inner class</strong>关键字来定义内部类</p>\n<hr>\n"},{"title":"Kotlin高阶函数","date":"2025-05-05T14:05:41.000Z","_content":"\n# 高阶函数\n\n### 函数类型\n\n(String,Int)->Unit\n\n左边是函数接收参数类型，右边是返回值类型\n\n### 定义\n\n含有函数类型的就叫高阶函数\n\n### 实例1\n\n```kotlin\nfun num1Andnum2(num1:Int,num2:Int,operation: (Int,Int)->Int):Int{\n    val result=operation(num1,num2)\n    return result\n}\nfun plus(num1:Int,num2:Int):Int{\n    return num1 + num2\n}\nfun minus(num1:Int,num2:Int):Int{\n    return num1-num2\n}\nfun main(){\n    val num1=100\n    val num2=50\n    val result1=num1Andnum2(num1,num2,::plus)\n    val result2= num1Andnum2(num1,num2,::minus)\n    println(result1)\n    println(result2)\n}\n```\n\nLambda表达式改进\n\n```kotlin\nfun num1Andnum2(num1:Int,num2:Int,operation: (Int,Int)->Int):Int{\n    val result=operation(num1,num2)\n    return result\n}\nfun main(){\n    val num1=100\n    val num2=50\n    val result1=num1Andnum2(num1,num2){\n        num1,num2->num1+num2\n    }\n    val result2= num1Andnum2(num1,num2){\n            num1,num2->num1-num2\n    }\n    println(result1)\n    println(result2)\n}\n```\n\n### 实例2\n\n```kotlin\nfun StringBuilder.build( block:StringBuilder.()->Unit):StringBuilder{\n    block()\n    return this\n}\nfun main(){\n    val list= listOf(\"Apple\",\"Banana\",\"Orange\",\"Pear\",\"Grape\")\n    val result=StringBuilder().build {\n        append(\"Start eating fruits\\n\")\n        for(fruit in list){\n            append(fruit).append(\"\\n\")\n        }\n        append(\"Ate all fruits\")\n    }\n    println(result.toString())\n}\n```\n\n------\n\n# 内联函数\n\n### 用法\n\n使用**inline**关键字，在高阶函数前加上inline即可\n\n### 作用\n\n可以将使用Lambda表达式带来的运行时开销完全消除\n\n### 实例\n\n```kotlin\ninline fun num1Andnum2(num1:Int,num2:Int,operation: (Int,Int)->Int):Int{\n    val result=operation(num1,num2)\n    return result\n}\n```\n\n### 原理\n\n![](../img/img54.jpg)\n\n![](../img/img55.jpg)\n\n------\n\n# noinline和crossinline\n\n### noinline\n\n如果含有多个函数类型参数，但只想内联其中一个，这时可以在函数类型前加noinline表示不内联\n\n### 内联和非内联区别\n\n内联函数中的lambda表达式可以使用return关键字返回，非内联只能局部返回\n\n### 局部返回实例\n\n```kotlin\n fun printString(str: String, block: (String) -> Unit) {\n    println(\"printString begin\")\n    block(str)\n    println(\"printString end\")\n}\nfun main(){\n     println(\"main start\")\n    val str = \"\"\n    printString(str) { s ->\n        println(\"lambda start\")\n        if (s.isEmpty()) return@printString\n        println(s)\n        println(\"lambda end\")\n    }\n    println(\"main end\")\n}\n```\n\n输出结果\n\n```kotlin\nmain start\nprintString begin\nlambda start\nprintString end\nmain end\n```\n\n### 内联函数返回实例\n\n```kotlin\ninline fun printString(str: String, block: (String) -> Unit) {\n    println(\"printString begin\")\n    block(str)\n    println(\"printString end\")\n}\nfun main(){\n     println(\"main start\")\n    val str = \"\"\n    printString(str) { s ->\n        println(\"lambda start\")\n        if (s.isEmpty()) return\n        println(s)\n        println(\"lambda end\")\n    }\n    println(\"main end\")\n}\n```\n\n输出结果\n\n```\nmain start\nprintString begin\nlambda start\n```\n\n### 注意\n\n在高阶函数中创建另外的Lambda或匿名类实现，并且在这些实现中调用函数类型参数，此时再将其声明为内联函数会报错\n\n**原因**：内联函数允许使用return和高阶函数的匿名类不允许使用return矛盾导致报错\n\n### crossinline\n\n借用crossinline可以解决上述问题，crossinline相当于一份契约，用于保证在内联函数的lambda中一定不会使用return关键字\n\n虽然不能使用return返回但仍可以使用局部返回\n\n### crossinline实例\n\n```kotlin\ninline fun runRunnable(crossinline block: () -> Unit) {\n    val runnable = Runnable {\n        block()\n    }\n    runnable.run()\n}\n```\n\n\n\n------\n","source":"_posts/Kotlin高阶函数.md","raw":"---\ntitle: Kotlin高阶函数\ndate: 2025-05-05 22:05:41\ncategories:\n- Kotlin\ntags:\n---\n\n# 高阶函数\n\n### 函数类型\n\n(String,Int)->Unit\n\n左边是函数接收参数类型，右边是返回值类型\n\n### 定义\n\n含有函数类型的就叫高阶函数\n\n### 实例1\n\n```kotlin\nfun num1Andnum2(num1:Int,num2:Int,operation: (Int,Int)->Int):Int{\n    val result=operation(num1,num2)\n    return result\n}\nfun plus(num1:Int,num2:Int):Int{\n    return num1 + num2\n}\nfun minus(num1:Int,num2:Int):Int{\n    return num1-num2\n}\nfun main(){\n    val num1=100\n    val num2=50\n    val result1=num1Andnum2(num1,num2,::plus)\n    val result2= num1Andnum2(num1,num2,::minus)\n    println(result1)\n    println(result2)\n}\n```\n\nLambda表达式改进\n\n```kotlin\nfun num1Andnum2(num1:Int,num2:Int,operation: (Int,Int)->Int):Int{\n    val result=operation(num1,num2)\n    return result\n}\nfun main(){\n    val num1=100\n    val num2=50\n    val result1=num1Andnum2(num1,num2){\n        num1,num2->num1+num2\n    }\n    val result2= num1Andnum2(num1,num2){\n            num1,num2->num1-num2\n    }\n    println(result1)\n    println(result2)\n}\n```\n\n### 实例2\n\n```kotlin\nfun StringBuilder.build( block:StringBuilder.()->Unit):StringBuilder{\n    block()\n    return this\n}\nfun main(){\n    val list= listOf(\"Apple\",\"Banana\",\"Orange\",\"Pear\",\"Grape\")\n    val result=StringBuilder().build {\n        append(\"Start eating fruits\\n\")\n        for(fruit in list){\n            append(fruit).append(\"\\n\")\n        }\n        append(\"Ate all fruits\")\n    }\n    println(result.toString())\n}\n```\n\n------\n\n# 内联函数\n\n### 用法\n\n使用**inline**关键字，在高阶函数前加上inline即可\n\n### 作用\n\n可以将使用Lambda表达式带来的运行时开销完全消除\n\n### 实例\n\n```kotlin\ninline fun num1Andnum2(num1:Int,num2:Int,operation: (Int,Int)->Int):Int{\n    val result=operation(num1,num2)\n    return result\n}\n```\n\n### 原理\n\n![](../img/img54.jpg)\n\n![](../img/img55.jpg)\n\n------\n\n# noinline和crossinline\n\n### noinline\n\n如果含有多个函数类型参数，但只想内联其中一个，这时可以在函数类型前加noinline表示不内联\n\n### 内联和非内联区别\n\n内联函数中的lambda表达式可以使用return关键字返回，非内联只能局部返回\n\n### 局部返回实例\n\n```kotlin\n fun printString(str: String, block: (String) -> Unit) {\n    println(\"printString begin\")\n    block(str)\n    println(\"printString end\")\n}\nfun main(){\n     println(\"main start\")\n    val str = \"\"\n    printString(str) { s ->\n        println(\"lambda start\")\n        if (s.isEmpty()) return@printString\n        println(s)\n        println(\"lambda end\")\n    }\n    println(\"main end\")\n}\n```\n\n输出结果\n\n```kotlin\nmain start\nprintString begin\nlambda start\nprintString end\nmain end\n```\n\n### 内联函数返回实例\n\n```kotlin\ninline fun printString(str: String, block: (String) -> Unit) {\n    println(\"printString begin\")\n    block(str)\n    println(\"printString end\")\n}\nfun main(){\n     println(\"main start\")\n    val str = \"\"\n    printString(str) { s ->\n        println(\"lambda start\")\n        if (s.isEmpty()) return\n        println(s)\n        println(\"lambda end\")\n    }\n    println(\"main end\")\n}\n```\n\n输出结果\n\n```\nmain start\nprintString begin\nlambda start\n```\n\n### 注意\n\n在高阶函数中创建另外的Lambda或匿名类实现，并且在这些实现中调用函数类型参数，此时再将其声明为内联函数会报错\n\n**原因**：内联函数允许使用return和高阶函数的匿名类不允许使用return矛盾导致报错\n\n### crossinline\n\n借用crossinline可以解决上述问题，crossinline相当于一份契约，用于保证在内联函数的lambda中一定不会使用return关键字\n\n虽然不能使用return返回但仍可以使用局部返回\n\n### crossinline实例\n\n```kotlin\ninline fun runRunnable(crossinline block: () -> Unit) {\n    val runnable = Runnable {\n        block()\n    }\n    runnable.run()\n}\n```\n\n\n\n------\n","slug":"Kotlin高阶函数","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gc3000vs4s7bwc53bln","content":"<h1 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h1><h3 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h3><p>(String,Int)-&gt;Unit</p>\n<p>左边是函数接收参数类型，右边是返回值类型</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>含有函数类型的就叫高阶函数</p>\n<h3 id=\"实例1\"><a href=\"#实例1\" class=\"headerlink\" title=\"实例1\"></a>实例1</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">num1Andnum2</span><span class=\"params\">(num1:<span class=\"type\">Int</span>,num2:<span class=\"type\">Int</span>,operation: (<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)-&gt;<span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result=operation(num1,num2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">plus</span><span class=\"params\">(num1:<span class=\"type\">Int</span>,num2:<span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">minus</span><span class=\"params\">(num1:<span class=\"type\">Int</span>,num2:<span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1-num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> num1=<span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> num2=<span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result1=num1Andnum2(num1,num2,::plus)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result2= num1Andnum2(num1,num2,::minus)</span><br><span class=\"line\">    println(result1)</span><br><span class=\"line\">    println(result2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lambda表达式改进</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">num1Andnum2</span><span class=\"params\">(num1:<span class=\"type\">Int</span>,num2:<span class=\"type\">Int</span>,operation: (<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)-&gt;<span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result=operation(num1,num2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> num1=<span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> num2=<span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result1=num1Andnum2(num1,num2)&#123;</span><br><span class=\"line\">        num1,num2-&gt;num1+num2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result2= num1Andnum2(num1,num2)&#123;</span><br><span class=\"line\">            num1,num2-&gt;num1-num2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(result1)</span><br><span class=\"line\">    println(result2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例2\"><a href=\"#实例2\" class=\"headerlink\" title=\"实例2\"></a>实例2</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> StringBuilder.<span class=\"title\">build</span><span class=\"params\">( block:<span class=\"type\">StringBuilder</span>.()-&gt;<span class=\"type\">Unit</span>)</span></span>:StringBuilder&#123;</span><br><span class=\"line\">    block()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Orange&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>,<span class=\"string\">&quot;Grape&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result=StringBuilder().build &#123;</span><br><span class=\"line\">        append(<span class=\"string\">&quot;Start eating fruits\\n&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(fruit <span class=\"keyword\">in</span> list)&#123;</span><br><span class=\"line\">            append(fruit).append(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        append(<span class=\"string\">&quot;Ate all fruits&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(result.toString())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h1><h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>使用<strong>inline</strong>关键字，在高阶函数前加上inline即可</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>可以将使用Lambda表达式带来的运行时开销完全消除</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">num1Andnum2</span><span class=\"params\">(num1:<span class=\"type\">Int</span>,num2:<span class=\"type\">Int</span>,operation: (<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)-&gt;<span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result=operation(num1,num2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p><img src=\"/../img/img54.jpg\"></p>\n<p><img src=\"/../img/img55.jpg\"></p>\n<hr>\n<h1 id=\"noinline和crossinline\"><a href=\"#noinline和crossinline\" class=\"headerlink\" title=\"noinline和crossinline\"></a>noinline和crossinline</h1><h3 id=\"noinline\"><a href=\"#noinline\" class=\"headerlink\" title=\"noinline\"></a>noinline</h3><p>如果含有多个函数类型参数，但只想内联其中一个，这时可以在函数类型前加noinline表示不内联</p>\n<h3 id=\"内联和非内联区别\"><a href=\"#内联和非内联区别\" class=\"headerlink\" title=\"内联和非内联区别\"></a>内联和非内联区别</h3><p>内联函数中的lambda表达式可以使用return关键字返回，非内联只能局部返回</p>\n<h3 id=\"局部返回实例\"><a href=\"#局部返回实例\" class=\"headerlink\" title=\"局部返回实例\"></a>局部返回实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printString</span><span class=\"params\">(str: <span class=\"type\">String</span>, block: (<span class=\"type\">String</span>) -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;printString begin&quot;</span>)</span><br><span class=\"line\">    block(str)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;printString end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     println(<span class=\"string\">&quot;main start&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> str = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    printString(str) &#123; s -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;lambda start&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.isEmpty()) <span class=\"keyword\">return</span><span class=\"symbol\">@printString</span></span><br><span class=\"line\">        println(s)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;lambda end&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main start</span><br><span class=\"line\">printString begin</span><br><span class=\"line\">lambda start</span><br><span class=\"line\">printString end</span><br><span class=\"line\">main end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内联函数返回实例\"><a href=\"#内联函数返回实例\" class=\"headerlink\" title=\"内联函数返回实例\"></a>内联函数返回实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printString</span><span class=\"params\">(str: <span class=\"type\">String</span>, block: (<span class=\"type\">String</span>) -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;printString begin&quot;</span>)</span><br><span class=\"line\">    block(str)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;printString end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     println(<span class=\"string\">&quot;main start&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> str = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    printString(str) &#123; s -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;lambda start&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.isEmpty()) <span class=\"keyword\">return</span></span><br><span class=\"line\">        println(s)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;lambda end&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main start</span><br><span class=\"line\">printString begin</span><br><span class=\"line\">lambda start</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>在高阶函数中创建另外的Lambda或匿名类实现，并且在这些实现中调用函数类型参数，此时再将其声明为内联函数会报错</p>\n<p><strong>原因</strong>：内联函数允许使用return和高阶函数的匿名类不允许使用return矛盾导致报错</p>\n<h3 id=\"crossinline\"><a href=\"#crossinline\" class=\"headerlink\" title=\"crossinline\"></a>crossinline</h3><p>借用crossinline可以解决上述问题，crossinline相当于一份契约，用于保证在内联函数的lambda中一定不会使用return关键字</p>\n<p>虽然不能使用return返回但仍可以使用局部返回</p>\n<h3 id=\"crossinline实例\"><a href=\"#crossinline实例\" class=\"headerlink\" title=\"crossinline实例\"></a>crossinline实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">runRunnable</span><span class=\"params\">(<span class=\"keyword\">crossinline</span> block: () -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> runnable = Runnable &#123;</span><br><span class=\"line\">        block()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    runnable.run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n","excerpt":"高阶函数\n函数类型\n(String,Int)->Unit\n\n左边是函数接收参数类型，右边是返回值类型\n\n定义\n含有函数类型的就叫高阶函数\n\n实例1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nfun num1Andnum2(num1:Int,num2:Int,operation: (Int,Int)->Int):Int{\n    val result=operation(num1,num2)\n    return result\n}\nfun plus(num1:Int,num2:Int):Int{\n    return num1 + num2\n}","more":"<h1 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h1><h3 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h3><p>(String,Int)-&gt;Unit</p>\n<p>左边是函数接收参数类型，右边是返回值类型</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>含有函数类型的就叫高阶函数</p>\n<h3 id=\"实例1\"><a href=\"#实例1\" class=\"headerlink\" title=\"实例1\"></a>实例1</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">num1Andnum2</span><span class=\"params\">(num1:<span class=\"type\">Int</span>,num2:<span class=\"type\">Int</span>,operation: (<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)-&gt;<span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result=operation(num1,num2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">plus</span><span class=\"params\">(num1:<span class=\"type\">Int</span>,num2:<span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">minus</span><span class=\"params\">(num1:<span class=\"type\">Int</span>,num2:<span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1-num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> num1=<span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> num2=<span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result1=num1Andnum2(num1,num2,::plus)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result2= num1Andnum2(num1,num2,::minus)</span><br><span class=\"line\">    println(result1)</span><br><span class=\"line\">    println(result2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lambda表达式改进</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">num1Andnum2</span><span class=\"params\">(num1:<span class=\"type\">Int</span>,num2:<span class=\"type\">Int</span>,operation: (<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)-&gt;<span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result=operation(num1,num2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> num1=<span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> num2=<span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result1=num1Andnum2(num1,num2)&#123;</span><br><span class=\"line\">        num1,num2-&gt;num1+num2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result2= num1Andnum2(num1,num2)&#123;</span><br><span class=\"line\">            num1,num2-&gt;num1-num2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(result1)</span><br><span class=\"line\">    println(result2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例2\"><a href=\"#实例2\" class=\"headerlink\" title=\"实例2\"></a>实例2</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> StringBuilder.<span class=\"title\">build</span><span class=\"params\">( block:<span class=\"type\">StringBuilder</span>.()-&gt;<span class=\"type\">Unit</span>)</span></span>:StringBuilder&#123;</span><br><span class=\"line\">    block()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> list= listOf(<span class=\"string\">&quot;Apple&quot;</span>,<span class=\"string\">&quot;Banana&quot;</span>,<span class=\"string\">&quot;Orange&quot;</span>,<span class=\"string\">&quot;Pear&quot;</span>,<span class=\"string\">&quot;Grape&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result=StringBuilder().build &#123;</span><br><span class=\"line\">        append(<span class=\"string\">&quot;Start eating fruits\\n&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(fruit <span class=\"keyword\">in</span> list)&#123;</span><br><span class=\"line\">            append(fruit).append(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        append(<span class=\"string\">&quot;Ate all fruits&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(result.toString())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h1><h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>使用<strong>inline</strong>关键字，在高阶函数前加上inline即可</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>可以将使用Lambda表达式带来的运行时开销完全消除</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">num1Andnum2</span><span class=\"params\">(num1:<span class=\"type\">Int</span>,num2:<span class=\"type\">Int</span>,operation: (<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)-&gt;<span class=\"type\">Int</span>)</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result=operation(num1,num2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p><img src=\"/../img/img54.jpg\"></p>\n<p><img src=\"/../img/img55.jpg\"></p>\n<hr>\n<h1 id=\"noinline和crossinline\"><a href=\"#noinline和crossinline\" class=\"headerlink\" title=\"noinline和crossinline\"></a>noinline和crossinline</h1><h3 id=\"noinline\"><a href=\"#noinline\" class=\"headerlink\" title=\"noinline\"></a>noinline</h3><p>如果含有多个函数类型参数，但只想内联其中一个，这时可以在函数类型前加noinline表示不内联</p>\n<h3 id=\"内联和非内联区别\"><a href=\"#内联和非内联区别\" class=\"headerlink\" title=\"内联和非内联区别\"></a>内联和非内联区别</h3><p>内联函数中的lambda表达式可以使用return关键字返回，非内联只能局部返回</p>\n<h3 id=\"局部返回实例\"><a href=\"#局部返回实例\" class=\"headerlink\" title=\"局部返回实例\"></a>局部返回实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printString</span><span class=\"params\">(str: <span class=\"type\">String</span>, block: (<span class=\"type\">String</span>) -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;printString begin&quot;</span>)</span><br><span class=\"line\">    block(str)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;printString end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     println(<span class=\"string\">&quot;main start&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> str = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    printString(str) &#123; s -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;lambda start&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.isEmpty()) <span class=\"keyword\">return</span><span class=\"symbol\">@printString</span></span><br><span class=\"line\">        println(s)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;lambda end&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main start</span><br><span class=\"line\">printString begin</span><br><span class=\"line\">lambda start</span><br><span class=\"line\">printString end</span><br><span class=\"line\">main end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内联函数返回实例\"><a href=\"#内联函数返回实例\" class=\"headerlink\" title=\"内联函数返回实例\"></a>内联函数返回实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printString</span><span class=\"params\">(str: <span class=\"type\">String</span>, block: (<span class=\"type\">String</span>) -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;printString begin&quot;</span>)</span><br><span class=\"line\">    block(str)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;printString end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     println(<span class=\"string\">&quot;main start&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> str = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    printString(str) &#123; s -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;lambda start&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.isEmpty()) <span class=\"keyword\">return</span></span><br><span class=\"line\">        println(s)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;lambda end&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;main end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main start</span><br><span class=\"line\">printString begin</span><br><span class=\"line\">lambda start</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>在高阶函数中创建另外的Lambda或匿名类实现，并且在这些实现中调用函数类型参数，此时再将其声明为内联函数会报错</p>\n<p><strong>原因</strong>：内联函数允许使用return和高阶函数的匿名类不允许使用return矛盾导致报错</p>\n<h3 id=\"crossinline\"><a href=\"#crossinline\" class=\"headerlink\" title=\"crossinline\"></a>crossinline</h3><p>借用crossinline可以解决上述问题，crossinline相当于一份契约，用于保证在内联函数的lambda中一定不会使用return关键字</p>\n<p>虽然不能使用return返回但仍可以使用局部返回</p>\n<h3 id=\"crossinline实例\"><a href=\"#crossinline实例\" class=\"headerlink\" title=\"crossinline实例\"></a>crossinline实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">runRunnable</span><span class=\"params\">(<span class=\"keyword\">crossinline</span> block: () -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> runnable = Runnable &#123;</span><br><span class=\"line\">        block()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    runnable.run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n"},{"title":"Kotlin高阶函数的应用","date":"2025-05-07T16:06:10.000Z","_content":"\n# 简化SharedPreferences的用法\n\n- 通过扩展函数方式像其中添加open函数\n\n- 接收函数类型\n\n  ```kotlin\n  fun SharedPreferences.open(block:SharedPreferences.Editor.()->Unit){\n      val editor=edit()\n      editor.block()\n      editor.apply()\n  }\n  ```\n\n  ```kotlin\n  //调用\n  getSharedPreferences(\"data\",Context.MODE_PRIVATE).open{\n      putString(\"name\",\"Tom\")\n      putInt(\"age\",19)\n      putBoolean(\"married\",false)\n  }\n  ```\n\nAndroid Studio自带扩展可以直接使用：\n\n```kotlin\ngetSharedPreferences(\"data\",Context.MODE_PRIVATE).edit{\n    putString(\"name\",\"Tom\")\n    putInt(\"age\",19)\n    putBoolean(\"married\",false)\n}\n```\n\n------\n\n\n\n# 简化ContentValues的用法\n\n- 定义cvOf方法\n\n- 获取ContentValues对象\n\n- 遍历pairs列表\n\n- 利用when语句意义判断数值类型\n\n  **varage关键字：**对应java的可变参数列表\n\n  **Pair：**键值对数据结构，由于数值类型多所以指定为**Any?**相当于java中的**Object**\n\n  ```kotlin\n  fun cvOf(vararg pairs:Pair<String,Any?>):ContentValues{\n      val cv=ContentValues()\n      for(pair in pairs){\n          val key=pair.first\n          val value=pair.second\n          when(value){\n              is Int->cv.put(key, value)\n              is Long->cv.put(key, value)\n              is Short->cv.put(key, value)\n              is Float->cv.put(key, value)\n              is Double->cv.put(key, value)\n              is Boolean->cv.put(key, value)\n              is String->cv.put(key, value)\n              is Byte->cv.put(key, value)\n              is ByteArray->cv.put(key, value)\n              null->cv.putNull(key)\n          }\n      }\n      return cv\n  }\n  ```\n\n  ```kotlin\n  //调用\n  val values=cvOf(\"name\" to \"Game of Thrones\",\"author\" to \"George Martin\",\"pages\" to 720,\"price\" to 20.85)\n  db.insert(\"Book\",null,values)\n  ```\n\n  **利用apply简化**\n\n  ```kotlin\n  fun cvOf(vararg pairs:Pair<String,Any?>)=ContentValues().apply{\n      for(pair in pairs){\n          val key=pair.first\n          val value=pair.second\n          when(value){\n              is Int->put(key, value)\n              is Long->put(key, value)\n              is Short->put(key, value)\n              is Float->put(key, value)\n              is Double->put(key, value)\n              is Boolean->put(key, value)\n              is String->put(key, value)\n              is Byte->put(key, value)\n              is ByteArray->put(key, value)\n              null->putNull(key)\n          }\n      }\n  }\n  ```\n\n  **KTX库提供同样功能的contentValuesOf方法**\n\n  ```kotlin\n  val values=contentValuesOf(\"name\" to \"Game of Thrones\",\"author\" to \"George Martin\",\"pages\" to 720,\"price\" to 20.85)\n  db.insert(\"Book\",null,values)\n  ```\n\n------\n\n","source":"_posts/Kotlin高阶函数的应用.md","raw":"---\ntitle: Kotlin高阶函数的应用\ndate: 2025-05-08 00:06:10\ncategories:\n- Kotlin\ntags:\n---\n\n# 简化SharedPreferences的用法\n\n- 通过扩展函数方式像其中添加open函数\n\n- 接收函数类型\n\n  ```kotlin\n  fun SharedPreferences.open(block:SharedPreferences.Editor.()->Unit){\n      val editor=edit()\n      editor.block()\n      editor.apply()\n  }\n  ```\n\n  ```kotlin\n  //调用\n  getSharedPreferences(\"data\",Context.MODE_PRIVATE).open{\n      putString(\"name\",\"Tom\")\n      putInt(\"age\",19)\n      putBoolean(\"married\",false)\n  }\n  ```\n\nAndroid Studio自带扩展可以直接使用：\n\n```kotlin\ngetSharedPreferences(\"data\",Context.MODE_PRIVATE).edit{\n    putString(\"name\",\"Tom\")\n    putInt(\"age\",19)\n    putBoolean(\"married\",false)\n}\n```\n\n------\n\n\n\n# 简化ContentValues的用法\n\n- 定义cvOf方法\n\n- 获取ContentValues对象\n\n- 遍历pairs列表\n\n- 利用when语句意义判断数值类型\n\n  **varage关键字：**对应java的可变参数列表\n\n  **Pair：**键值对数据结构，由于数值类型多所以指定为**Any?**相当于java中的**Object**\n\n  ```kotlin\n  fun cvOf(vararg pairs:Pair<String,Any?>):ContentValues{\n      val cv=ContentValues()\n      for(pair in pairs){\n          val key=pair.first\n          val value=pair.second\n          when(value){\n              is Int->cv.put(key, value)\n              is Long->cv.put(key, value)\n              is Short->cv.put(key, value)\n              is Float->cv.put(key, value)\n              is Double->cv.put(key, value)\n              is Boolean->cv.put(key, value)\n              is String->cv.put(key, value)\n              is Byte->cv.put(key, value)\n              is ByteArray->cv.put(key, value)\n              null->cv.putNull(key)\n          }\n      }\n      return cv\n  }\n  ```\n\n  ```kotlin\n  //调用\n  val values=cvOf(\"name\" to \"Game of Thrones\",\"author\" to \"George Martin\",\"pages\" to 720,\"price\" to 20.85)\n  db.insert(\"Book\",null,values)\n  ```\n\n  **利用apply简化**\n\n  ```kotlin\n  fun cvOf(vararg pairs:Pair<String,Any?>)=ContentValues().apply{\n      for(pair in pairs){\n          val key=pair.first\n          val value=pair.second\n          when(value){\n              is Int->put(key, value)\n              is Long->put(key, value)\n              is Short->put(key, value)\n              is Float->put(key, value)\n              is Double->put(key, value)\n              is Boolean->put(key, value)\n              is String->put(key, value)\n              is Byte->put(key, value)\n              is ByteArray->put(key, value)\n              null->putNull(key)\n          }\n      }\n  }\n  ```\n\n  **KTX库提供同样功能的contentValuesOf方法**\n\n  ```kotlin\n  val values=contentValuesOf(\"name\" to \"Game of Thrones\",\"author\" to \"George Martin\",\"pages\" to 720,\"price\" to 20.85)\n  db.insert(\"Book\",null,values)\n  ```\n\n------\n\n","slug":"Kotlin高阶函数的应用","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gc4000ws4s7auzx5g51","content":"<h1 id=\"简化SharedPreferences的用法\"><a href=\"#简化SharedPreferences的用法\" class=\"headerlink\" title=\"简化SharedPreferences的用法\"></a>简化SharedPreferences的用法</h1><ul>\n<li><p>通过扩展函数方式像其中添加open函数</p>\n</li>\n<li><p>接收函数类型</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> SharedPreferences.<span class=\"title\">open</span><span class=\"params\">(block:<span class=\"type\">SharedPreferences</span>.<span class=\"type\">Editor</span>.()-&gt;<span class=\"type\">Unit</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> editor=edit()</span><br><span class=\"line\">    editor.block()</span><br><span class=\"line\">    editor.apply()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">getSharedPreferences(<span class=\"string\">&quot;data&quot;</span>,Context.MODE_PRIVATE).<span class=\"keyword\">open</span>&#123;</span><br><span class=\"line\">    putString(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;Tom&quot;</span>)</span><br><span class=\"line\">    putInt(<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">19</span>)</span><br><span class=\"line\">    putBoolean(<span class=\"string\">&quot;married&quot;</span>,<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>Android Studio自带扩展可以直接使用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getSharedPreferences(<span class=\"string\">&quot;data&quot;</span>,Context.MODE_PRIVATE).edit&#123;</span><br><span class=\"line\">    putString(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;Tom&quot;</span>)</span><br><span class=\"line\">    putInt(<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">19</span>)</span><br><span class=\"line\">    putBoolean(<span class=\"string\">&quot;married&quot;</span>,<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"简化ContentValues的用法\"><a href=\"#简化ContentValues的用法\" class=\"headerlink\" title=\"简化ContentValues的用法\"></a>简化ContentValues的用法</h1><ul>\n<li><p>定义cvOf方法</p>\n</li>\n<li><p>获取ContentValues对象</p>\n</li>\n<li><p>遍历pairs列表</p>\n</li>\n<li><p>利用when语句意义判断数值类型</p>\n<p>**varage关键字：**对应java的可变参数列表</p>\n<p><strong>Pair：<strong>键值对数据结构，由于数值类型多所以指定为</strong>Any?<strong>相当于java中的</strong>Object</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">cvOf</span><span class=\"params\">(<span class=\"keyword\">vararg</span> pairs:<span class=\"type\">Pair</span>&lt;<span class=\"type\">String</span>,Any?&gt;)</span></span>:ContentValues&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> cv=ContentValues()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(pair <span class=\"keyword\">in</span> pairs)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> key=pair.first</span><br><span class=\"line\">        <span class=\"keyword\">val</span> value=pair.second</span><br><span class=\"line\">        <span class=\"keyword\">when</span>(value)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Int</span>-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Long</span>-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Short</span>-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Float</span>-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Double</span>-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Boolean</span>-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> String-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Byte</span>-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> ByteArray-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"literal\">null</span>-&gt;cv.putNull(key)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cv</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> values=cvOf(<span class=\"string\">&quot;name&quot;</span> to <span class=\"string\">&quot;Game of Thrones&quot;</span>,<span class=\"string\">&quot;author&quot;</span> to <span class=\"string\">&quot;George Martin&quot;</span>,<span class=\"string\">&quot;pages&quot;</span> to <span class=\"number\">720</span>,<span class=\"string\">&quot;price&quot;</span> to <span class=\"number\">20.85</span>)</span><br><span class=\"line\">db.insert(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,values)</span><br></pre></td></tr></table></figure>\n\n<p><strong>利用apply简化</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">cvOf</span><span class=\"params\">(<span class=\"keyword\">vararg</span> pairs:<span class=\"type\">Pair</span>&lt;<span class=\"type\">String</span>,Any?&gt;)</span></span>=ContentValues().apply&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(pair <span class=\"keyword\">in</span> pairs)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> key=pair.first</span><br><span class=\"line\">        <span class=\"keyword\">val</span> value=pair.second</span><br><span class=\"line\">        <span class=\"keyword\">when</span>(value)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Int</span>-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Long</span>-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Short</span>-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Float</span>-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Double</span>-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Boolean</span>-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> String-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Byte</span>-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> ByteArray-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"literal\">null</span>-&gt;putNull(key)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>KTX库提供同样功能的contentValuesOf方法</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> values=contentValuesOf(<span class=\"string\">&quot;name&quot;</span> to <span class=\"string\">&quot;Game of Thrones&quot;</span>,<span class=\"string\">&quot;author&quot;</span> to <span class=\"string\">&quot;George Martin&quot;</span>,<span class=\"string\">&quot;pages&quot;</span> to <span class=\"number\">720</span>,<span class=\"string\">&quot;price&quot;</span> to <span class=\"number\">20.85</span>)</span><br><span class=\"line\">db.insert(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,values)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n","excerpt":"简化SharedPreferences的用法\n * 通过扩展函数方式像其中添加open函数\n   \n   \n * 接收函数类型\n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   fun SharedPreferences.open(block:SharedPreferences.Editor.()->Unit){\n       val editor=edit()\n       editor.block()\n       editor.apply()\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n   \n   //调用","more":"<h1 id=\"简化SharedPreferences的用法\"><a href=\"#简化SharedPreferences的用法\" class=\"headerlink\" title=\"简化SharedPreferences的用法\"></a>简化SharedPreferences的用法</h1><ul>\n<li><p>通过扩展函数方式像其中添加open函数</p>\n</li>\n<li><p>接收函数类型</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> SharedPreferences.<span class=\"title\">open</span><span class=\"params\">(block:<span class=\"type\">SharedPreferences</span>.<span class=\"type\">Editor</span>.()-&gt;<span class=\"type\">Unit</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> editor=edit()</span><br><span class=\"line\">    editor.block()</span><br><span class=\"line\">    editor.apply()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">getSharedPreferences(<span class=\"string\">&quot;data&quot;</span>,Context.MODE_PRIVATE).<span class=\"keyword\">open</span>&#123;</span><br><span class=\"line\">    putString(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;Tom&quot;</span>)</span><br><span class=\"line\">    putInt(<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">19</span>)</span><br><span class=\"line\">    putBoolean(<span class=\"string\">&quot;married&quot;</span>,<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>Android Studio自带扩展可以直接使用：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getSharedPreferences(<span class=\"string\">&quot;data&quot;</span>,Context.MODE_PRIVATE).edit&#123;</span><br><span class=\"line\">    putString(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;Tom&quot;</span>)</span><br><span class=\"line\">    putInt(<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">19</span>)</span><br><span class=\"line\">    putBoolean(<span class=\"string\">&quot;married&quot;</span>,<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"简化ContentValues的用法\"><a href=\"#简化ContentValues的用法\" class=\"headerlink\" title=\"简化ContentValues的用法\"></a>简化ContentValues的用法</h1><ul>\n<li><p>定义cvOf方法</p>\n</li>\n<li><p>获取ContentValues对象</p>\n</li>\n<li><p>遍历pairs列表</p>\n</li>\n<li><p>利用when语句意义判断数值类型</p>\n<p>**varage关键字：**对应java的可变参数列表</p>\n<p><strong>Pair：<strong>键值对数据结构，由于数值类型多所以指定为</strong>Any?<strong>相当于java中的</strong>Object</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">cvOf</span><span class=\"params\">(<span class=\"keyword\">vararg</span> pairs:<span class=\"type\">Pair</span>&lt;<span class=\"type\">String</span>,Any?&gt;)</span></span>:ContentValues&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> cv=ContentValues()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(pair <span class=\"keyword\">in</span> pairs)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> key=pair.first</span><br><span class=\"line\">        <span class=\"keyword\">val</span> value=pair.second</span><br><span class=\"line\">        <span class=\"keyword\">when</span>(value)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Int</span>-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Long</span>-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Short</span>-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Float</span>-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Double</span>-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Boolean</span>-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> String-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Byte</span>-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> ByteArray-&gt;cv.put(key, value)</span><br><span class=\"line\">            <span class=\"literal\">null</span>-&gt;cv.putNull(key)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cv</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> values=cvOf(<span class=\"string\">&quot;name&quot;</span> to <span class=\"string\">&quot;Game of Thrones&quot;</span>,<span class=\"string\">&quot;author&quot;</span> to <span class=\"string\">&quot;George Martin&quot;</span>,<span class=\"string\">&quot;pages&quot;</span> to <span class=\"number\">720</span>,<span class=\"string\">&quot;price&quot;</span> to <span class=\"number\">20.85</span>)</span><br><span class=\"line\">db.insert(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,values)</span><br></pre></td></tr></table></figure>\n\n<p><strong>利用apply简化</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">cvOf</span><span class=\"params\">(<span class=\"keyword\">vararg</span> pairs:<span class=\"type\">Pair</span>&lt;<span class=\"type\">String</span>,Any?&gt;)</span></span>=ContentValues().apply&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(pair <span class=\"keyword\">in</span> pairs)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> key=pair.first</span><br><span class=\"line\">        <span class=\"keyword\">val</span> value=pair.second</span><br><span class=\"line\">        <span class=\"keyword\">when</span>(value)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Int</span>-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Long</span>-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Short</span>-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Float</span>-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Double</span>-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Boolean</span>-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> String-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> <span class=\"built_in\">Byte</span>-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"keyword\">is</span> ByteArray-&gt;put(key, value)</span><br><span class=\"line\">            <span class=\"literal\">null</span>-&gt;putNull(key)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>KTX库提供同样功能的contentValuesOf方法</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> values=contentValuesOf(<span class=\"string\">&quot;name&quot;</span> to <span class=\"string\">&quot;Game of Thrones&quot;</span>,<span class=\"string\">&quot;author&quot;</span> to <span class=\"string\">&quot;George Martin&quot;</span>,<span class=\"string\">&quot;pages&quot;</span> to <span class=\"number\">720</span>,<span class=\"string\">&quot;price&quot;</span> to <span class=\"number\">20.85</span>)</span><br><span class=\"line\">db.insert(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,values)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n"},{"title":"Material Design(Java)","date":"2025-03-25T07:41:23.000Z","_content":"\n# Toolbar\n\n1.设置主题为Theme.AppCompat.Light.NoActionBar(淡色主题)\n\n2.在layout中使用Toolbar\n\n3..在Mainactivity获取toolbar实例\n\n4.设置menu并在Mainactivity中使用\n\n![](../img/img50.jpg)\n\n```java\n<resources xmlns:tools=\"http://schemas.android.com/tools\">\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n        <!-- Customize your light theme here. -->\n        <item name=\"colorPrimary\">@color/black</item>\n        <item name=\"colorPrimaryDark\">@color/black</item>\n        <item name=\"colorAccent\">@color/white</item>\n        <item name=\"android:textColorPrimary\">@color/black</item>\n        <item name=\"android:windowBackground\">@color/white</item>\n        <item name=\"android:navigationBarColor\">@color/black</item>\n    </style>\n\n</resources>\n```\n\n```java\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <androidx.appcompat.widget.Toolbar\n        android:id=\"@+id/toolbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"?attr/actionBarSize\"\n        android:background=\"?attr/colorPrimary\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n       app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n\n</FrameLayout>\n```\n\n```java\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n    <item\n        android:id=\"@+id/backup\"\n        android:icon=\"@drawable/ic_launcher_background\"\n        android:title=\"Backup\"\n        app:showAsAction=\"always\"/>\n    <item\n        android:id=\"@+id/delete\"\n        android:icon=\"@drawable/ic_launcher_background\"\n        android:title=\"Delete\"\n        app:showAsAction=\"ifRoom\"/>\n    <item\n        android:id=\"@+id/settings\"\n        android:icon=\"@drawable/ic_launcher_background\"\n        android:title=\"Settings\"\n        app:showAsAction=\"never\"/>\n</menu>\n```\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n    }\n    public boolean onCreateOptionsMenu(Menu menu){\n        getMenuInflater().inflate(R.menu.toolbar,menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n        if(item.getItemId()==R.id.backup){\n            Toast.makeText(this, \"You clicked Backup\", Toast.LENGTH_SHORT).show();\n        } else if (item.getItemId()==R.id.delete) {\n            Toast.makeText(this, \"You clicked Delete\", Toast.LENGTH_SHORT).show();\n        }else{\n            Toast.makeText(this, \"You clicked Settings\", Toast.LENGTH_SHORT).show();\n        }\n        return  true;\n    }\n}\n```\n\n\n\n------\n\n# 滑动菜单\n\n### DrawerLayout\n\n1.修改布局中代码，使用DrawerLayout布局\n\n2.获取DrawerLayout和ActionBar的实例\n\n3.利用ActionBar的方法让导航按钮显示\n\n4.对按钮的点击事件进行处理\n\n```java\n<androidx.drawerlayout.widget.DrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <FrameLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n    </FrameLayout>\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        android:text=\"This is menu\"\n        android:textSize=\"30sp\"\n        android:background=\"#FFF\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\n```java\nprivate DrawerLayout mDrawerLayout;\n mDrawerLayout=(DrawerLayout) findViewById(R.id.drawer_layout);\n        ActionBar actionBar=getSupportActionBar();\n        if(actionBar!=null){\n            actionBar.setDisplayHomeAsUpEnabled(true);\n            actionBar.setHomeAsUpIndicator(R.drawable.ic_launcher_foreground);\n        }\n```\n\n```java\nif(item.getItemId()==android.R.id.home){\n            mDrawerLayout.openDrawer(GravityCompat.START);\n        }\n```\n\n### NavigationView\n\n1.添加依赖库\n\n2.准备menu和headerLayout\n\n3.在activity_main.xml布局中使用NavigationView控件\n\n4.创建点击事件\n\n```java\nimplementation (\"com.google.android.material:material:1.9.0\")//design support库\n    implementation (\"de.hdodenhof:circleimageview:3.1.0\")\n```\n\n```java\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    //group表示一个组，single表示只能单选\n    <group android:checkableBehavior=\"single\">\n        <item\n            android:id=\"@+id/nav_call\"\n            android:icon=\"@drawable/ic_launcher_background\"\n            android:title=\"Call\"/>\n        <item\n            android:id=\"@+id/nav_friends\"\n            android:icon=\"@drawable/ic_launcher_background\"\n            android:title=\"Friends\"/>\n        <item\n            android:id=\"@+id/nav_location\"\n            android:icon=\"@drawable/ic_launcher_background\"\n            android:title=\"Location\"/>\n        <item\n            android:id=\"@+id/nav_mail\"\n            android:icon=\"@drawable/ic_launcher_background\"\n            android:title=\"Mail\"/>\n        <item\n            android:id=\"@+id/nav_task\"\n            android:icon=\"@drawable/ic_launcher_background\"\n            android:title=\"Tasks\"/>\n    </group>\n</menu>\n```\n\n```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"180dp\"\n    android:padding=\"10dp\"\n    android:background=\"?attr/colorPrimary\">\n        //将图形圆形化\n    <de.hdodenhof.circleimageview.CircleImageView\n        android:id=\"@+id/icon_image\"\n        android:layout_width=\"70dp\"\n        android:layout_height=\"70dp\"\n        android:src=\"@drawable/ic_launcher_background\"\n        android:layout_centerInParent=\"true\"/>\n    <TextView\n        android:id=\"@+id/username\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentBottom=\"true\"\n        android:text=\"1234567890@qq.com\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"14sp\"/>\n    <TextView\n        android:id=\"@+id/mail\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_above=\"@+id/username\"\n        android:text=\"Klet\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"14sp\"/>\n\n</RelativeLayout>\n```\n\n```java\n<com.google.android.material.navigation.NavigationView\n        android:id=\"@+id/nav_view\"\n         android:layout_height=\"match_parent\"\n        android:layout_width=\"match_parent\"\n        android:layout_gravity=\"start\"\n        app:menu=\"@menu/nav_menu\"\n        app:headerLayout=\"@layout/nav_header\"/>\n```\n\n```java\n//获取实例\n        NavigationView navView=(NavigationView)findViewById(R.id.nav_view);\n //设置默认选中\n        navView.setCheckedItem(R.id.nav_call);\n        //设置点击事件\n        navView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n                mDrawerLayout.closeDrawers();\n                return true;\n            }\n        });\n```\n\n\n\n------\n\n# 悬浮按钮和可交互显示\n\n### FloatingActionButton\n\n1.在布局中添加控件\n\n2.设置点击事件\n\n```java\n<com.google.android.material.floatingactionbutton.FloatingActionButton\n            android:id=\"@+id/fab\"\n             android:layout_height=\"wrap_content\"\n            android:layout_width=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_margin=\"16dp\"\n            android:src=\"@drawable/ic_done\"\n            app:elevation=\"8dp\"//设置悬浮高度\n            />\n```\n\n```java\nFloatingActionButton fab=(FloatingActionButton) findViewById(R.id.fab);\n        fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Toast.makeText(MainActivity.this, \"FAB clicked\", Toast.LENGTH_SHORT).show();\n            }\n        });\n```\n\n\n\n### Snackbar(可交互的Toast)\n\n1.用make获取对象\n\n2.setAction设置动作\n\n3.用show将其显示\n\n```java\nSnackbar.make(view,\"Data Delete\",Snackbar.LENGTH_SHORT)\n                        .setAction(\"UOdo\", new View.OnClickListener() {\n                            @Override\n                            public void onClick(View view) {\n                                Toast.makeText(MainActivity.this, \"Data Restored\", Toast.LENGTH_SHORT).show();\n                            }\n                        }).show();\n```\n\n\n\n### CoordinatorLayout(加强版FrameLayout)\n\n可以监听到所有子控件的各种事件，然后自动帮助我们做出最为合理的响应，就是加强版的FrameLayout\n\n```java\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n        <com.google.android.material.floatingactionbutton.FloatingActionButton\n            android:id=\"@+id/fab\"\n             android:layout_height=\"wrap_content\"\n            android:layout_width=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_margin=\"16dp\"\n            android:src=\"@drawable/ic_done\"\n            app:elevation=\"8dp\"\n            />\n    </androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\n\n\n------\n\n# 卡片式布局\n\n### CardView（是一个FrameLayout)\n\nRecyclerView和CardView混合使用\n\n1.添加依赖\n\n2.在布局中添加RecyclerView并建立Fruit类，子项布局和适配器\n\n3.应用recyclerView\n\n```java\nimplementation (\"androidx.cardview:cardview:1.0.0\")//cardView依赖\n    implementation (\"androidx.recyclerview:recyclerview:1.3.2\")//recyclerView依赖\n    implementation (\"com.github.bumptech.glide:glide:4.16.0\")//Glide依赖，强大的图片加载库\n```\n\n```java\n<androidx.cardview.widget.CardView\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_margin=\"5dp\"\n    app:cardCornerRadius=\"4dp\">\n    <LinearLayout\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n        <ImageView\n            android:id=\"@+id/fruit_image\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"100dp\"\n                //指定图片的缩放模式\n            android:scaleType=\"centerCrop\"/>\n        <TextView\n            android:id=\"@+id/fruit_text\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_margin=\"5dp\"\n            android:textSize=\"16sp\"/>\n    </LinearLayout>\n\n</androidx.cardview.widget.CardView>\n```\n\n```java\npublic class Fruit {\n    private String name;\n    private  int imageId;\n\n    public Fruit(String name, int imageId) {\n        this.name = name;\n        this.imageId = imageId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n\n    public int getImageId() {\n        return imageId;\n    }\n\n\n}\n\n```\n\n```java\npublic class FruitAdapter extends RecyclerView.Adapter<FruitAdapter.ViewHolder> {\n    private Context mContext;\n    private List<Fruit>mFruitList;\n    static class ViewHolder extends RecyclerView.ViewHolder{\n        CardView cardView;\n        ImageView fruitImage;\n        TextView fruitName;\n        public ViewHolder(View view){\n            super(view);\n            cardView=(CardView) view;\n            fruitImage=(ImageView) view.findViewById(R.id.fruit_image);\n            fruitName=(TextView) view.findViewById(R.id.fruit_text);\n        }\n    }\npublic FruitAdapter(List<Fruit>fruitList){\n        mFruitList=fruitList;\n}\n    @NonNull\n    @Override\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        if(mContext==null){\n            mContext=parent.getContext();\n        }\n        View view= LayoutInflater.from(mContext).inflate(R.layout.fruit_item,parent,false);\n        return new ViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\n            Fruit fruit=mFruitList.get(position);\n            holder.fruitName.setText(fruit.getName());\n        Glide.with(mContext).load(fruit.getImageId()).into(holder.fruitImage);\n    }\n\n    @Override\n    public int getItemCount() {\n        return mFruitList.size();\n    }\n\n}\n\n```\n\n```java\n private Fruit[] fruits={new Fruit(\"Apple\",R.drawable.apple),new Fruit(\"Banana\",R.drawable.banana)\n    ,new Fruit(\"Orange\",R.drawable.orange),new Fruit(\"Watermelon\",R.drawable.watermelon)};\n    private List<Fruit>fruitList=new ArrayList<>();\n    private FruitAdapter adapter;\n @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n         inits();\n        RecyclerView recyclerView=(RecyclerView) findViewById(R.id.recycler_view);\n        //接收两个参数，第一个是Context第二个是列数\n        GridLayoutManager layoutManager=new GridLayoutManager(this,2);\n        recyclerView.setLayoutManager(layoutManager);\n        adapter=new FruitAdapter(fruitList);\n        recyclerView.setAdapter(adapter);\n    }\n  private void inits(){\n        fruitList.clear();\n        for(int i=0;i<50;i++){\n            Random random=new Random();\n            int index=random.nextInt(fruits.length);\n            fruitList.add(fruits[index]);\n\n        }\n    }\n```\n\n### AppBarLayout\n\n用来解决RecyclerView遮挡ToolBar问题\n\n1.将ToolBar嵌入到AppBarLayout中\n\n2.给RecyclerView添加一个布局行为\n\n3.在ToolBar中添加app：layout_scrollFlags属性\n\n```java\n<androidx.drawerlayout.widget.DrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <androidx.coordinatorlayout.widget.CoordinatorLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n           //使用AppBarLayout\n        <com.google.android.material.appbar.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n            <androidx.appcompat.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"?attr/colorPrimary\"\n                android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                    //scroll表示向上滚动ToolBar隐藏，enterAlways表示向下滚动ToolBar重新显示snap表示还没完全显示或隐藏时                         根据滚动的距离自动选择隐藏还是显示\n                app:layout_scrollFlags=\"scroll|enterAlways|snap\"/>\n\n        </com.google.android.material.appbar.AppBarLayout>\n        <androidx.recyclerview.widget.RecyclerView\n            android:id=\"@+id/recycler_view\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n                //RecyclerView添加一个布局行为\n            app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"/>\n        <com.google.android.material.floatingactionbutton.FloatingActionButton\n            android:id=\"@+id/fab\"\n             android:layout_height=\"wrap_content\"\n            android:layout_width=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_margin=\"16dp\"\n            android:src=\"@drawable/ic_done\"\n            app:elevation=\"8dp\"\n            />\n    </androidx.coordinatorlayout.widget.CoordinatorLayout>\n    <com.google.android.material.navigation.NavigationView\n        android:id=\"@+id/nav_view\"\n         android:layout_height=\"match_parent\"\n        android:layout_width=\"match_parent\"\n        android:layout_gravity=\"start\"\n        app:menu=\"@menu/nav_menu\"\n        app:headerLayout=\"@layout/nav_header\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\n\n\n------\n\n# 下拉刷新\n\n利用SwipeRefreshLayout\n\n1.将RecyclerView嵌入到SwipeRefreshLayout中，并将RecyclerView中的布局行为移到SwipeRefreshLayout中\n\n2.在主活动中处理具体的刷新逻辑\n\n```java\n<androidx.swiperefreshlayout.widget.SwipeRefreshLayout\n            android:id=\"@+id/swipe_refresh\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n            >\n            <androidx.recyclerview.widget.RecyclerView\n                android:id=\"@+id/recycler_view\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\" />\n        </androidx.swiperefreshlayout.widget.SwipeRefreshLayout>\n```\n\n```java\n private SwipeRefreshLayout swipeRefreshLayout;\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    \t  //获取实例\n        swipeRefreshLayout=(SwipeRefreshLayout) findViewById(R.id.swipe_refresh);\n        //设置刷新进度条的颜色\n        swipeRefreshLayout.setColorSchemeResources(R.color.black);\n        //设置下拉刷新的监听器\n        swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n            @Override\n            public void onRefresh() {\n                refreshFruits();\n            }\n        });\n    }\n private void refreshFruits() {\n        //开启一个线程\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try{\n                    //将线程沉睡两秒钟(因为本地刷新速度很快，如果不沉睡刷新立刻就结束了)\n                    Thread.sleep(2000);\n                }catch(InterruptedException e){\n                    e.printStackTrace();\n                }\n                //将线程切换回主线程\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        //初始化\n                        inits();\n                        //更新\n                        adapter.notifyDataSetChanged();\n                        //用于表示刷新事件结束，并隐藏进度条\n                        swipeRefreshLayout.setRefreshing(false);\n                    }\n                });\n            }\n        }).start();\n    }\n```\n\n\n\n------\n\n# 可折叠式标题栏\n\n### CollapsingToolbarLayout\n\n**CollapsingToolbarLayout不能独立存在，他只能作为AppBarLayout的直接子布局使用，AppBarLayout又必须是CoordinatorLayout的子布局**\n\n1.使用CoordinatorLayout作为最外层布局，里面嵌套一个AppBarLayout，再嵌套一个CollapsingToolbarLayout\n\n2.在CollapsingToolbarLayout中添加一个ImageView和Toolbar(这个高级标题栏由图片和普通标题栏构成)\n\n3.在最外层布局中使用NestedScrollView(和AppBarLayout同级)\n\n4.NestedScrollView内部只允许一个直接子布局，故先嵌套一个LinearLayout\n\n5.在其中嵌入卡片式布局\n\n6.可以再添加一个FloatingActionButton\n\n7.接着在FruitActivity中编写功能逻辑\n\n8.为RecyclerView设置点击事件\n\n```java\n<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".FruitActivity\">\n    <com.google.android.material.appbar.AppBarLayout\n        android:id=\"@+id/appBar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"250dp\">\n       <com.google.android.material.appbar.CollapsingToolbarLayout\n           android:id=\"@+id/collapsing_toolbar\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\"\n           android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n           app:contentScrim=\"?attr/colorPrimary\"\n           app:layout_scrollFlags=\"scroll|exitUntilCollapsed\">\n           <ImageView\n               android:id=\"@+id/fruit_image_view\"\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"match_parent\"\n               android:scaleType=\"centerCrop\"\n               app:layout_collapseMode=\"parallax\"/>\n           <androidx.appcompat.widget.Toolbar\n               android:id=\"@+id/toolbar\"\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"?attr/actionBarSize\"\n               app:layout_collapseMode=\"pin\"/>\n       </com.google.android.material.appbar.CollapsingToolbarLayout>\n    </com.google.android.material.appbar.AppBarLayout>\n    <androidx.core.widget.NestedScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n        <LinearLayout\n            android:orientation=\"vertical\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n            <androidx.cardview.widget.CardView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginBottom=\"15dp\"\n                android:layout_marginLeft=\"15dp\"\n                android:layout_marginRight=\"15dp\"\n                android:layout_marginTop=\"35dp\"\n                app:cardCornerRadius=\"4dp\">\n                <TextView\n                    android:id=\"@+id/fruit_content_text\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_margin=\"10dp\"/>\n            </androidx.cardview.widget.CardView>\n        </LinearLayout>\n    </androidx.core.widget.NestedScrollView>\n    <com.google.android.material.floatingactionbutton.FloatingActionButton\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"16sp\"\n        android:src=\"@drawable/ic_done\"\n        app:layout_anchor=\"@id/appBar\"\n        app:layout_anchorGravity=\"bottom|end\"/>\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\n```java\npublic class FruitActivity extends AppCompatActivity {\npublic  static final String FRUIT_NAME=\"fruit_name\";\n    public  static final String FRUIT_IMAGE_ID=\"fruit_image_id\";\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_fruit);\n        //通过Intent获取水果名字和图片\n        Intent intent=getIntent();\n        String fruitName=intent.getStringExtra(FRUIT_NAME);\n        int fruitImageId=intent.getIntExtra(FRUIT_IMAGE_ID,0);\n        //获取Toolbar实例\n        Toolbar toolbar=(Toolbar) findViewById(R.id.toolbar);\n        //获取CollapsingToolbarLayout实例\n        CollapsingToolbarLayout collapsingToolbarLayout=(CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);\n        //获取ImageView和TextView实例\n        ImageView fruitImageView=(ImageView) findViewById(R.id.fruit_image_view);\n        TextView fruitContentText=(TextView) findViewById(R.id.fruit_content_text);\n        //将toolbar实例传入\n        setSupportActionBar(toolbar);\n        //启用HomeAsUp按钮\n        ActionBar actionBar=getSupportActionBar();\n        if(actionBar!=null){\n            actionBar.setDisplayHomeAsUpEnabled(true);\n        }\n        //设置标题\n        collapsingToolbarLayout.setTitle(fruitName);\n        //设置图形\n        Glide.with(this).load(fruitImageId).into(fruitImageView);\n        String fruitContent=generateFruitContent(fruitName);\n        fruitContentText.setText(fruitContent);\n    }\n\n    private String generateFruitContent(String fruitName) {\n        StringBuilder fruitContent=new StringBuilder();\n        for(int i=0;i<500;i++){\n            fruitContent.append(fruitName);\n        }\n        return fruitContent.toString();\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n        if(item.getItemId()==android.R.id.home){\n            finish();\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n}\n```\n\n```java\n @NonNull\n    @Override\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        if(mContext==null){\n            mContext=parent.getContext();\n        }\n        View view= LayoutInflater.from(mContext).inflate(R.layout.fruit_item,parent,false);\n        final ViewHolder holder=new ViewHolder(view);\n        holder.cardView.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                int position=holder.getAdapterPosition();\n                Fruit fruit=mFruitList.get(position);\n                Intent intent=new Intent(mContext, FruitActivity.class);\n                intent.putExtra(FruitActivity.FRUIT_NAME,fruit.getName());\n                intent.putExtra(FruitActivity.FRUIT_IMAGE_ID,fruit.getImageId());\n                mContext.startActivity(intent);\n            }\n        });\n        return holder;\n    }\n```\n\n### 充分利用系统状态栏空间\n\n让背景图和系统状态栏融合\n\n1.将ImageView及其所有父布局使用android:fitsSystemWindows=\"true\"\n\n2.使用android:statusBarColor属性将主题状态栏颜色设为透明(该属性是API21之后才有的，故需要新建一个values-v21目录并对其进行编写)\n\n3.对values中的theme文件进行修改\n\n4.在Manifest.xml中对活动主题进行修改\n\n```java\n<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".FruitActivity\"\n    android:fitsSystemWindows=\"true\">\n    <com.google.android.material.appbar.AppBarLayout\n        android:id=\"@+id/appBar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"250dp\"\n        android:fitsSystemWindows=\"true\">\n       <com.google.android.material.appbar.CollapsingToolbarLayout\n           android:id=\"@+id/collapsing_toolbar\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\"\n           android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n           app:contentScrim=\"?attr/colorPrimary\"\n           app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"\n           android:fitsSystemWindows=\"true\">\n           <ImageView\n               android:id=\"@+id/fruit_image_view\"\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"match_parent\"\n               android:scaleType=\"centerCrop\"\n               app:layout_collapseMode=\"parallax\"\n               android:fitsSystemWindows=\"true\"/>\n```\n\n```java\n<resources>\n    <style name=\"FruitActivityTheme\" parent=\"AppTheme\">\n        <item name=\"android:statusBarColor\">@android:color/transparent</item>\n    </style>\n</resources>\n```\n\n```java\n <style name=\"FruitActivityTheme\" parent=\"AppTheme\">\n    </style>\n```\n\n```java\n<activity\n            android:name=\".FruitActivity\"\n            android:theme=\"@style/FruitActivityTheme\"\n            android:exported=\"false\" />\n```\n\n------\n\n","source":"_posts/Material-Design.md","raw":"---\ntitle: Material Design(Java)\ndate: 2025-03-25 15:41:23\ncategories:\n- Android(Java版)\ntags:\n---\n\n# Toolbar\n\n1.设置主题为Theme.AppCompat.Light.NoActionBar(淡色主题)\n\n2.在layout中使用Toolbar\n\n3..在Mainactivity获取toolbar实例\n\n4.设置menu并在Mainactivity中使用\n\n![](../img/img50.jpg)\n\n```java\n<resources xmlns:tools=\"http://schemas.android.com/tools\">\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n        <!-- Customize your light theme here. -->\n        <item name=\"colorPrimary\">@color/black</item>\n        <item name=\"colorPrimaryDark\">@color/black</item>\n        <item name=\"colorAccent\">@color/white</item>\n        <item name=\"android:textColorPrimary\">@color/black</item>\n        <item name=\"android:windowBackground\">@color/white</item>\n        <item name=\"android:navigationBarColor\">@color/black</item>\n    </style>\n\n</resources>\n```\n\n```java\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <androidx.appcompat.widget.Toolbar\n        android:id=\"@+id/toolbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"?attr/actionBarSize\"\n        android:background=\"?attr/colorPrimary\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n       app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n\n</FrameLayout>\n```\n\n```java\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n    <item\n        android:id=\"@+id/backup\"\n        android:icon=\"@drawable/ic_launcher_background\"\n        android:title=\"Backup\"\n        app:showAsAction=\"always\"/>\n    <item\n        android:id=\"@+id/delete\"\n        android:icon=\"@drawable/ic_launcher_background\"\n        android:title=\"Delete\"\n        app:showAsAction=\"ifRoom\"/>\n    <item\n        android:id=\"@+id/settings\"\n        android:icon=\"@drawable/ic_launcher_background\"\n        android:title=\"Settings\"\n        app:showAsAction=\"never\"/>\n</menu>\n```\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n    }\n    public boolean onCreateOptionsMenu(Menu menu){\n        getMenuInflater().inflate(R.menu.toolbar,menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n        if(item.getItemId()==R.id.backup){\n            Toast.makeText(this, \"You clicked Backup\", Toast.LENGTH_SHORT).show();\n        } else if (item.getItemId()==R.id.delete) {\n            Toast.makeText(this, \"You clicked Delete\", Toast.LENGTH_SHORT).show();\n        }else{\n            Toast.makeText(this, \"You clicked Settings\", Toast.LENGTH_SHORT).show();\n        }\n        return  true;\n    }\n}\n```\n\n\n\n------\n\n# 滑动菜单\n\n### DrawerLayout\n\n1.修改布局中代码，使用DrawerLayout布局\n\n2.获取DrawerLayout和ActionBar的实例\n\n3.利用ActionBar的方法让导航按钮显示\n\n4.对按钮的点击事件进行处理\n\n```java\n<androidx.drawerlayout.widget.DrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <FrameLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n    </FrameLayout>\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        android:text=\"This is menu\"\n        android:textSize=\"30sp\"\n        android:background=\"#FFF\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\n```java\nprivate DrawerLayout mDrawerLayout;\n mDrawerLayout=(DrawerLayout) findViewById(R.id.drawer_layout);\n        ActionBar actionBar=getSupportActionBar();\n        if(actionBar!=null){\n            actionBar.setDisplayHomeAsUpEnabled(true);\n            actionBar.setHomeAsUpIndicator(R.drawable.ic_launcher_foreground);\n        }\n```\n\n```java\nif(item.getItemId()==android.R.id.home){\n            mDrawerLayout.openDrawer(GravityCompat.START);\n        }\n```\n\n### NavigationView\n\n1.添加依赖库\n\n2.准备menu和headerLayout\n\n3.在activity_main.xml布局中使用NavigationView控件\n\n4.创建点击事件\n\n```java\nimplementation (\"com.google.android.material:material:1.9.0\")//design support库\n    implementation (\"de.hdodenhof:circleimageview:3.1.0\")\n```\n\n```java\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    //group表示一个组，single表示只能单选\n    <group android:checkableBehavior=\"single\">\n        <item\n            android:id=\"@+id/nav_call\"\n            android:icon=\"@drawable/ic_launcher_background\"\n            android:title=\"Call\"/>\n        <item\n            android:id=\"@+id/nav_friends\"\n            android:icon=\"@drawable/ic_launcher_background\"\n            android:title=\"Friends\"/>\n        <item\n            android:id=\"@+id/nav_location\"\n            android:icon=\"@drawable/ic_launcher_background\"\n            android:title=\"Location\"/>\n        <item\n            android:id=\"@+id/nav_mail\"\n            android:icon=\"@drawable/ic_launcher_background\"\n            android:title=\"Mail\"/>\n        <item\n            android:id=\"@+id/nav_task\"\n            android:icon=\"@drawable/ic_launcher_background\"\n            android:title=\"Tasks\"/>\n    </group>\n</menu>\n```\n\n```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"180dp\"\n    android:padding=\"10dp\"\n    android:background=\"?attr/colorPrimary\">\n        //将图形圆形化\n    <de.hdodenhof.circleimageview.CircleImageView\n        android:id=\"@+id/icon_image\"\n        android:layout_width=\"70dp\"\n        android:layout_height=\"70dp\"\n        android:src=\"@drawable/ic_launcher_background\"\n        android:layout_centerInParent=\"true\"/>\n    <TextView\n        android:id=\"@+id/username\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentBottom=\"true\"\n        android:text=\"1234567890@qq.com\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"14sp\"/>\n    <TextView\n        android:id=\"@+id/mail\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_above=\"@+id/username\"\n        android:text=\"Klet\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"14sp\"/>\n\n</RelativeLayout>\n```\n\n```java\n<com.google.android.material.navigation.NavigationView\n        android:id=\"@+id/nav_view\"\n         android:layout_height=\"match_parent\"\n        android:layout_width=\"match_parent\"\n        android:layout_gravity=\"start\"\n        app:menu=\"@menu/nav_menu\"\n        app:headerLayout=\"@layout/nav_header\"/>\n```\n\n```java\n//获取实例\n        NavigationView navView=(NavigationView)findViewById(R.id.nav_view);\n //设置默认选中\n        navView.setCheckedItem(R.id.nav_call);\n        //设置点击事件\n        navView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n                mDrawerLayout.closeDrawers();\n                return true;\n            }\n        });\n```\n\n\n\n------\n\n# 悬浮按钮和可交互显示\n\n### FloatingActionButton\n\n1.在布局中添加控件\n\n2.设置点击事件\n\n```java\n<com.google.android.material.floatingactionbutton.FloatingActionButton\n            android:id=\"@+id/fab\"\n             android:layout_height=\"wrap_content\"\n            android:layout_width=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_margin=\"16dp\"\n            android:src=\"@drawable/ic_done\"\n            app:elevation=\"8dp\"//设置悬浮高度\n            />\n```\n\n```java\nFloatingActionButton fab=(FloatingActionButton) findViewById(R.id.fab);\n        fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Toast.makeText(MainActivity.this, \"FAB clicked\", Toast.LENGTH_SHORT).show();\n            }\n        });\n```\n\n\n\n### Snackbar(可交互的Toast)\n\n1.用make获取对象\n\n2.setAction设置动作\n\n3.用show将其显示\n\n```java\nSnackbar.make(view,\"Data Delete\",Snackbar.LENGTH_SHORT)\n                        .setAction(\"UOdo\", new View.OnClickListener() {\n                            @Override\n                            public void onClick(View view) {\n                                Toast.makeText(MainActivity.this, \"Data Restored\", Toast.LENGTH_SHORT).show();\n                            }\n                        }).show();\n```\n\n\n\n### CoordinatorLayout(加强版FrameLayout)\n\n可以监听到所有子控件的各种事件，然后自动帮助我们做出最为合理的响应，就是加强版的FrameLayout\n\n```java\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n        <com.google.android.material.floatingactionbutton.FloatingActionButton\n            android:id=\"@+id/fab\"\n             android:layout_height=\"wrap_content\"\n            android:layout_width=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_margin=\"16dp\"\n            android:src=\"@drawable/ic_done\"\n            app:elevation=\"8dp\"\n            />\n    </androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\n\n\n------\n\n# 卡片式布局\n\n### CardView（是一个FrameLayout)\n\nRecyclerView和CardView混合使用\n\n1.添加依赖\n\n2.在布局中添加RecyclerView并建立Fruit类，子项布局和适配器\n\n3.应用recyclerView\n\n```java\nimplementation (\"androidx.cardview:cardview:1.0.0\")//cardView依赖\n    implementation (\"androidx.recyclerview:recyclerview:1.3.2\")//recyclerView依赖\n    implementation (\"com.github.bumptech.glide:glide:4.16.0\")//Glide依赖，强大的图片加载库\n```\n\n```java\n<androidx.cardview.widget.CardView\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_margin=\"5dp\"\n    app:cardCornerRadius=\"4dp\">\n    <LinearLayout\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n        <ImageView\n            android:id=\"@+id/fruit_image\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"100dp\"\n                //指定图片的缩放模式\n            android:scaleType=\"centerCrop\"/>\n        <TextView\n            android:id=\"@+id/fruit_text\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_margin=\"5dp\"\n            android:textSize=\"16sp\"/>\n    </LinearLayout>\n\n</androidx.cardview.widget.CardView>\n```\n\n```java\npublic class Fruit {\n    private String name;\n    private  int imageId;\n\n    public Fruit(String name, int imageId) {\n        this.name = name;\n        this.imageId = imageId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n\n    public int getImageId() {\n        return imageId;\n    }\n\n\n}\n\n```\n\n```java\npublic class FruitAdapter extends RecyclerView.Adapter<FruitAdapter.ViewHolder> {\n    private Context mContext;\n    private List<Fruit>mFruitList;\n    static class ViewHolder extends RecyclerView.ViewHolder{\n        CardView cardView;\n        ImageView fruitImage;\n        TextView fruitName;\n        public ViewHolder(View view){\n            super(view);\n            cardView=(CardView) view;\n            fruitImage=(ImageView) view.findViewById(R.id.fruit_image);\n            fruitName=(TextView) view.findViewById(R.id.fruit_text);\n        }\n    }\npublic FruitAdapter(List<Fruit>fruitList){\n        mFruitList=fruitList;\n}\n    @NonNull\n    @Override\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        if(mContext==null){\n            mContext=parent.getContext();\n        }\n        View view= LayoutInflater.from(mContext).inflate(R.layout.fruit_item,parent,false);\n        return new ViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\n            Fruit fruit=mFruitList.get(position);\n            holder.fruitName.setText(fruit.getName());\n        Glide.with(mContext).load(fruit.getImageId()).into(holder.fruitImage);\n    }\n\n    @Override\n    public int getItemCount() {\n        return mFruitList.size();\n    }\n\n}\n\n```\n\n```java\n private Fruit[] fruits={new Fruit(\"Apple\",R.drawable.apple),new Fruit(\"Banana\",R.drawable.banana)\n    ,new Fruit(\"Orange\",R.drawable.orange),new Fruit(\"Watermelon\",R.drawable.watermelon)};\n    private List<Fruit>fruitList=new ArrayList<>();\n    private FruitAdapter adapter;\n @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n         inits();\n        RecyclerView recyclerView=(RecyclerView) findViewById(R.id.recycler_view);\n        //接收两个参数，第一个是Context第二个是列数\n        GridLayoutManager layoutManager=new GridLayoutManager(this,2);\n        recyclerView.setLayoutManager(layoutManager);\n        adapter=new FruitAdapter(fruitList);\n        recyclerView.setAdapter(adapter);\n    }\n  private void inits(){\n        fruitList.clear();\n        for(int i=0;i<50;i++){\n            Random random=new Random();\n            int index=random.nextInt(fruits.length);\n            fruitList.add(fruits[index]);\n\n        }\n    }\n```\n\n### AppBarLayout\n\n用来解决RecyclerView遮挡ToolBar问题\n\n1.将ToolBar嵌入到AppBarLayout中\n\n2.给RecyclerView添加一个布局行为\n\n3.在ToolBar中添加app：layout_scrollFlags属性\n\n```java\n<androidx.drawerlayout.widget.DrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <androidx.coordinatorlayout.widget.CoordinatorLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n           //使用AppBarLayout\n        <com.google.android.material.appbar.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n            <androidx.appcompat.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"?attr/colorPrimary\"\n                android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                    //scroll表示向上滚动ToolBar隐藏，enterAlways表示向下滚动ToolBar重新显示snap表示还没完全显示或隐藏时                         根据滚动的距离自动选择隐藏还是显示\n                app:layout_scrollFlags=\"scroll|enterAlways|snap\"/>\n\n        </com.google.android.material.appbar.AppBarLayout>\n        <androidx.recyclerview.widget.RecyclerView\n            android:id=\"@+id/recycler_view\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n                //RecyclerView添加一个布局行为\n            app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"/>\n        <com.google.android.material.floatingactionbutton.FloatingActionButton\n            android:id=\"@+id/fab\"\n             android:layout_height=\"wrap_content\"\n            android:layout_width=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_margin=\"16dp\"\n            android:src=\"@drawable/ic_done\"\n            app:elevation=\"8dp\"\n            />\n    </androidx.coordinatorlayout.widget.CoordinatorLayout>\n    <com.google.android.material.navigation.NavigationView\n        android:id=\"@+id/nav_view\"\n         android:layout_height=\"match_parent\"\n        android:layout_width=\"match_parent\"\n        android:layout_gravity=\"start\"\n        app:menu=\"@menu/nav_menu\"\n        app:headerLayout=\"@layout/nav_header\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\n\n\n------\n\n# 下拉刷新\n\n利用SwipeRefreshLayout\n\n1.将RecyclerView嵌入到SwipeRefreshLayout中，并将RecyclerView中的布局行为移到SwipeRefreshLayout中\n\n2.在主活动中处理具体的刷新逻辑\n\n```java\n<androidx.swiperefreshlayout.widget.SwipeRefreshLayout\n            android:id=\"@+id/swipe_refresh\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n            >\n            <androidx.recyclerview.widget.RecyclerView\n                android:id=\"@+id/recycler_view\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\" />\n        </androidx.swiperefreshlayout.widget.SwipeRefreshLayout>\n```\n\n```java\n private SwipeRefreshLayout swipeRefreshLayout;\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    \t  //获取实例\n        swipeRefreshLayout=(SwipeRefreshLayout) findViewById(R.id.swipe_refresh);\n        //设置刷新进度条的颜色\n        swipeRefreshLayout.setColorSchemeResources(R.color.black);\n        //设置下拉刷新的监听器\n        swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n            @Override\n            public void onRefresh() {\n                refreshFruits();\n            }\n        });\n    }\n private void refreshFruits() {\n        //开启一个线程\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try{\n                    //将线程沉睡两秒钟(因为本地刷新速度很快，如果不沉睡刷新立刻就结束了)\n                    Thread.sleep(2000);\n                }catch(InterruptedException e){\n                    e.printStackTrace();\n                }\n                //将线程切换回主线程\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        //初始化\n                        inits();\n                        //更新\n                        adapter.notifyDataSetChanged();\n                        //用于表示刷新事件结束，并隐藏进度条\n                        swipeRefreshLayout.setRefreshing(false);\n                    }\n                });\n            }\n        }).start();\n    }\n```\n\n\n\n------\n\n# 可折叠式标题栏\n\n### CollapsingToolbarLayout\n\n**CollapsingToolbarLayout不能独立存在，他只能作为AppBarLayout的直接子布局使用，AppBarLayout又必须是CoordinatorLayout的子布局**\n\n1.使用CoordinatorLayout作为最外层布局，里面嵌套一个AppBarLayout，再嵌套一个CollapsingToolbarLayout\n\n2.在CollapsingToolbarLayout中添加一个ImageView和Toolbar(这个高级标题栏由图片和普通标题栏构成)\n\n3.在最外层布局中使用NestedScrollView(和AppBarLayout同级)\n\n4.NestedScrollView内部只允许一个直接子布局，故先嵌套一个LinearLayout\n\n5.在其中嵌入卡片式布局\n\n6.可以再添加一个FloatingActionButton\n\n7.接着在FruitActivity中编写功能逻辑\n\n8.为RecyclerView设置点击事件\n\n```java\n<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".FruitActivity\">\n    <com.google.android.material.appbar.AppBarLayout\n        android:id=\"@+id/appBar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"250dp\">\n       <com.google.android.material.appbar.CollapsingToolbarLayout\n           android:id=\"@+id/collapsing_toolbar\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\"\n           android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n           app:contentScrim=\"?attr/colorPrimary\"\n           app:layout_scrollFlags=\"scroll|exitUntilCollapsed\">\n           <ImageView\n               android:id=\"@+id/fruit_image_view\"\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"match_parent\"\n               android:scaleType=\"centerCrop\"\n               app:layout_collapseMode=\"parallax\"/>\n           <androidx.appcompat.widget.Toolbar\n               android:id=\"@+id/toolbar\"\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"?attr/actionBarSize\"\n               app:layout_collapseMode=\"pin\"/>\n       </com.google.android.material.appbar.CollapsingToolbarLayout>\n    </com.google.android.material.appbar.AppBarLayout>\n    <androidx.core.widget.NestedScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n        <LinearLayout\n            android:orientation=\"vertical\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n            <androidx.cardview.widget.CardView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginBottom=\"15dp\"\n                android:layout_marginLeft=\"15dp\"\n                android:layout_marginRight=\"15dp\"\n                android:layout_marginTop=\"35dp\"\n                app:cardCornerRadius=\"4dp\">\n                <TextView\n                    android:id=\"@+id/fruit_content_text\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_margin=\"10dp\"/>\n            </androidx.cardview.widget.CardView>\n        </LinearLayout>\n    </androidx.core.widget.NestedScrollView>\n    <com.google.android.material.floatingactionbutton.FloatingActionButton\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"16sp\"\n        android:src=\"@drawable/ic_done\"\n        app:layout_anchor=\"@id/appBar\"\n        app:layout_anchorGravity=\"bottom|end\"/>\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\n```java\npublic class FruitActivity extends AppCompatActivity {\npublic  static final String FRUIT_NAME=\"fruit_name\";\n    public  static final String FRUIT_IMAGE_ID=\"fruit_image_id\";\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_fruit);\n        //通过Intent获取水果名字和图片\n        Intent intent=getIntent();\n        String fruitName=intent.getStringExtra(FRUIT_NAME);\n        int fruitImageId=intent.getIntExtra(FRUIT_IMAGE_ID,0);\n        //获取Toolbar实例\n        Toolbar toolbar=(Toolbar) findViewById(R.id.toolbar);\n        //获取CollapsingToolbarLayout实例\n        CollapsingToolbarLayout collapsingToolbarLayout=(CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);\n        //获取ImageView和TextView实例\n        ImageView fruitImageView=(ImageView) findViewById(R.id.fruit_image_view);\n        TextView fruitContentText=(TextView) findViewById(R.id.fruit_content_text);\n        //将toolbar实例传入\n        setSupportActionBar(toolbar);\n        //启用HomeAsUp按钮\n        ActionBar actionBar=getSupportActionBar();\n        if(actionBar!=null){\n            actionBar.setDisplayHomeAsUpEnabled(true);\n        }\n        //设置标题\n        collapsingToolbarLayout.setTitle(fruitName);\n        //设置图形\n        Glide.with(this).load(fruitImageId).into(fruitImageView);\n        String fruitContent=generateFruitContent(fruitName);\n        fruitContentText.setText(fruitContent);\n    }\n\n    private String generateFruitContent(String fruitName) {\n        StringBuilder fruitContent=new StringBuilder();\n        for(int i=0;i<500;i++){\n            fruitContent.append(fruitName);\n        }\n        return fruitContent.toString();\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n        if(item.getItemId()==android.R.id.home){\n            finish();\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n}\n```\n\n```java\n @NonNull\n    @Override\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        if(mContext==null){\n            mContext=parent.getContext();\n        }\n        View view= LayoutInflater.from(mContext).inflate(R.layout.fruit_item,parent,false);\n        final ViewHolder holder=new ViewHolder(view);\n        holder.cardView.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                int position=holder.getAdapterPosition();\n                Fruit fruit=mFruitList.get(position);\n                Intent intent=new Intent(mContext, FruitActivity.class);\n                intent.putExtra(FruitActivity.FRUIT_NAME,fruit.getName());\n                intent.putExtra(FruitActivity.FRUIT_IMAGE_ID,fruit.getImageId());\n                mContext.startActivity(intent);\n            }\n        });\n        return holder;\n    }\n```\n\n### 充分利用系统状态栏空间\n\n让背景图和系统状态栏融合\n\n1.将ImageView及其所有父布局使用android:fitsSystemWindows=\"true\"\n\n2.使用android:statusBarColor属性将主题状态栏颜色设为透明(该属性是API21之后才有的，故需要新建一个values-v21目录并对其进行编写)\n\n3.对values中的theme文件进行修改\n\n4.在Manifest.xml中对活动主题进行修改\n\n```java\n<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".FruitActivity\"\n    android:fitsSystemWindows=\"true\">\n    <com.google.android.material.appbar.AppBarLayout\n        android:id=\"@+id/appBar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"250dp\"\n        android:fitsSystemWindows=\"true\">\n       <com.google.android.material.appbar.CollapsingToolbarLayout\n           android:id=\"@+id/collapsing_toolbar\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\"\n           android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n           app:contentScrim=\"?attr/colorPrimary\"\n           app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"\n           android:fitsSystemWindows=\"true\">\n           <ImageView\n               android:id=\"@+id/fruit_image_view\"\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"match_parent\"\n               android:scaleType=\"centerCrop\"\n               app:layout_collapseMode=\"parallax\"\n               android:fitsSystemWindows=\"true\"/>\n```\n\n```java\n<resources>\n    <style name=\"FruitActivityTheme\" parent=\"AppTheme\">\n        <item name=\"android:statusBarColor\">@android:color/transparent</item>\n    </style>\n</resources>\n```\n\n```java\n <style name=\"FruitActivityTheme\" parent=\"AppTheme\">\n    </style>\n```\n\n```java\n<activity\n            android:name=\".FruitActivity\"\n            android:theme=\"@style/FruitActivityTheme\"\n            android:exported=\"false\" />\n```\n\n------\n\n","slug":"Material-Design","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gc5000zs4s7czrs6mxq","content":"<h1 id=\"Toolbar\"><a href=\"#Toolbar\" class=\"headerlink\" title=\"Toolbar\"></a>Toolbar</h1><p>1.设置主题为Theme.AppCompat.Light.NoActionBar(淡色主题)</p>\n<p>2.在layout中使用Toolbar</p>\n<p>3..在Mainactivity获取toolbar实例</p>\n<p>4.设置menu并在Mainactivity中使用</p>\n<p><img src=\"/../img/img50.jpg\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources xmlns:tools=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span><br><span class=\"line\">    &lt;!-- Base application theme. --&gt;</span><br><span class=\"line\">    &lt;style name=<span class=\"string\">&quot;AppTheme&quot;</span> parent=<span class=\"string\">&quot;Theme.AppCompat.Light.NoActionBar&quot;</span>&gt;</span><br><span class=\"line\">        &lt;!-- Customize your light theme here. --&gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;colorPrimary&quot;</span>&gt;<span class=\"meta\">@color</span>/black&lt;/item&gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;colorPrimaryDark&quot;</span>&gt;<span class=\"meta\">@color</span>/black&lt;/item&gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;colorAccent&quot;</span>&gt;<span class=\"meta\">@color</span>/white&lt;/item&gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;android:textColorPrimary&quot;</span>&gt;<span class=\"meta\">@color</span>/black&lt;/item&gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;android:windowBackground&quot;</span>&gt;<span class=\"meta\">@color</span>/white&lt;/item&gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;android:navigationBarColor&quot;</span>&gt;<span class=\"meta\">@color</span>/black&lt;/item&gt;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FrameLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">        android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">       app:popupTheme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;menu xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/backup&quot;</span></span><br><span class=\"line\">        android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">        android:title=<span class=\"string\">&quot;Backup&quot;</span></span><br><span class=\"line\">        app:showAsAction=<span class=\"string\">&quot;always&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/delete&quot;</span></span><br><span class=\"line\">        android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">        android:title=<span class=\"string\">&quot;Delete&quot;</span></span><br><span class=\"line\">        app:showAsAction=<span class=\"string\">&quot;ifRoom&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/settings&quot;</span></span><br><span class=\"line\">        android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">        android:title=<span class=\"string\">&quot;Settings&quot;</span></span><br><span class=\"line\">        app:showAsAction=<span class=\"string\">&quot;never&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        <span class=\"type\">Toolbar</span> <span class=\"variable\">toolbar</span> <span class=\"operator\">=</span> (Toolbar) findViewById(R.id.toolbar);</span><br><span class=\"line\">        setSupportActionBar(toolbar);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span>&#123;</span><br><span class=\"line\">        getMenuInflater().inflate(R.menu.toolbar,menu);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onOptionsItemSelected</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> MenuItem item)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(item.getItemId()==R.id.backup)&#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You clicked Backup&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.getItemId()==R.id.delete) &#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You clicked Delete&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You clicked Settings&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"滑动菜单\"><a href=\"#滑动菜单\" class=\"headerlink\" title=\"滑动菜单\"></a>滑动菜单</h1><h3 id=\"DrawerLayout\"><a href=\"#DrawerLayout\" class=\"headerlink\" title=\"DrawerLayout\"></a>DrawerLayout</h3><p>1.修改布局中代码，使用DrawerLayout布局</p>\n<p>2.获取DrawerLayout和ActionBar的实例</p>\n<p>3.利用ActionBar的方法让导航按钮显示</p>\n<p>4.对按钮的点击事件进行处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/drawer_layout&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;FrameLayout</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">        &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">            android:background=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">            android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">            app:popupTheme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/FrameLayout&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;start&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;This is menu&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;30sp&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;#FFF&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> DrawerLayout mDrawerLayout;</span><br><span class=\"line\"> mDrawerLayout=(DrawerLayout) findViewById(R.id.drawer_layout);</span><br><span class=\"line\">        ActionBar actionBar=getSupportActionBar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(actionBar!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            actionBar.setDisplayHomeAsUpEnabled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            actionBar.setHomeAsUpIndicator(R.drawable.ic_launcher_foreground);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(item.getItemId()==android.R.id.home)&#123;</span><br><span class=\"line\">            mDrawerLayout.openDrawer(GravityCompat.START);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NavigationView\"><a href=\"#NavigationView\" class=\"headerlink\" title=\"NavigationView\"></a>NavigationView</h3><p>1.添加依赖库</p>\n<p>2.准备menu和headerLayout</p>\n<p>3.在activity_main.xml布局中使用NavigationView控件</p>\n<p>4.创建点击事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;com.google.android.material:material:1.9.0&quot;</span>)<span class=\"comment\">//design support库</span></span><br><span class=\"line\">    implementation (<span class=\"string\">&quot;de.hdodenhof:circleimageview:3.1.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;menu xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"comment\">//group表示一个组，single表示只能单选</span></span><br><span class=\"line\">    &lt;group android:checkableBehavior=<span class=\"string\">&quot;single&quot;</span>&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/nav_call&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Call&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/nav_friends&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Friends&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/nav_location&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Location&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/nav_mail&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Mail&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/nav_task&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Tasks&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/group&gt;</span><br><span class=\"line\">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;RelativeLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;180dp&quot;</span></span><br><span class=\"line\">    android:padding=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span>&gt;</span><br><span class=\"line\">        <span class=\"comment\">//将图形圆形化</span></span><br><span class=\"line\">    &lt;de.hdodenhof.circleimageview.CircleImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/icon_image&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;70dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;70dp&quot;</span></span><br><span class=\"line\">        android:src=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">        android:layout_centerInParent=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/username&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_alignParentBottom=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;1234567890@qq.com&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;14sp&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/mail&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_above=<span class=\"string\">&quot;@+id/username&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Klet&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;14sp&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/nav_view&quot;</span></span><br><span class=\"line\">         android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;start&quot;</span></span><br><span class=\"line\">        app:menu=<span class=\"string\">&quot;@menu/nav_menu&quot;</span></span><br><span class=\"line\">        app:headerLayout=<span class=\"string\">&quot;@layout/nav_header&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取实例</span></span><br><span class=\"line\">        NavigationView navView=(NavigationView)findViewById(R.id.nav_view);</span><br><span class=\"line\"> <span class=\"comment\">//设置默认选中</span></span><br><span class=\"line\">        navView.setCheckedItem(R.id.nav_call);</span><br><span class=\"line\">        <span class=\"comment\">//设置点击事件</span></span><br><span class=\"line\">        navView.setNavigationItemSelectedListener(<span class=\"keyword\">new</span> <span class=\"title class_\">NavigationView</span>.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onNavigationItemSelected</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> MenuItem item)</span> &#123;</span><br><span class=\"line\">                mDrawerLayout.closeDrawers();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"悬浮按钮和可交互显示\"><a href=\"#悬浮按钮和可交互显示\" class=\"headerlink\" title=\"悬浮按钮和可交互显示\"></a>悬浮按钮和可交互显示</h1><h3 id=\"FloatingActionButton\"><a href=\"#FloatingActionButton\" class=\"headerlink\" title=\"FloatingActionButton\"></a>FloatingActionButton</h3><p>1.在布局中添加控件</p>\n<p>2.设置点击事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.google.android.material.floatingactionbutton.FloatingActionButton</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/fab&quot;</span></span><br><span class=\"line\">             android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_gravity=<span class=\"string\">&quot;bottom|end&quot;</span></span><br><span class=\"line\">            android:layout_margin=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">            android:src=<span class=\"string\">&quot;@drawable/ic_done&quot;</span></span><br><span class=\"line\">            app:elevation=<span class=\"string\">&quot;8dp&quot;</span><span class=\"comment\">//设置悬浮高度</span></span><br><span class=\"line\">            /&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FloatingActionButton fab=(FloatingActionButton) findViewById(R.id.fab);</span><br><span class=\"line\">        fab.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                Toast.makeText(MainActivity.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;FAB clicked&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Snackbar-可交互的Toast\"><a href=\"#Snackbar-可交互的Toast\" class=\"headerlink\" title=\"Snackbar(可交互的Toast)\"></a>Snackbar(可交互的Toast)</h3><p>1.用make获取对象</p>\n<p>2.setAction设置动作</p>\n<p>3.用show将其显示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Snackbar.make(view,<span class=\"string\">&quot;Data Delete&quot;</span>,Snackbar.LENGTH_SHORT)</span><br><span class=\"line\">                        .setAction(<span class=\"string\">&quot;UOdo&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">                            <span class=\"meta\">@Override</span></span><br><span class=\"line\">                            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                                Toast.makeText(MainActivity.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Data Restored&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;).show();</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"CoordinatorLayout-加强版FrameLayout\"><a href=\"#CoordinatorLayout-加强版FrameLayout\" class=\"headerlink\" title=\"CoordinatorLayout(加强版FrameLayout)\"></a>CoordinatorLayout(加强版FrameLayout)</h3><p>可以监听到所有子控件的各种事件，然后自动帮助我们做出最为合理的响应，就是加强版的FrameLayout</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">        &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">            android:background=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">            android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">            app:popupTheme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;com.google.android.material.floatingactionbutton.FloatingActionButton</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/fab&quot;</span></span><br><span class=\"line\">             android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_gravity=<span class=\"string\">&quot;bottom|end&quot;</span></span><br><span class=\"line\">            android:layout_margin=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">            android:src=<span class=\"string\">&quot;@drawable/ic_done&quot;</span></span><br><span class=\"line\">            app:elevation=<span class=\"string\">&quot;8dp&quot;</span></span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">    &lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"卡片式布局\"><a href=\"#卡片式布局\" class=\"headerlink\" title=\"卡片式布局\"></a>卡片式布局</h1><h3 id=\"CardView（是一个FrameLayout\"><a href=\"#CardView（是一个FrameLayout\" class=\"headerlink\" title=\"CardView（是一个FrameLayout)\"></a>CardView（是一个FrameLayout)</h3><p>RecyclerView和CardView混合使用</p>\n<p>1.添加依赖</p>\n<p>2.在布局中添加RecyclerView并建立Fruit类，子项布局和适配器</p>\n<p>3.应用recyclerView</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;androidx.cardview:cardview:1.0.0&quot;</span>)<span class=\"comment\">//cardView依赖</span></span><br><span class=\"line\">    implementation (<span class=\"string\">&quot;androidx.recyclerview:recyclerview:1.3.2&quot;</span>)<span class=\"comment\">//recyclerView依赖</span></span><br><span class=\"line\">    implementation (<span class=\"string\">&quot;com.github.bumptech.glide:glide:4.16.0&quot;</span>)<span class=\"comment\">//Glide依赖，强大的图片加载库</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.cardview.widget.CardView</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_margin=<span class=\"string\">&quot;5dp&quot;</span></span><br><span class=\"line\">    app:cardCornerRadius=<span class=\"string\">&quot;4dp&quot;</span>&gt;</span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>&gt;</span><br><span class=\"line\">        &lt;ImageView</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/fruit_image&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;100dp&quot;</span></span><br><span class=\"line\">                <span class=\"comment\">//指定图片的缩放模式</span></span><br><span class=\"line\">            android:scaleType=<span class=\"string\">&quot;centerCrop&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;TextView</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/fruit_text&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_gravity=<span class=\"string\">&quot;center_horizontal&quot;</span></span><br><span class=\"line\">            android:layout_margin=<span class=\"string\">&quot;5dp&quot;</span></span><br><span class=\"line\">            android:textSize=<span class=\"string\">&quot;16sp&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/androidx.cardview.widget.CardView&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Fruit</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"type\">int</span> imageId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Fruit</span><span class=\"params\">(String name, <span class=\"type\">int</span> imageId)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.imageId = imageId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getImageId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> imageId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FruitAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RecyclerView</span>.Adapter&lt;FruitAdapter.ViewHolder&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Fruit&gt;mFruitList;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RecyclerView</span>.ViewHolder&#123;</span><br><span class=\"line\">        CardView cardView;</span><br><span class=\"line\">        ImageView fruitImage;</span><br><span class=\"line\">        TextView fruitName;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">ViewHolder</span><span class=\"params\">(View view)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>(view);</span><br><span class=\"line\">            cardView=(CardView) view;</span><br><span class=\"line\">            fruitImage=(ImageView) view.findViewById(R.id.fruit_image);</span><br><span class=\"line\">            fruitName=(TextView) view.findViewById(R.id.fruit_text);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">FruitAdapter</span><span class=\"params\">(List&lt;Fruit&gt;fruitList)</span>&#123;</span><br><span class=\"line\">        mFruitList=fruitList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ViewHolder <span class=\"title function_\">onCreateViewHolder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewGroup parent, <span class=\"type\">int</span> viewType)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mContext==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            mContext=parent.getContext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        View view= LayoutInflater.from(mContext).inflate(R.layout.fruit_item,parent,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ViewHolder</span>(view);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onBindViewHolder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewHolder holder, <span class=\"type\">int</span> position)</span> &#123;</span><br><span class=\"line\">            Fruit fruit=mFruitList.get(position);</span><br><span class=\"line\">            holder.fruitName.setText(fruit.getName());</span><br><span class=\"line\">        Glide.with(mContext).load(fruit.getImageId()).into(holder.fruitImage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getItemCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mFruitList.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Fruit[] fruits=&#123;<span class=\"keyword\">new</span> <span class=\"title class_\">Fruit</span>(<span class=\"string\">&quot;Apple&quot;</span>,R.drawable.apple),<span class=\"keyword\">new</span> <span class=\"title class_\">Fruit</span>(<span class=\"string\">&quot;Banana&quot;</span>,R.drawable.banana)</span><br><span class=\"line\">   ,<span class=\"keyword\">new</span> <span class=\"title class_\">Fruit</span>(<span class=\"string\">&quot;Orange&quot;</span>,R.drawable.orange),<span class=\"keyword\">new</span> <span class=\"title class_\">Fruit</span>(<span class=\"string\">&quot;Watermelon&quot;</span>,R.drawable.watermelon)&#125;;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> List&lt;Fruit&gt;fruitList=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">   <span class=\"keyword\">private</span> FruitAdapter adapter;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">       setContentView(R.layout.activity_main);</span><br><span class=\"line\">        inits();</span><br><span class=\"line\">       RecyclerView recyclerView=(RecyclerView) findViewById(R.id.recycler_view);</span><br><span class=\"line\">       <span class=\"comment\">//接收两个参数，第一个是Context第二个是列数</span></span><br><span class=\"line\">       GridLayoutManager layoutManager=<span class=\"keyword\">new</span> <span class=\"title class_\">GridLayoutManager</span>(<span class=\"built_in\">this</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">       recyclerView.setLayoutManager(layoutManager);</span><br><span class=\"line\">       adapter=<span class=\"keyword\">new</span> <span class=\"title class_\">FruitAdapter</span>(fruitList);</span><br><span class=\"line\">       recyclerView.setAdapter(adapter);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inits</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       fruitList.clear();</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">50</span>;i++)&#123;</span><br><span class=\"line\">           Random random=<span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">           <span class=\"type\">int</span> index=random.nextInt(fruits.length);</span><br><span class=\"line\">           fruitList.add(fruits[index]);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AppBarLayout\"><a href=\"#AppBarLayout\" class=\"headerlink\" title=\"AppBarLayout\"></a>AppBarLayout</h3><p>用来解决RecyclerView遮挡ToolBar问题</p>\n<p>1.将ToolBar嵌入到AppBarLayout中</p>\n<p>2.给RecyclerView添加一个布局行为</p>\n<p>3.在ToolBar中添加app：layout_scrollFlags属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/drawer_layout&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;androidx.coordinatorlayout.widget.CoordinatorLayout</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">           <span class=\"comment\">//使用AppBarLayout</span></span><br><span class=\"line\">        &lt;com.google.android.material.appbar.AppBarLayout</span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>&gt;</span><br><span class=\"line\">            &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">                android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">                android:background=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">                android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">                app:popupTheme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span><br><span class=\"line\">                    <span class=\"comment\">//scroll表示向上滚动ToolBar隐藏，enterAlways表示向下滚动ToolBar重新显示snap表示还没完全显示或隐藏时                         根据滚动的距离自动选择隐藏还是显示</span></span><br><span class=\"line\">                app:layout_scrollFlags=<span class=\"string\">&quot;scroll|enterAlways|snap&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/com.google.android.material.appbar.AppBarLayout&gt;</span><br><span class=\"line\">        &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/recycler_view&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                <span class=\"comment\">//RecyclerView添加一个布局行为</span></span><br><span class=\"line\">            app:layout_behavior=<span class=\"string\">&quot;@string/appbar_scrolling_view_behavior&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;com.google.android.material.floatingactionbutton.FloatingActionButton</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/fab&quot;</span></span><br><span class=\"line\">             android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_gravity=<span class=\"string\">&quot;bottom|end&quot;</span></span><br><span class=\"line\">            android:layout_margin=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">            android:src=<span class=\"string\">&quot;@drawable/ic_done&quot;</span></span><br><span class=\"line\">            app:elevation=<span class=\"string\">&quot;8dp&quot;</span></span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">    &lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br><span class=\"line\">    &lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/nav_view&quot;</span></span><br><span class=\"line\">         android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;start&quot;</span></span><br><span class=\"line\">        app:menu=<span class=\"string\">&quot;@menu/nav_menu&quot;</span></span><br><span class=\"line\">        app:headerLayout=<span class=\"string\">&quot;@layout/nav_header&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"下拉刷新\"><a href=\"#下拉刷新\" class=\"headerlink\" title=\"下拉刷新\"></a>下拉刷新</h1><p>利用SwipeRefreshLayout</p>\n<p>1.将RecyclerView嵌入到SwipeRefreshLayout中，并将RecyclerView中的布局行为移到SwipeRefreshLayout中</p>\n<p>2.在主活动中处理具体的刷新逻辑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.swiperefreshlayout.widget.SwipeRefreshLayout</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/swipe_refresh&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            app:layout_behavior=<span class=\"string\">&quot;@string/appbar_scrolling_view_behavior&quot;</span></span><br><span class=\"line\">            &gt;</span><br><span class=\"line\">            &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class=\"line\">                android:id=<span class=\"string\">&quot;@+id/recycler_view&quot;</span></span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;/androidx.swiperefreshlayout.widget.SwipeRefreshLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">private</span> SwipeRefreshLayout swipeRefreshLayout;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    \t  <span class=\"comment\">//获取实例</span></span><br><span class=\"line\">        swipeRefreshLayout=(SwipeRefreshLayout) findViewById(R.id.swipe_refresh);</span><br><span class=\"line\">        <span class=\"comment\">//设置刷新进度条的颜色</span></span><br><span class=\"line\">        swipeRefreshLayout.setColorSchemeResources(R.color.black);</span><br><span class=\"line\">        <span class=\"comment\">//设置下拉刷新的监听器</span></span><br><span class=\"line\">        swipeRefreshLayout.setOnRefreshListener(<span class=\"keyword\">new</span> <span class=\"title class_\">SwipeRefreshLayout</span>.OnRefreshListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRefresh</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                refreshFruits();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refreshFruits</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开启一个线程</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将线程沉睡两秒钟(因为本地刷新速度很快，如果不沉睡刷新立刻就结束了)</span></span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span>(InterruptedException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//将线程切换回主线程</span></span><br><span class=\"line\">                runOnUiThread(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//初始化</span></span><br><span class=\"line\">                        inits();</span><br><span class=\"line\">                        <span class=\"comment\">//更新</span></span><br><span class=\"line\">                        adapter.notifyDataSetChanged();</span><br><span class=\"line\">                        <span class=\"comment\">//用于表示刷新事件结束，并隐藏进度条</span></span><br><span class=\"line\">                        swipeRefreshLayout.setRefreshing(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"可折叠式标题栏\"><a href=\"#可折叠式标题栏\" class=\"headerlink\" title=\"可折叠式标题栏\"></a>可折叠式标题栏</h1><h3 id=\"CollapsingToolbarLayout\"><a href=\"#CollapsingToolbarLayout\" class=\"headerlink\" title=\"CollapsingToolbarLayout\"></a>CollapsingToolbarLayout</h3><p><strong>CollapsingToolbarLayout不能独立存在，他只能作为AppBarLayout的直接子布局使用，AppBarLayout又必须是CoordinatorLayout的子布局</strong></p>\n<p>1.使用CoordinatorLayout作为最外层布局，里面嵌套一个AppBarLayout，再嵌套一个CollapsingToolbarLayout</p>\n<p>2.在CollapsingToolbarLayout中添加一个ImageView和Toolbar(这个高级标题栏由图片和普通标题栏构成)</p>\n<p>3.在最外层布局中使用NestedScrollView(和AppBarLayout同级)</p>\n<p>4.NestedScrollView内部只允许一个直接子布局，故先嵌套一个LinearLayout</p>\n<p>5.在其中嵌入卡片式布局</p>\n<p>6.可以再添加一个FloatingActionButton</p>\n<p>7.接着在FruitActivity中编写功能逻辑</p>\n<p>8.为RecyclerView设置点击事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    tools:context=<span class=\"string\">&quot;.FruitActivity&quot;</span>&gt;</span><br><span class=\"line\">    &lt;com.google.android.material.appbar.AppBarLayout</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/appBar&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;250dp&quot;</span>&gt;</span><br><span class=\"line\">       &lt;com.google.android.material.appbar.CollapsingToolbarLayout</span><br><span class=\"line\">           android:id=<span class=\"string\">&quot;@+id/collapsing_toolbar&quot;</span></span><br><span class=\"line\">           android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">           android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">           android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">           app:contentScrim=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">           app:layout_scrollFlags=<span class=\"string\">&quot;scroll|exitUntilCollapsed&quot;</span>&gt;</span><br><span class=\"line\">           &lt;ImageView</span><br><span class=\"line\">               android:id=<span class=\"string\">&quot;@+id/fruit_image_view&quot;</span></span><br><span class=\"line\">               android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">               android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">               android:scaleType=<span class=\"string\">&quot;centerCrop&quot;</span></span><br><span class=\"line\">               app:layout_collapseMode=<span class=\"string\">&quot;parallax&quot;</span>/&gt;</span><br><span class=\"line\">           &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">               android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">               android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">               android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">               app:layout_collapseMode=<span class=\"string\">&quot;pin&quot;</span>/&gt;</span><br><span class=\"line\">       &lt;/com.google.android.material.appbar.CollapsingToolbarLayout&gt;</span><br><span class=\"line\">    &lt;/com.google.android.material.appbar.AppBarLayout&gt;</span><br><span class=\"line\">    &lt;androidx.core.widget.NestedScrollView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        app:layout_behavior=<span class=\"string\">&quot;@string/appbar_scrolling_view_behavior&quot;</span>&gt;</span><br><span class=\"line\">        &lt;LinearLayout</span><br><span class=\"line\">            android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>&gt;</span><br><span class=\"line\">            &lt;androidx.cardview.widget.CardView</span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">                android:layout_marginBottom=<span class=\"string\">&quot;15dp&quot;</span></span><br><span class=\"line\">                android:layout_marginLeft=<span class=\"string\">&quot;15dp&quot;</span></span><br><span class=\"line\">                android:layout_marginRight=<span class=\"string\">&quot;15dp&quot;</span></span><br><span class=\"line\">                android:layout_marginTop=<span class=\"string\">&quot;35dp&quot;</span></span><br><span class=\"line\">                app:cardCornerRadius=<span class=\"string\">&quot;4dp&quot;</span>&gt;</span><br><span class=\"line\">                &lt;TextView</span><br><span class=\"line\">                    android:id=<span class=\"string\">&quot;@+id/fruit_content_text&quot;</span></span><br><span class=\"line\">                    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">                    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">                    android:layout_margin=<span class=\"string\">&quot;10dp&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;/androidx.cardview.widget.CardView&gt;</span><br><span class=\"line\">        &lt;/LinearLayout&gt;</span><br><span class=\"line\">    &lt;/androidx.core.widget.NestedScrollView&gt;</span><br><span class=\"line\">    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_margin=<span class=\"string\">&quot;16sp&quot;</span></span><br><span class=\"line\">        android:src=<span class=\"string\">&quot;@drawable/ic_done&quot;</span></span><br><span class=\"line\">        app:layout_anchor=<span class=\"string\">&quot;@id/appBar&quot;</span></span><br><span class=\"line\">        app:layout_anchorGravity=<span class=\"string\">&quot;bottom|end&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FruitActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FRUIT_NAME=<span class=\"string\">&quot;fruit_name&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FRUIT_IMAGE_ID=<span class=\"string\">&quot;fruit_image_id&quot;</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_fruit);</span><br><span class=\"line\">        <span class=\"comment\">//通过Intent获取水果名字和图片</span></span><br><span class=\"line\">        Intent intent=getIntent();</span><br><span class=\"line\">        String fruitName=intent.getStringExtra(FRUIT_NAME);</span><br><span class=\"line\">        <span class=\"type\">int</span> fruitImageId=intent.getIntExtra(FRUIT_IMAGE_ID,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取Toolbar实例</span></span><br><span class=\"line\">        Toolbar toolbar=(Toolbar) findViewById(R.id.toolbar);</span><br><span class=\"line\">        <span class=\"comment\">//获取CollapsingToolbarLayout实例</span></span><br><span class=\"line\">        CollapsingToolbarLayout collapsingToolbarLayout=(CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);</span><br><span class=\"line\">        <span class=\"comment\">//获取ImageView和TextView实例</span></span><br><span class=\"line\">        ImageView fruitImageView=(ImageView) findViewById(R.id.fruit_image_view);</span><br><span class=\"line\">        TextView fruitContentText=(TextView) findViewById(R.id.fruit_content_text);</span><br><span class=\"line\">        <span class=\"comment\">//将toolbar实例传入</span></span><br><span class=\"line\">        setSupportActionBar(toolbar);</span><br><span class=\"line\">        <span class=\"comment\">//启用HomeAsUp按钮</span></span><br><span class=\"line\">        ActionBar actionBar=getSupportActionBar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(actionBar!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            actionBar.setDisplayHomeAsUpEnabled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        collapsingToolbarLayout.setTitle(fruitName);</span><br><span class=\"line\">        <span class=\"comment\">//设置图形</span></span><br><span class=\"line\">        Glide.with(<span class=\"built_in\">this</span>).load(fruitImageId).into(fruitImageView);</span><br><span class=\"line\">        String fruitContent=generateFruitContent(fruitName);</span><br><span class=\"line\">        fruitContentText.setText(fruitContent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">generateFruitContent</span><span class=\"params\">(String fruitName)</span> &#123;</span><br><span class=\"line\">        StringBuilder fruitContent=<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">500</span>;i++)&#123;</span><br><span class=\"line\">            fruitContent.append(fruitName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fruitContent.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onOptionsItemSelected</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> MenuItem item)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(item.getItemId()==android.R.id.home)&#123;</span><br><span class=\"line\">            finish();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.onOptionsItemSelected(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NonNull</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> ViewHolder <span class=\"title function_\">onCreateViewHolder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewGroup parent, <span class=\"type\">int</span> viewType)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(mContext==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">           mContext=parent.getContext();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       View view= LayoutInflater.from(mContext).inflate(R.layout.fruit_item,parent,<span class=\"literal\">false</span>);</span><br><span class=\"line\">       <span class=\"keyword\">final</span> ViewHolder holder=<span class=\"keyword\">new</span> <span class=\"title class_\">ViewHolder</span>(view);</span><br><span class=\"line\">       holder.cardView.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">               <span class=\"type\">int</span> position=holder.getAdapterPosition();</span><br><span class=\"line\">               Fruit fruit=mFruitList.get(position);</span><br><span class=\"line\">               Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(mContext, FruitActivity.class);</span><br><span class=\"line\">               intent.putExtra(FruitActivity.FRUIT_NAME,fruit.getName());</span><br><span class=\"line\">               intent.putExtra(FruitActivity.FRUIT_IMAGE_ID,fruit.getImageId());</span><br><span class=\"line\">               mContext.startActivity(intent);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> holder;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"充分利用系统状态栏空间\"><a href=\"#充分利用系统状态栏空间\" class=\"headerlink\" title=\"充分利用系统状态栏空间\"></a>充分利用系统状态栏空间</h3><p>让背景图和系统状态栏融合</p>\n<p>1.将ImageView及其所有父布局使用android:fitsSystemWindows&#x3D;”true”</p>\n<p>2.使用android:statusBarColor属性将主题状态栏颜色设为透明(该属性是API21之后才有的，故需要新建一个values-v21目录并对其进行编写)</p>\n<p>3.对values中的theme文件进行修改</p>\n<p>4.在Manifest.xml中对活动主题进行修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    tools:context=<span class=\"string\">&quot;.FruitActivity&quot;</span></span><br><span class=\"line\">    android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">    &lt;com.google.android.material.appbar.AppBarLayout</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/appBar&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;250dp&quot;</span></span><br><span class=\"line\">        android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">       &lt;com.google.android.material.appbar.CollapsingToolbarLayout</span><br><span class=\"line\">           android:id=<span class=\"string\">&quot;@+id/collapsing_toolbar&quot;</span></span><br><span class=\"line\">           android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">           android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">           android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">           app:contentScrim=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">           app:layout_scrollFlags=<span class=\"string\">&quot;scroll|exitUntilCollapsed&quot;</span></span><br><span class=\"line\">           android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">           &lt;ImageView</span><br><span class=\"line\">               android:id=<span class=\"string\">&quot;@+id/fruit_image_view&quot;</span></span><br><span class=\"line\">               android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">               android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">               android:scaleType=<span class=\"string\">&quot;centerCrop&quot;</span></span><br><span class=\"line\">               app:layout_collapseMode=<span class=\"string\">&quot;parallax&quot;</span></span><br><span class=\"line\">               android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;style name=<span class=\"string\">&quot;FruitActivityTheme&quot;</span> parent=<span class=\"string\">&quot;AppTheme&quot;</span>&gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;android:statusBarColor&quot;</span>&gt;<span class=\"meta\">@android</span>:color/transparent&lt;/item&gt;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style name=<span class=\"string\">&quot;FruitActivityTheme&quot;</span> parent=<span class=\"string\">&quot;AppTheme&quot;</span>&gt;</span><br><span class=\"line\">   &lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity</span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;.FruitActivity&quot;</span></span><br><span class=\"line\">            android:theme=<span class=\"string\">&quot;@style/FruitActivityTheme&quot;</span></span><br><span class=\"line\">            android:exported=<span class=\"string\">&quot;false&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"Toolbar\n1.设置主题为Theme.AppCompat.Light.NoActionBar(淡色主题)\n\n2.在layout中使用Toolbar\n\n3..在Mainactivity获取toolbar实例\n\n4.设置menu并在Mainactivity中使用\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n<resources xmlns:tools=\"http://schemas.android.com/tools\">\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Th","more":"<h1 id=\"Toolbar\"><a href=\"#Toolbar\" class=\"headerlink\" title=\"Toolbar\"></a>Toolbar</h1><p>1.设置主题为Theme.AppCompat.Light.NoActionBar(淡色主题)</p>\n<p>2.在layout中使用Toolbar</p>\n<p>3..在Mainactivity获取toolbar实例</p>\n<p>4.设置menu并在Mainactivity中使用</p>\n<p><img src=\"/../img/img50.jpg\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources xmlns:tools=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span><br><span class=\"line\">    &lt;!-- Base application theme. --&gt;</span><br><span class=\"line\">    &lt;style name=<span class=\"string\">&quot;AppTheme&quot;</span> parent=<span class=\"string\">&quot;Theme.AppCompat.Light.NoActionBar&quot;</span>&gt;</span><br><span class=\"line\">        &lt;!-- Customize your light theme here. --&gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;colorPrimary&quot;</span>&gt;<span class=\"meta\">@color</span>/black&lt;/item&gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;colorPrimaryDark&quot;</span>&gt;<span class=\"meta\">@color</span>/black&lt;/item&gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;colorAccent&quot;</span>&gt;<span class=\"meta\">@color</span>/white&lt;/item&gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;android:textColorPrimary&quot;</span>&gt;<span class=\"meta\">@color</span>/black&lt;/item&gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;android:windowBackground&quot;</span>&gt;<span class=\"meta\">@color</span>/white&lt;/item&gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;android:navigationBarColor&quot;</span>&gt;<span class=\"meta\">@color</span>/black&lt;/item&gt;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FrameLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">        android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">       app:popupTheme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;menu xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/backup&quot;</span></span><br><span class=\"line\">        android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">        android:title=<span class=\"string\">&quot;Backup&quot;</span></span><br><span class=\"line\">        app:showAsAction=<span class=\"string\">&quot;always&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/delete&quot;</span></span><br><span class=\"line\">        android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">        android:title=<span class=\"string\">&quot;Delete&quot;</span></span><br><span class=\"line\">        app:showAsAction=<span class=\"string\">&quot;ifRoom&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/settings&quot;</span></span><br><span class=\"line\">        android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">        android:title=<span class=\"string\">&quot;Settings&quot;</span></span><br><span class=\"line\">        app:showAsAction=<span class=\"string\">&quot;never&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        <span class=\"type\">Toolbar</span> <span class=\"variable\">toolbar</span> <span class=\"operator\">=</span> (Toolbar) findViewById(R.id.toolbar);</span><br><span class=\"line\">        setSupportActionBar(toolbar);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span>&#123;</span><br><span class=\"line\">        getMenuInflater().inflate(R.menu.toolbar,menu);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onOptionsItemSelected</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> MenuItem item)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(item.getItemId()==R.id.backup)&#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You clicked Backup&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.getItemId()==R.id.delete) &#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You clicked Delete&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You clicked Settings&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"滑动菜单\"><a href=\"#滑动菜单\" class=\"headerlink\" title=\"滑动菜单\"></a>滑动菜单</h1><h3 id=\"DrawerLayout\"><a href=\"#DrawerLayout\" class=\"headerlink\" title=\"DrawerLayout\"></a>DrawerLayout</h3><p>1.修改布局中代码，使用DrawerLayout布局</p>\n<p>2.获取DrawerLayout和ActionBar的实例</p>\n<p>3.利用ActionBar的方法让导航按钮显示</p>\n<p>4.对按钮的点击事件进行处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/drawer_layout&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;FrameLayout</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">        &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">            android:background=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">            android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">            app:popupTheme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/FrameLayout&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;start&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;This is menu&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;30sp&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;#FFF&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> DrawerLayout mDrawerLayout;</span><br><span class=\"line\"> mDrawerLayout=(DrawerLayout) findViewById(R.id.drawer_layout);</span><br><span class=\"line\">        ActionBar actionBar=getSupportActionBar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(actionBar!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            actionBar.setDisplayHomeAsUpEnabled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            actionBar.setHomeAsUpIndicator(R.drawable.ic_launcher_foreground);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(item.getItemId()==android.R.id.home)&#123;</span><br><span class=\"line\">            mDrawerLayout.openDrawer(GravityCompat.START);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NavigationView\"><a href=\"#NavigationView\" class=\"headerlink\" title=\"NavigationView\"></a>NavigationView</h3><p>1.添加依赖库</p>\n<p>2.准备menu和headerLayout</p>\n<p>3.在activity_main.xml布局中使用NavigationView控件</p>\n<p>4.创建点击事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;com.google.android.material:material:1.9.0&quot;</span>)<span class=\"comment\">//design support库</span></span><br><span class=\"line\">    implementation (<span class=\"string\">&quot;de.hdodenhof:circleimageview:3.1.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;menu xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"comment\">//group表示一个组，single表示只能单选</span></span><br><span class=\"line\">    &lt;group android:checkableBehavior=<span class=\"string\">&quot;single&quot;</span>&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/nav_call&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Call&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/nav_friends&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Friends&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/nav_location&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Location&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/nav_mail&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Mail&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/nav_task&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Tasks&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/group&gt;</span><br><span class=\"line\">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;RelativeLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;180dp&quot;</span></span><br><span class=\"line\">    android:padding=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span>&gt;</span><br><span class=\"line\">        <span class=\"comment\">//将图形圆形化</span></span><br><span class=\"line\">    &lt;de.hdodenhof.circleimageview.CircleImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/icon_image&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;70dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;70dp&quot;</span></span><br><span class=\"line\">        android:src=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span></span><br><span class=\"line\">        android:layout_centerInParent=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/username&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_alignParentBottom=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;1234567890@qq.com&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;14sp&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/mail&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_above=<span class=\"string\">&quot;@+id/username&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Klet&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;14sp&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/nav_view&quot;</span></span><br><span class=\"line\">         android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;start&quot;</span></span><br><span class=\"line\">        app:menu=<span class=\"string\">&quot;@menu/nav_menu&quot;</span></span><br><span class=\"line\">        app:headerLayout=<span class=\"string\">&quot;@layout/nav_header&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取实例</span></span><br><span class=\"line\">        NavigationView navView=(NavigationView)findViewById(R.id.nav_view);</span><br><span class=\"line\"> <span class=\"comment\">//设置默认选中</span></span><br><span class=\"line\">        navView.setCheckedItem(R.id.nav_call);</span><br><span class=\"line\">        <span class=\"comment\">//设置点击事件</span></span><br><span class=\"line\">        navView.setNavigationItemSelectedListener(<span class=\"keyword\">new</span> <span class=\"title class_\">NavigationView</span>.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onNavigationItemSelected</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> MenuItem item)</span> &#123;</span><br><span class=\"line\">                mDrawerLayout.closeDrawers();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"悬浮按钮和可交互显示\"><a href=\"#悬浮按钮和可交互显示\" class=\"headerlink\" title=\"悬浮按钮和可交互显示\"></a>悬浮按钮和可交互显示</h1><h3 id=\"FloatingActionButton\"><a href=\"#FloatingActionButton\" class=\"headerlink\" title=\"FloatingActionButton\"></a>FloatingActionButton</h3><p>1.在布局中添加控件</p>\n<p>2.设置点击事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.google.android.material.floatingactionbutton.FloatingActionButton</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/fab&quot;</span></span><br><span class=\"line\">             android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_gravity=<span class=\"string\">&quot;bottom|end&quot;</span></span><br><span class=\"line\">            android:layout_margin=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">            android:src=<span class=\"string\">&quot;@drawable/ic_done&quot;</span></span><br><span class=\"line\">            app:elevation=<span class=\"string\">&quot;8dp&quot;</span><span class=\"comment\">//设置悬浮高度</span></span><br><span class=\"line\">            /&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FloatingActionButton fab=(FloatingActionButton) findViewById(R.id.fab);</span><br><span class=\"line\">        fab.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                Toast.makeText(MainActivity.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;FAB clicked&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Snackbar-可交互的Toast\"><a href=\"#Snackbar-可交互的Toast\" class=\"headerlink\" title=\"Snackbar(可交互的Toast)\"></a>Snackbar(可交互的Toast)</h3><p>1.用make获取对象</p>\n<p>2.setAction设置动作</p>\n<p>3.用show将其显示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Snackbar.make(view,<span class=\"string\">&quot;Data Delete&quot;</span>,Snackbar.LENGTH_SHORT)</span><br><span class=\"line\">                        .setAction(<span class=\"string\">&quot;UOdo&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">                            <span class=\"meta\">@Override</span></span><br><span class=\"line\">                            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                                Toast.makeText(MainActivity.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Data Restored&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;).show();</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"CoordinatorLayout-加强版FrameLayout\"><a href=\"#CoordinatorLayout-加强版FrameLayout\" class=\"headerlink\" title=\"CoordinatorLayout(加强版FrameLayout)\"></a>CoordinatorLayout(加强版FrameLayout)</h3><p>可以监听到所有子控件的各种事件，然后自动帮助我们做出最为合理的响应，就是加强版的FrameLayout</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">        &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">            android:background=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">            android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">            app:popupTheme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;com.google.android.material.floatingactionbutton.FloatingActionButton</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/fab&quot;</span></span><br><span class=\"line\">             android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_gravity=<span class=\"string\">&quot;bottom|end&quot;</span></span><br><span class=\"line\">            android:layout_margin=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">            android:src=<span class=\"string\">&quot;@drawable/ic_done&quot;</span></span><br><span class=\"line\">            app:elevation=<span class=\"string\">&quot;8dp&quot;</span></span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">    &lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"卡片式布局\"><a href=\"#卡片式布局\" class=\"headerlink\" title=\"卡片式布局\"></a>卡片式布局</h1><h3 id=\"CardView（是一个FrameLayout\"><a href=\"#CardView（是一个FrameLayout\" class=\"headerlink\" title=\"CardView（是一个FrameLayout)\"></a>CardView（是一个FrameLayout)</h3><p>RecyclerView和CardView混合使用</p>\n<p>1.添加依赖</p>\n<p>2.在布局中添加RecyclerView并建立Fruit类，子项布局和适配器</p>\n<p>3.应用recyclerView</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;androidx.cardview:cardview:1.0.0&quot;</span>)<span class=\"comment\">//cardView依赖</span></span><br><span class=\"line\">    implementation (<span class=\"string\">&quot;androidx.recyclerview:recyclerview:1.3.2&quot;</span>)<span class=\"comment\">//recyclerView依赖</span></span><br><span class=\"line\">    implementation (<span class=\"string\">&quot;com.github.bumptech.glide:glide:4.16.0&quot;</span>)<span class=\"comment\">//Glide依赖，强大的图片加载库</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.cardview.widget.CardView</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_margin=<span class=\"string\">&quot;5dp&quot;</span></span><br><span class=\"line\">    app:cardCornerRadius=<span class=\"string\">&quot;4dp&quot;</span>&gt;</span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>&gt;</span><br><span class=\"line\">        &lt;ImageView</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/fruit_image&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;100dp&quot;</span></span><br><span class=\"line\">                <span class=\"comment\">//指定图片的缩放模式</span></span><br><span class=\"line\">            android:scaleType=<span class=\"string\">&quot;centerCrop&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;TextView</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/fruit_text&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_gravity=<span class=\"string\">&quot;center_horizontal&quot;</span></span><br><span class=\"line\">            android:layout_margin=<span class=\"string\">&quot;5dp&quot;</span></span><br><span class=\"line\">            android:textSize=<span class=\"string\">&quot;16sp&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/androidx.cardview.widget.CardView&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Fruit</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"type\">int</span> imageId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Fruit</span><span class=\"params\">(String name, <span class=\"type\">int</span> imageId)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.imageId = imageId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getImageId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> imageId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FruitAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RecyclerView</span>.Adapter&lt;FruitAdapter.ViewHolder&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Fruit&gt;mFruitList;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RecyclerView</span>.ViewHolder&#123;</span><br><span class=\"line\">        CardView cardView;</span><br><span class=\"line\">        ImageView fruitImage;</span><br><span class=\"line\">        TextView fruitName;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">ViewHolder</span><span class=\"params\">(View view)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>(view);</span><br><span class=\"line\">            cardView=(CardView) view;</span><br><span class=\"line\">            fruitImage=(ImageView) view.findViewById(R.id.fruit_image);</span><br><span class=\"line\">            fruitName=(TextView) view.findViewById(R.id.fruit_text);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">FruitAdapter</span><span class=\"params\">(List&lt;Fruit&gt;fruitList)</span>&#123;</span><br><span class=\"line\">        mFruitList=fruitList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ViewHolder <span class=\"title function_\">onCreateViewHolder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewGroup parent, <span class=\"type\">int</span> viewType)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mContext==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            mContext=parent.getContext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        View view= LayoutInflater.from(mContext).inflate(R.layout.fruit_item,parent,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ViewHolder</span>(view);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onBindViewHolder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewHolder holder, <span class=\"type\">int</span> position)</span> &#123;</span><br><span class=\"line\">            Fruit fruit=mFruitList.get(position);</span><br><span class=\"line\">            holder.fruitName.setText(fruit.getName());</span><br><span class=\"line\">        Glide.with(mContext).load(fruit.getImageId()).into(holder.fruitImage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getItemCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mFruitList.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Fruit[] fruits=&#123;<span class=\"keyword\">new</span> <span class=\"title class_\">Fruit</span>(<span class=\"string\">&quot;Apple&quot;</span>,R.drawable.apple),<span class=\"keyword\">new</span> <span class=\"title class_\">Fruit</span>(<span class=\"string\">&quot;Banana&quot;</span>,R.drawable.banana)</span><br><span class=\"line\">   ,<span class=\"keyword\">new</span> <span class=\"title class_\">Fruit</span>(<span class=\"string\">&quot;Orange&quot;</span>,R.drawable.orange),<span class=\"keyword\">new</span> <span class=\"title class_\">Fruit</span>(<span class=\"string\">&quot;Watermelon&quot;</span>,R.drawable.watermelon)&#125;;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> List&lt;Fruit&gt;fruitList=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">   <span class=\"keyword\">private</span> FruitAdapter adapter;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">       setContentView(R.layout.activity_main);</span><br><span class=\"line\">        inits();</span><br><span class=\"line\">       RecyclerView recyclerView=(RecyclerView) findViewById(R.id.recycler_view);</span><br><span class=\"line\">       <span class=\"comment\">//接收两个参数，第一个是Context第二个是列数</span></span><br><span class=\"line\">       GridLayoutManager layoutManager=<span class=\"keyword\">new</span> <span class=\"title class_\">GridLayoutManager</span>(<span class=\"built_in\">this</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">       recyclerView.setLayoutManager(layoutManager);</span><br><span class=\"line\">       adapter=<span class=\"keyword\">new</span> <span class=\"title class_\">FruitAdapter</span>(fruitList);</span><br><span class=\"line\">       recyclerView.setAdapter(adapter);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inits</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       fruitList.clear();</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">50</span>;i++)&#123;</span><br><span class=\"line\">           Random random=<span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">           <span class=\"type\">int</span> index=random.nextInt(fruits.length);</span><br><span class=\"line\">           fruitList.add(fruits[index]);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AppBarLayout\"><a href=\"#AppBarLayout\" class=\"headerlink\" title=\"AppBarLayout\"></a>AppBarLayout</h3><p>用来解决RecyclerView遮挡ToolBar问题</p>\n<p>1.将ToolBar嵌入到AppBarLayout中</p>\n<p>2.给RecyclerView添加一个布局行为</p>\n<p>3.在ToolBar中添加app：layout_scrollFlags属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/drawer_layout&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;androidx.coordinatorlayout.widget.CoordinatorLayout</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">           <span class=\"comment\">//使用AppBarLayout</span></span><br><span class=\"line\">        &lt;com.google.android.material.appbar.AppBarLayout</span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>&gt;</span><br><span class=\"line\">            &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">                android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">                android:background=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">                android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">                app:popupTheme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span><br><span class=\"line\">                    <span class=\"comment\">//scroll表示向上滚动ToolBar隐藏，enterAlways表示向下滚动ToolBar重新显示snap表示还没完全显示或隐藏时                         根据滚动的距离自动选择隐藏还是显示</span></span><br><span class=\"line\">                app:layout_scrollFlags=<span class=\"string\">&quot;scroll|enterAlways|snap&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/com.google.android.material.appbar.AppBarLayout&gt;</span><br><span class=\"line\">        &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/recycler_view&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                <span class=\"comment\">//RecyclerView添加一个布局行为</span></span><br><span class=\"line\">            app:layout_behavior=<span class=\"string\">&quot;@string/appbar_scrolling_view_behavior&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;com.google.android.material.floatingactionbutton.FloatingActionButton</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/fab&quot;</span></span><br><span class=\"line\">             android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_gravity=<span class=\"string\">&quot;bottom|end&quot;</span></span><br><span class=\"line\">            android:layout_margin=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">            android:src=<span class=\"string\">&quot;@drawable/ic_done&quot;</span></span><br><span class=\"line\">            app:elevation=<span class=\"string\">&quot;8dp&quot;</span></span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">    &lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br><span class=\"line\">    &lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/nav_view&quot;</span></span><br><span class=\"line\">         android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;start&quot;</span></span><br><span class=\"line\">        app:menu=<span class=\"string\">&quot;@menu/nav_menu&quot;</span></span><br><span class=\"line\">        app:headerLayout=<span class=\"string\">&quot;@layout/nav_header&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"下拉刷新\"><a href=\"#下拉刷新\" class=\"headerlink\" title=\"下拉刷新\"></a>下拉刷新</h1><p>利用SwipeRefreshLayout</p>\n<p>1.将RecyclerView嵌入到SwipeRefreshLayout中，并将RecyclerView中的布局行为移到SwipeRefreshLayout中</p>\n<p>2.在主活动中处理具体的刷新逻辑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.swiperefreshlayout.widget.SwipeRefreshLayout</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/swipe_refresh&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            app:layout_behavior=<span class=\"string\">&quot;@string/appbar_scrolling_view_behavior&quot;</span></span><br><span class=\"line\">            &gt;</span><br><span class=\"line\">            &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class=\"line\">                android:id=<span class=\"string\">&quot;@+id/recycler_view&quot;</span></span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;/androidx.swiperefreshlayout.widget.SwipeRefreshLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">private</span> SwipeRefreshLayout swipeRefreshLayout;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    \t  <span class=\"comment\">//获取实例</span></span><br><span class=\"line\">        swipeRefreshLayout=(SwipeRefreshLayout) findViewById(R.id.swipe_refresh);</span><br><span class=\"line\">        <span class=\"comment\">//设置刷新进度条的颜色</span></span><br><span class=\"line\">        swipeRefreshLayout.setColorSchemeResources(R.color.black);</span><br><span class=\"line\">        <span class=\"comment\">//设置下拉刷新的监听器</span></span><br><span class=\"line\">        swipeRefreshLayout.setOnRefreshListener(<span class=\"keyword\">new</span> <span class=\"title class_\">SwipeRefreshLayout</span>.OnRefreshListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRefresh</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                refreshFruits();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refreshFruits</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开启一个线程</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将线程沉睡两秒钟(因为本地刷新速度很快，如果不沉睡刷新立刻就结束了)</span></span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span>(InterruptedException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//将线程切换回主线程</span></span><br><span class=\"line\">                runOnUiThread(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//初始化</span></span><br><span class=\"line\">                        inits();</span><br><span class=\"line\">                        <span class=\"comment\">//更新</span></span><br><span class=\"line\">                        adapter.notifyDataSetChanged();</span><br><span class=\"line\">                        <span class=\"comment\">//用于表示刷新事件结束，并隐藏进度条</span></span><br><span class=\"line\">                        swipeRefreshLayout.setRefreshing(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"可折叠式标题栏\"><a href=\"#可折叠式标题栏\" class=\"headerlink\" title=\"可折叠式标题栏\"></a>可折叠式标题栏</h1><h3 id=\"CollapsingToolbarLayout\"><a href=\"#CollapsingToolbarLayout\" class=\"headerlink\" title=\"CollapsingToolbarLayout\"></a>CollapsingToolbarLayout</h3><p><strong>CollapsingToolbarLayout不能独立存在，他只能作为AppBarLayout的直接子布局使用，AppBarLayout又必须是CoordinatorLayout的子布局</strong></p>\n<p>1.使用CoordinatorLayout作为最外层布局，里面嵌套一个AppBarLayout，再嵌套一个CollapsingToolbarLayout</p>\n<p>2.在CollapsingToolbarLayout中添加一个ImageView和Toolbar(这个高级标题栏由图片和普通标题栏构成)</p>\n<p>3.在最外层布局中使用NestedScrollView(和AppBarLayout同级)</p>\n<p>4.NestedScrollView内部只允许一个直接子布局，故先嵌套一个LinearLayout</p>\n<p>5.在其中嵌入卡片式布局</p>\n<p>6.可以再添加一个FloatingActionButton</p>\n<p>7.接着在FruitActivity中编写功能逻辑</p>\n<p>8.为RecyclerView设置点击事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    tools:context=<span class=\"string\">&quot;.FruitActivity&quot;</span>&gt;</span><br><span class=\"line\">    &lt;com.google.android.material.appbar.AppBarLayout</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/appBar&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;250dp&quot;</span>&gt;</span><br><span class=\"line\">       &lt;com.google.android.material.appbar.CollapsingToolbarLayout</span><br><span class=\"line\">           android:id=<span class=\"string\">&quot;@+id/collapsing_toolbar&quot;</span></span><br><span class=\"line\">           android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">           android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">           android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">           app:contentScrim=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">           app:layout_scrollFlags=<span class=\"string\">&quot;scroll|exitUntilCollapsed&quot;</span>&gt;</span><br><span class=\"line\">           &lt;ImageView</span><br><span class=\"line\">               android:id=<span class=\"string\">&quot;@+id/fruit_image_view&quot;</span></span><br><span class=\"line\">               android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">               android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">               android:scaleType=<span class=\"string\">&quot;centerCrop&quot;</span></span><br><span class=\"line\">               app:layout_collapseMode=<span class=\"string\">&quot;parallax&quot;</span>/&gt;</span><br><span class=\"line\">           &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">               android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">               android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">               android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">               app:layout_collapseMode=<span class=\"string\">&quot;pin&quot;</span>/&gt;</span><br><span class=\"line\">       &lt;/com.google.android.material.appbar.CollapsingToolbarLayout&gt;</span><br><span class=\"line\">    &lt;/com.google.android.material.appbar.AppBarLayout&gt;</span><br><span class=\"line\">    &lt;androidx.core.widget.NestedScrollView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        app:layout_behavior=<span class=\"string\">&quot;@string/appbar_scrolling_view_behavior&quot;</span>&gt;</span><br><span class=\"line\">        &lt;LinearLayout</span><br><span class=\"line\">            android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>&gt;</span><br><span class=\"line\">            &lt;androidx.cardview.widget.CardView</span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">                android:layout_marginBottom=<span class=\"string\">&quot;15dp&quot;</span></span><br><span class=\"line\">                android:layout_marginLeft=<span class=\"string\">&quot;15dp&quot;</span></span><br><span class=\"line\">                android:layout_marginRight=<span class=\"string\">&quot;15dp&quot;</span></span><br><span class=\"line\">                android:layout_marginTop=<span class=\"string\">&quot;35dp&quot;</span></span><br><span class=\"line\">                app:cardCornerRadius=<span class=\"string\">&quot;4dp&quot;</span>&gt;</span><br><span class=\"line\">                &lt;TextView</span><br><span class=\"line\">                    android:id=<span class=\"string\">&quot;@+id/fruit_content_text&quot;</span></span><br><span class=\"line\">                    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">                    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">                    android:layout_margin=<span class=\"string\">&quot;10dp&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;/androidx.cardview.widget.CardView&gt;</span><br><span class=\"line\">        &lt;/LinearLayout&gt;</span><br><span class=\"line\">    &lt;/androidx.core.widget.NestedScrollView&gt;</span><br><span class=\"line\">    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_margin=<span class=\"string\">&quot;16sp&quot;</span></span><br><span class=\"line\">        android:src=<span class=\"string\">&quot;@drawable/ic_done&quot;</span></span><br><span class=\"line\">        app:layout_anchor=<span class=\"string\">&quot;@id/appBar&quot;</span></span><br><span class=\"line\">        app:layout_anchorGravity=<span class=\"string\">&quot;bottom|end&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FruitActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FRUIT_NAME=<span class=\"string\">&quot;fruit_name&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FRUIT_IMAGE_ID=<span class=\"string\">&quot;fruit_image_id&quot;</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_fruit);</span><br><span class=\"line\">        <span class=\"comment\">//通过Intent获取水果名字和图片</span></span><br><span class=\"line\">        Intent intent=getIntent();</span><br><span class=\"line\">        String fruitName=intent.getStringExtra(FRUIT_NAME);</span><br><span class=\"line\">        <span class=\"type\">int</span> fruitImageId=intent.getIntExtra(FRUIT_IMAGE_ID,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取Toolbar实例</span></span><br><span class=\"line\">        Toolbar toolbar=(Toolbar) findViewById(R.id.toolbar);</span><br><span class=\"line\">        <span class=\"comment\">//获取CollapsingToolbarLayout实例</span></span><br><span class=\"line\">        CollapsingToolbarLayout collapsingToolbarLayout=(CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);</span><br><span class=\"line\">        <span class=\"comment\">//获取ImageView和TextView实例</span></span><br><span class=\"line\">        ImageView fruitImageView=(ImageView) findViewById(R.id.fruit_image_view);</span><br><span class=\"line\">        TextView fruitContentText=(TextView) findViewById(R.id.fruit_content_text);</span><br><span class=\"line\">        <span class=\"comment\">//将toolbar实例传入</span></span><br><span class=\"line\">        setSupportActionBar(toolbar);</span><br><span class=\"line\">        <span class=\"comment\">//启用HomeAsUp按钮</span></span><br><span class=\"line\">        ActionBar actionBar=getSupportActionBar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(actionBar!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            actionBar.setDisplayHomeAsUpEnabled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        collapsingToolbarLayout.setTitle(fruitName);</span><br><span class=\"line\">        <span class=\"comment\">//设置图形</span></span><br><span class=\"line\">        Glide.with(<span class=\"built_in\">this</span>).load(fruitImageId).into(fruitImageView);</span><br><span class=\"line\">        String fruitContent=generateFruitContent(fruitName);</span><br><span class=\"line\">        fruitContentText.setText(fruitContent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">generateFruitContent</span><span class=\"params\">(String fruitName)</span> &#123;</span><br><span class=\"line\">        StringBuilder fruitContent=<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">500</span>;i++)&#123;</span><br><span class=\"line\">            fruitContent.append(fruitName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fruitContent.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onOptionsItemSelected</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> MenuItem item)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(item.getItemId()==android.R.id.home)&#123;</span><br><span class=\"line\">            finish();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.onOptionsItemSelected(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NonNull</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> ViewHolder <span class=\"title function_\">onCreateViewHolder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewGroup parent, <span class=\"type\">int</span> viewType)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(mContext==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">           mContext=parent.getContext();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       View view= LayoutInflater.from(mContext).inflate(R.layout.fruit_item,parent,<span class=\"literal\">false</span>);</span><br><span class=\"line\">       <span class=\"keyword\">final</span> ViewHolder holder=<span class=\"keyword\">new</span> <span class=\"title class_\">ViewHolder</span>(view);</span><br><span class=\"line\">       holder.cardView.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">               <span class=\"type\">int</span> position=holder.getAdapterPosition();</span><br><span class=\"line\">               Fruit fruit=mFruitList.get(position);</span><br><span class=\"line\">               Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(mContext, FruitActivity.class);</span><br><span class=\"line\">               intent.putExtra(FruitActivity.FRUIT_NAME,fruit.getName());</span><br><span class=\"line\">               intent.putExtra(FruitActivity.FRUIT_IMAGE_ID,fruit.getImageId());</span><br><span class=\"line\">               mContext.startActivity(intent);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> holder;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"充分利用系统状态栏空间\"><a href=\"#充分利用系统状态栏空间\" class=\"headerlink\" title=\"充分利用系统状态栏空间\"></a>充分利用系统状态栏空间</h3><p>让背景图和系统状态栏融合</p>\n<p>1.将ImageView及其所有父布局使用android:fitsSystemWindows&#x3D;”true”</p>\n<p>2.使用android:statusBarColor属性将主题状态栏颜色设为透明(该属性是API21之后才有的，故需要新建一个values-v21目录并对其进行编写)</p>\n<p>3.对values中的theme文件进行修改</p>\n<p>4.在Manifest.xml中对活动主题进行修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    tools:context=<span class=\"string\">&quot;.FruitActivity&quot;</span></span><br><span class=\"line\">    android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">    &lt;com.google.android.material.appbar.AppBarLayout</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/appBar&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;250dp&quot;</span></span><br><span class=\"line\">        android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">       &lt;com.google.android.material.appbar.CollapsingToolbarLayout</span><br><span class=\"line\">           android:id=<span class=\"string\">&quot;@+id/collapsing_toolbar&quot;</span></span><br><span class=\"line\">           android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">           android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">           android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">           app:contentScrim=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">           app:layout_scrollFlags=<span class=\"string\">&quot;scroll|exitUntilCollapsed&quot;</span></span><br><span class=\"line\">           android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">           &lt;ImageView</span><br><span class=\"line\">               android:id=<span class=\"string\">&quot;@+id/fruit_image_view&quot;</span></span><br><span class=\"line\">               android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">               android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">               android:scaleType=<span class=\"string\">&quot;centerCrop&quot;</span></span><br><span class=\"line\">               app:layout_collapseMode=<span class=\"string\">&quot;parallax&quot;</span></span><br><span class=\"line\">               android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;style name=<span class=\"string\">&quot;FruitActivityTheme&quot;</span> parent=<span class=\"string\">&quot;AppTheme&quot;</span>&gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;android:statusBarColor&quot;</span>&gt;<span class=\"meta\">@android</span>:color/transparent&lt;/item&gt;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style name=<span class=\"string\">&quot;FruitActivityTheme&quot;</span> parent=<span class=\"string\">&quot;AppTheme&quot;</span>&gt;</span><br><span class=\"line\">   &lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity</span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;.FruitActivity&quot;</span></span><br><span class=\"line\">            android:theme=<span class=\"string\">&quot;@style/FruitActivityTheme&quot;</span></span><br><span class=\"line\">            android:exported=<span class=\"string\">&quot;false&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"SQL基础篇","date":"2025-08-02T09:20:11.000Z","_content":"\n# SQL通用语法及其分类\n\n### 通用语法\n\n![](../img/img62.png)\n\n### 分类\n\n![](../img/img63.png)\n\n------\n\n# DDL\n\n### 数据库操作\n\n- **查询**\n\n  ```sql\n  show databases;#查询所有数据库\n  select database();#查询当前数据库\n  ```\n\n- **创建**\n\n  ```sql\n  create database [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集] [COLLATE 排列规则];\n  ```\n\n- **删除**\n\n  ```sql\n  DROP DATABASE [IF EXISTS] 数据库名;\n  ```\n\n- **使用**\n\n  ```sql\n  USE 数据库名;\n  ```\n\n### 表操作\n\n- **查询**\n\n  ```sql\n  SHOW TABLES;#查询当前数据库所有表格\n  DESC 表名;#查询表结构\n  SHOW CREATE TABLE 表名;#查询指定表的建表语句\n  ```\n\n- **创建**\n\n  ```sql\n  CREATE TABLE 表名(\n  \t字段1 字段1类型[COMMENT 字段1注释]\n      字段2 字段2类型[COMMENT 字段2注释]\n      字段3 字段3类型[COMMENT 字段3注释]\n      . . . . . . .\n      字段n 字段n类型[COMMENT 字段n注释]\n  )[COMMENT 表注释]\n  ```\n\n- **修改**\n\n  ```sql\n  ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];#添加字段\n  ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);#修改数据类型\n  ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];#修改字段名和字段类型\n  ALTER TABLE 表名 RENAME TO 新表名;#修改表名\n  ```\n\n- **删除**\n\n  ```sql\n  alter table 表名 drop 字段名;#删除字段\n  drop table [if exists] 表名;#删除表\n  truncate table 表名;#删除指定表，并重新创建该表\n  ```\n\n  \n\n### 数据类型\n\n- **字符串类型**\n\n  ![](../img/img64.png)\n\n- **数值类型**\n\n  ![](../img/img65.png)\n\n- **日期类型**\n\n  ![](../img/img66.png)\n\n------\n\n# DML\n\n### 添加数据\n\n![](../img/img67.png)\n\n### 修改数据\n\n![](../img/img68.png)\n\n### 删除数据\n\n![](../img/img69.png)\n\n------\n\n# DQL\n\n### 通用语法\n\n![](../img/img70.png)\n\n### 基本查询\n\n![](../img/img71.png)\n\n### 条件查询\n\n![](../img/img72.png)\n\n### 聚合函数\n\n![](../img/img73.png)\n\n### 分组查询\n\n![](../img/img74.png)\n\n### 排序查询\n\n![](../img/img75.png)\n\n### 分页查询\n\n![](../img/img76.png)\n\n### 执行顺序\n\n![](../img/img77.png)\n\n------\n\n# DCL\n\n### 用户管理\n\n![](../img/img78.png)\n\n### 权限控制\n\n![](../img/img79.png)\n\n![](../img/img80.png)\n\n------\n\n","source":"_posts/SQL基础篇.md","raw":"---\ntitle: SQL基础篇\ndate: 2025-08-02 17:20:11\ncategories:\n- 数据库(SQL)\ntags:\n---\n\n# SQL通用语法及其分类\n\n### 通用语法\n\n![](../img/img62.png)\n\n### 分类\n\n![](../img/img63.png)\n\n------\n\n# DDL\n\n### 数据库操作\n\n- **查询**\n\n  ```sql\n  show databases;#查询所有数据库\n  select database();#查询当前数据库\n  ```\n\n- **创建**\n\n  ```sql\n  create database [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集] [COLLATE 排列规则];\n  ```\n\n- **删除**\n\n  ```sql\n  DROP DATABASE [IF EXISTS] 数据库名;\n  ```\n\n- **使用**\n\n  ```sql\n  USE 数据库名;\n  ```\n\n### 表操作\n\n- **查询**\n\n  ```sql\n  SHOW TABLES;#查询当前数据库所有表格\n  DESC 表名;#查询表结构\n  SHOW CREATE TABLE 表名;#查询指定表的建表语句\n  ```\n\n- **创建**\n\n  ```sql\n  CREATE TABLE 表名(\n  \t字段1 字段1类型[COMMENT 字段1注释]\n      字段2 字段2类型[COMMENT 字段2注释]\n      字段3 字段3类型[COMMENT 字段3注释]\n      . . . . . . .\n      字段n 字段n类型[COMMENT 字段n注释]\n  )[COMMENT 表注释]\n  ```\n\n- **修改**\n\n  ```sql\n  ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];#添加字段\n  ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);#修改数据类型\n  ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];#修改字段名和字段类型\n  ALTER TABLE 表名 RENAME TO 新表名;#修改表名\n  ```\n\n- **删除**\n\n  ```sql\n  alter table 表名 drop 字段名;#删除字段\n  drop table [if exists] 表名;#删除表\n  truncate table 表名;#删除指定表，并重新创建该表\n  ```\n\n  \n\n### 数据类型\n\n- **字符串类型**\n\n  ![](../img/img64.png)\n\n- **数值类型**\n\n  ![](../img/img65.png)\n\n- **日期类型**\n\n  ![](../img/img66.png)\n\n------\n\n# DML\n\n### 添加数据\n\n![](../img/img67.png)\n\n### 修改数据\n\n![](../img/img68.png)\n\n### 删除数据\n\n![](../img/img69.png)\n\n------\n\n# DQL\n\n### 通用语法\n\n![](../img/img70.png)\n\n### 基本查询\n\n![](../img/img71.png)\n\n### 条件查询\n\n![](../img/img72.png)\n\n### 聚合函数\n\n![](../img/img73.png)\n\n### 分组查询\n\n![](../img/img74.png)\n\n### 排序查询\n\n![](../img/img75.png)\n\n### 分页查询\n\n![](../img/img76.png)\n\n### 执行顺序\n\n![](../img/img77.png)\n\n------\n\n# DCL\n\n### 用户管理\n\n![](../img/img78.png)\n\n### 权限控制\n\n![](../img/img79.png)\n\n![](../img/img80.png)\n\n------\n\n","slug":"SQL基础篇","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gc60011s4s73wmd333a","content":"<h1 id=\"SQL通用语法及其分类\"><a href=\"#SQL通用语法及其分类\" class=\"headerlink\" title=\"SQL通用语法及其分类\"></a>SQL通用语法及其分类</h1><h3 id=\"通用语法\"><a href=\"#通用语法\" class=\"headerlink\" title=\"通用语法\"></a>通用语法</h3><p><img src=\"/../img/img62.png\"></p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p><img src=\"/../img/img63.png\"></p>\n<hr>\n<h1 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h1><h3 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h3><ul>\n<li><p><strong>查询</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> databases;#查询所有数据库</span><br><span class=\"line\"><span class=\"keyword\">select</span> database();#查询当前数据库</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>创建</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database [IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] 数据库名 [<span class=\"keyword\">DEFAULT</span> CHARSET 字符集] [<span class=\"keyword\">COLLATE</span> 排列规则];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>删除</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> DATABASE [IF <span class=\"keyword\">EXISTS</span>] 数据库名;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE 数据库名;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h3><ul>\n<li><p><strong>查询</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> TABLES;#查询当前数据库所有表格</span><br><span class=\"line\"><span class=\"keyword\">DESC</span> 表名;#查询表结构</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE TABLE</span> 表名;#查询指定表的建表语句</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>创建</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> 表名(</span><br><span class=\"line\">\t字段<span class=\"number\">1</span> 字段<span class=\"number\">1</span>类型[COMMENT 字段<span class=\"number\">1</span>注释]</span><br><span class=\"line\">    字段<span class=\"number\">2</span> 字段<span class=\"number\">2</span>类型[COMMENT 字段<span class=\"number\">2</span>注释]</span><br><span class=\"line\">    字段<span class=\"number\">3</span> 字段<span class=\"number\">3</span>类型[COMMENT 字段<span class=\"number\">3</span>注释]</span><br><span class=\"line\">    . . . . . . .</span><br><span class=\"line\">    字段n 字段n类型[COMMENT 字段n注释]</span><br><span class=\"line\">)[COMMENT 表注释]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>修改</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> 表名 <span class=\"keyword\">ADD</span> 字段名 类型(长度) [COMMENT 注释] [约束];#添加字段</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> 表名 MODIFY 字段名 新数据类型(长度);#修改数据类型</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];#修改字段名和字段类型</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> 表名 RENAME <span class=\"keyword\">TO</span> 新表名;#修改表名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>删除</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter table</span> 表名 <span class=\"keyword\">drop</span> 字段名;#删除字段</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> [if <span class=\"keyword\">exists</span>] 表名;#删除表</span><br><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> 表名;#删除指定表，并重新创建该表</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ul>\n<li><p><strong>字符串类型</strong></p>\n<p><img src=\"/../img/img64.png\"></p>\n</li>\n<li><p><strong>数值类型</strong></p>\n<p><img src=\"/../img/img65.png\"></p>\n</li>\n<li><p><strong>日期类型</strong></p>\n<p><img src=\"/../img/img66.png\"></p>\n</li>\n</ul>\n<hr>\n<h1 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h1><h3 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h3><p><img src=\"/../img/img67.png\"></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p><img src=\"/../img/img68.png\"></p>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p><img src=\"/../img/img69.png\"></p>\n<hr>\n<h1 id=\"DQL\"><a href=\"#DQL\" class=\"headerlink\" title=\"DQL\"></a>DQL</h1><h3 id=\"通用语法-1\"><a href=\"#通用语法-1\" class=\"headerlink\" title=\"通用语法\"></a>通用语法</h3><p><img src=\"/../img/img70.png\"></p>\n<h3 id=\"基本查询\"><a href=\"#基本查询\" class=\"headerlink\" title=\"基本查询\"></a>基本查询</h3><p><img src=\"/../img/img71.png\"></p>\n<h3 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h3><p><img src=\"/../img/img72.png\"></p>\n<h3 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h3><p><img src=\"/../img/img73.png\"></p>\n<h3 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h3><p><img src=\"/../img/img74.png\"></p>\n<h3 id=\"排序查询\"><a href=\"#排序查询\" class=\"headerlink\" title=\"排序查询\"></a>排序查询</h3><p><img src=\"/../img/img75.png\"></p>\n<h3 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h3><p><img src=\"/../img/img76.png\"></p>\n<h3 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h3><p><img src=\"/../img/img77.png\"></p>\n<hr>\n<h1 id=\"DCL\"><a href=\"#DCL\" class=\"headerlink\" title=\"DCL\"></a>DCL</h1><h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><p><img src=\"/../img/img78.png\"></p>\n<h3 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h3><p><img src=\"/../img/img79.png\"></p>\n<p><img src=\"/../img/img80.png\"></p>\n<hr>\n","excerpt":"SQL通用语法及其分类\n通用语法\n\n\n分类\n\n\n\n\n\nDDL\n数据库操作\n * 查询\n   \n   1\n   2\n   \n   \n   show databases;#查询所有数据库\n   select database();#查询当前数据库\n   \n   \n   \n * 创建\n   \n   1\n   \n   \n   create database [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集] [COLLATE 排列规则];\n   \n   \n   \n * 删除\n   \n   1\n   \n   \n   DROP DATABASE [IF EXISTS] 数","more":"<h1 id=\"SQL通用语法及其分类\"><a href=\"#SQL通用语法及其分类\" class=\"headerlink\" title=\"SQL通用语法及其分类\"></a>SQL通用语法及其分类</h1><h3 id=\"通用语法\"><a href=\"#通用语法\" class=\"headerlink\" title=\"通用语法\"></a>通用语法</h3><p><img src=\"/../img/img62.png\"></p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p><img src=\"/../img/img63.png\"></p>\n<hr>\n<h1 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h1><h3 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h3><ul>\n<li><p><strong>查询</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> databases;#查询所有数据库</span><br><span class=\"line\"><span class=\"keyword\">select</span> database();#查询当前数据库</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>创建</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database [IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] 数据库名 [<span class=\"keyword\">DEFAULT</span> CHARSET 字符集] [<span class=\"keyword\">COLLATE</span> 排列规则];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>删除</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> DATABASE [IF <span class=\"keyword\">EXISTS</span>] 数据库名;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE 数据库名;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h3><ul>\n<li><p><strong>查询</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> TABLES;#查询当前数据库所有表格</span><br><span class=\"line\"><span class=\"keyword\">DESC</span> 表名;#查询表结构</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE TABLE</span> 表名;#查询指定表的建表语句</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>创建</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> 表名(</span><br><span class=\"line\">\t字段<span class=\"number\">1</span> 字段<span class=\"number\">1</span>类型[COMMENT 字段<span class=\"number\">1</span>注释]</span><br><span class=\"line\">    字段<span class=\"number\">2</span> 字段<span class=\"number\">2</span>类型[COMMENT 字段<span class=\"number\">2</span>注释]</span><br><span class=\"line\">    字段<span class=\"number\">3</span> 字段<span class=\"number\">3</span>类型[COMMENT 字段<span class=\"number\">3</span>注释]</span><br><span class=\"line\">    . . . . . . .</span><br><span class=\"line\">    字段n 字段n类型[COMMENT 字段n注释]</span><br><span class=\"line\">)[COMMENT 表注释]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>修改</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> 表名 <span class=\"keyword\">ADD</span> 字段名 类型(长度) [COMMENT 注释] [约束];#添加字段</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> 表名 MODIFY 字段名 新数据类型(长度);#修改数据类型</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];#修改字段名和字段类型</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> 表名 RENAME <span class=\"keyword\">TO</span> 新表名;#修改表名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>删除</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter table</span> 表名 <span class=\"keyword\">drop</span> 字段名;#删除字段</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> [if <span class=\"keyword\">exists</span>] 表名;#删除表</span><br><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> 表名;#删除指定表，并重新创建该表</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ul>\n<li><p><strong>字符串类型</strong></p>\n<p><img src=\"/../img/img64.png\"></p>\n</li>\n<li><p><strong>数值类型</strong></p>\n<p><img src=\"/../img/img65.png\"></p>\n</li>\n<li><p><strong>日期类型</strong></p>\n<p><img src=\"/../img/img66.png\"></p>\n</li>\n</ul>\n<hr>\n<h1 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h1><h3 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h3><p><img src=\"/../img/img67.png\"></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p><img src=\"/../img/img68.png\"></p>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p><img src=\"/../img/img69.png\"></p>\n<hr>\n<h1 id=\"DQL\"><a href=\"#DQL\" class=\"headerlink\" title=\"DQL\"></a>DQL</h1><h3 id=\"通用语法-1\"><a href=\"#通用语法-1\" class=\"headerlink\" title=\"通用语法\"></a>通用语法</h3><p><img src=\"/../img/img70.png\"></p>\n<h3 id=\"基本查询\"><a href=\"#基本查询\" class=\"headerlink\" title=\"基本查询\"></a>基本查询</h3><p><img src=\"/../img/img71.png\"></p>\n<h3 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h3><p><img src=\"/../img/img72.png\"></p>\n<h3 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h3><p><img src=\"/../img/img73.png\"></p>\n<h3 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h3><p><img src=\"/../img/img74.png\"></p>\n<h3 id=\"排序查询\"><a href=\"#排序查询\" class=\"headerlink\" title=\"排序查询\"></a>排序查询</h3><p><img src=\"/../img/img75.png\"></p>\n<h3 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h3><p><img src=\"/../img/img76.png\"></p>\n<h3 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h3><p><img src=\"/../img/img77.png\"></p>\n<hr>\n<h1 id=\"DCL\"><a href=\"#DCL\" class=\"headerlink\" title=\"DCL\"></a>DCL</h1><h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><p><img src=\"/../img/img78.png\"></p>\n<h3 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h3><p><img src=\"/../img/img79.png\"></p>\n<p><img src=\"/../img/img80.png\"></p>\n<hr>\n"},{"title":"SQL函数篇","date":"2025-08-05T09:55:21.000Z","_content":"\n### 字符串函数\n\n![](../img/img81.png)\n\n### 数值函数\n\n![](../img/img82.png)\n\n### 日期函数\n\n![](../img/img83.png)\n\n### 流程函数\n\n![](../img/img84.png)\n\n------\n\n","source":"_posts/SQL函数篇.md","raw":"---\ntitle: SQL函数篇\ndate: 2025-08-05 17:55:21\ncategories:\n- 数据库(SQL)\ntags:\n---\n\n### 字符串函数\n\n![](../img/img81.png)\n\n### 数值函数\n\n![](../img/img82.png)\n\n### 日期函数\n\n![](../img/img83.png)\n\n### 流程函数\n\n![](../img/img84.png)\n\n------\n\n","slug":"SQL函数篇","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gc70014s4s74a15g5w7","content":"<h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><p><img src=\"/../img/img81.png\"></p>\n<h3 id=\"数值函数\"><a href=\"#数值函数\" class=\"headerlink\" title=\"数值函数\"></a>数值函数</h3><p><img src=\"/../img/img82.png\"></p>\n<h3 id=\"日期函数\"><a href=\"#日期函数\" class=\"headerlink\" title=\"日期函数\"></a>日期函数</h3><p><img src=\"/../img/img83.png\"></p>\n<h3 id=\"流程函数\"><a href=\"#流程函数\" class=\"headerlink\" title=\"流程函数\"></a>流程函数</h3><p><img src=\"/../img/img84.png\"></p>\n<hr>\n","excerpt":"字符串函数\n\n\n数值函数\n\n\n日期函数\n\n\n流程函数","more":"<h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><p><img src=\"/../img/img81.png\"></p>\n<h3 id=\"数值函数\"><a href=\"#数值函数\" class=\"headerlink\" title=\"数值函数\"></a>数值函数</h3><p><img src=\"/../img/img82.png\"></p>\n<h3 id=\"日期函数\"><a href=\"#日期函数\" class=\"headerlink\" title=\"日期函数\"></a>日期函数</h3><p><img src=\"/../img/img83.png\"></p>\n<h3 id=\"流程函数\"><a href=\"#流程函数\" class=\"headerlink\" title=\"流程函数\"></a>流程函数</h3><p><img src=\"/../img/img84.png\"></p>\n<hr>\n"},{"title":"SQL多表查询","date":"2025-08-07T13:43:25.000Z","_content":"\n### 多表关系\n\n- **一对多**\n\n  ![](../img/img88.png)\n\n- **多对多**\n\n  ![](../img/img89.png)\n\n- **一对一**\n\n  ![](../img/img90.png)\n\n------\n\n### 多表查询概述\n\n- **笛卡尔积**\n\n  在数学中，两个集合A,B的所有组合情况(多表查询中，需要消除无效的笛卡尔积)\n\n- **多表查询分类**\n\n  ![](../img/img91.png)\n\n------\n\n### 内连接\n\n![](../img/img92.png)\n\n------\n\n### 外连接\n\n![](../img/img93.png)\n\n------\n\n### 自连接\n\n![](../img/img94.png)\n\n------\n\n### 联合查询\n\n![](../img/img95.png)\n\n------\n\n### 子查询概述\n\n![](../img/img96.png)\n\n------\n\n### 标量子查询\n\n![](../img/img97.png)\n\n------\n\n### 列子查询\n\n![](../img/img98.png)\n\n------\n\n### 行子查询\n\n![](../img/img99.png)\n\n------\n\n### 表子查询\n\n![](../img/img100.png)\n\n------\n\n","source":"_posts/SQL多表查询.md","raw":"---\ntitle: SQL多表查询\ndate: 2025-08-07 21:43:25\ncategories:\n- 数据库(SQL)\ntags:\n---\n\n### 多表关系\n\n- **一对多**\n\n  ![](../img/img88.png)\n\n- **多对多**\n\n  ![](../img/img89.png)\n\n- **一对一**\n\n  ![](../img/img90.png)\n\n------\n\n### 多表查询概述\n\n- **笛卡尔积**\n\n  在数学中，两个集合A,B的所有组合情况(多表查询中，需要消除无效的笛卡尔积)\n\n- **多表查询分类**\n\n  ![](../img/img91.png)\n\n------\n\n### 内连接\n\n![](../img/img92.png)\n\n------\n\n### 外连接\n\n![](../img/img93.png)\n\n------\n\n### 自连接\n\n![](../img/img94.png)\n\n------\n\n### 联合查询\n\n![](../img/img95.png)\n\n------\n\n### 子查询概述\n\n![](../img/img96.png)\n\n------\n\n### 标量子查询\n\n![](../img/img97.png)\n\n------\n\n### 列子查询\n\n![](../img/img98.png)\n\n------\n\n### 行子查询\n\n![](../img/img99.png)\n\n------\n\n### 表子查询\n\n![](../img/img100.png)\n\n------\n\n","slug":"SQL多表查询","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gc70016s4s7fgd1ae5a","content":"<h3 id=\"多表关系\"><a href=\"#多表关系\" class=\"headerlink\" title=\"多表关系\"></a>多表关系</h3><ul>\n<li><p><strong>一对多</strong></p>\n<p><img src=\"/../img/img88.png\"></p>\n</li>\n<li><p><strong>多对多</strong></p>\n<p><img src=\"/../img/img89.png\"></p>\n</li>\n<li><p><strong>一对一</strong></p>\n<p><img src=\"/../img/img90.png\"></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"多表查询概述\"><a href=\"#多表查询概述\" class=\"headerlink\" title=\"多表查询概述\"></a>多表查询概述</h3><ul>\n<li><p><strong>笛卡尔积</strong></p>\n<p>在数学中，两个集合A,B的所有组合情况(多表查询中，需要消除无效的笛卡尔积)</p>\n</li>\n<li><p><strong>多表查询分类</strong></p>\n<p><img src=\"/../img/img91.png\"></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h3><p><img src=\"/../img/img92.png\"></p>\n<hr>\n<h3 id=\"外连接\"><a href=\"#外连接\" class=\"headerlink\" title=\"外连接\"></a>外连接</h3><p><img src=\"/../img/img93.png\"></p>\n<hr>\n<h3 id=\"自连接\"><a href=\"#自连接\" class=\"headerlink\" title=\"自连接\"></a>自连接</h3><p><img src=\"/../img/img94.png\"></p>\n<hr>\n<h3 id=\"联合查询\"><a href=\"#联合查询\" class=\"headerlink\" title=\"联合查询\"></a>联合查询</h3><p><img src=\"/../img/img95.png\"></p>\n<hr>\n<h3 id=\"子查询概述\"><a href=\"#子查询概述\" class=\"headerlink\" title=\"子查询概述\"></a>子查询概述</h3><p><img src=\"/../img/img96.png\"></p>\n<hr>\n<h3 id=\"标量子查询\"><a href=\"#标量子查询\" class=\"headerlink\" title=\"标量子查询\"></a>标量子查询</h3><p><img src=\"/../img/img97.png\"></p>\n<hr>\n<h3 id=\"列子查询\"><a href=\"#列子查询\" class=\"headerlink\" title=\"列子查询\"></a>列子查询</h3><p><img src=\"/../img/img98.png\"></p>\n<hr>\n<h3 id=\"行子查询\"><a href=\"#行子查询\" class=\"headerlink\" title=\"行子查询\"></a>行子查询</h3><p><img src=\"/../img/img99.png\"></p>\n<hr>\n<h3 id=\"表子查询\"><a href=\"#表子查询\" class=\"headerlink\" title=\"表子查询\"></a>表子查询</h3><p><img src=\"/../img/img100.png\"></p>\n<hr>\n","excerpt":"多表关系\n * 一对多\n   \n   \n   \n   \n * 多对多\n   \n   \n   \n   \n * 一对一\n   \n   \n   \n   \n\n\n\n\n多表查询概述\n * 笛卡尔积\n   \n   在数学中，两个集合A,B的所有组合情况(多表查询中，需要消除无效的笛卡尔积)\n   \n   \n * 多表查询分类\n   \n   \n   \n   \n\n\n\n\n内连接\n\n\n\n\n\n外连接\n\n\n\n\n\n自连接\n\n\n\n\n\n联合查询\n\n\n\n\n\n子查询概述\n\n\n\n\n\n标量子查询\n\n\n\n\n\n列子查询\n\n\n\n\n\n行子查询\n\n\n\n\n\n表子查询","more":"<h3 id=\"多表关系\"><a href=\"#多表关系\" class=\"headerlink\" title=\"多表关系\"></a>多表关系</h3><ul>\n<li><p><strong>一对多</strong></p>\n<p><img src=\"/../img/img88.png\"></p>\n</li>\n<li><p><strong>多对多</strong></p>\n<p><img src=\"/../img/img89.png\"></p>\n</li>\n<li><p><strong>一对一</strong></p>\n<p><img src=\"/../img/img90.png\"></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"多表查询概述\"><a href=\"#多表查询概述\" class=\"headerlink\" title=\"多表查询概述\"></a>多表查询概述</h3><ul>\n<li><p><strong>笛卡尔积</strong></p>\n<p>在数学中，两个集合A,B的所有组合情况(多表查询中，需要消除无效的笛卡尔积)</p>\n</li>\n<li><p><strong>多表查询分类</strong></p>\n<p><img src=\"/../img/img91.png\"></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h3><p><img src=\"/../img/img92.png\"></p>\n<hr>\n<h3 id=\"外连接\"><a href=\"#外连接\" class=\"headerlink\" title=\"外连接\"></a>外连接</h3><p><img src=\"/../img/img93.png\"></p>\n<hr>\n<h3 id=\"自连接\"><a href=\"#自连接\" class=\"headerlink\" title=\"自连接\"></a>自连接</h3><p><img src=\"/../img/img94.png\"></p>\n<hr>\n<h3 id=\"联合查询\"><a href=\"#联合查询\" class=\"headerlink\" title=\"联合查询\"></a>联合查询</h3><p><img src=\"/../img/img95.png\"></p>\n<hr>\n<h3 id=\"子查询概述\"><a href=\"#子查询概述\" class=\"headerlink\" title=\"子查询概述\"></a>子查询概述</h3><p><img src=\"/../img/img96.png\"></p>\n<hr>\n<h3 id=\"标量子查询\"><a href=\"#标量子查询\" class=\"headerlink\" title=\"标量子查询\"></a>标量子查询</h3><p><img src=\"/../img/img97.png\"></p>\n<hr>\n<h3 id=\"列子查询\"><a href=\"#列子查询\" class=\"headerlink\" title=\"列子查询\"></a>列子查询</h3><p><img src=\"/../img/img98.png\"></p>\n<hr>\n<h3 id=\"行子查询\"><a href=\"#行子查询\" class=\"headerlink\" title=\"行子查询\"></a>行子查询</h3><p><img src=\"/../img/img99.png\"></p>\n<hr>\n<h3 id=\"表子查询\"><a href=\"#表子查询\" class=\"headerlink\" title=\"表子查询\"></a>表子查询</h3><p><img src=\"/../img/img100.png\"></p>\n<hr>\n"},{"title":"SQL字段约束","date":"2025-08-06T09:30:32.000Z","_content":"\n### 概述\n\n![](../img/img85.png)\n\n### 外键约束\n\n![](../img/img86.png)\n\n### 外键删除更新行为\n\n![](../img/img87.png)\n\n------\n\n","source":"_posts/SQL字段约束.md","raw":"---\ntitle: SQL字段约束\ndate: 2025-08-06 17:30:32\ncategories:\n- 数据库(SQL)\ntags:\n---\n\n### 概述\n\n![](../img/img85.png)\n\n### 外键约束\n\n![](../img/img86.png)\n\n### 外键删除更新行为\n\n![](../img/img87.png)\n\n------\n\n","slug":"SQL字段约束","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gc80019s4s72ap3hy3x","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p><img src=\"/../img/img85.png\"></p>\n<h3 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h3><p><img src=\"/../img/img86.png\"></p>\n<h3 id=\"外键删除更新行为\"><a href=\"#外键删除更新行为\" class=\"headerlink\" title=\"外键删除更新行为\"></a>外键删除更新行为</h3><p><img src=\"/../img/img87.png\"></p>\n<hr>\n","excerpt":"概述\n\n\n外键约束\n\n\n外键删除更新行为","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p><img src=\"/../img/img85.png\"></p>\n<h3 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h3><p><img src=\"/../img/img86.png\"></p>\n<h3 id=\"外键删除更新行为\"><a href=\"#外键删除更新行为\" class=\"headerlink\" title=\"外键删除更新行为\"></a>外键删除更新行为</h3><p><img src=\"/../img/img87.png\"></p>\n<hr>\n"},{"title":"Service(Kotlin)","date":"2025-05-27T14:16:33.000Z","_content":"\n# 多线程编程\n\n### 线程的四种形式\n\n- ```kotlin\n  class MyThread:Thread(){\n      override fun run(){\n          //编写具体逻辑\n      }\n  }\n  //启动\n  MyThread.start()\n  ```\n\n- ```kotlin\n  class MyThread:Runnable{\n      override fun run(){\n          //编写具体逻辑\n      }\n  }\n  //启动\n  val myThread=MyThread()\n  Thread(myThread).start()\n  ```\n\n- ```kotlin\n  Thread{\n      //编写具体逻辑\n  }.start()\n  ```\n\n- ```kotlin\n  thread{\n      //编写具体逻辑\n  }\n  ```\n\n  **最后一种是Kotlin内置的顶层函数，更加简单方便**\n\n### 在子线程中更新UI\n\n1. 定义一个整型变量表示更新UI的动作\n2. 新增一个Handler对象，重写父类handleMessage()方法，在这里对UI进行具体操作\n3. 开启子线程\n4. 创建Message对象\n5. 指定what字段值\n6. 调用sendMessage()方法发送Message\n\n### 解析异步消息处理机制\n\n![](../img/img48.jpg)\n\n![](../img/img49.jpg)\n\n### 使用AsyncTask\n\n1.创建一个子类去继承它，需要传入三个参数如下\n\nParams：在后台任务中使用\n\nProgress：可以作为进度单位\n\nResult：返回值类型\n\n2.重写父类方法如下：\n\nonPreExecute():界面上的初始化操作\n\ndoInBackground(Params…):所有代码都在子线程中运行，在这里处理耗时任务\n\nonProgressUpdate(Progress…):对UI进行操作\n\nonPostExecute(Result):后台任务执行完毕并通过return语句返回时，这个方法被调用\n\n3.启动任务\n\n`DownloadTask().execute()`\n\n------\n\n# Service\n\n### 基本用法\n\n1. 定义service，直接用AndroidStudio系统新建\n2. 利用Intent启动和停止Service\n\n```kotlin\nclass MyService : Service() {\n\n    override fun onBind(intent: Intent): IBinder {\n    }\n\n    override fun onCreate() {\n        super.onCreate()\n        Log.d(\"MyService\", \"onCreate: \")    \n    }\n\n    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n        Log.d(\"MyService\", \"onStartCommand: \")\n        return super.onStartCommand(intent, flags, startId)\n    }\n\n    override fun onDestroy() {\n        Log.d(\"MyService\", \"onDestroy: \")\n        super.onDestroy()\n    }\n}\n```\n\n```kotlin\n \t\tbinding.start.setOnClickListener {\n            val intent=Intent(this,MyService::class.java)\n            //启动服务\n            startService(intent)\n        }\n        binding.stop.setOnClickListener {\n            val intent=Intent(this,MyService::class.java)\n            //停止服务\n            stopService(intent)\n        }\n```\n\n### Activity和Service进行通信\n\n拿下载功能举例\n\nService中提供一个下载功能，Activity中可以决定何时开始下载以及随时查看下载进度\n\n```kotlin\n private val mBinder=DownloadBinder()\n    class DownloadBinder:Binder(){\n        fun startDownload(){\n            Log.d(\"MyService\", \"startDownload: \")\n        }\n        fun getProgress():Int{\n            Log.d(\"MyService\", \"getProgress: \")\n            return 0\n        }\n    }\n\n    override fun onBind(intent: Intent): IBinder {\n        return mBinder\n    }\n```\n\n创建ServiceConnection的匿名类实现\n\n1. 重写父类的两个方法\n\n2. 利用intent和bindService进行绑定\n\n3. 利用unbindService()方法解绑\n\n   ```kotlin\n   lateinit var downloadBinder:MyService.DownloadBinder\n       private val connection=object :ServiceConnection{\n           //成功绑定时使用\n           override fun onServiceConnected(name: ComponentName?, service: IBinder?) {\n               downloadBinder=service as MyService.DownloadBinder\n               downloadBinder.startDownload()\n               downloadBinder.getProgress()\n           }\n           //Service创建进程崩溃或被杀掉时调用\n           override fun onServiceDisconnected(name: ComponentName?) {\n               TODO(\"Not yet implemented\")\n           }\n   \n       }\n   override fun onCreate(savedInstanceState: Bundle?) {\n           super.onCreate(savedInstanceState)\n           enableEdgeToEdge()\n           binding=ActivityMainBinding.inflate(layoutInflater)\n           setContentView(binding.root)\n           ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n               val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n               v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n               insets\n           }\n           binding.bind.setOnClickListener {\n               val intent=Intent(this,MyService::class.java)\n               //绑定Service\n               bindService(intent,connection, Context.BIND_AUTO_CREATE)\n           }\n           binding.unbind.setOnClickListener {\n               //解绑Service\n               unbindService(connection)\n           }\n       }\n   ```\n\n------\n\n# Service更多技巧\n\n### 使用前台Service\n\n1. 调用startForeground方法会让一个service变成前台服务\n\n2. 声明权限\n\n   ```kotlin\n   override fun onCreate() {\n           Log.d(\"MyService\", \"onCreate: \")\n           val manager=getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n           if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.O){\n               val channel=NotificationChannel(\"my_service\",\"前台Service通知\",NotificationManager.IMPORTANCE_DEFAULT)\n               manager.createNotificationChannel(channel)\n           }\n           val intent=Intent(this,MainActivity::class.java)\n           val pi=PendingIntent.getActivity(this,0,intent, PendingIntent.FLAG_IMMUTABLE)\n           val notification=NotificationCompat.Builder(this,\"my_service\")\n               .setContentTitle(\"This is title\")\n               .setContentText(\"This is Context\")\n               .setSmallIcon(R.drawable.ic_launcher_foreground)\n               .setLargeIcon(BitmapFactory.decodeResource(resources,R.drawable.ic_launcher_background))\n               .setContentIntent(pi)\n               .build()\n           startForeground(1,notification)\n       }\n   ```\n\n   ```kotlin\n   <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\n   ```\n\n### IntentService\n\n1. 新建一个类继承IntentService\n2. 实现onHandleIntent()抽象方法，这个方法用于处理耗时的逻辑(在子线程中运行li)\n3. 利用Intent启动IntentService\n4. 注册IntentService\n\n```kotlin\nclass MyIntentService : IntentService(\"MyIntentService\") {\n\n    override fun onHandleIntent(intent: Intent?) {\n        //打印当前线程id\n        Log.d(\"MyIntentService\", \"Thread id is ${Thread.currentThread().name}\")\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        Log.d(\"MyIntentService\", \"onDestroy: \")\n    }\n}\n```\n\n```kotlin\n binding.startintent.setOnClickListener {\n            //打印主线程id\n            Log.d(\"MainActivity\", \"Thread id is ${Thread.currentThread().name}\")\n            val intent=Intent(this,MyIntentService::class.java)\n            startService(intent)\n        }\n```\n\n```kotlin\n<service\n            android:name=\".MyIntentService\"\n            android:exported=\"false\">\n</service>\n```\n\n------\n\n","source":"_posts/Service-Kotlin.md","raw":"---\ntitle: Service(Kotlin)\ndate: 2025-05-27 22:16:33\ncategories:\n- Android(Kotlin版)\ntags:\n---\n\n# 多线程编程\n\n### 线程的四种形式\n\n- ```kotlin\n  class MyThread:Thread(){\n      override fun run(){\n          //编写具体逻辑\n      }\n  }\n  //启动\n  MyThread.start()\n  ```\n\n- ```kotlin\n  class MyThread:Runnable{\n      override fun run(){\n          //编写具体逻辑\n      }\n  }\n  //启动\n  val myThread=MyThread()\n  Thread(myThread).start()\n  ```\n\n- ```kotlin\n  Thread{\n      //编写具体逻辑\n  }.start()\n  ```\n\n- ```kotlin\n  thread{\n      //编写具体逻辑\n  }\n  ```\n\n  **最后一种是Kotlin内置的顶层函数，更加简单方便**\n\n### 在子线程中更新UI\n\n1. 定义一个整型变量表示更新UI的动作\n2. 新增一个Handler对象，重写父类handleMessage()方法，在这里对UI进行具体操作\n3. 开启子线程\n4. 创建Message对象\n5. 指定what字段值\n6. 调用sendMessage()方法发送Message\n\n### 解析异步消息处理机制\n\n![](../img/img48.jpg)\n\n![](../img/img49.jpg)\n\n### 使用AsyncTask\n\n1.创建一个子类去继承它，需要传入三个参数如下\n\nParams：在后台任务中使用\n\nProgress：可以作为进度单位\n\nResult：返回值类型\n\n2.重写父类方法如下：\n\nonPreExecute():界面上的初始化操作\n\ndoInBackground(Params…):所有代码都在子线程中运行，在这里处理耗时任务\n\nonProgressUpdate(Progress…):对UI进行操作\n\nonPostExecute(Result):后台任务执行完毕并通过return语句返回时，这个方法被调用\n\n3.启动任务\n\n`DownloadTask().execute()`\n\n------\n\n# Service\n\n### 基本用法\n\n1. 定义service，直接用AndroidStudio系统新建\n2. 利用Intent启动和停止Service\n\n```kotlin\nclass MyService : Service() {\n\n    override fun onBind(intent: Intent): IBinder {\n    }\n\n    override fun onCreate() {\n        super.onCreate()\n        Log.d(\"MyService\", \"onCreate: \")    \n    }\n\n    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n        Log.d(\"MyService\", \"onStartCommand: \")\n        return super.onStartCommand(intent, flags, startId)\n    }\n\n    override fun onDestroy() {\n        Log.d(\"MyService\", \"onDestroy: \")\n        super.onDestroy()\n    }\n}\n```\n\n```kotlin\n \t\tbinding.start.setOnClickListener {\n            val intent=Intent(this,MyService::class.java)\n            //启动服务\n            startService(intent)\n        }\n        binding.stop.setOnClickListener {\n            val intent=Intent(this,MyService::class.java)\n            //停止服务\n            stopService(intent)\n        }\n```\n\n### Activity和Service进行通信\n\n拿下载功能举例\n\nService中提供一个下载功能，Activity中可以决定何时开始下载以及随时查看下载进度\n\n```kotlin\n private val mBinder=DownloadBinder()\n    class DownloadBinder:Binder(){\n        fun startDownload(){\n            Log.d(\"MyService\", \"startDownload: \")\n        }\n        fun getProgress():Int{\n            Log.d(\"MyService\", \"getProgress: \")\n            return 0\n        }\n    }\n\n    override fun onBind(intent: Intent): IBinder {\n        return mBinder\n    }\n```\n\n创建ServiceConnection的匿名类实现\n\n1. 重写父类的两个方法\n\n2. 利用intent和bindService进行绑定\n\n3. 利用unbindService()方法解绑\n\n   ```kotlin\n   lateinit var downloadBinder:MyService.DownloadBinder\n       private val connection=object :ServiceConnection{\n           //成功绑定时使用\n           override fun onServiceConnected(name: ComponentName?, service: IBinder?) {\n               downloadBinder=service as MyService.DownloadBinder\n               downloadBinder.startDownload()\n               downloadBinder.getProgress()\n           }\n           //Service创建进程崩溃或被杀掉时调用\n           override fun onServiceDisconnected(name: ComponentName?) {\n               TODO(\"Not yet implemented\")\n           }\n   \n       }\n   override fun onCreate(savedInstanceState: Bundle?) {\n           super.onCreate(savedInstanceState)\n           enableEdgeToEdge()\n           binding=ActivityMainBinding.inflate(layoutInflater)\n           setContentView(binding.root)\n           ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n               val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n               v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n               insets\n           }\n           binding.bind.setOnClickListener {\n               val intent=Intent(this,MyService::class.java)\n               //绑定Service\n               bindService(intent,connection, Context.BIND_AUTO_CREATE)\n           }\n           binding.unbind.setOnClickListener {\n               //解绑Service\n               unbindService(connection)\n           }\n       }\n   ```\n\n------\n\n# Service更多技巧\n\n### 使用前台Service\n\n1. 调用startForeground方法会让一个service变成前台服务\n\n2. 声明权限\n\n   ```kotlin\n   override fun onCreate() {\n           Log.d(\"MyService\", \"onCreate: \")\n           val manager=getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n           if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.O){\n               val channel=NotificationChannel(\"my_service\",\"前台Service通知\",NotificationManager.IMPORTANCE_DEFAULT)\n               manager.createNotificationChannel(channel)\n           }\n           val intent=Intent(this,MainActivity::class.java)\n           val pi=PendingIntent.getActivity(this,0,intent, PendingIntent.FLAG_IMMUTABLE)\n           val notification=NotificationCompat.Builder(this,\"my_service\")\n               .setContentTitle(\"This is title\")\n               .setContentText(\"This is Context\")\n               .setSmallIcon(R.drawable.ic_launcher_foreground)\n               .setLargeIcon(BitmapFactory.decodeResource(resources,R.drawable.ic_launcher_background))\n               .setContentIntent(pi)\n               .build()\n           startForeground(1,notification)\n       }\n   ```\n\n   ```kotlin\n   <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\n   ```\n\n### IntentService\n\n1. 新建一个类继承IntentService\n2. 实现onHandleIntent()抽象方法，这个方法用于处理耗时的逻辑(在子线程中运行li)\n3. 利用Intent启动IntentService\n4. 注册IntentService\n\n```kotlin\nclass MyIntentService : IntentService(\"MyIntentService\") {\n\n    override fun onHandleIntent(intent: Intent?) {\n        //打印当前线程id\n        Log.d(\"MyIntentService\", \"Thread id is ${Thread.currentThread().name}\")\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        Log.d(\"MyIntentService\", \"onDestroy: \")\n    }\n}\n```\n\n```kotlin\n binding.startintent.setOnClickListener {\n            //打印主线程id\n            Log.d(\"MainActivity\", \"Thread id is ${Thread.currentThread().name}\")\n            val intent=Intent(this,MyIntentService::class.java)\n            startService(intent)\n        }\n```\n\n```kotlin\n<service\n            android:name=\".MyIntentService\"\n            android:exported=\"false\">\n</service>\n```\n\n------\n\n","slug":"Service-Kotlin","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gc9001bs4s7fopr2egg","content":"<h1 id=\"多线程编程\"><a href=\"#多线程编程\" class=\"headerlink\" title=\"多线程编程\"></a>多线程编程</h1><h3 id=\"线程的四种形式\"><a href=\"#线程的四种形式\" class=\"headerlink\" title=\"线程的四种形式\"></a>线程的四种形式</h3><ul>\n<li><pre><code class=\"language-kotlin\">class MyThread:Thread()&#123;\n    override fun run()&#123;\n        //编写具体逻辑\n    &#125;\n&#125;\n//启动\nMyThread.start()\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- ```kotlin</span><br><span class=\"line\">  class MyThread:Runnable&#123;</span><br><span class=\"line\">      override fun run()&#123;</span><br><span class=\"line\">          //编写具体逻辑</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //启动</span><br><span class=\"line\">  val myThread=MyThread()</span><br><span class=\"line\">  Thread(myThread).start()</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><pre><code class=\"language-kotlin\">Thread&#123;\n    //编写具体逻辑\n&#125;.start()\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- ```kotlin</span><br><span class=\"line\">  thread&#123;</span><br><span class=\"line\">      //编写具体逻辑</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n**最后一种是Kotlin内置的顶层函数，更加简单方便**\n</code></pre>\n</li>\n</ul>\n<h3 id=\"在子线程中更新UI\"><a href=\"#在子线程中更新UI\" class=\"headerlink\" title=\"在子线程中更新UI\"></a>在子线程中更新UI</h3><ol>\n<li>定义一个整型变量表示更新UI的动作</li>\n<li>新增一个Handler对象，重写父类handleMessage()方法，在这里对UI进行具体操作</li>\n<li>开启子线程</li>\n<li>创建Message对象</li>\n<li>指定what字段值</li>\n<li>调用sendMessage()方法发送Message</li>\n</ol>\n<h3 id=\"解析异步消息处理机制\"><a href=\"#解析异步消息处理机制\" class=\"headerlink\" title=\"解析异步消息处理机制\"></a>解析异步消息处理机制</h3><p><img src=\"/../img/img48.jpg\"></p>\n<p><img src=\"/../img/img49.jpg\"></p>\n<h3 id=\"使用AsyncTask\"><a href=\"#使用AsyncTask\" class=\"headerlink\" title=\"使用AsyncTask\"></a>使用AsyncTask</h3><p>1.创建一个子类去继承它，需要传入三个参数如下</p>\n<p>Params：在后台任务中使用</p>\n<p>Progress：可以作为进度单位</p>\n<p>Result：返回值类型</p>\n<p>2.重写父类方法如下：</p>\n<p>onPreExecute():界面上的初始化操作</p>\n<p>doInBackground(Params…):所有代码都在子线程中运行，在这里处理耗时任务</p>\n<p>onProgressUpdate(Progress…):对UI进行操作</p>\n<p>onPostExecute(Result):后台任务执行完毕并通过return语句返回时，这个方法被调用</p>\n<p>3.启动任务</p>\n<p><code>DownloadTask().execute()</code></p>\n<hr>\n<h1 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h1><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><ol>\n<li>定义service，直接用AndroidStudio系统新建</li>\n<li>利用Intent启动和停止Service</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyService</span> : <span class=\"type\">Service</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onBind</span><span class=\"params\">(intent: <span class=\"type\">Intent</span>)</span></span>: IBinder &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate()</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onCreate: &quot;</span>)    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(intent: <span class=\"type\">Intent</span>?, flags: <span class=\"type\">Int</span>, startId: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onStartCommand: &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onDestroy: &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.start.setOnClickListener &#123;</span><br><span class=\"line\">         <span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,MyService::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">         <span class=\"comment\">//启动服务</span></span><br><span class=\"line\">         startService(intent)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     binding.stop.setOnClickListener &#123;</span><br><span class=\"line\">         <span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,MyService::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">         <span class=\"comment\">//停止服务</span></span><br><span class=\"line\">         stopService(intent)</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Activity和Service进行通信\"><a href=\"#Activity和Service进行通信\" class=\"headerlink\" title=\"Activity和Service进行通信\"></a>Activity和Service进行通信</h3><p>拿下载功能举例</p>\n<p>Service中提供一个下载功能，Activity中可以决定何时开始下载以及随时查看下载进度</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mBinder=DownloadBinder()</span><br><span class=\"line\">   <span class=\"keyword\">class</span> <span class=\"title class_\">DownloadBinder</span>:<span class=\"type\">Binder</span>()&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">startDownload</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">           Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;startDownload: &quot;</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getProgress</span><span class=\"params\">()</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">           Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;getProgress: &quot;</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onBind</span><span class=\"params\">(intent: <span class=\"type\">Intent</span>)</span></span>: IBinder &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> mBinder</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建ServiceConnection的匿名类实现</p>\n<ol>\n<li><p>重写父类的两个方法</p>\n</li>\n<li><p>利用intent和bindService进行绑定</p>\n</li>\n<li><p>利用unbindService()方法解绑</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> downloadBinder:MyService.DownloadBinder</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> connection=<span class=\"keyword\">object</span> :ServiceConnection&#123;</span><br><span class=\"line\">        <span class=\"comment\">//成功绑定时使用</span></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(name: <span class=\"type\">ComponentName</span>?, service: <span class=\"type\">IBinder</span>?)</span></span> &#123;</span><br><span class=\"line\">            downloadBinder=service <span class=\"keyword\">as</span> MyService.DownloadBinder</span><br><span class=\"line\">            downloadBinder.startDownload()</span><br><span class=\"line\">            downloadBinder.getProgress()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Service创建进程崩溃或被杀掉时调用</span></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(name: <span class=\"type\">ComponentName</span>?)</span></span> &#123;</span><br><span class=\"line\">            TODO(<span class=\"string\">&quot;Not yet implemented&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        enableEdgeToEdge()</span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) &#123; v, insets -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())</span><br><span class=\"line\">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)</span><br><span class=\"line\">            insets</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.bind.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,MyService::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">            <span class=\"comment\">//绑定Service</span></span><br><span class=\"line\">            bindService(intent,connection, Context.BIND_AUTO_CREATE)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.unbind.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">//解绑Service</span></span><br><span class=\"line\">            unbindService(connection)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h1 id=\"Service更多技巧\"><a href=\"#Service更多技巧\" class=\"headerlink\" title=\"Service更多技巧\"></a>Service更多技巧</h1><h3 id=\"使用前台Service\"><a href=\"#使用前台Service\" class=\"headerlink\" title=\"使用前台Service\"></a>使用前台Service</h3><ol>\n<li><p>调用startForeground方法会让一个service变成前台服务</p>\n</li>\n<li><p>声明权限</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onCreate: &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> manager=getSystemService(Context.NOTIFICATION_SERVICE) <span class=\"keyword\">as</span> NotificationManager</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Build.VERSION.SDK_INT&gt;=Build.VERSION_CODES.O)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> channel=NotificationChannel(<span class=\"string\">&quot;my_service&quot;</span>,<span class=\"string\">&quot;前台Service通知&quot;</span>,NotificationManager.IMPORTANCE_DEFAULT)</span><br><span class=\"line\">            manager.createNotificationChannel(channel)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,MainActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> pi=PendingIntent.getActivity(<span class=\"keyword\">this</span>,<span class=\"number\">0</span>,intent, PendingIntent.FLAG_IMMUTABLE)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> notification=NotificationCompat.Builder(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;my_service&quot;</span>)</span><br><span class=\"line\">            .setContentTitle(<span class=\"string\">&quot;This is title&quot;</span>)</span><br><span class=\"line\">            .setContentText(<span class=\"string\">&quot;This is Context&quot;</span>)</span><br><span class=\"line\">            .setSmallIcon(R.drawable.ic_launcher_foreground)</span><br><span class=\"line\">            .setLargeIcon(BitmapFactory.decodeResource(resources,R.drawable.ic_launcher_background))</span><br><span class=\"line\">            .setContentIntent(pi)</span><br><span class=\"line\">            .build()</span><br><span class=\"line\">        startForeground(<span class=\"number\">1</span>,notification)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.FOREGROUND_SERVICE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"IntentService\"><a href=\"#IntentService\" class=\"headerlink\" title=\"IntentService\"></a>IntentService</h3><ol>\n<li>新建一个类继承IntentService</li>\n<li>实现onHandleIntent()抽象方法，这个方法用于处理耗时的逻辑(在子线程中运行li)</li>\n<li>利用Intent启动IntentService</li>\n<li>注册IntentService</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyIntentService</span> : <span class=\"type\">IntentService</span>(<span class=\"string\">&quot;MyIntentService&quot;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onHandleIntent</span><span class=\"params\">(intent: <span class=\"type\">Intent</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//打印当前线程id</span></span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyIntentService&quot;</span>, <span class=\"string\">&quot;Thread id is <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyIntentService&quot;</span>, <span class=\"string\">&quot;onDestroy: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.startintent.setOnClickListener &#123;</span><br><span class=\"line\">           <span class=\"comment\">//打印主线程id</span></span><br><span class=\"line\">           Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;Thread id is <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">           <span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,MyIntentService::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">           startService(intent)</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;service</span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;.MyIntentService&quot;</span></span><br><span class=\"line\">            android:exported=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">&lt;/service&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"多线程编程\n线程的四种形式\n * class MyThread:Thread(){\n       override fun run(){\n           //编写具体逻辑\n       }\n   }\n   //启动\n   MyThread.start()\n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n   \n   \n   - ```kotlin\n     class MyThread:Runnable{\n         override fun run(){\n             //编写具体逻辑\n         }","more":"<h1 id=\"多线程编程\"><a href=\"#多线程编程\" class=\"headerlink\" title=\"多线程编程\"></a>多线程编程</h1><h3 id=\"线程的四种形式\"><a href=\"#线程的四种形式\" class=\"headerlink\" title=\"线程的四种形式\"></a>线程的四种形式</h3><ul>\n<li><pre><code class=\"language-kotlin\">class MyThread:Thread()&#123;\n    override fun run()&#123;\n        //编写具体逻辑\n    &#125;\n&#125;\n//启动\nMyThread.start()\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- ```kotlin</span><br><span class=\"line\">  class MyThread:Runnable&#123;</span><br><span class=\"line\">      override fun run()&#123;</span><br><span class=\"line\">          //编写具体逻辑</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //启动</span><br><span class=\"line\">  val myThread=MyThread()</span><br><span class=\"line\">  Thread(myThread).start()</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><pre><code class=\"language-kotlin\">Thread&#123;\n    //编写具体逻辑\n&#125;.start()\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- ```kotlin</span><br><span class=\"line\">  thread&#123;</span><br><span class=\"line\">      //编写具体逻辑</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n**最后一种是Kotlin内置的顶层函数，更加简单方便**\n</code></pre>\n</li>\n</ul>\n<h3 id=\"在子线程中更新UI\"><a href=\"#在子线程中更新UI\" class=\"headerlink\" title=\"在子线程中更新UI\"></a>在子线程中更新UI</h3><ol>\n<li>定义一个整型变量表示更新UI的动作</li>\n<li>新增一个Handler对象，重写父类handleMessage()方法，在这里对UI进行具体操作</li>\n<li>开启子线程</li>\n<li>创建Message对象</li>\n<li>指定what字段值</li>\n<li>调用sendMessage()方法发送Message</li>\n</ol>\n<h3 id=\"解析异步消息处理机制\"><a href=\"#解析异步消息处理机制\" class=\"headerlink\" title=\"解析异步消息处理机制\"></a>解析异步消息处理机制</h3><p><img src=\"/../img/img48.jpg\"></p>\n<p><img src=\"/../img/img49.jpg\"></p>\n<h3 id=\"使用AsyncTask\"><a href=\"#使用AsyncTask\" class=\"headerlink\" title=\"使用AsyncTask\"></a>使用AsyncTask</h3><p>1.创建一个子类去继承它，需要传入三个参数如下</p>\n<p>Params：在后台任务中使用</p>\n<p>Progress：可以作为进度单位</p>\n<p>Result：返回值类型</p>\n<p>2.重写父类方法如下：</p>\n<p>onPreExecute():界面上的初始化操作</p>\n<p>doInBackground(Params…):所有代码都在子线程中运行，在这里处理耗时任务</p>\n<p>onProgressUpdate(Progress…):对UI进行操作</p>\n<p>onPostExecute(Result):后台任务执行完毕并通过return语句返回时，这个方法被调用</p>\n<p>3.启动任务</p>\n<p><code>DownloadTask().execute()</code></p>\n<hr>\n<h1 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h1><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><ol>\n<li>定义service，直接用AndroidStudio系统新建</li>\n<li>利用Intent启动和停止Service</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyService</span> : <span class=\"type\">Service</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onBind</span><span class=\"params\">(intent: <span class=\"type\">Intent</span>)</span></span>: IBinder &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate()</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onCreate: &quot;</span>)    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(intent: <span class=\"type\">Intent</span>?, flags: <span class=\"type\">Int</span>, startId: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onStartCommand: &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onDestroy: &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.start.setOnClickListener &#123;</span><br><span class=\"line\">         <span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,MyService::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">         <span class=\"comment\">//启动服务</span></span><br><span class=\"line\">         startService(intent)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     binding.stop.setOnClickListener &#123;</span><br><span class=\"line\">         <span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,MyService::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">         <span class=\"comment\">//停止服务</span></span><br><span class=\"line\">         stopService(intent)</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Activity和Service进行通信\"><a href=\"#Activity和Service进行通信\" class=\"headerlink\" title=\"Activity和Service进行通信\"></a>Activity和Service进行通信</h3><p>拿下载功能举例</p>\n<p>Service中提供一个下载功能，Activity中可以决定何时开始下载以及随时查看下载进度</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mBinder=DownloadBinder()</span><br><span class=\"line\">   <span class=\"keyword\">class</span> <span class=\"title class_\">DownloadBinder</span>:<span class=\"type\">Binder</span>()&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">startDownload</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">           Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;startDownload: &quot;</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getProgress</span><span class=\"params\">()</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">           Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;getProgress: &quot;</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onBind</span><span class=\"params\">(intent: <span class=\"type\">Intent</span>)</span></span>: IBinder &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> mBinder</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建ServiceConnection的匿名类实现</p>\n<ol>\n<li><p>重写父类的两个方法</p>\n</li>\n<li><p>利用intent和bindService进行绑定</p>\n</li>\n<li><p>利用unbindService()方法解绑</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> downloadBinder:MyService.DownloadBinder</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> connection=<span class=\"keyword\">object</span> :ServiceConnection&#123;</span><br><span class=\"line\">        <span class=\"comment\">//成功绑定时使用</span></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(name: <span class=\"type\">ComponentName</span>?, service: <span class=\"type\">IBinder</span>?)</span></span> &#123;</span><br><span class=\"line\">            downloadBinder=service <span class=\"keyword\">as</span> MyService.DownloadBinder</span><br><span class=\"line\">            downloadBinder.startDownload()</span><br><span class=\"line\">            downloadBinder.getProgress()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Service创建进程崩溃或被杀掉时调用</span></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(name: <span class=\"type\">ComponentName</span>?)</span></span> &#123;</span><br><span class=\"line\">            TODO(<span class=\"string\">&quot;Not yet implemented&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        enableEdgeToEdge()</span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) &#123; v, insets -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())</span><br><span class=\"line\">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)</span><br><span class=\"line\">            insets</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.bind.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,MyService::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">            <span class=\"comment\">//绑定Service</span></span><br><span class=\"line\">            bindService(intent,connection, Context.BIND_AUTO_CREATE)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.unbind.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">//解绑Service</span></span><br><span class=\"line\">            unbindService(connection)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h1 id=\"Service更多技巧\"><a href=\"#Service更多技巧\" class=\"headerlink\" title=\"Service更多技巧\"></a>Service更多技巧</h1><h3 id=\"使用前台Service\"><a href=\"#使用前台Service\" class=\"headerlink\" title=\"使用前台Service\"></a>使用前台Service</h3><ol>\n<li><p>调用startForeground方法会让一个service变成前台服务</p>\n</li>\n<li><p>声明权限</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onCreate: &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> manager=getSystemService(Context.NOTIFICATION_SERVICE) <span class=\"keyword\">as</span> NotificationManager</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Build.VERSION.SDK_INT&gt;=Build.VERSION_CODES.O)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> channel=NotificationChannel(<span class=\"string\">&quot;my_service&quot;</span>,<span class=\"string\">&quot;前台Service通知&quot;</span>,NotificationManager.IMPORTANCE_DEFAULT)</span><br><span class=\"line\">            manager.createNotificationChannel(channel)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,MainActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> pi=PendingIntent.getActivity(<span class=\"keyword\">this</span>,<span class=\"number\">0</span>,intent, PendingIntent.FLAG_IMMUTABLE)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> notification=NotificationCompat.Builder(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;my_service&quot;</span>)</span><br><span class=\"line\">            .setContentTitle(<span class=\"string\">&quot;This is title&quot;</span>)</span><br><span class=\"line\">            .setContentText(<span class=\"string\">&quot;This is Context&quot;</span>)</span><br><span class=\"line\">            .setSmallIcon(R.drawable.ic_launcher_foreground)</span><br><span class=\"line\">            .setLargeIcon(BitmapFactory.decodeResource(resources,R.drawable.ic_launcher_background))</span><br><span class=\"line\">            .setContentIntent(pi)</span><br><span class=\"line\">            .build()</span><br><span class=\"line\">        startForeground(<span class=\"number\">1</span>,notification)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.FOREGROUND_SERVICE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"IntentService\"><a href=\"#IntentService\" class=\"headerlink\" title=\"IntentService\"></a>IntentService</h3><ol>\n<li>新建一个类继承IntentService</li>\n<li>实现onHandleIntent()抽象方法，这个方法用于处理耗时的逻辑(在子线程中运行li)</li>\n<li>利用Intent启动IntentService</li>\n<li>注册IntentService</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyIntentService</span> : <span class=\"type\">IntentService</span>(<span class=\"string\">&quot;MyIntentService&quot;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onHandleIntent</span><span class=\"params\">(intent: <span class=\"type\">Intent</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//打印当前线程id</span></span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyIntentService&quot;</span>, <span class=\"string\">&quot;Thread id is <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyIntentService&quot;</span>, <span class=\"string\">&quot;onDestroy: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.startintent.setOnClickListener &#123;</span><br><span class=\"line\">           <span class=\"comment\">//打印主线程id</span></span><br><span class=\"line\">           Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;Thread id is <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class=\"line\">           <span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,MyIntentService::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">           startService(intent)</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;service</span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;.MyIntentService&quot;</span></span><br><span class=\"line\">            android:exported=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">&lt;/service&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"UI开发(Kotlin)","date":"2025-04-24T11:35:30.000Z","_content":"\n# 常用控件\n\n### TextView\n\n```kotlin\n<TextView\n        android:id=\"@+id/textView\"//定义唯一标识符\n        android:layout_width=\"match_parent\"//控件宽度\n        android:layout_height=\"wrap_content\"//控件高度\n        android:gravity=\"center\"//文字位置\n        android:textColor=\"@color/red\"//文字颜色\n        android:textSize=\"24sp\"//文字大小\n        android:text=\"This is TextView\"//文字内容\n       />\n```\n\n\n\n### Button\n\n```kotlin\n<Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Button\"/>\n```\n\n**点击事件：**\n\n(1)\n\n```kotlin\n myBinding.button.setOnClickListener {\n     //代码逻辑\n }\n```\n\n(2)接口法\n\n```kotlin\nclass MainActivity : AppCompatActivity(),View.OnClickListener {\n    override fun onCreate(savedInstanceState: Bundle?) {\n                   ......\n    }\n    override fun onClick(v: View?) {\n        when(v?.id){\n            R.id.button->{\n                //在此处添加逻辑\n            }\n        }\n    }\n}\n```\n\n\n\n### EditText\n\n```kotlin\n<EditText\n        android:id=\"@+id/editText\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"26dp\"\n        android:hint=\"Type something here\"//提示性文字\n        android:maxLines=\"2\"//最大行数\n        />\n```\n\n\n\n### ImageView\n\n```kotlin\n<ImageView\n        android:id=\"@+id/imageView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:src=\"@drawable/ic_launcher_background\"/>\n```\n\n**动态变化ImageView中图片**\n\n```kotlin\n myBinding.button.setOnClickListener {\n            myBinding.imageView.setImageResource(R.drawable.b)\n        }\n```\n\n\n\n### ProgressBar\n\n```kotlin\n<ProgressBar\n        android:id=\"@+id/progressBar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        style=\"?android:attr/progressBarStyleHorizontal\"//进度条样式\n        android:max=\"100\"/>//进度条最大值\n```\n\n\n\n### AlertDialog\n\n```kotlin\nAlertDialog.Builder(this).apply {\n                setTitle(\"This is Dialog\")\n                setMessage(\"Something important\")\n                setCancelable(false)//点击别的地方是否可以取消弹出框\n                setPositiveButton(\"OK\"){\n                    dialog,which->\n                }\n                setNegativeButton(\"Cancel\"){\n                    dialog,which->\n                }\n                show()\n            }\n```\n\n\n\n------\n\n# 布局\n\n### LinearLayout\n\n![](../img/img15.jpg)\n\nandroid:layout_weight这个属性允许我们使用比例的方式来指定控件的大小。使用这个时要把layout_width的值设为“0dp”\n\n![](../img/img16.jpg)\n\n### RelativeLayout\n\n**相对父布局**\n\n![](../img/img17.jpg)\n\n![](../img/img18.jpg)\n\n**相对其他控件**\n\n**注：**引用控件放在前面\n\n![](../img/img19.jpg)\n\n![](../img/img20.jpg)\n\n**其他定位属性:**\nandroid:layout_alignLeft表示让一个控件的左边缘同另一个控件左边缘对齐\nandroid:layout_alignRight表示让一个控件的右边缘同另一个控件右边缘对齐\nandroid:layout_alignTop\nandroid:layout_alignBottom\n\n### FrameLayout\n\nFrameLayout又叫帧布局，应用场景较少，所有控件都会默认摆在布局左上角，也可以使用android:layout_gravity进行对齐操作，此方法应用场景过少，不做过多赘述\n\n------\n\n# 自定义控件\n\n### 引入布局\n\n1.创建一个子项布局\n\n2.在相应活动布局中引用该布局\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"horizontal\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"@drawable/title_bg\">\n    <Button\n        android:id=\"@+id/titleBack\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Back\"\n        android:layout_gravity=\"center\"\n        android:layout_margin=\"5dp\"\n        android:textColor=\"#fff\"\n        android:background=\"@drawable/back_bg\"/>\n\n    <TextView\n        android:id=\"@+id/titleText\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_weight=\"1\"\n        android:text=\"Title Text\"\n        android:gravity=\"center\"\n        android:layout_gravity=\"center\"\n        android:textColor=\"@color/black\"\n        android:textSize=\"24sp\"\n        />\n    <Button\n        android:id=\"@+id/titleEdit\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Edit\"\n        android:layout_gravity=\"center\"\n        android:layout_margin=\"5dp\"\n        android:textColor=\"#fff\"\n        android:background=\"@drawable/edit_bg\"/>\n</LinearLayout>\n```\n\n```kotlin\n<include layout=\"@layout/title\"/>\n```\n\n因为建立的是标题栏需要将系统自带的隐藏\n\n```kotlin\nsupportActionBar?.hind()\n```\n\n### 创建自定义控件\n\n1.新建一个自定义类继承LinearLayout作为控件\n\n2.在布局文件中添加这个控件\n\n3.在自定义类中添加点击事件\n\n```kotlin\nclass TitleLayout(context: Context,attrs:AttributeSet):LinearLayout(context,attrs) {\n    init {\n        //动态加载标题栏布局\n        LayoutInflater.from(context).inflate(R.layout.title,this)\n        val titleBack=findViewById<Button>(R.id.titleBack)\n        val titleEdit=findViewById<Button>(R.id.titleEdit)\n        titleBack.setOnClickListener {\n            val activity =context as Activity\n            activity.finish()\n        }\n        titleEdit.setOnClickListener {\n            Toast.makeText(context,\"You clicked edit button\",Toast.LENGTH_SHORT).show()\n        }\n    }\n}\n```\n\n```kotlin\n <com.example.uicustomviews.TitleLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n/>\n```\n\n------\n\n# ListView\n\n1.在布局中添加该控件\n\n2.制作一个适配器并定义一个类作为适配器类型\n\n3.定义一个子项布局\n\n4.将适配器和**listview**建立联系\n\n5.定义其点击事件\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n   >\n    <ListView\n        android:id=\"@+id/listView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n</LinearLayout>\n```\n\n```kotlin\n//适配器类型\nclass Fruit(val name:String,val imageId:Int)\n```\n\n```kotlin\nclass FruitAdapter(activity: Activity,val resourceId:Int,data:List<Fruit>):ArrayAdapter<Fruit>(activity,resourceId,data) {\n    //用于对控件实例进行缓存\n    inner class ViewHolder(val fruitImage:ImageView,val fruitName:TextView)\n    //该方法在每个子项被滚动到屏幕内的时候会被调用\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\n        val view:View\n        val viewHolder:ViewHolder\n        //利用convertView对加载好的布局进行缓存以便于复用\n        //不为空则调用之前缓存的布局控件\n        if(convertView!=null){\n            view=convertView\n            viewHolder=view.tag as ViewHolder\n        }\n        else{\n            //动态加载布局\n            view =LayoutInflater.from(context).inflate(resourceId,parent,false)\n            //获取控件实例\n            val fruitImage:ImageView=view.findViewById(R.id.fruit_image)\n            val fruitName:TextView=view.findViewById(R.id.fruitName)\n           //缓存控件实例以便于复用\n            viewHolder=ViewHolder(fruitImage,fruitName)\n            //利用View的setTag()方法将viewHolder对象存储在View中\n            view.tag=viewHolder\n        }\n        //获取当前项的Fruit实例\n        val fruit=getItem(position)\n        //设置图片和文本\n        if(fruit!=null){\n            viewHolder.fruitImage.setImageResource(fruit.imageId)\n            viewHolder.fruitName.text=fruit.name\n        }\n        return view\n    }\n}\n```\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"60dp\">\n    <ImageView\n        android:id=\"@+id/fruit_image\"\n        android:layout_width=\"40dp\"\n        android:layout_height=\"40dp\"\n        android:layout_gravity=\"center_vertical\"\n        android:layout_marginLeft=\"10dp\"/>\n    <TextView\n        android:id=\"@+id/fruitName\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_vertical\"\n        android:layout_marginLeft=\"10dp\"/>\n</LinearLayout>\n```\n\n```kotlin\n  private val fruitList=ArrayList<Fruit>()\n//获取适配器实例\nval adapter=FruitAdapter(this,R.layout.fruit_item,fruitList)\n//建立联系\n        binding.listView.adapter=adapter\n```\n\n```kotlin\n //设置点击事件\nbinding.listView.setOnItemClickListener { _, _, position, _ ->\n            val fruit=fruitList[position]\n            Toast.makeText(this,fruit.name,Toast.LENGTH_SHORT).show()\n        }\n```\n\n------\n\n# RecyclerView\n\n1.添加依赖库\n\n2.添加控件\n\n3.准备一个适配器并定义一个适配器类型\n\n4.定义一个子项布局\n\n5.将适配器和**RecyclerView**建立联系并设置其布局形式\n\n6.设置点击事件(在适配器的**onCreateViewHolder()**方法中设置)\n\n```kotlin\nimplementation (\"androidx.recyclerview:recyclerview:1.3.2\")\n```\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/recyclerView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n</LinearLayout>\n```\n\n```kotlin\n//适配器类型\nclass Fruit(val name:String,val imageId:Int)\n```\n\n```kotlin\nclass FruitAdapter(val fruitList: List<Fruit>):RecyclerView.Adapter<FruitAdapter.ViewHolder>() {\n    //内部类ViewHolder存储控件\n    inner class ViewHolder(view: View):RecyclerView.ViewHolder(view){\n        val fruitImage:ImageView=view.findViewById(R.id.fruit_image)\n        val fruitName:TextView=view.findViewById(R.id.fruitName)\n\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        //动态加载布局\n        val view=LayoutInflater.from(parent.context).inflate(R.layout.fruit_item,parent,false)\n        //获取viewHolder实例\n        val viewHolder=ViewHolder(view)\n        //设置点击事件\n        viewHolder.itemView.setOnClickListener {\n            //获取位置\n            val position=viewHolder.adapterPosition\n            //获取实体类实例\n            val fruit=fruitList[position]\n            //具体事件\n            Toast.makeText(parent.context,\"you clivked view ${fruit.name}\",Toast.LENGTH_SHORT).show()\n        }\n        viewHolder.fruitImage.setOnClickListener {\n             //获取位置\n            val position=viewHolder.adapterPosition\n            //获取实体类实例\n            val fruit=fruitList[position]\n             //具体事件\n            Toast.makeText(parent.context,\"you clivked image ${fruit.name}\",Toast.LENGTH_SHORT).show()\n        }\n        return viewHolder\n    }\n//对RecyclerView的子项数据进行赋值\n    @SuppressLint(\"SuspiciousIndentation\")\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n      val fruit =fruitList[position]\n        holder.fruitImage.setImageResource(fruit.imageId)\n        holder.fruitName.text=fruit.name\n    }\n    override fun getItemCount()=fruitList.size\n}\n```\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"60dp\">\n    <ImageView\n        android:id=\"@+id/fruit_image\"\n        android:layout_width=\"40dp\"\n        android:layout_height=\"40dp\"\n        android:layout_gravity=\"center_vertical\"\n        android:layout_marginLeft=\"10dp\"/>\n    <TextView\n        android:id=\"@+id/fruitName\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_vertical\"\n        android:layout_marginLeft=\"10dp\"/>\n</LinearLayout>\n```\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    private val fruitList=ArrayList<Fruit>()\n    private lateinit var binding:ActivityMainBinding\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding=ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        //初始化数据\n        initFruits()\n        //创建LinearLayoutManager对象\n        //LayoutManager用于指定布局方式，LinearLayoutManager(this)指线性布局，GridLayoutManager()是网格布局\n       //设置布局排列方向(线性布局)\n       /* layoutManager.orientation=LinearLayoutManager.HORIZONTAL*/\n        //瀑布流布局传入两个参数第一个指定布局的列数，第二个指定布局排列的方向\n        val layoutManager=StaggeredGridLayoutManager(3,StaggeredGridLayoutManager.VERTICAL)\n        //将该对象设置到recyclerView中\n        binding.recyclerView.layoutManager=layoutManager\n        //获取FruitAdapter实例\n        val adapter=FruitAdapter(fruitList)\n        //完成适配器设置\n        binding.recyclerView.adapter=adapter\n    }\n\n    private fun initFruits() {\n        repeat(2) {\n            fruitList.add(Fruit(getRandomLengthName(\"Apple\"), R.drawable.apple_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Banana\"), R.drawable.banana_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Orange\"), R.drawable.orange_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Watermelon\"), R.drawable.watermelon_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Pear\"), R.drawable.pear_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Grape\"), R.drawable.grape_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Pineapple\"), R.drawable.pineapple_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Strawberry\"), R.drawable.strawberry_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Cherry\"), R.drawable.cherry_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Mango\"), R.drawable.mango_pic))\n        }\n    }\n\n    private fun getRandomLengthName(name: String): String {\n        val n=(1..20).random()\n        val builder = StringBuilder()\n       repeat(n){\n           builder.append(name)\n       }\n        return builder.toString()\n    }\n}\n```\n\n------\n\n","source":"_posts/UI开发-Kotlin.md","raw":"---\ntitle: UI开发(Kotlin)\ndate: 2025-04-24 19:35:30\ncategories:\n- Android(Kotlin版)\ntags:\n---\n\n# 常用控件\n\n### TextView\n\n```kotlin\n<TextView\n        android:id=\"@+id/textView\"//定义唯一标识符\n        android:layout_width=\"match_parent\"//控件宽度\n        android:layout_height=\"wrap_content\"//控件高度\n        android:gravity=\"center\"//文字位置\n        android:textColor=\"@color/red\"//文字颜色\n        android:textSize=\"24sp\"//文字大小\n        android:text=\"This is TextView\"//文字内容\n       />\n```\n\n\n\n### Button\n\n```kotlin\n<Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Button\"/>\n```\n\n**点击事件：**\n\n(1)\n\n```kotlin\n myBinding.button.setOnClickListener {\n     //代码逻辑\n }\n```\n\n(2)接口法\n\n```kotlin\nclass MainActivity : AppCompatActivity(),View.OnClickListener {\n    override fun onCreate(savedInstanceState: Bundle?) {\n                   ......\n    }\n    override fun onClick(v: View?) {\n        when(v?.id){\n            R.id.button->{\n                //在此处添加逻辑\n            }\n        }\n    }\n}\n```\n\n\n\n### EditText\n\n```kotlin\n<EditText\n        android:id=\"@+id/editText\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"26dp\"\n        android:hint=\"Type something here\"//提示性文字\n        android:maxLines=\"2\"//最大行数\n        />\n```\n\n\n\n### ImageView\n\n```kotlin\n<ImageView\n        android:id=\"@+id/imageView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:src=\"@drawable/ic_launcher_background\"/>\n```\n\n**动态变化ImageView中图片**\n\n```kotlin\n myBinding.button.setOnClickListener {\n            myBinding.imageView.setImageResource(R.drawable.b)\n        }\n```\n\n\n\n### ProgressBar\n\n```kotlin\n<ProgressBar\n        android:id=\"@+id/progressBar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        style=\"?android:attr/progressBarStyleHorizontal\"//进度条样式\n        android:max=\"100\"/>//进度条最大值\n```\n\n\n\n### AlertDialog\n\n```kotlin\nAlertDialog.Builder(this).apply {\n                setTitle(\"This is Dialog\")\n                setMessage(\"Something important\")\n                setCancelable(false)//点击别的地方是否可以取消弹出框\n                setPositiveButton(\"OK\"){\n                    dialog,which->\n                }\n                setNegativeButton(\"Cancel\"){\n                    dialog,which->\n                }\n                show()\n            }\n```\n\n\n\n------\n\n# 布局\n\n### LinearLayout\n\n![](../img/img15.jpg)\n\nandroid:layout_weight这个属性允许我们使用比例的方式来指定控件的大小。使用这个时要把layout_width的值设为“0dp”\n\n![](../img/img16.jpg)\n\n### RelativeLayout\n\n**相对父布局**\n\n![](../img/img17.jpg)\n\n![](../img/img18.jpg)\n\n**相对其他控件**\n\n**注：**引用控件放在前面\n\n![](../img/img19.jpg)\n\n![](../img/img20.jpg)\n\n**其他定位属性:**\nandroid:layout_alignLeft表示让一个控件的左边缘同另一个控件左边缘对齐\nandroid:layout_alignRight表示让一个控件的右边缘同另一个控件右边缘对齐\nandroid:layout_alignTop\nandroid:layout_alignBottom\n\n### FrameLayout\n\nFrameLayout又叫帧布局，应用场景较少，所有控件都会默认摆在布局左上角，也可以使用android:layout_gravity进行对齐操作，此方法应用场景过少，不做过多赘述\n\n------\n\n# 自定义控件\n\n### 引入布局\n\n1.创建一个子项布局\n\n2.在相应活动布局中引用该布局\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"horizontal\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"@drawable/title_bg\">\n    <Button\n        android:id=\"@+id/titleBack\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Back\"\n        android:layout_gravity=\"center\"\n        android:layout_margin=\"5dp\"\n        android:textColor=\"#fff\"\n        android:background=\"@drawable/back_bg\"/>\n\n    <TextView\n        android:id=\"@+id/titleText\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_weight=\"1\"\n        android:text=\"Title Text\"\n        android:gravity=\"center\"\n        android:layout_gravity=\"center\"\n        android:textColor=\"@color/black\"\n        android:textSize=\"24sp\"\n        />\n    <Button\n        android:id=\"@+id/titleEdit\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Edit\"\n        android:layout_gravity=\"center\"\n        android:layout_margin=\"5dp\"\n        android:textColor=\"#fff\"\n        android:background=\"@drawable/edit_bg\"/>\n</LinearLayout>\n```\n\n```kotlin\n<include layout=\"@layout/title\"/>\n```\n\n因为建立的是标题栏需要将系统自带的隐藏\n\n```kotlin\nsupportActionBar?.hind()\n```\n\n### 创建自定义控件\n\n1.新建一个自定义类继承LinearLayout作为控件\n\n2.在布局文件中添加这个控件\n\n3.在自定义类中添加点击事件\n\n```kotlin\nclass TitleLayout(context: Context,attrs:AttributeSet):LinearLayout(context,attrs) {\n    init {\n        //动态加载标题栏布局\n        LayoutInflater.from(context).inflate(R.layout.title,this)\n        val titleBack=findViewById<Button>(R.id.titleBack)\n        val titleEdit=findViewById<Button>(R.id.titleEdit)\n        titleBack.setOnClickListener {\n            val activity =context as Activity\n            activity.finish()\n        }\n        titleEdit.setOnClickListener {\n            Toast.makeText(context,\"You clicked edit button\",Toast.LENGTH_SHORT).show()\n        }\n    }\n}\n```\n\n```kotlin\n <com.example.uicustomviews.TitleLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n/>\n```\n\n------\n\n# ListView\n\n1.在布局中添加该控件\n\n2.制作一个适配器并定义一个类作为适配器类型\n\n3.定义一个子项布局\n\n4.将适配器和**listview**建立联系\n\n5.定义其点击事件\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n   >\n    <ListView\n        android:id=\"@+id/listView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n</LinearLayout>\n```\n\n```kotlin\n//适配器类型\nclass Fruit(val name:String,val imageId:Int)\n```\n\n```kotlin\nclass FruitAdapter(activity: Activity,val resourceId:Int,data:List<Fruit>):ArrayAdapter<Fruit>(activity,resourceId,data) {\n    //用于对控件实例进行缓存\n    inner class ViewHolder(val fruitImage:ImageView,val fruitName:TextView)\n    //该方法在每个子项被滚动到屏幕内的时候会被调用\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\n        val view:View\n        val viewHolder:ViewHolder\n        //利用convertView对加载好的布局进行缓存以便于复用\n        //不为空则调用之前缓存的布局控件\n        if(convertView!=null){\n            view=convertView\n            viewHolder=view.tag as ViewHolder\n        }\n        else{\n            //动态加载布局\n            view =LayoutInflater.from(context).inflate(resourceId,parent,false)\n            //获取控件实例\n            val fruitImage:ImageView=view.findViewById(R.id.fruit_image)\n            val fruitName:TextView=view.findViewById(R.id.fruitName)\n           //缓存控件实例以便于复用\n            viewHolder=ViewHolder(fruitImage,fruitName)\n            //利用View的setTag()方法将viewHolder对象存储在View中\n            view.tag=viewHolder\n        }\n        //获取当前项的Fruit实例\n        val fruit=getItem(position)\n        //设置图片和文本\n        if(fruit!=null){\n            viewHolder.fruitImage.setImageResource(fruit.imageId)\n            viewHolder.fruitName.text=fruit.name\n        }\n        return view\n    }\n}\n```\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"60dp\">\n    <ImageView\n        android:id=\"@+id/fruit_image\"\n        android:layout_width=\"40dp\"\n        android:layout_height=\"40dp\"\n        android:layout_gravity=\"center_vertical\"\n        android:layout_marginLeft=\"10dp\"/>\n    <TextView\n        android:id=\"@+id/fruitName\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_vertical\"\n        android:layout_marginLeft=\"10dp\"/>\n</LinearLayout>\n```\n\n```kotlin\n  private val fruitList=ArrayList<Fruit>()\n//获取适配器实例\nval adapter=FruitAdapter(this,R.layout.fruit_item,fruitList)\n//建立联系\n        binding.listView.adapter=adapter\n```\n\n```kotlin\n //设置点击事件\nbinding.listView.setOnItemClickListener { _, _, position, _ ->\n            val fruit=fruitList[position]\n            Toast.makeText(this,fruit.name,Toast.LENGTH_SHORT).show()\n        }\n```\n\n------\n\n# RecyclerView\n\n1.添加依赖库\n\n2.添加控件\n\n3.准备一个适配器并定义一个适配器类型\n\n4.定义一个子项布局\n\n5.将适配器和**RecyclerView**建立联系并设置其布局形式\n\n6.设置点击事件(在适配器的**onCreateViewHolder()**方法中设置)\n\n```kotlin\nimplementation (\"androidx.recyclerview:recyclerview:1.3.2\")\n```\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/recyclerView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n</LinearLayout>\n```\n\n```kotlin\n//适配器类型\nclass Fruit(val name:String,val imageId:Int)\n```\n\n```kotlin\nclass FruitAdapter(val fruitList: List<Fruit>):RecyclerView.Adapter<FruitAdapter.ViewHolder>() {\n    //内部类ViewHolder存储控件\n    inner class ViewHolder(view: View):RecyclerView.ViewHolder(view){\n        val fruitImage:ImageView=view.findViewById(R.id.fruit_image)\n        val fruitName:TextView=view.findViewById(R.id.fruitName)\n\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        //动态加载布局\n        val view=LayoutInflater.from(parent.context).inflate(R.layout.fruit_item,parent,false)\n        //获取viewHolder实例\n        val viewHolder=ViewHolder(view)\n        //设置点击事件\n        viewHolder.itemView.setOnClickListener {\n            //获取位置\n            val position=viewHolder.adapterPosition\n            //获取实体类实例\n            val fruit=fruitList[position]\n            //具体事件\n            Toast.makeText(parent.context,\"you clivked view ${fruit.name}\",Toast.LENGTH_SHORT).show()\n        }\n        viewHolder.fruitImage.setOnClickListener {\n             //获取位置\n            val position=viewHolder.adapterPosition\n            //获取实体类实例\n            val fruit=fruitList[position]\n             //具体事件\n            Toast.makeText(parent.context,\"you clivked image ${fruit.name}\",Toast.LENGTH_SHORT).show()\n        }\n        return viewHolder\n    }\n//对RecyclerView的子项数据进行赋值\n    @SuppressLint(\"SuspiciousIndentation\")\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n      val fruit =fruitList[position]\n        holder.fruitImage.setImageResource(fruit.imageId)\n        holder.fruitName.text=fruit.name\n    }\n    override fun getItemCount()=fruitList.size\n}\n```\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"60dp\">\n    <ImageView\n        android:id=\"@+id/fruit_image\"\n        android:layout_width=\"40dp\"\n        android:layout_height=\"40dp\"\n        android:layout_gravity=\"center_vertical\"\n        android:layout_marginLeft=\"10dp\"/>\n    <TextView\n        android:id=\"@+id/fruitName\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_vertical\"\n        android:layout_marginLeft=\"10dp\"/>\n</LinearLayout>\n```\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    private val fruitList=ArrayList<Fruit>()\n    private lateinit var binding:ActivityMainBinding\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding=ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        //初始化数据\n        initFruits()\n        //创建LinearLayoutManager对象\n        //LayoutManager用于指定布局方式，LinearLayoutManager(this)指线性布局，GridLayoutManager()是网格布局\n       //设置布局排列方向(线性布局)\n       /* layoutManager.orientation=LinearLayoutManager.HORIZONTAL*/\n        //瀑布流布局传入两个参数第一个指定布局的列数，第二个指定布局排列的方向\n        val layoutManager=StaggeredGridLayoutManager(3,StaggeredGridLayoutManager.VERTICAL)\n        //将该对象设置到recyclerView中\n        binding.recyclerView.layoutManager=layoutManager\n        //获取FruitAdapter实例\n        val adapter=FruitAdapter(fruitList)\n        //完成适配器设置\n        binding.recyclerView.adapter=adapter\n    }\n\n    private fun initFruits() {\n        repeat(2) {\n            fruitList.add(Fruit(getRandomLengthName(\"Apple\"), R.drawable.apple_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Banana\"), R.drawable.banana_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Orange\"), R.drawable.orange_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Watermelon\"), R.drawable.watermelon_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Pear\"), R.drawable.pear_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Grape\"), R.drawable.grape_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Pineapple\"), R.drawable.pineapple_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Strawberry\"), R.drawable.strawberry_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Cherry\"), R.drawable.cherry_pic))\n            fruitList.add(Fruit(getRandomLengthName(\"Mango\"), R.drawable.mango_pic))\n        }\n    }\n\n    private fun getRandomLengthName(name: String): String {\n        val n=(1..20).random()\n        val builder = StringBuilder()\n       repeat(n){\n           builder.append(name)\n       }\n        return builder.toString()\n    }\n}\n```\n\n------\n\n","slug":"UI开发-Kotlin","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gca001es4s7928t8pjm","content":"<h1 id=\"常用控件\"><a href=\"#常用控件\" class=\"headerlink\" title=\"常用控件\"></a>常用控件</h1><h3 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/textView&quot;</span><span class=\"comment\">//定义唯一标识符</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span><span class=\"comment\">//控件宽度</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span><span class=\"comment\">//控件高度</span></span><br><span class=\"line\">        android:gravity=<span class=\"string\">&quot;center&quot;</span><span class=\"comment\">//文字位置</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;@color/red&quot;</span><span class=\"comment\">//文字颜色</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;24sp&quot;</span><span class=\"comment\">//文字大小</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;This is TextView&quot;</span><span class=\"comment\">//文字内容</span></span><br><span class=\"line\">       /&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/button&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Button&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>点击事件：</strong></p>\n<p>(1)</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myBinding.button.setOnClickListener &#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码逻辑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2)接口法</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>(),View.OnClickListener &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">                   ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onClick</span><span class=\"params\">(v: <span class=\"type\">View</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">when</span>(v?.id)&#123;</span><br><span class=\"line\">            R.id.button-&gt;&#123;</span><br><span class=\"line\">                <span class=\"comment\">//在此处添加逻辑</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"EditText\"><a href=\"#EditText\" class=\"headerlink\" title=\"EditText\"></a>EditText</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;EditText</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/editText&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;26dp&quot;</span></span><br><span class=\"line\">        android:hint=<span class=\"string\">&quot;Type something here&quot;</span><span class=\"comment\">//提示性文字</span></span><br><span class=\"line\">        android:maxLines=<span class=\"string\">&quot;2&quot;</span><span class=\"comment\">//最大行数</span></span><br><span class=\"line\">        /&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ImageView\"><a href=\"#ImageView\" class=\"headerlink\" title=\"ImageView\"></a>ImageView</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/imageView&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:src=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>动态变化ImageView中图片</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myBinding.button.setOnClickListener &#123;</span><br><span class=\"line\">           myBinding.imageView.setImageResource(R.drawable.b)</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ProgressBar\"><a href=\"#ProgressBar\" class=\"headerlink\" title=\"ProgressBar\"></a>ProgressBar</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ProgressBar</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/progressBar&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        style=<span class=\"string\">&quot;?android:attr/progressBarStyleHorizontal&quot;</span><span class=\"comment\">//进度条样式</span></span><br><span class=\"line\">        android:max=<span class=\"string\">&quot;100&quot;</span>/&gt;<span class=\"comment\">//进度条最大值</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"AlertDialog\"><a href=\"#AlertDialog\" class=\"headerlink\" title=\"AlertDialog\"></a>AlertDialog</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AlertDialog.Builder(<span class=\"keyword\">this</span>).apply &#123;</span><br><span class=\"line\">                setTitle(<span class=\"string\">&quot;This is Dialog&quot;</span>)</span><br><span class=\"line\">                setMessage(<span class=\"string\">&quot;Something important&quot;</span>)</span><br><span class=\"line\">                setCancelable(<span class=\"literal\">false</span>)<span class=\"comment\">//点击别的地方是否可以取消弹出框</span></span><br><span class=\"line\">                setPositiveButton(<span class=\"string\">&quot;OK&quot;</span>)&#123;</span><br><span class=\"line\">                    dialog,which-&gt;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                setNegativeButton(<span class=\"string\">&quot;Cancel&quot;</span>)&#123;</span><br><span class=\"line\">                    dialog,which-&gt;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                show()</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h1><h3 id=\"LinearLayout\"><a href=\"#LinearLayout\" class=\"headerlink\" title=\"LinearLayout\"></a>LinearLayout</h3><p><img src=\"/../img/img15.jpg\"></p>\n<p>android:layout_weight这个属性允许我们使用比例的方式来指定控件的大小。使用这个时要把layout_width的值设为“0dp”</p>\n<p><img src=\"/../img/img16.jpg\"></p>\n<h3 id=\"RelativeLayout\"><a href=\"#RelativeLayout\" class=\"headerlink\" title=\"RelativeLayout\"></a>RelativeLayout</h3><p><strong>相对父布局</strong></p>\n<p><img src=\"/../img/img17.jpg\"></p>\n<p><img src=\"/../img/img18.jpg\"></p>\n<p><strong>相对其他控件</strong></p>\n<p>**注：**引用控件放在前面</p>\n<p><img src=\"/../img/img19.jpg\"></p>\n<p><img src=\"/../img/img20.jpg\"></p>\n<p><strong>其他定位属性:</strong><br>android:layout_alignLeft表示让一个控件的左边缘同另一个控件左边缘对齐<br>android:layout_alignRight表示让一个控件的右边缘同另一个控件右边缘对齐<br>android:layout_alignTop<br>android:layout_alignBottom</p>\n<h3 id=\"FrameLayout\"><a href=\"#FrameLayout\" class=\"headerlink\" title=\"FrameLayout\"></a>FrameLayout</h3><p>FrameLayout又叫帧布局，应用场景较少，所有控件都会默认摆在布局左上角，也可以使用android:layout_gravity进行对齐操作，此方法应用场景过少，不做过多赘述</p>\n<hr>\n<h1 id=\"自定义控件\"><a href=\"#自定义控件\" class=\"headerlink\" title=\"自定义控件\"></a>自定义控件</h1><h3 id=\"引入布局\"><a href=\"#引入布局\" class=\"headerlink\" title=\"引入布局\"></a>引入布局</h3><p>1.创建一个子项布局</p>\n<p>2.在相应活动布局中引用该布局</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;@drawable/title_bg&quot;</span>&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/titleBack&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Back&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:layout_margin=<span class=\"string\">&quot;5dp&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#fff&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;@drawable/back_bg&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/titleText&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_weight=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Title Text&quot;</span></span><br><span class=\"line\">        android:gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;@color/black&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;24sp&quot;</span></span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/titleEdit&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Edit&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:layout_margin=<span class=\"string\">&quot;5dp&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#fff&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;@drawable/edit_bg&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;include layout=<span class=\"string\">&quot;@layout/title&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>因为建立的是标题栏需要将系统自带的隐藏</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supportActionBar?.hind()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建自定义控件\"><a href=\"#创建自定义控件\" class=\"headerlink\" title=\"创建自定义控件\"></a>创建自定义控件</h3><p>1.新建一个自定义类继承LinearLayout作为控件</p>\n<p>2.在布局文件中添加这个控件</p>\n<p>3.在自定义类中添加点击事件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TitleLayout</span>(context: Context,attrs:AttributeSet):LinearLayout(context,attrs) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//动态加载标题栏布局</span></span><br><span class=\"line\">        LayoutInflater.from(context).inflate(R.layout.title,<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> titleBack=findViewById&lt;Button&gt;(R.id.titleBack)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> titleEdit=findViewById&lt;Button&gt;(R.id.titleEdit)</span><br><span class=\"line\">        titleBack.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> activity =context <span class=\"keyword\">as</span> Activity</span><br><span class=\"line\">            activity.finish()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        titleEdit.setOnClickListener &#123;</span><br><span class=\"line\">            Toast.makeText(context,<span class=\"string\">&quot;You clicked edit button&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;com.example.uicustomviews.TitleLayout</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ListView\"><a href=\"#ListView\" class=\"headerlink\" title=\"ListView\"></a>ListView</h1><p>1.在布局中添加该控件</p>\n<p>2.制作一个适配器并定义一个类作为适配器类型</p>\n<p>3.定义一个子项布局</p>\n<p>4.将适配器和<strong>listview</strong>建立联系</p>\n<p>5.定义其点击事件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">   &gt;</span><br><span class=\"line\">    &lt;ListView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/listView&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//适配器类型</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fruit</span>(<span class=\"keyword\">val</span> name:String,<span class=\"keyword\">val</span> imageId:<span class=\"built_in\">Int</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FruitAdapter</span>(activity: Activity,<span class=\"keyword\">val</span> resourceId:<span class=\"built_in\">Int</span>,<span class=\"keyword\">data</span>:List&lt;Fruit&gt;):ArrayAdapter&lt;Fruit&gt;(activity,resourceId,<span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用于对控件实例进行缓存</span></span><br><span class=\"line\">    <span class=\"keyword\">inner</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ViewHolder</span>(<span class=\"keyword\">val</span> fruitImage:ImageView,<span class=\"keyword\">val</span> fruitName:TextView)</span><br><span class=\"line\">    <span class=\"comment\">//该方法在每个子项被滚动到屏幕内的时候会被调用</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getView</span><span class=\"params\">(position: <span class=\"type\">Int</span>, convertView: <span class=\"type\">View</span>?, parent: <span class=\"type\">ViewGroup</span>)</span></span>: View &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> view:View</span><br><span class=\"line\">        <span class=\"keyword\">val</span> viewHolder:ViewHolder</span><br><span class=\"line\">        <span class=\"comment\">//利用convertView对加载好的布局进行缓存以便于复用</span></span><br><span class=\"line\">        <span class=\"comment\">//不为空则调用之前缓存的布局控件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(convertView!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            view=convertView</span><br><span class=\"line\">            viewHolder=view.tag <span class=\"keyword\">as</span> ViewHolder</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//动态加载布局</span></span><br><span class=\"line\">            view =LayoutInflater.from(context).inflate(resourceId,parent,<span class=\"literal\">false</span>)</span><br><span class=\"line\">            <span class=\"comment\">//获取控件实例</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> fruitImage:ImageView=view.findViewById(R.id.fruit_image)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> fruitName:TextView=view.findViewById(R.id.fruitName)</span><br><span class=\"line\">           <span class=\"comment\">//缓存控件实例以便于复用</span></span><br><span class=\"line\">            viewHolder=ViewHolder(fruitImage,fruitName)</span><br><span class=\"line\">            <span class=\"comment\">//利用View的setTag()方法将viewHolder对象存储在View中</span></span><br><span class=\"line\">            view.tag=viewHolder</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取当前项的Fruit实例</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> fruit=getItem(position)</span><br><span class=\"line\">        <span class=\"comment\">//设置图片和文本</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fruit!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            viewHolder.fruitImage.setImageResource(fruit.imageId)</span><br><span class=\"line\">            viewHolder.fruitName.text=fruit.name</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;60dp&quot;</span>&gt;</span><br><span class=\"line\">    &lt;ImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/fruit_image&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;40dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;40dp&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_vertical&quot;</span></span><br><span class=\"line\">        android:layout_marginLeft=<span class=\"string\">&quot;10dp&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/fruitName&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_vertical&quot;</span></span><br><span class=\"line\">        android:layout_marginLeft=<span class=\"string\">&quot;10dp&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> fruitList=ArrayList&lt;Fruit&gt;()</span><br><span class=\"line\"><span class=\"comment\">//获取适配器实例</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> adapter=FruitAdapter(<span class=\"keyword\">this</span>,R.layout.fruit_item,fruitList)</span><br><span class=\"line\"><span class=\"comment\">//建立联系</span></span><br><span class=\"line\">        binding.listView.adapter=adapter</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//设置点击事件</span></span><br><span class=\"line\">binding.listView.setOnItemClickListener &#123; _, _, position, _ -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> fruit=fruitList[position]</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>,fruit.name,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"RecyclerView\"><a href=\"#RecyclerView\" class=\"headerlink\" title=\"RecyclerView\"></a>RecyclerView</h1><p>1.添加依赖库</p>\n<p>2.添加控件</p>\n<p>3.准备一个适配器并定义一个适配器类型</p>\n<p>4.定义一个子项布局</p>\n<p>5.将适配器和<strong>RecyclerView</strong>建立联系并设置其布局形式</p>\n<p>6.设置点击事件(在适配器的**onCreateViewHolder()**方法中设置)</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;androidx.recyclerview:recyclerview:1.3.2&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/recyclerView&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//适配器类型</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fruit</span>(<span class=\"keyword\">val</span> name:String,<span class=\"keyword\">val</span> imageId:<span class=\"built_in\">Int</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FruitAdapter</span>(<span class=\"keyword\">val</span> fruitList: List&lt;Fruit&gt;):RecyclerView.Adapter&lt;FruitAdapter.ViewHolder&gt;() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//内部类ViewHolder存储控件</span></span><br><span class=\"line\">    <span class=\"keyword\">inner</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ViewHolder</span>(view: View):RecyclerView.ViewHolder(view)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> fruitImage:ImageView=view.findViewById(R.id.fruit_image)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> fruitName:TextView=view.findViewById(R.id.fruitName)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(parent: <span class=\"type\">ViewGroup</span>, viewType: <span class=\"type\">Int</span>)</span></span>: ViewHolder &#123;</span><br><span class=\"line\">        <span class=\"comment\">//动态加载布局</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> view=LayoutInflater.from(parent.context).inflate(R.layout.fruit_item,parent,<span class=\"literal\">false</span>)</span><br><span class=\"line\">        <span class=\"comment\">//获取viewHolder实例</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> viewHolder=ViewHolder(view)</span><br><span class=\"line\">        <span class=\"comment\">//设置点击事件</span></span><br><span class=\"line\">        viewHolder.itemView.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取位置</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> position=viewHolder.adapterPosition</span><br><span class=\"line\">            <span class=\"comment\">//获取实体类实例</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> fruit=fruitList[position]</span><br><span class=\"line\">            <span class=\"comment\">//具体事件</span></span><br><span class=\"line\">            Toast.makeText(parent.context,<span class=\"string\">&quot;you clivked view <span class=\"subst\">$&#123;fruit.name&#125;</span>&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        viewHolder.fruitImage.setOnClickListener &#123;</span><br><span class=\"line\">             <span class=\"comment\">//获取位置</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> position=viewHolder.adapterPosition</span><br><span class=\"line\">            <span class=\"comment\">//获取实体类实例</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> fruit=fruitList[position]</span><br><span class=\"line\">             <span class=\"comment\">//具体事件</span></span><br><span class=\"line\">            Toast.makeText(parent.context,<span class=\"string\">&quot;you clivked image <span class=\"subst\">$&#123;fruit.name&#125;</span>&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> viewHolder</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//对RecyclerView的子项数据进行赋值</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(<span class=\"string\">&quot;SuspiciousIndentation&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(holder: <span class=\"type\">ViewHolder</span>, position: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> fruit =fruitList[position]</span><br><span class=\"line\">        holder.fruitImage.setImageResource(fruit.imageId)</span><br><span class=\"line\">        holder.fruitName.text=fruit.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span></span>=fruitList.size</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;60dp&quot;</span>&gt;</span><br><span class=\"line\">    &lt;ImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/fruit_image&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;40dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;40dp&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_vertical&quot;</span></span><br><span class=\"line\">        android:layout_marginLeft=<span class=\"string\">&quot;10dp&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/fruitName&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_vertical&quot;</span></span><br><span class=\"line\">        android:layout_marginLeft=<span class=\"string\">&quot;10dp&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> fruitList=ArrayList&lt;Fruit&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding:ActivityMainBinding</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        <span class=\"comment\">//初始化数据</span></span><br><span class=\"line\">        initFruits()</span><br><span class=\"line\">        <span class=\"comment\">//创建LinearLayoutManager对象</span></span><br><span class=\"line\">        <span class=\"comment\">//LayoutManager用于指定布局方式，LinearLayoutManager(this)指线性布局，GridLayoutManager()是网格布局</span></span><br><span class=\"line\">       <span class=\"comment\">//设置布局排列方向(线性布局)</span></span><br><span class=\"line\">       <span class=\"comment\">/* layoutManager.orientation=LinearLayoutManager.HORIZONTAL*/</span></span><br><span class=\"line\">        <span class=\"comment\">//瀑布流布局传入两个参数第一个指定布局的列数，第二个指定布局排列的方向</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> layoutManager=StaggeredGridLayoutManager(<span class=\"number\">3</span>,StaggeredGridLayoutManager.VERTICAL)</span><br><span class=\"line\">        <span class=\"comment\">//将该对象设置到recyclerView中</span></span><br><span class=\"line\">        binding.recyclerView.layoutManager=layoutManager</span><br><span class=\"line\">        <span class=\"comment\">//获取FruitAdapter实例</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> adapter=FruitAdapter(fruitList)</span><br><span class=\"line\">        <span class=\"comment\">//完成适配器设置</span></span><br><span class=\"line\">        binding.recyclerView.adapter=adapter</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initFruits</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        repeat(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Apple&quot;</span>), R.drawable.apple_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Banana&quot;</span>), R.drawable.banana_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Orange&quot;</span>), R.drawable.orange_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Watermelon&quot;</span>), R.drawable.watermelon_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Pear&quot;</span>), R.drawable.pear_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Grape&quot;</span>), R.drawable.grape_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Pineapple&quot;</span>), R.drawable.pineapple_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Strawberry&quot;</span>), R.drawable.strawberry_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Cherry&quot;</span>), R.drawable.cherry_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Mango&quot;</span>), R.drawable.mango_pic))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getRandomLengthName</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> n=(<span class=\"number\">1.</span><span class=\"number\">.20</span>).random()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> builder = StringBuilder()</span><br><span class=\"line\">       repeat(n)&#123;</span><br><span class=\"line\">           builder.append(name)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"常用控件\nTextView\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n<TextView\n        android:id=\"@+id/textView\"//定义唯一标识符\n        android:layout_width=\"match_parent\"//控件宽度\n        android:layout_height=\"wrap_content\"//控件高度\n        android:gravity=\"center\"//文字位置\n        android:textColor=\"@color/red\"//文字颜色\n        android:textSize=\"2","more":"<h1 id=\"常用控件\"><a href=\"#常用控件\" class=\"headerlink\" title=\"常用控件\"></a>常用控件</h1><h3 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/textView&quot;</span><span class=\"comment\">//定义唯一标识符</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span><span class=\"comment\">//控件宽度</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span><span class=\"comment\">//控件高度</span></span><br><span class=\"line\">        android:gravity=<span class=\"string\">&quot;center&quot;</span><span class=\"comment\">//文字位置</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;@color/red&quot;</span><span class=\"comment\">//文字颜色</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;24sp&quot;</span><span class=\"comment\">//文字大小</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;This is TextView&quot;</span><span class=\"comment\">//文字内容</span></span><br><span class=\"line\">       /&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/button&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Button&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>点击事件：</strong></p>\n<p>(1)</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myBinding.button.setOnClickListener &#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码逻辑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2)接口法</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>(),View.OnClickListener &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">                   ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onClick</span><span class=\"params\">(v: <span class=\"type\">View</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">when</span>(v?.id)&#123;</span><br><span class=\"line\">            R.id.button-&gt;&#123;</span><br><span class=\"line\">                <span class=\"comment\">//在此处添加逻辑</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"EditText\"><a href=\"#EditText\" class=\"headerlink\" title=\"EditText\"></a>EditText</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;EditText</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/editText&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;26dp&quot;</span></span><br><span class=\"line\">        android:hint=<span class=\"string\">&quot;Type something here&quot;</span><span class=\"comment\">//提示性文字</span></span><br><span class=\"line\">        android:maxLines=<span class=\"string\">&quot;2&quot;</span><span class=\"comment\">//最大行数</span></span><br><span class=\"line\">        /&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ImageView\"><a href=\"#ImageView\" class=\"headerlink\" title=\"ImageView\"></a>ImageView</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/imageView&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:src=<span class=\"string\">&quot;@drawable/ic_launcher_background&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>动态变化ImageView中图片</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myBinding.button.setOnClickListener &#123;</span><br><span class=\"line\">           myBinding.imageView.setImageResource(R.drawable.b)</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ProgressBar\"><a href=\"#ProgressBar\" class=\"headerlink\" title=\"ProgressBar\"></a>ProgressBar</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ProgressBar</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/progressBar&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        style=<span class=\"string\">&quot;?android:attr/progressBarStyleHorizontal&quot;</span><span class=\"comment\">//进度条样式</span></span><br><span class=\"line\">        android:max=<span class=\"string\">&quot;100&quot;</span>/&gt;<span class=\"comment\">//进度条最大值</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"AlertDialog\"><a href=\"#AlertDialog\" class=\"headerlink\" title=\"AlertDialog\"></a>AlertDialog</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AlertDialog.Builder(<span class=\"keyword\">this</span>).apply &#123;</span><br><span class=\"line\">                setTitle(<span class=\"string\">&quot;This is Dialog&quot;</span>)</span><br><span class=\"line\">                setMessage(<span class=\"string\">&quot;Something important&quot;</span>)</span><br><span class=\"line\">                setCancelable(<span class=\"literal\">false</span>)<span class=\"comment\">//点击别的地方是否可以取消弹出框</span></span><br><span class=\"line\">                setPositiveButton(<span class=\"string\">&quot;OK&quot;</span>)&#123;</span><br><span class=\"line\">                    dialog,which-&gt;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                setNegativeButton(<span class=\"string\">&quot;Cancel&quot;</span>)&#123;</span><br><span class=\"line\">                    dialog,which-&gt;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                show()</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h1><h3 id=\"LinearLayout\"><a href=\"#LinearLayout\" class=\"headerlink\" title=\"LinearLayout\"></a>LinearLayout</h3><p><img src=\"/../img/img15.jpg\"></p>\n<p>android:layout_weight这个属性允许我们使用比例的方式来指定控件的大小。使用这个时要把layout_width的值设为“0dp”</p>\n<p><img src=\"/../img/img16.jpg\"></p>\n<h3 id=\"RelativeLayout\"><a href=\"#RelativeLayout\" class=\"headerlink\" title=\"RelativeLayout\"></a>RelativeLayout</h3><p><strong>相对父布局</strong></p>\n<p><img src=\"/../img/img17.jpg\"></p>\n<p><img src=\"/../img/img18.jpg\"></p>\n<p><strong>相对其他控件</strong></p>\n<p>**注：**引用控件放在前面</p>\n<p><img src=\"/../img/img19.jpg\"></p>\n<p><img src=\"/../img/img20.jpg\"></p>\n<p><strong>其他定位属性:</strong><br>android:layout_alignLeft表示让一个控件的左边缘同另一个控件左边缘对齐<br>android:layout_alignRight表示让一个控件的右边缘同另一个控件右边缘对齐<br>android:layout_alignTop<br>android:layout_alignBottom</p>\n<h3 id=\"FrameLayout\"><a href=\"#FrameLayout\" class=\"headerlink\" title=\"FrameLayout\"></a>FrameLayout</h3><p>FrameLayout又叫帧布局，应用场景较少，所有控件都会默认摆在布局左上角，也可以使用android:layout_gravity进行对齐操作，此方法应用场景过少，不做过多赘述</p>\n<hr>\n<h1 id=\"自定义控件\"><a href=\"#自定义控件\" class=\"headerlink\" title=\"自定义控件\"></a>自定义控件</h1><h3 id=\"引入布局\"><a href=\"#引入布局\" class=\"headerlink\" title=\"引入布局\"></a>引入布局</h3><p>1.创建一个子项布局</p>\n<p>2.在相应活动布局中引用该布局</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;@drawable/title_bg&quot;</span>&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/titleBack&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Back&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:layout_margin=<span class=\"string\">&quot;5dp&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#fff&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;@drawable/back_bg&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/titleText&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_weight=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Title Text&quot;</span></span><br><span class=\"line\">        android:gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;@color/black&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;24sp&quot;</span></span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/titleEdit&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Edit&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:layout_margin=<span class=\"string\">&quot;5dp&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#fff&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;@drawable/edit_bg&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;include layout=<span class=\"string\">&quot;@layout/title&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>因为建立的是标题栏需要将系统自带的隐藏</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supportActionBar?.hind()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建自定义控件\"><a href=\"#创建自定义控件\" class=\"headerlink\" title=\"创建自定义控件\"></a>创建自定义控件</h3><p>1.新建一个自定义类继承LinearLayout作为控件</p>\n<p>2.在布局文件中添加这个控件</p>\n<p>3.在自定义类中添加点击事件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TitleLayout</span>(context: Context,attrs:AttributeSet):LinearLayout(context,attrs) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//动态加载标题栏布局</span></span><br><span class=\"line\">        LayoutInflater.from(context).inflate(R.layout.title,<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> titleBack=findViewById&lt;Button&gt;(R.id.titleBack)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> titleEdit=findViewById&lt;Button&gt;(R.id.titleEdit)</span><br><span class=\"line\">        titleBack.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> activity =context <span class=\"keyword\">as</span> Activity</span><br><span class=\"line\">            activity.finish()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        titleEdit.setOnClickListener &#123;</span><br><span class=\"line\">            Toast.makeText(context,<span class=\"string\">&quot;You clicked edit button&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;com.example.uicustomviews.TitleLayout</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ListView\"><a href=\"#ListView\" class=\"headerlink\" title=\"ListView\"></a>ListView</h1><p>1.在布局中添加该控件</p>\n<p>2.制作一个适配器并定义一个类作为适配器类型</p>\n<p>3.定义一个子项布局</p>\n<p>4.将适配器和<strong>listview</strong>建立联系</p>\n<p>5.定义其点击事件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">   &gt;</span><br><span class=\"line\">    &lt;ListView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/listView&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//适配器类型</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fruit</span>(<span class=\"keyword\">val</span> name:String,<span class=\"keyword\">val</span> imageId:<span class=\"built_in\">Int</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FruitAdapter</span>(activity: Activity,<span class=\"keyword\">val</span> resourceId:<span class=\"built_in\">Int</span>,<span class=\"keyword\">data</span>:List&lt;Fruit&gt;):ArrayAdapter&lt;Fruit&gt;(activity,resourceId,<span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用于对控件实例进行缓存</span></span><br><span class=\"line\">    <span class=\"keyword\">inner</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ViewHolder</span>(<span class=\"keyword\">val</span> fruitImage:ImageView,<span class=\"keyword\">val</span> fruitName:TextView)</span><br><span class=\"line\">    <span class=\"comment\">//该方法在每个子项被滚动到屏幕内的时候会被调用</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getView</span><span class=\"params\">(position: <span class=\"type\">Int</span>, convertView: <span class=\"type\">View</span>?, parent: <span class=\"type\">ViewGroup</span>)</span></span>: View &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> view:View</span><br><span class=\"line\">        <span class=\"keyword\">val</span> viewHolder:ViewHolder</span><br><span class=\"line\">        <span class=\"comment\">//利用convertView对加载好的布局进行缓存以便于复用</span></span><br><span class=\"line\">        <span class=\"comment\">//不为空则调用之前缓存的布局控件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(convertView!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            view=convertView</span><br><span class=\"line\">            viewHolder=view.tag <span class=\"keyword\">as</span> ViewHolder</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//动态加载布局</span></span><br><span class=\"line\">            view =LayoutInflater.from(context).inflate(resourceId,parent,<span class=\"literal\">false</span>)</span><br><span class=\"line\">            <span class=\"comment\">//获取控件实例</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> fruitImage:ImageView=view.findViewById(R.id.fruit_image)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> fruitName:TextView=view.findViewById(R.id.fruitName)</span><br><span class=\"line\">           <span class=\"comment\">//缓存控件实例以便于复用</span></span><br><span class=\"line\">            viewHolder=ViewHolder(fruitImage,fruitName)</span><br><span class=\"line\">            <span class=\"comment\">//利用View的setTag()方法将viewHolder对象存储在View中</span></span><br><span class=\"line\">            view.tag=viewHolder</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取当前项的Fruit实例</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> fruit=getItem(position)</span><br><span class=\"line\">        <span class=\"comment\">//设置图片和文本</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fruit!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            viewHolder.fruitImage.setImageResource(fruit.imageId)</span><br><span class=\"line\">            viewHolder.fruitName.text=fruit.name</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;60dp&quot;</span>&gt;</span><br><span class=\"line\">    &lt;ImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/fruit_image&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;40dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;40dp&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_vertical&quot;</span></span><br><span class=\"line\">        android:layout_marginLeft=<span class=\"string\">&quot;10dp&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/fruitName&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_vertical&quot;</span></span><br><span class=\"line\">        android:layout_marginLeft=<span class=\"string\">&quot;10dp&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> fruitList=ArrayList&lt;Fruit&gt;()</span><br><span class=\"line\"><span class=\"comment\">//获取适配器实例</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> adapter=FruitAdapter(<span class=\"keyword\">this</span>,R.layout.fruit_item,fruitList)</span><br><span class=\"line\"><span class=\"comment\">//建立联系</span></span><br><span class=\"line\">        binding.listView.adapter=adapter</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//设置点击事件</span></span><br><span class=\"line\">binding.listView.setOnItemClickListener &#123; _, _, position, _ -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> fruit=fruitList[position]</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>,fruit.name,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"RecyclerView\"><a href=\"#RecyclerView\" class=\"headerlink\" title=\"RecyclerView\"></a>RecyclerView</h1><p>1.添加依赖库</p>\n<p>2.添加控件</p>\n<p>3.准备一个适配器并定义一个适配器类型</p>\n<p>4.定义一个子项布局</p>\n<p>5.将适配器和<strong>RecyclerView</strong>建立联系并设置其布局形式</p>\n<p>6.设置点击事件(在适配器的**onCreateViewHolder()**方法中设置)</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;androidx.recyclerview:recyclerview:1.3.2&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/recyclerView&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//适配器类型</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fruit</span>(<span class=\"keyword\">val</span> name:String,<span class=\"keyword\">val</span> imageId:<span class=\"built_in\">Int</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FruitAdapter</span>(<span class=\"keyword\">val</span> fruitList: List&lt;Fruit&gt;):RecyclerView.Adapter&lt;FruitAdapter.ViewHolder&gt;() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//内部类ViewHolder存储控件</span></span><br><span class=\"line\">    <span class=\"keyword\">inner</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ViewHolder</span>(view: View):RecyclerView.ViewHolder(view)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> fruitImage:ImageView=view.findViewById(R.id.fruit_image)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> fruitName:TextView=view.findViewById(R.id.fruitName)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(parent: <span class=\"type\">ViewGroup</span>, viewType: <span class=\"type\">Int</span>)</span></span>: ViewHolder &#123;</span><br><span class=\"line\">        <span class=\"comment\">//动态加载布局</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> view=LayoutInflater.from(parent.context).inflate(R.layout.fruit_item,parent,<span class=\"literal\">false</span>)</span><br><span class=\"line\">        <span class=\"comment\">//获取viewHolder实例</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> viewHolder=ViewHolder(view)</span><br><span class=\"line\">        <span class=\"comment\">//设置点击事件</span></span><br><span class=\"line\">        viewHolder.itemView.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取位置</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> position=viewHolder.adapterPosition</span><br><span class=\"line\">            <span class=\"comment\">//获取实体类实例</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> fruit=fruitList[position]</span><br><span class=\"line\">            <span class=\"comment\">//具体事件</span></span><br><span class=\"line\">            Toast.makeText(parent.context,<span class=\"string\">&quot;you clivked view <span class=\"subst\">$&#123;fruit.name&#125;</span>&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        viewHolder.fruitImage.setOnClickListener &#123;</span><br><span class=\"line\">             <span class=\"comment\">//获取位置</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> position=viewHolder.adapterPosition</span><br><span class=\"line\">            <span class=\"comment\">//获取实体类实例</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> fruit=fruitList[position]</span><br><span class=\"line\">             <span class=\"comment\">//具体事件</span></span><br><span class=\"line\">            Toast.makeText(parent.context,<span class=\"string\">&quot;you clivked image <span class=\"subst\">$&#123;fruit.name&#125;</span>&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> viewHolder</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//对RecyclerView的子项数据进行赋值</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(<span class=\"string\">&quot;SuspiciousIndentation&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(holder: <span class=\"type\">ViewHolder</span>, position: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> fruit =fruitList[position]</span><br><span class=\"line\">        holder.fruitImage.setImageResource(fruit.imageId)</span><br><span class=\"line\">        holder.fruitName.text=fruit.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span></span>=fruitList.size</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;60dp&quot;</span>&gt;</span><br><span class=\"line\">    &lt;ImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/fruit_image&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;40dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;40dp&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_vertical&quot;</span></span><br><span class=\"line\">        android:layout_marginLeft=<span class=\"string\">&quot;10dp&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/fruitName&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_vertical&quot;</span></span><br><span class=\"line\">        android:layout_marginLeft=<span class=\"string\">&quot;10dp&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> fruitList=ArrayList&lt;Fruit&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding:ActivityMainBinding</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        <span class=\"comment\">//初始化数据</span></span><br><span class=\"line\">        initFruits()</span><br><span class=\"line\">        <span class=\"comment\">//创建LinearLayoutManager对象</span></span><br><span class=\"line\">        <span class=\"comment\">//LayoutManager用于指定布局方式，LinearLayoutManager(this)指线性布局，GridLayoutManager()是网格布局</span></span><br><span class=\"line\">       <span class=\"comment\">//设置布局排列方向(线性布局)</span></span><br><span class=\"line\">       <span class=\"comment\">/* layoutManager.orientation=LinearLayoutManager.HORIZONTAL*/</span></span><br><span class=\"line\">        <span class=\"comment\">//瀑布流布局传入两个参数第一个指定布局的列数，第二个指定布局排列的方向</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> layoutManager=StaggeredGridLayoutManager(<span class=\"number\">3</span>,StaggeredGridLayoutManager.VERTICAL)</span><br><span class=\"line\">        <span class=\"comment\">//将该对象设置到recyclerView中</span></span><br><span class=\"line\">        binding.recyclerView.layoutManager=layoutManager</span><br><span class=\"line\">        <span class=\"comment\">//获取FruitAdapter实例</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> adapter=FruitAdapter(fruitList)</span><br><span class=\"line\">        <span class=\"comment\">//完成适配器设置</span></span><br><span class=\"line\">        binding.recyclerView.adapter=adapter</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initFruits</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        repeat(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Apple&quot;</span>), R.drawable.apple_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Banana&quot;</span>), R.drawable.banana_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Orange&quot;</span>), R.drawable.orange_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Watermelon&quot;</span>), R.drawable.watermelon_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Pear&quot;</span>), R.drawable.pear_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Grape&quot;</span>), R.drawable.grape_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Pineapple&quot;</span>), R.drawable.pineapple_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Strawberry&quot;</span>), R.drawable.strawberry_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Cherry&quot;</span>), R.drawable.cherry_pic))</span><br><span class=\"line\">            fruitList.add(Fruit(getRandomLengthName(<span class=\"string\">&quot;Mango&quot;</span>), R.drawable.mango_pic))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getRandomLengthName</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> n=(<span class=\"number\">1.</span><span class=\"number\">.20</span>).random()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> builder = StringBuilder()</span><br><span class=\"line\">       repeat(n)&#123;</span><br><span class=\"line\">           builder.append(name)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"UI开发(Java)","date":"2025-02-25T12:25:49.000Z","_content":"\n# 常用控件\n\n### TextView\n\n1.android:id定义唯一标识符\n2.android:layout_width指定宽度有match_parent和wrap_content两个选项，第一个表示当前控件大小和父布局大小一样，第二个表示当前控件大小刚好能包住里面的内容\n3.android:layout_height指定高度，选项和上相同\n4.android:text指定文本显示的内容\n5.android:gravity指定文字对齐方式可选值有top,bottom,left,right,center等，可以用“|”来指定多个值\n6.android:textSize指定文字大小，用sp做单位\n7.android:textColor指定文字颜色\n\n```java\n <TextView\n        android:id=\"@+id/text_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:gravity=\"center\"\n        android:text=\"@string/this_is_textview\"\n        android:textColor=\"#00ff00\"\n        android:textSize=\"24sp\"\n       />\n```\n\n### Button\n\n1.android:id确定唯一标识符\n2.android:layout_width指定宽度\n3.android:layout_height指定高度\n4.android:text指定文本内容\n5.android:textAllCaps是否对字母进行大写转换\n**含有的板块与TextView中的差不多，其余的不再过多赘述**\n**重点:设定完按钮后在活动中要给其注册一个相应的点击事件(注册一个监听器)**\n\n```java\n <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/button\"\n        android:textAllCaps=\"false\" />\n```\n\n```java\n Button button=(Button) findViewById(R.id.button);\n button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                ProgressDialog dialog = new ProgressDialog(MainActivity.this);\n               //此处添加逻辑代码\n            }\n        });\n```\n\n### EditText\n\n1.android:id唯一标识符\n2.android:layout-width确定宽度\n3.android:layout_height高度\n4.android:hint指定一段提示性文字，输入内容后文字会自己消失\n5.android:maxLines指定文本输入的最大行数\n6.EditText与Button可以结合使用，首先使用findViewById方法得到EditText的实例，然后在按钮点击事件里修改通过getText获取文本内容利用toString转换成字符串，最后利用Toast将内容通过按钮显示\n\n```java\n  <EditText\n        android:id=\"@+id/edit_text\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"@string/type_something_here\"\n        android:textSize=\"20sp\"\n        android:maxLines=\"2\"\n        />\n```\n\n```java\n private EditText editText;\n  @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n         Button button=(Button) findViewById(R.id.button);\n        editText=(EditText) findViewById(R.id.edit_text);    \n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n              String inputText=editText.getText().toString;\n              Toast.makeText(MainActivity.this,inputText,Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n```\n\n### ImageView\n\n1.android:id\n2.android:layout_width\n3.android:layout_height\n4.android:src选择显示的图片\n5.可以和按钮一起使用动态的更改图片\n\n```java\n  <ImageView\n        android:id=\"@+id/image_view\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:src=\"@drawable/img_1\"\n         />\n```\n\n```java\n    private ImageView imageView;  \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button button=(Button) findViewById(R.id.button);\n         imageView=(ImageView) findViewById(R.id.image_view) ;\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n             imageView.setImageResource(R.drawable.img_2);\n            }\n        });\n    }\n```\n\n### ProgressBar\n\n用途:用于显示进度条\n1.android:id\n2.android:layout_width\n3.android:layout_height\n4.android:max设置进度条最大值\n5.style设置进度条的种类\n6.通过按钮可以实现，进度条可见变为不可见，不可见变为可见\n7.通过按钮可以使进度条发生动态变化\n\n```java\n <ProgressBar\n        android:id=\"@+id/progress_bar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        style=\"?android:attr/progressBarStyleHorizontal\"\n        android:max=\"100\"/>\n```\n\n```java\n   private ProgressBar progressBar;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button button=(Button) findViewById(R.id.button);\n         progressBar=(ProgressBar) findViewById(R.id.progress_bar);\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n              /*6.if(progressBar.getVisibility()==View.GONE){\n              progressBar.setVisibility(View.VISIBLE);\n              } else{\n              progressBar.setVisibility(View.GONE);\n              }\n              */\n              /*7.int progress = progressBar.getProgress();\n                  progress=progress+10;\n                  progressBar.setProgress(progress);\n              */\n            }\n        });\n    }\n```\n\n### AlertDialog\n\n作用:弹出对话框，用于提示一些重要信息\n\n```java\n                AlertDialog.Builder dialog = new AlertDialog.Builder(MainActivity.this);\n                dialog.setTitle(\"This is a dialog\");//标题\n                dialog.setMessage(\"Something important\");//内容\n                dialog.setCancelable(false);//是否可以通过点击其他区域来关闭对话框\n                dialog.setPositiveButton(\"OK\",new DialogInterface.OnClickListener(){\n                    @Overrid\n                    public void Click(DialogInterface dialogInterface,int i){}\n                });\n                dialog.setNegativeButton(\"No\",new DialogInterface.OnClickListener(){\n                    @Overrid\n                    public void Click(DialogInterface dialogInterface,int i){}\n                });\n                dialog.show();\n```\n\n### ProgressDialog\n\n作用:同AlertDialog相似，不过是在弹出的窗口中有一个进度条\n\n```java\n                ProgressDialog dialog = new ProgressDialog(MainActivity.this);\n                dialog.setTitle(\"This is a dialog\");//标题\n                dialog.setMessage(\"Loading......\");//内容\n                dialog.setCancelable(true);//是否可以通过点击其他区域来关闭对话框\n                dialog.show();\n```\n\n如果setCancelable()中传入的是false，此时无法通过back键退出，这时在数据加载完成之后一定要调用dismiss()方法关闭对话框\n\n------\n\n\n\n# 四种基本布局\n\n### 线性布局\n\n又叫做<LinearLayout>\n1.android:orientation表示排列方向，有两个选择vertical垂直方向，如果排列方向是这个时高度不能是match_parent，horizontal表示水平方向，如果排列方向是这个时，控件宽度不能设置为match_parent,默认为horizontal\n2.android:layout_width宽度\n3.android:layout_height高度\n4.android:layout_gravity指定控件在布局中的对齐方式，如果排列方式是horizontal是只有垂直方向上的对齐方式才会生效，排列方向是vertical时与之相同\n\n![](../img/img15.jpg)\n\n\n\n5.android:layout_weight这个属性允许我们使用比例的方式来指定控件的大小。使用这个时要把layout_width的值设为“0dp”\n\n![](../img/img16.jpg)\n\n使用这个属性时，也可以仅部分控件使用可以达到更好的效果\n\n### 相对布局\n\nRelativeLayout又称相对布局，也是一种非常常用的布局，它可以通过定位的方式让控件出现在布局的任意位置\n1.相对于父布局进行定位\n\n![](../img/img17.jpg)\n\n![](../img/img18.jpg)\n\n2.相对于控件进行定位:\nandroid:layout_above一个控件在另一个控件上面\nandroid:layout_below一个控件在另一个控件下面\nandroid:layout_toLeft0f一个控件在另一个控件左侧\nandroid:layout_toRight0f一个控件在另一个控件右侧\n注:引用的控件应该放在前面\n\n![](../img/img19.jpg)\n\n![](../img/img20.jpg)\n\n3.其他定位属性:\nandroid:layout_alignLeft表示让一个控件的左边缘同另一个控件左边缘对齐\nandroid:layout_alignRight表示让一个控件的右边缘同另一个控件右边缘对齐\nandroid:layout_alignTop\nandroid:layout_alignBottom\n\n### 帧布局\n\nFrameLayout又叫帧布局，应用场景较少，所有控件都会默认摆在布局左上角，也可以使用android:layout_gravity进行对齐操作，此方法应用场景过少，不做过多赘述\n\n### 百分比布局\n\n百分比布局是对帧布局和相对布局两种布局方式的扩展\n重点:使用前要先添加百分比布局库的依赖\n\n![](../img/img21.jpg)\n\n(1)帧布局的百分比布局\n需要定义一个app空间\n\n```java\nxmlns:app=“http://schemas.android.com/apk/res-auto”\n```\n\n1.app:layout_widthPercent\n2.app:layout_heightPercent\n其余继承FrameLayout\n\n![](../img/img22.jpg)\n\n![](../img/img23.jpg)\n\n(2)相对布局的百分比布局:与上述相似\n\n------\n\n\n\n# 创建自定义控件\n\n### 引入布局\n\n1.新建一个布局，在里面写需要的代码\n\n```java\n<include layout=\"@layout/title\"/>\n```\n\n2.利用include语句引入\n3.利用ActionBar隐藏自带标题\n\n```java\nActionBar actionBar=getSupportActionBar();\nif(actionBar!=null){\n    actionBar.hide();\n}\n```\n\n### 创建自定义控件\n\n1.创建通用的布局代码。\n\n2.新建一个类继承自LinearLayout\n\n```java\npublic class TitleLayout extends LinearLayout {\n    public TitleLayout(Context context, AttributeSet attrs){\n        super(context,attrs);\n        LayoutInflater.from(context).inflate(R.layout.title,this);\n        }\n```\n\n3.将创建好的控件添加到布局文件中\n\n```java\n<com.example.uicustomviews.TitleLayout\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"wrap_content\"/>\n\n```\n\n4.可以为按钮注册点击事件在新建那个类中\n\n```java\npublic class TitleLayout extends LinearLayout {\n    public TitleLayout(Context context, AttributeSet attrs){\n        super(context,attrs);\n        LayoutInflater.from(context).inflate(R.layout.title,this);\n        Button titleBack = (Button) findViewById(R.id.title_back);\n        Button titleEdit=(Button) findViewById(R.id.title_edit);\n        titleBack.setOnClickListener(new View.OnClickListener(){\n            @Override\n            public void onClick(View view) {\n                ( (Activity) getContext()).finish();\n            }\n        });\n        titleEdit.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Toast.makeText(getContext(), \"You clicked \", Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n}\n```\n\n------\n\n\n\n# ListView\n\n### ListView的简单用法\n\n以一个数组数据进行举例讲解\n1.在布局中直接加入<ListView>布局\n2.数组中的数据无法直接传给ListView,故需借助适配器完成，这里推荐使用ArrayAdapter,这里需要传入三个数据上下文，Listview子项布局id及适配数据\n3.创建一个listview对象调用setAdapter传入适配器，这样就关联好了\n\n```java\n   <ListView\n        android:id=\"@+id/list_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n```\n\n![](../img/img24.jpg)\n\n### 定制ListView界面\n\n1.先定义一个实体类作为listview的适配类型\n\n![](../img/img25.jpg)\n\n2.然后给listview的子项指定一个自定义的布局，用imageview显示图片，textview显示名字\n\n![](../img/img26.jpg)\n\n3.接下来创建一个自定义适配器继承自ArrayAdapter,将上下文，子项布局的id和数据都传入进来，通过getItem方法获取实例，然后使用LayoutInflater来为子项加载布局，这里LayoutInflater中的inflate方法接收三个数据，第三个参数指定为false表示只让父布局中声明的layout属性失效，但不为这个View添加父布局，因为一旦View有了父布局，它就不能再添加到ListView中了\n\n![](../img/img27.jpg)\n\n4.添加一个initFruits方法，对数据进行初始化，将水果名称及图片这些数据传入列表中，并利用新建的那个适配器传递给ListView\n\n![](../img/img28.jpg)\n\n![](../img/img29.jpg)\n\n### 提升ListView运行效率\n\n主要在适配器中进行修改\n1.原本布局需要多次重复加载，这样性能很低，所以可以利用convertView对其进行修改，用它来对布局进行缓存，重复利用。\n2.控件也需要多次创建，这个可以通过建立一个内部类viewHolder对控件进行缓存，利用setTag进行缓存，用getTag进行取出，可以得到更好的性能\n\n![](../img/img30.jpg)\n\n![](../img/img31.jpg)\n\n### ListView的点击事件\n\n```java\n        ListView listView=(ListView) findViewById(R.id.list_view);\n        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n                Fruit fruit=fruitList.get(i);\n                Toast.makeText(MainActivity.this, fruit.getName(), Toast.LENGTH_SHORT).show();\n            }\n        });\n```\n\n------\n\n# RecyclerView\n\n### RecyclerView基本用法\n\n增强版的ListView\n使用时也需要提前添加依赖库\n\n```kotlin\nimplementation (\"androidx.recyclerview:recyclerview:1.3.2\")\n```\n\n1.首先创建一个新的类作为适配类型，创建一个子项布局\n2.创建一个适配器让这个适配器继承自RecyclerView.Adapter,并把泛型指定为FruitAdapter.ViewHolder.\n先建立一个内部类，传入一个参数 这个参数通常是子项的最外层布局，通过findViewById获取实例，然后通过其中的构造函数将数据源传入并赋值给一个全局变量，由于其继承自RecyclerView.Adapter所以要重写onCreateViewHolder,onBindViewHolder,getItemCount三个方法，第一个用于创建ViewHolder实例，第二个用于对数据进行赋值，第三个得到有多少个子项\n3.写一个InitFruits方法初始化数据，获取recyclerview实例，然后创建一个LinearLayoutManager对象指定布局方式并将其设置到recyclerView中，创建适配器的实例并将水果数据传入其中，最后建立联系\n\n![](../img/img32.jpg)\n\n![](../img/img33.jpg)\n\n![](../img/img34.jpg)\n\n### 实现横向滚动\n\n在原有的代码上进行少量修改：\n1.修改fruit_item中的代码，将元素改为垂直排列，将ImageView和TextView改为水平居中\n2.在主活动中添加layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL)即可\n\n![](../img/img35.jpg)\n\n### 实现瀑布流布局\n\n瀑布流布局(GridLayoutManager用于实现网格布局，StaggeredGridLayoutManager用于实现瀑布流布局)\n在原有代码上修改：\n1.首先对fruit_item进行细微修改\n2.在主活动onCreate方法中加入一句代码\n\n![](../img/img36.jpg)\n\n接受俩参数，第一个用于指定列数，第二个用于指定布局排列方式，到这里瀑布式布局已经完成了，但还可以用一个小技巧使观察的更清晰\n3.创建一个getRandomLengthName方法，先利用random创造一个随机数，然后将名字重复生成\n\n![](../img/img37.jpg)\n\n### RecyclerView点击事件\n\n无法直接全部直接注册监听器，需要对具体的View分别注册\n1.先修改ViewHolder在其中加入变量fruitView来保存子项最外层布局\n2.在onCreateViewHolder中注册点击事件，在点击事件中先获取用户点击的position，拿到相应的实例，再用Toast弹出不同的内容\n\n![](../img/img38.jpg)\n\n------\n\n","source":"_posts/UI开发.md","raw":"---\ntitle: UI开发(Java)\ndate: 2025-02-25 20:25:49\ncategories:\n- Android(Java版)\ntags:\n---\n\n# 常用控件\n\n### TextView\n\n1.android:id定义唯一标识符\n2.android:layout_width指定宽度有match_parent和wrap_content两个选项，第一个表示当前控件大小和父布局大小一样，第二个表示当前控件大小刚好能包住里面的内容\n3.android:layout_height指定高度，选项和上相同\n4.android:text指定文本显示的内容\n5.android:gravity指定文字对齐方式可选值有top,bottom,left,right,center等，可以用“|”来指定多个值\n6.android:textSize指定文字大小，用sp做单位\n7.android:textColor指定文字颜色\n\n```java\n <TextView\n        android:id=\"@+id/text_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:gravity=\"center\"\n        android:text=\"@string/this_is_textview\"\n        android:textColor=\"#00ff00\"\n        android:textSize=\"24sp\"\n       />\n```\n\n### Button\n\n1.android:id确定唯一标识符\n2.android:layout_width指定宽度\n3.android:layout_height指定高度\n4.android:text指定文本内容\n5.android:textAllCaps是否对字母进行大写转换\n**含有的板块与TextView中的差不多，其余的不再过多赘述**\n**重点:设定完按钮后在活动中要给其注册一个相应的点击事件(注册一个监听器)**\n\n```java\n <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/button\"\n        android:textAllCaps=\"false\" />\n```\n\n```java\n Button button=(Button) findViewById(R.id.button);\n button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                ProgressDialog dialog = new ProgressDialog(MainActivity.this);\n               //此处添加逻辑代码\n            }\n        });\n```\n\n### EditText\n\n1.android:id唯一标识符\n2.android:layout-width确定宽度\n3.android:layout_height高度\n4.android:hint指定一段提示性文字，输入内容后文字会自己消失\n5.android:maxLines指定文本输入的最大行数\n6.EditText与Button可以结合使用，首先使用findViewById方法得到EditText的实例，然后在按钮点击事件里修改通过getText获取文本内容利用toString转换成字符串，最后利用Toast将内容通过按钮显示\n\n```java\n  <EditText\n        android:id=\"@+id/edit_text\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"@string/type_something_here\"\n        android:textSize=\"20sp\"\n        android:maxLines=\"2\"\n        />\n```\n\n```java\n private EditText editText;\n  @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n         Button button=(Button) findViewById(R.id.button);\n        editText=(EditText) findViewById(R.id.edit_text);    \n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n              String inputText=editText.getText().toString;\n              Toast.makeText(MainActivity.this,inputText,Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n```\n\n### ImageView\n\n1.android:id\n2.android:layout_width\n3.android:layout_height\n4.android:src选择显示的图片\n5.可以和按钮一起使用动态的更改图片\n\n```java\n  <ImageView\n        android:id=\"@+id/image_view\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:src=\"@drawable/img_1\"\n         />\n```\n\n```java\n    private ImageView imageView;  \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button button=(Button) findViewById(R.id.button);\n         imageView=(ImageView) findViewById(R.id.image_view) ;\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n             imageView.setImageResource(R.drawable.img_2);\n            }\n        });\n    }\n```\n\n### ProgressBar\n\n用途:用于显示进度条\n1.android:id\n2.android:layout_width\n3.android:layout_height\n4.android:max设置进度条最大值\n5.style设置进度条的种类\n6.通过按钮可以实现，进度条可见变为不可见，不可见变为可见\n7.通过按钮可以使进度条发生动态变化\n\n```java\n <ProgressBar\n        android:id=\"@+id/progress_bar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        style=\"?android:attr/progressBarStyleHorizontal\"\n        android:max=\"100\"/>\n```\n\n```java\n   private ProgressBar progressBar;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button button=(Button) findViewById(R.id.button);\n         progressBar=(ProgressBar) findViewById(R.id.progress_bar);\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n              /*6.if(progressBar.getVisibility()==View.GONE){\n              progressBar.setVisibility(View.VISIBLE);\n              } else{\n              progressBar.setVisibility(View.GONE);\n              }\n              */\n              /*7.int progress = progressBar.getProgress();\n                  progress=progress+10;\n                  progressBar.setProgress(progress);\n              */\n            }\n        });\n    }\n```\n\n### AlertDialog\n\n作用:弹出对话框，用于提示一些重要信息\n\n```java\n                AlertDialog.Builder dialog = new AlertDialog.Builder(MainActivity.this);\n                dialog.setTitle(\"This is a dialog\");//标题\n                dialog.setMessage(\"Something important\");//内容\n                dialog.setCancelable(false);//是否可以通过点击其他区域来关闭对话框\n                dialog.setPositiveButton(\"OK\",new DialogInterface.OnClickListener(){\n                    @Overrid\n                    public void Click(DialogInterface dialogInterface,int i){}\n                });\n                dialog.setNegativeButton(\"No\",new DialogInterface.OnClickListener(){\n                    @Overrid\n                    public void Click(DialogInterface dialogInterface,int i){}\n                });\n                dialog.show();\n```\n\n### ProgressDialog\n\n作用:同AlertDialog相似，不过是在弹出的窗口中有一个进度条\n\n```java\n                ProgressDialog dialog = new ProgressDialog(MainActivity.this);\n                dialog.setTitle(\"This is a dialog\");//标题\n                dialog.setMessage(\"Loading......\");//内容\n                dialog.setCancelable(true);//是否可以通过点击其他区域来关闭对话框\n                dialog.show();\n```\n\n如果setCancelable()中传入的是false，此时无法通过back键退出，这时在数据加载完成之后一定要调用dismiss()方法关闭对话框\n\n------\n\n\n\n# 四种基本布局\n\n### 线性布局\n\n又叫做<LinearLayout>\n1.android:orientation表示排列方向，有两个选择vertical垂直方向，如果排列方向是这个时高度不能是match_parent，horizontal表示水平方向，如果排列方向是这个时，控件宽度不能设置为match_parent,默认为horizontal\n2.android:layout_width宽度\n3.android:layout_height高度\n4.android:layout_gravity指定控件在布局中的对齐方式，如果排列方式是horizontal是只有垂直方向上的对齐方式才会生效，排列方向是vertical时与之相同\n\n![](../img/img15.jpg)\n\n\n\n5.android:layout_weight这个属性允许我们使用比例的方式来指定控件的大小。使用这个时要把layout_width的值设为“0dp”\n\n![](../img/img16.jpg)\n\n使用这个属性时，也可以仅部分控件使用可以达到更好的效果\n\n### 相对布局\n\nRelativeLayout又称相对布局，也是一种非常常用的布局，它可以通过定位的方式让控件出现在布局的任意位置\n1.相对于父布局进行定位\n\n![](../img/img17.jpg)\n\n![](../img/img18.jpg)\n\n2.相对于控件进行定位:\nandroid:layout_above一个控件在另一个控件上面\nandroid:layout_below一个控件在另一个控件下面\nandroid:layout_toLeft0f一个控件在另一个控件左侧\nandroid:layout_toRight0f一个控件在另一个控件右侧\n注:引用的控件应该放在前面\n\n![](../img/img19.jpg)\n\n![](../img/img20.jpg)\n\n3.其他定位属性:\nandroid:layout_alignLeft表示让一个控件的左边缘同另一个控件左边缘对齐\nandroid:layout_alignRight表示让一个控件的右边缘同另一个控件右边缘对齐\nandroid:layout_alignTop\nandroid:layout_alignBottom\n\n### 帧布局\n\nFrameLayout又叫帧布局，应用场景较少，所有控件都会默认摆在布局左上角，也可以使用android:layout_gravity进行对齐操作，此方法应用场景过少，不做过多赘述\n\n### 百分比布局\n\n百分比布局是对帧布局和相对布局两种布局方式的扩展\n重点:使用前要先添加百分比布局库的依赖\n\n![](../img/img21.jpg)\n\n(1)帧布局的百分比布局\n需要定义一个app空间\n\n```java\nxmlns:app=“http://schemas.android.com/apk/res-auto”\n```\n\n1.app:layout_widthPercent\n2.app:layout_heightPercent\n其余继承FrameLayout\n\n![](../img/img22.jpg)\n\n![](../img/img23.jpg)\n\n(2)相对布局的百分比布局:与上述相似\n\n------\n\n\n\n# 创建自定义控件\n\n### 引入布局\n\n1.新建一个布局，在里面写需要的代码\n\n```java\n<include layout=\"@layout/title\"/>\n```\n\n2.利用include语句引入\n3.利用ActionBar隐藏自带标题\n\n```java\nActionBar actionBar=getSupportActionBar();\nif(actionBar!=null){\n    actionBar.hide();\n}\n```\n\n### 创建自定义控件\n\n1.创建通用的布局代码。\n\n2.新建一个类继承自LinearLayout\n\n```java\npublic class TitleLayout extends LinearLayout {\n    public TitleLayout(Context context, AttributeSet attrs){\n        super(context,attrs);\n        LayoutInflater.from(context).inflate(R.layout.title,this);\n        }\n```\n\n3.将创建好的控件添加到布局文件中\n\n```java\n<com.example.uicustomviews.TitleLayout\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"wrap_content\"/>\n\n```\n\n4.可以为按钮注册点击事件在新建那个类中\n\n```java\npublic class TitleLayout extends LinearLayout {\n    public TitleLayout(Context context, AttributeSet attrs){\n        super(context,attrs);\n        LayoutInflater.from(context).inflate(R.layout.title,this);\n        Button titleBack = (Button) findViewById(R.id.title_back);\n        Button titleEdit=(Button) findViewById(R.id.title_edit);\n        titleBack.setOnClickListener(new View.OnClickListener(){\n            @Override\n            public void onClick(View view) {\n                ( (Activity) getContext()).finish();\n            }\n        });\n        titleEdit.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Toast.makeText(getContext(), \"You clicked \", Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n}\n```\n\n------\n\n\n\n# ListView\n\n### ListView的简单用法\n\n以一个数组数据进行举例讲解\n1.在布局中直接加入<ListView>布局\n2.数组中的数据无法直接传给ListView,故需借助适配器完成，这里推荐使用ArrayAdapter,这里需要传入三个数据上下文，Listview子项布局id及适配数据\n3.创建一个listview对象调用setAdapter传入适配器，这样就关联好了\n\n```java\n   <ListView\n        android:id=\"@+id/list_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n```\n\n![](../img/img24.jpg)\n\n### 定制ListView界面\n\n1.先定义一个实体类作为listview的适配类型\n\n![](../img/img25.jpg)\n\n2.然后给listview的子项指定一个自定义的布局，用imageview显示图片，textview显示名字\n\n![](../img/img26.jpg)\n\n3.接下来创建一个自定义适配器继承自ArrayAdapter,将上下文，子项布局的id和数据都传入进来，通过getItem方法获取实例，然后使用LayoutInflater来为子项加载布局，这里LayoutInflater中的inflate方法接收三个数据，第三个参数指定为false表示只让父布局中声明的layout属性失效，但不为这个View添加父布局，因为一旦View有了父布局，它就不能再添加到ListView中了\n\n![](../img/img27.jpg)\n\n4.添加一个initFruits方法，对数据进行初始化，将水果名称及图片这些数据传入列表中，并利用新建的那个适配器传递给ListView\n\n![](../img/img28.jpg)\n\n![](../img/img29.jpg)\n\n### 提升ListView运行效率\n\n主要在适配器中进行修改\n1.原本布局需要多次重复加载，这样性能很低，所以可以利用convertView对其进行修改，用它来对布局进行缓存，重复利用。\n2.控件也需要多次创建，这个可以通过建立一个内部类viewHolder对控件进行缓存，利用setTag进行缓存，用getTag进行取出，可以得到更好的性能\n\n![](../img/img30.jpg)\n\n![](../img/img31.jpg)\n\n### ListView的点击事件\n\n```java\n        ListView listView=(ListView) findViewById(R.id.list_view);\n        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n                Fruit fruit=fruitList.get(i);\n                Toast.makeText(MainActivity.this, fruit.getName(), Toast.LENGTH_SHORT).show();\n            }\n        });\n```\n\n------\n\n# RecyclerView\n\n### RecyclerView基本用法\n\n增强版的ListView\n使用时也需要提前添加依赖库\n\n```kotlin\nimplementation (\"androidx.recyclerview:recyclerview:1.3.2\")\n```\n\n1.首先创建一个新的类作为适配类型，创建一个子项布局\n2.创建一个适配器让这个适配器继承自RecyclerView.Adapter,并把泛型指定为FruitAdapter.ViewHolder.\n先建立一个内部类，传入一个参数 这个参数通常是子项的最外层布局，通过findViewById获取实例，然后通过其中的构造函数将数据源传入并赋值给一个全局变量，由于其继承自RecyclerView.Adapter所以要重写onCreateViewHolder,onBindViewHolder,getItemCount三个方法，第一个用于创建ViewHolder实例，第二个用于对数据进行赋值，第三个得到有多少个子项\n3.写一个InitFruits方法初始化数据，获取recyclerview实例，然后创建一个LinearLayoutManager对象指定布局方式并将其设置到recyclerView中，创建适配器的实例并将水果数据传入其中，最后建立联系\n\n![](../img/img32.jpg)\n\n![](../img/img33.jpg)\n\n![](../img/img34.jpg)\n\n### 实现横向滚动\n\n在原有的代码上进行少量修改：\n1.修改fruit_item中的代码，将元素改为垂直排列，将ImageView和TextView改为水平居中\n2.在主活动中添加layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL)即可\n\n![](../img/img35.jpg)\n\n### 实现瀑布流布局\n\n瀑布流布局(GridLayoutManager用于实现网格布局，StaggeredGridLayoutManager用于实现瀑布流布局)\n在原有代码上修改：\n1.首先对fruit_item进行细微修改\n2.在主活动onCreate方法中加入一句代码\n\n![](../img/img36.jpg)\n\n接受俩参数，第一个用于指定列数，第二个用于指定布局排列方式，到这里瀑布式布局已经完成了，但还可以用一个小技巧使观察的更清晰\n3.创建一个getRandomLengthName方法，先利用random创造一个随机数，然后将名字重复生成\n\n![](../img/img37.jpg)\n\n### RecyclerView点击事件\n\n无法直接全部直接注册监听器，需要对具体的View分别注册\n1.先修改ViewHolder在其中加入变量fruitView来保存子项最外层布局\n2.在onCreateViewHolder中注册点击事件，在点击事件中先获取用户点击的position，拿到相应的实例，再用Toast弹出不同的内容\n\n![](../img/img38.jpg)\n\n------\n\n","slug":"UI开发","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gca001gs4s721becrka","content":"<h1 id=\"常用控件\"><a href=\"#常用控件\" class=\"headerlink\" title=\"常用控件\"></a>常用控件</h1><h3 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h3><p>1.android:id定义唯一标识符<br>2.android:layout_width指定宽度有match_parent和wrap_content两个选项，第一个表示当前控件大小和父布局大小一样，第二个表示当前控件大小刚好能包住里面的内容<br>3.android:layout_height指定高度，选项和上相同<br>4.android:text指定文本显示的内容<br>5.android:gravity指定文字对齐方式可选值有top,bottom,left,right,center等，可以用“|”来指定多个值<br>6.android:textSize指定文字大小，用sp做单位<br>7.android:textColor指定文字颜色</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">       android:id=<span class=\"string\">&quot;@+id/text_view&quot;</span></span><br><span class=\"line\">       android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">       android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">       android:gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">       android:text=<span class=\"string\">&quot;@string/this_is_textview&quot;</span></span><br><span class=\"line\">       android:textColor=<span class=\"string\">&quot;#00ff00&quot;</span></span><br><span class=\"line\">       android:textSize=<span class=\"string\">&quot;24sp&quot;</span></span><br><span class=\"line\">      /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h3><p>1.android:id确定唯一标识符<br>2.android:layout_width指定宽度<br>3.android:layout_height指定高度<br>4.android:text指定文本内容<br>5.android:textAllCaps是否对字母进行大写转换<br><strong>含有的板块与TextView中的差不多，其余的不再过多赘述</strong><br><strong>重点:设定完按钮后在活动中要给其注册一个相应的点击事件(注册一个监听器)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">       android:id=<span class=\"string\">&quot;@+id/button&quot;</span></span><br><span class=\"line\">       android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">       android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">       android:text=<span class=\"string\">&quot;@string/button&quot;</span></span><br><span class=\"line\">       android:textAllCaps=<span class=\"string\">&quot;false&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button=(Button) findViewById(R.id.button);</span><br><span class=\"line\">button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">               <span class=\"type\">ProgressDialog</span> <span class=\"variable\">dialog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProgressDialog</span>(MainActivity.<span class=\"built_in\">this</span>);</span><br><span class=\"line\">              <span class=\"comment\">//此处添加逻辑代码</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"EditText\"><a href=\"#EditText\" class=\"headerlink\" title=\"EditText\"></a>EditText</h3><p>1.android:id唯一标识符<br>2.android:layout-width确定宽度<br>3.android:layout_height高度<br>4.android:hint指定一段提示性文字，输入内容后文字会自己消失<br>5.android:maxLines指定文本输入的最大行数<br>6.EditText与Button可以结合使用，首先使用findViewById方法得到EditText的实例，然后在按钮点击事件里修改通过getText获取文本内容利用toString转换成字符串，最后利用Toast将内容通过按钮显示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;EditText</span><br><span class=\"line\">      android:id=<span class=\"string\">&quot;@+id/edit_text&quot;</span></span><br><span class=\"line\">      android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">      android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">      android:hint=<span class=\"string\">&quot;@string/type_something_here&quot;</span></span><br><span class=\"line\">      android:textSize=<span class=\"string\">&quot;20sp&quot;</span></span><br><span class=\"line\">      android:maxLines=<span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">      /&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> EditText editText;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">       setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Button button=(Button) findViewById(R.id.button);</span><br><span class=\"line\">       editText=(EditText) findViewById(R.id.edit_text);    </span><br><span class=\"line\">       button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">             String inputText=editText.getText().toString;</span><br><span class=\"line\">             Toast.makeText(MainActivity.<span class=\"built_in\">this</span>,inputText,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ImageView\"><a href=\"#ImageView\" class=\"headerlink\" title=\"ImageView\"></a>ImageView</h3><p>1.android:id<br>2.android:layout_width<br>3.android:layout_height<br>4.android:src选择显示的图片<br>5.可以和按钮一起使用动态的更改图片</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ImageView</span><br><span class=\"line\">      android:id=<span class=\"string\">&quot;@+id/image_view&quot;</span></span><br><span class=\"line\">      android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">      android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">      android:src=<span class=\"string\">&quot;@drawable/img_1&quot;</span></span><br><span class=\"line\">       /&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ImageView imageView;  </span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    Button button=(Button) findViewById(R.id.button);</span><br><span class=\"line\">     imageView=(ImageView) findViewById(R.id.image_view) ;</span><br><span class=\"line\">    button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">         imageView.setImageResource(R.drawable.img_2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ProgressBar\"><a href=\"#ProgressBar\" class=\"headerlink\" title=\"ProgressBar\"></a>ProgressBar</h3><p>用途:用于显示进度条<br>1.android:id<br>2.android:layout_width<br>3.android:layout_height<br>4.android:max设置进度条最大值<br>5.style设置进度条的种类<br>6.通过按钮可以实现，进度条可见变为不可见，不可见变为可见<br>7.通过按钮可以使进度条发生动态变化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ProgressBar</span><br><span class=\"line\">       android:id=<span class=\"string\">&quot;@+id/progress_bar&quot;</span></span><br><span class=\"line\">       android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">       android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">       style=<span class=\"string\">&quot;?android:attr/progressBarStyleHorizontal&quot;</span></span><br><span class=\"line\">       android:max=<span class=\"string\">&quot;100&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ProgressBar progressBar;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">     setContentView(R.layout.activity_main);</span><br><span class=\"line\">     Button button=(Button) findViewById(R.id.button);</span><br><span class=\"line\">      progressBar=(ProgressBar) findViewById(R.id.progress_bar);</span><br><span class=\"line\">     button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">         <span class=\"meta\">@Override</span></span><br><span class=\"line\">         <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">/*6.if(progressBar.getVisibility()==View.GONE)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">           progressBar.setVisibility(View.VISIBLE);</span></span><br><span class=\"line\"><span class=\"comment\">           &#125; else&#123;</span></span><br><span class=\"line\"><span class=\"comment\">           progressBar.setVisibility(View.GONE);</span></span><br><span class=\"line\"><span class=\"comment\">           &#125;</span></span><br><span class=\"line\"><span class=\"comment\">           */</span></span><br><span class=\"line\">           <span class=\"comment\">/*7.int progress = progressBar.getProgress();</span></span><br><span class=\"line\"><span class=\"comment\">               progress=progress+10;</span></span><br><span class=\"line\"><span class=\"comment\">               progressBar.setProgress(progress);</span></span><br><span class=\"line\"><span class=\"comment\">           */</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AlertDialog\"><a href=\"#AlertDialog\" class=\"headerlink\" title=\"AlertDialog\"></a>AlertDialog</h3><p>作用:弹出对话框，用于提示一些重要信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AlertDialog.<span class=\"type\">Builder</span> <span class=\"variable\">dialog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AlertDialog</span>.Builder(MainActivity.<span class=\"built_in\">this</span>);</span><br><span class=\"line\">dialog.setTitle(<span class=\"string\">&quot;This is a dialog&quot;</span>);<span class=\"comment\">//标题</span></span><br><span class=\"line\">dialog.setMessage(<span class=\"string\">&quot;Something important&quot;</span>);<span class=\"comment\">//内容</span></span><br><span class=\"line\">dialog.setCancelable(<span class=\"literal\">false</span>);<span class=\"comment\">//是否可以通过点击其他区域来关闭对话框</span></span><br><span class=\"line\">dialog.setPositiveButton(<span class=\"string\">&quot;OK&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DialogInterface</span>.OnClickListener()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Overrid</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Click</span><span class=\"params\">(DialogInterface dialogInterface,<span class=\"type\">int</span> i)</span>&#123;&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">dialog.setNegativeButton(<span class=\"string\">&quot;No&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DialogInterface</span>.OnClickListener()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Overrid</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Click</span><span class=\"params\">(DialogInterface dialogInterface,<span class=\"type\">int</span> i)</span>&#123;&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">dialog.show();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ProgressDialog\"><a href=\"#ProgressDialog\" class=\"headerlink\" title=\"ProgressDialog\"></a>ProgressDialog</h3><p>作用:同AlertDialog相似，不过是在弹出的窗口中有一个进度条</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ProgressDialog</span> <span class=\"variable\">dialog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProgressDialog</span>(MainActivity.<span class=\"built_in\">this</span>);</span><br><span class=\"line\">dialog.setTitle(<span class=\"string\">&quot;This is a dialog&quot;</span>);<span class=\"comment\">//标题</span></span><br><span class=\"line\">dialog.setMessage(<span class=\"string\">&quot;Loading......&quot;</span>);<span class=\"comment\">//内容</span></span><br><span class=\"line\">dialog.setCancelable(<span class=\"literal\">true</span>);<span class=\"comment\">//是否可以通过点击其他区域来关闭对话框</span></span><br><span class=\"line\">dialog.show();</span><br></pre></td></tr></table></figure>\n\n<p>如果setCancelable()中传入的是false，此时无法通过back键退出，这时在数据加载完成之后一定要调用dismiss()方法关闭对话框</p>\n<hr>\n<h1 id=\"四种基本布局\"><a href=\"#四种基本布局\" class=\"headerlink\" title=\"四种基本布局\"></a>四种基本布局</h1><h3 id=\"线性布局\"><a href=\"#线性布局\" class=\"headerlink\" title=\"线性布局\"></a>线性布局</h3><p>又叫做<LinearLayout><br>1.android:orientation表示排列方向，有两个选择vertical垂直方向，如果排列方向是这个时高度不能是match_parent，horizontal表示水平方向，如果排列方向是这个时，控件宽度不能设置为match_parent,默认为horizontal<br>2.android:layout_width宽度<br>3.android:layout_height高度<br>4.android:layout_gravity指定控件在布局中的对齐方式，如果排列方式是horizontal是只有垂直方向上的对齐方式才会生效，排列方向是vertical时与之相同</p>\n<p><img src=\"/../img/img15.jpg\"></p>\n<p>5.android:layout_weight这个属性允许我们使用比例的方式来指定控件的大小。使用这个时要把layout_width的值设为“0dp”</p>\n<p><img src=\"/../img/img16.jpg\"></p>\n<p>使用这个属性时，也可以仅部分控件使用可以达到更好的效果</p>\n<h3 id=\"相对布局\"><a href=\"#相对布局\" class=\"headerlink\" title=\"相对布局\"></a>相对布局</h3><p>RelativeLayout又称相对布局，也是一种非常常用的布局，它可以通过定位的方式让控件出现在布局的任意位置<br>1.相对于父布局进行定位</p>\n<p><img src=\"/../img/img17.jpg\"></p>\n<p><img src=\"/../img/img18.jpg\"></p>\n<p>2.相对于控件进行定位:<br>android:layout_above一个控件在另一个控件上面<br>android:layout_below一个控件在另一个控件下面<br>android:layout_toLeft0f一个控件在另一个控件左侧<br>android:layout_toRight0f一个控件在另一个控件右侧<br>注:引用的控件应该放在前面</p>\n<p><img src=\"/../img/img19.jpg\"></p>\n<p><img src=\"/../img/img20.jpg\"></p>\n<p>3.其他定位属性:<br>android:layout_alignLeft表示让一个控件的左边缘同另一个控件左边缘对齐<br>android:layout_alignRight表示让一个控件的右边缘同另一个控件右边缘对齐<br>android:layout_alignTop<br>android:layout_alignBottom</p>\n<h3 id=\"帧布局\"><a href=\"#帧布局\" class=\"headerlink\" title=\"帧布局\"></a>帧布局</h3><p>FrameLayout又叫帧布局，应用场景较少，所有控件都会默认摆在布局左上角，也可以使用android:layout_gravity进行对齐操作，此方法应用场景过少，不做过多赘述</p>\n<h3 id=\"百分比布局\"><a href=\"#百分比布局\" class=\"headerlink\" title=\"百分比布局\"></a>百分比布局</h3><p>百分比布局是对帧布局和相对布局两种布局方式的扩展<br>重点:使用前要先添加百分比布局库的依赖</p>\n<p><img src=\"/../img/img21.jpg\"></p>\n<p>(1)帧布局的百分比布局<br>需要定义一个app空间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlns:app=“http:<span class=\"comment\">//schemas.android.com/apk/res-auto”</span></span><br></pre></td></tr></table></figure>\n\n<p>1.app:layout_widthPercent<br>2.app:layout_heightPercent<br>其余继承FrameLayout</p>\n<p><img src=\"/../img/img22.jpg\"></p>\n<p><img src=\"/../img/img23.jpg\"></p>\n<p>(2)相对布局的百分比布局:与上述相似</p>\n<hr>\n<h1 id=\"创建自定义控件\"><a href=\"#创建自定义控件\" class=\"headerlink\" title=\"创建自定义控件\"></a>创建自定义控件</h1><h3 id=\"引入布局\"><a href=\"#引入布局\" class=\"headerlink\" title=\"引入布局\"></a>引入布局</h3><p>1.新建一个布局，在里面写需要的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;include layout=<span class=\"string\">&quot;@layout/title&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2.利用include语句引入<br>3.利用ActionBar隐藏自带标题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ActionBar actionBar=getSupportActionBar();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(actionBar!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    actionBar.hide();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建自定义控件-1\"><a href=\"#创建自定义控件-1\" class=\"headerlink\" title=\"创建自定义控件\"></a>创建自定义控件</h3><p>1.创建通用的布局代码。</p>\n<p>2.新建一个类继承自LinearLayout</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TitleLayout</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LinearLayout</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TitleLayout</span><span class=\"params\">(Context context, AttributeSet attrs)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(context,attrs);</span><br><span class=\"line\">        LayoutInflater.from(context).inflate(R.layout.title,<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.将创建好的控件添加到布局文件中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.example.uicustomviews.TitleLayout</span><br><span class=\"line\">     android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">     android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>4.可以为按钮注册点击事件在新建那个类中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TitleLayout</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LinearLayout</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TitleLayout</span><span class=\"params\">(Context context, AttributeSet attrs)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(context,attrs);</span><br><span class=\"line\">        LayoutInflater.from(context).inflate(R.layout.title,<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">titleBack</span> <span class=\"operator\">=</span> (Button) findViewById(R.id.title_back);</span><br><span class=\"line\">        Button titleEdit=(Button) findViewById(R.id.title_edit);</span><br><span class=\"line\">        titleBack.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                ( (Activity) getContext()).finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        titleEdit.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                Toast.makeText(getContext(), <span class=\"string\">&quot;You clicked &quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ListView\"><a href=\"#ListView\" class=\"headerlink\" title=\"ListView\"></a>ListView</h1><h3 id=\"ListView的简单用法\"><a href=\"#ListView的简单用法\" class=\"headerlink\" title=\"ListView的简单用法\"></a>ListView的简单用法</h3><p>以一个数组数据进行举例讲解<br>1.在布局中直接加入<ListView>布局<br>2.数组中的数据无法直接传给ListView,故需借助适配器完成，这里推荐使用ArrayAdapter,这里需要传入三个数据上下文，Listview子项布局id及适配数据<br>3.创建一个listview对象调用setAdapter传入适配器，这样就关联好了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ListView</span><br><span class=\"line\">     android:id=<span class=\"string\">&quot;@+id/list_view&quot;</span></span><br><span class=\"line\">     android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">     android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../img/img24.jpg\"></p>\n<h3 id=\"定制ListView界面\"><a href=\"#定制ListView界面\" class=\"headerlink\" title=\"定制ListView界面\"></a>定制ListView界面</h3><p>1.先定义一个实体类作为listview的适配类型</p>\n<p><img src=\"/../img/img25.jpg\"></p>\n<p>2.然后给listview的子项指定一个自定义的布局，用imageview显示图片，textview显示名字</p>\n<p><img src=\"/../img/img26.jpg\"></p>\n<p>3.接下来创建一个自定义适配器继承自ArrayAdapter,将上下文，子项布局的id和数据都传入进来，通过getItem方法获取实例，然后使用LayoutInflater来为子项加载布局，这里LayoutInflater中的inflate方法接收三个数据，第三个参数指定为false表示只让父布局中声明的layout属性失效，但不为这个View添加父布局，因为一旦View有了父布局，它就不能再添加到ListView中了</p>\n<p><img src=\"/../img/img27.jpg\"></p>\n<p>4.添加一个initFruits方法，对数据进行初始化，将水果名称及图片这些数据传入列表中，并利用新建的那个适配器传递给ListView</p>\n<p><img src=\"/../img/img28.jpg\"></p>\n<p><img src=\"/../img/img29.jpg\"></p>\n<h3 id=\"提升ListView运行效率\"><a href=\"#提升ListView运行效率\" class=\"headerlink\" title=\"提升ListView运行效率\"></a>提升ListView运行效率</h3><p>主要在适配器中进行修改<br>1.原本布局需要多次重复加载，这样性能很低，所以可以利用convertView对其进行修改，用它来对布局进行缓存，重复利用。<br>2.控件也需要多次创建，这个可以通过建立一个内部类viewHolder对控件进行缓存，利用setTag进行缓存，用getTag进行取出，可以得到更好的性能</p>\n<p><img src=\"/../img/img30.jpg\"></p>\n<p><img src=\"/../img/img31.jpg\"></p>\n<h3 id=\"ListView的点击事件\"><a href=\"#ListView的点击事件\" class=\"headerlink\" title=\"ListView的点击事件\"></a>ListView的点击事件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListView listView=(ListView) findViewById(R.id.list_view);</span><br><span class=\"line\">listView.setOnItemClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">AdapterView</span>.OnItemClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; adapterView, View view, <span class=\"type\">int</span> i, <span class=\"type\">long</span> l)</span> &#123;</span><br><span class=\"line\">        Fruit fruit=fruitList.get(i);</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"built_in\">this</span>, fruit.getName(), Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"RecyclerView\"><a href=\"#RecyclerView\" class=\"headerlink\" title=\"RecyclerView\"></a>RecyclerView</h1><h3 id=\"RecyclerView基本用法\"><a href=\"#RecyclerView基本用法\" class=\"headerlink\" title=\"RecyclerView基本用法\"></a>RecyclerView基本用法</h3><p>增强版的ListView<br>使用时也需要提前添加依赖库</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;androidx.recyclerview:recyclerview:1.3.2&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>1.首先创建一个新的类作为适配类型，创建一个子项布局<br>2.创建一个适配器让这个适配器继承自RecyclerView.Adapter,并把泛型指定为FruitAdapter.ViewHolder.<br>先建立一个内部类，传入一个参数 这个参数通常是子项的最外层布局，通过findViewById获取实例，然后通过其中的构造函数将数据源传入并赋值给一个全局变量，由于其继承自RecyclerView.Adapter所以要重写onCreateViewHolder,onBindViewHolder,getItemCount三个方法，第一个用于创建ViewHolder实例，第二个用于对数据进行赋值，第三个得到有多少个子项<br>3.写一个InitFruits方法初始化数据，获取recyclerview实例，然后创建一个LinearLayoutManager对象指定布局方式并将其设置到recyclerView中，创建适配器的实例并将水果数据传入其中，最后建立联系</p>\n<p><img src=\"/../img/img32.jpg\"></p>\n<p><img src=\"/../img/img33.jpg\"></p>\n<p><img src=\"/../img/img34.jpg\"></p>\n<h3 id=\"实现横向滚动\"><a href=\"#实现横向滚动\" class=\"headerlink\" title=\"实现横向滚动\"></a>实现横向滚动</h3><p>在原有的代码上进行少量修改：<br>1.修改fruit_item中的代码，将元素改为垂直排列，将ImageView和TextView改为水平居中<br>2.在主活动中添加layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL)即可</p>\n<p><img src=\"/../img/img35.jpg\"></p>\n<h3 id=\"实现瀑布流布局\"><a href=\"#实现瀑布流布局\" class=\"headerlink\" title=\"实现瀑布流布局\"></a>实现瀑布流布局</h3><p>瀑布流布局(GridLayoutManager用于实现网格布局，StaggeredGridLayoutManager用于实现瀑布流布局)<br>在原有代码上修改：<br>1.首先对fruit_item进行细微修改<br>2.在主活动onCreate方法中加入一句代码</p>\n<p><img src=\"/../img/img36.jpg\"></p>\n<p>接受俩参数，第一个用于指定列数，第二个用于指定布局排列方式，到这里瀑布式布局已经完成了，但还可以用一个小技巧使观察的更清晰<br>3.创建一个getRandomLengthName方法，先利用random创造一个随机数，然后将名字重复生成</p>\n<p><img src=\"/../img/img37.jpg\"></p>\n<h3 id=\"RecyclerView点击事件\"><a href=\"#RecyclerView点击事件\" class=\"headerlink\" title=\"RecyclerView点击事件\"></a>RecyclerView点击事件</h3><p>无法直接全部直接注册监听器，需要对具体的View分别注册<br>1.先修改ViewHolder在其中加入变量fruitView来保存子项最外层布局<br>2.在onCreateViewHolder中注册点击事件，在点击事件中先获取用户点击的position，拿到相应的实例，再用Toast弹出不同的内容</p>\n<p><img src=\"/../img/img38.jpg\"></p>\n<hr>\n","excerpt":"常用控件\nTextView\n1.android:id定义唯一标识符\n2.android:layout_width指定宽度有match_parent和wrap_content两个选项，第一个表示当前控件大小和父布局大小一样，第二个表示当前控件大小刚好能包住里面的内容\n3.android:layout_height指定高度，选项和上相同\n4.android:text指定文本显示的内容\n5.android:gravity指定文字对齐方式可选值有top,bottom,left,right,center等，可以用“|”来指定多个值\n6.android:textSize指定文字大小，用sp做单位\n7.an","more":"<h1 id=\"常用控件\"><a href=\"#常用控件\" class=\"headerlink\" title=\"常用控件\"></a>常用控件</h1><h3 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h3><p>1.android:id定义唯一标识符<br>2.android:layout_width指定宽度有match_parent和wrap_content两个选项，第一个表示当前控件大小和父布局大小一样，第二个表示当前控件大小刚好能包住里面的内容<br>3.android:layout_height指定高度，选项和上相同<br>4.android:text指定文本显示的内容<br>5.android:gravity指定文字对齐方式可选值有top,bottom,left,right,center等，可以用“|”来指定多个值<br>6.android:textSize指定文字大小，用sp做单位<br>7.android:textColor指定文字颜色</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">       android:id=<span class=\"string\">&quot;@+id/text_view&quot;</span></span><br><span class=\"line\">       android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">       android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">       android:gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">       android:text=<span class=\"string\">&quot;@string/this_is_textview&quot;</span></span><br><span class=\"line\">       android:textColor=<span class=\"string\">&quot;#00ff00&quot;</span></span><br><span class=\"line\">       android:textSize=<span class=\"string\">&quot;24sp&quot;</span></span><br><span class=\"line\">      /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h3><p>1.android:id确定唯一标识符<br>2.android:layout_width指定宽度<br>3.android:layout_height指定高度<br>4.android:text指定文本内容<br>5.android:textAllCaps是否对字母进行大写转换<br><strong>含有的板块与TextView中的差不多，其余的不再过多赘述</strong><br><strong>重点:设定完按钮后在活动中要给其注册一个相应的点击事件(注册一个监听器)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">       android:id=<span class=\"string\">&quot;@+id/button&quot;</span></span><br><span class=\"line\">       android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">       android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">       android:text=<span class=\"string\">&quot;@string/button&quot;</span></span><br><span class=\"line\">       android:textAllCaps=<span class=\"string\">&quot;false&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button=(Button) findViewById(R.id.button);</span><br><span class=\"line\">button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">               <span class=\"type\">ProgressDialog</span> <span class=\"variable\">dialog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProgressDialog</span>(MainActivity.<span class=\"built_in\">this</span>);</span><br><span class=\"line\">              <span class=\"comment\">//此处添加逻辑代码</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"EditText\"><a href=\"#EditText\" class=\"headerlink\" title=\"EditText\"></a>EditText</h3><p>1.android:id唯一标识符<br>2.android:layout-width确定宽度<br>3.android:layout_height高度<br>4.android:hint指定一段提示性文字，输入内容后文字会自己消失<br>5.android:maxLines指定文本输入的最大行数<br>6.EditText与Button可以结合使用，首先使用findViewById方法得到EditText的实例，然后在按钮点击事件里修改通过getText获取文本内容利用toString转换成字符串，最后利用Toast将内容通过按钮显示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;EditText</span><br><span class=\"line\">      android:id=<span class=\"string\">&quot;@+id/edit_text&quot;</span></span><br><span class=\"line\">      android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">      android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">      android:hint=<span class=\"string\">&quot;@string/type_something_here&quot;</span></span><br><span class=\"line\">      android:textSize=<span class=\"string\">&quot;20sp&quot;</span></span><br><span class=\"line\">      android:maxLines=<span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">      /&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> EditText editText;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">       setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Button button=(Button) findViewById(R.id.button);</span><br><span class=\"line\">       editText=(EditText) findViewById(R.id.edit_text);    </span><br><span class=\"line\">       button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">             String inputText=editText.getText().toString;</span><br><span class=\"line\">             Toast.makeText(MainActivity.<span class=\"built_in\">this</span>,inputText,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ImageView\"><a href=\"#ImageView\" class=\"headerlink\" title=\"ImageView\"></a>ImageView</h3><p>1.android:id<br>2.android:layout_width<br>3.android:layout_height<br>4.android:src选择显示的图片<br>5.可以和按钮一起使用动态的更改图片</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ImageView</span><br><span class=\"line\">      android:id=<span class=\"string\">&quot;@+id/image_view&quot;</span></span><br><span class=\"line\">      android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">      android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">      android:src=<span class=\"string\">&quot;@drawable/img_1&quot;</span></span><br><span class=\"line\">       /&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ImageView imageView;  </span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    Button button=(Button) findViewById(R.id.button);</span><br><span class=\"line\">     imageView=(ImageView) findViewById(R.id.image_view) ;</span><br><span class=\"line\">    button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">         imageView.setImageResource(R.drawable.img_2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ProgressBar\"><a href=\"#ProgressBar\" class=\"headerlink\" title=\"ProgressBar\"></a>ProgressBar</h3><p>用途:用于显示进度条<br>1.android:id<br>2.android:layout_width<br>3.android:layout_height<br>4.android:max设置进度条最大值<br>5.style设置进度条的种类<br>6.通过按钮可以实现，进度条可见变为不可见，不可见变为可见<br>7.通过按钮可以使进度条发生动态变化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ProgressBar</span><br><span class=\"line\">       android:id=<span class=\"string\">&quot;@+id/progress_bar&quot;</span></span><br><span class=\"line\">       android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">       android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">       style=<span class=\"string\">&quot;?android:attr/progressBarStyleHorizontal&quot;</span></span><br><span class=\"line\">       android:max=<span class=\"string\">&quot;100&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ProgressBar progressBar;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">     setContentView(R.layout.activity_main);</span><br><span class=\"line\">     Button button=(Button) findViewById(R.id.button);</span><br><span class=\"line\">      progressBar=(ProgressBar) findViewById(R.id.progress_bar);</span><br><span class=\"line\">     button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">         <span class=\"meta\">@Override</span></span><br><span class=\"line\">         <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">/*6.if(progressBar.getVisibility()==View.GONE)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">           progressBar.setVisibility(View.VISIBLE);</span></span><br><span class=\"line\"><span class=\"comment\">           &#125; else&#123;</span></span><br><span class=\"line\"><span class=\"comment\">           progressBar.setVisibility(View.GONE);</span></span><br><span class=\"line\"><span class=\"comment\">           &#125;</span></span><br><span class=\"line\"><span class=\"comment\">           */</span></span><br><span class=\"line\">           <span class=\"comment\">/*7.int progress = progressBar.getProgress();</span></span><br><span class=\"line\"><span class=\"comment\">               progress=progress+10;</span></span><br><span class=\"line\"><span class=\"comment\">               progressBar.setProgress(progress);</span></span><br><span class=\"line\"><span class=\"comment\">           */</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AlertDialog\"><a href=\"#AlertDialog\" class=\"headerlink\" title=\"AlertDialog\"></a>AlertDialog</h3><p>作用:弹出对话框，用于提示一些重要信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AlertDialog.<span class=\"type\">Builder</span> <span class=\"variable\">dialog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AlertDialog</span>.Builder(MainActivity.<span class=\"built_in\">this</span>);</span><br><span class=\"line\">dialog.setTitle(<span class=\"string\">&quot;This is a dialog&quot;</span>);<span class=\"comment\">//标题</span></span><br><span class=\"line\">dialog.setMessage(<span class=\"string\">&quot;Something important&quot;</span>);<span class=\"comment\">//内容</span></span><br><span class=\"line\">dialog.setCancelable(<span class=\"literal\">false</span>);<span class=\"comment\">//是否可以通过点击其他区域来关闭对话框</span></span><br><span class=\"line\">dialog.setPositiveButton(<span class=\"string\">&quot;OK&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DialogInterface</span>.OnClickListener()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Overrid</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Click</span><span class=\"params\">(DialogInterface dialogInterface,<span class=\"type\">int</span> i)</span>&#123;&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">dialog.setNegativeButton(<span class=\"string\">&quot;No&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DialogInterface</span>.OnClickListener()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Overrid</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Click</span><span class=\"params\">(DialogInterface dialogInterface,<span class=\"type\">int</span> i)</span>&#123;&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">dialog.show();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ProgressDialog\"><a href=\"#ProgressDialog\" class=\"headerlink\" title=\"ProgressDialog\"></a>ProgressDialog</h3><p>作用:同AlertDialog相似，不过是在弹出的窗口中有一个进度条</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ProgressDialog</span> <span class=\"variable\">dialog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProgressDialog</span>(MainActivity.<span class=\"built_in\">this</span>);</span><br><span class=\"line\">dialog.setTitle(<span class=\"string\">&quot;This is a dialog&quot;</span>);<span class=\"comment\">//标题</span></span><br><span class=\"line\">dialog.setMessage(<span class=\"string\">&quot;Loading......&quot;</span>);<span class=\"comment\">//内容</span></span><br><span class=\"line\">dialog.setCancelable(<span class=\"literal\">true</span>);<span class=\"comment\">//是否可以通过点击其他区域来关闭对话框</span></span><br><span class=\"line\">dialog.show();</span><br></pre></td></tr></table></figure>\n\n<p>如果setCancelable()中传入的是false，此时无法通过back键退出，这时在数据加载完成之后一定要调用dismiss()方法关闭对话框</p>\n<hr>\n<h1 id=\"四种基本布局\"><a href=\"#四种基本布局\" class=\"headerlink\" title=\"四种基本布局\"></a>四种基本布局</h1><h3 id=\"线性布局\"><a href=\"#线性布局\" class=\"headerlink\" title=\"线性布局\"></a>线性布局</h3><p>又叫做<LinearLayout><br>1.android:orientation表示排列方向，有两个选择vertical垂直方向，如果排列方向是这个时高度不能是match_parent，horizontal表示水平方向，如果排列方向是这个时，控件宽度不能设置为match_parent,默认为horizontal<br>2.android:layout_width宽度<br>3.android:layout_height高度<br>4.android:layout_gravity指定控件在布局中的对齐方式，如果排列方式是horizontal是只有垂直方向上的对齐方式才会生效，排列方向是vertical时与之相同</p>\n<p><img src=\"/../img/img15.jpg\"></p>\n<p>5.android:layout_weight这个属性允许我们使用比例的方式来指定控件的大小。使用这个时要把layout_width的值设为“0dp”</p>\n<p><img src=\"/../img/img16.jpg\"></p>\n<p>使用这个属性时，也可以仅部分控件使用可以达到更好的效果</p>\n<h3 id=\"相对布局\"><a href=\"#相对布局\" class=\"headerlink\" title=\"相对布局\"></a>相对布局</h3><p>RelativeLayout又称相对布局，也是一种非常常用的布局，它可以通过定位的方式让控件出现在布局的任意位置<br>1.相对于父布局进行定位</p>\n<p><img src=\"/../img/img17.jpg\"></p>\n<p><img src=\"/../img/img18.jpg\"></p>\n<p>2.相对于控件进行定位:<br>android:layout_above一个控件在另一个控件上面<br>android:layout_below一个控件在另一个控件下面<br>android:layout_toLeft0f一个控件在另一个控件左侧<br>android:layout_toRight0f一个控件在另一个控件右侧<br>注:引用的控件应该放在前面</p>\n<p><img src=\"/../img/img19.jpg\"></p>\n<p><img src=\"/../img/img20.jpg\"></p>\n<p>3.其他定位属性:<br>android:layout_alignLeft表示让一个控件的左边缘同另一个控件左边缘对齐<br>android:layout_alignRight表示让一个控件的右边缘同另一个控件右边缘对齐<br>android:layout_alignTop<br>android:layout_alignBottom</p>\n<h3 id=\"帧布局\"><a href=\"#帧布局\" class=\"headerlink\" title=\"帧布局\"></a>帧布局</h3><p>FrameLayout又叫帧布局，应用场景较少，所有控件都会默认摆在布局左上角，也可以使用android:layout_gravity进行对齐操作，此方法应用场景过少，不做过多赘述</p>\n<h3 id=\"百分比布局\"><a href=\"#百分比布局\" class=\"headerlink\" title=\"百分比布局\"></a>百分比布局</h3><p>百分比布局是对帧布局和相对布局两种布局方式的扩展<br>重点:使用前要先添加百分比布局库的依赖</p>\n<p><img src=\"/../img/img21.jpg\"></p>\n<p>(1)帧布局的百分比布局<br>需要定义一个app空间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlns:app=“http:<span class=\"comment\">//schemas.android.com/apk/res-auto”</span></span><br></pre></td></tr></table></figure>\n\n<p>1.app:layout_widthPercent<br>2.app:layout_heightPercent<br>其余继承FrameLayout</p>\n<p><img src=\"/../img/img22.jpg\"></p>\n<p><img src=\"/../img/img23.jpg\"></p>\n<p>(2)相对布局的百分比布局:与上述相似</p>\n<hr>\n<h1 id=\"创建自定义控件\"><a href=\"#创建自定义控件\" class=\"headerlink\" title=\"创建自定义控件\"></a>创建自定义控件</h1><h3 id=\"引入布局\"><a href=\"#引入布局\" class=\"headerlink\" title=\"引入布局\"></a>引入布局</h3><p>1.新建一个布局，在里面写需要的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;include layout=<span class=\"string\">&quot;@layout/title&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2.利用include语句引入<br>3.利用ActionBar隐藏自带标题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ActionBar actionBar=getSupportActionBar();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(actionBar!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    actionBar.hide();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建自定义控件-1\"><a href=\"#创建自定义控件-1\" class=\"headerlink\" title=\"创建自定义控件\"></a>创建自定义控件</h3><p>1.创建通用的布局代码。</p>\n<p>2.新建一个类继承自LinearLayout</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TitleLayout</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LinearLayout</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TitleLayout</span><span class=\"params\">(Context context, AttributeSet attrs)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(context,attrs);</span><br><span class=\"line\">        LayoutInflater.from(context).inflate(R.layout.title,<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.将创建好的控件添加到布局文件中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.example.uicustomviews.TitleLayout</span><br><span class=\"line\">     android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">     android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>4.可以为按钮注册点击事件在新建那个类中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TitleLayout</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LinearLayout</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TitleLayout</span><span class=\"params\">(Context context, AttributeSet attrs)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(context,attrs);</span><br><span class=\"line\">        LayoutInflater.from(context).inflate(R.layout.title,<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">titleBack</span> <span class=\"operator\">=</span> (Button) findViewById(R.id.title_back);</span><br><span class=\"line\">        Button titleEdit=(Button) findViewById(R.id.title_edit);</span><br><span class=\"line\">        titleBack.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                ( (Activity) getContext()).finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        titleEdit.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                Toast.makeText(getContext(), <span class=\"string\">&quot;You clicked &quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ListView\"><a href=\"#ListView\" class=\"headerlink\" title=\"ListView\"></a>ListView</h1><h3 id=\"ListView的简单用法\"><a href=\"#ListView的简单用法\" class=\"headerlink\" title=\"ListView的简单用法\"></a>ListView的简单用法</h3><p>以一个数组数据进行举例讲解<br>1.在布局中直接加入<ListView>布局<br>2.数组中的数据无法直接传给ListView,故需借助适配器完成，这里推荐使用ArrayAdapter,这里需要传入三个数据上下文，Listview子项布局id及适配数据<br>3.创建一个listview对象调用setAdapter传入适配器，这样就关联好了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ListView</span><br><span class=\"line\">     android:id=<span class=\"string\">&quot;@+id/list_view&quot;</span></span><br><span class=\"line\">     android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">     android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../img/img24.jpg\"></p>\n<h3 id=\"定制ListView界面\"><a href=\"#定制ListView界面\" class=\"headerlink\" title=\"定制ListView界面\"></a>定制ListView界面</h3><p>1.先定义一个实体类作为listview的适配类型</p>\n<p><img src=\"/../img/img25.jpg\"></p>\n<p>2.然后给listview的子项指定一个自定义的布局，用imageview显示图片，textview显示名字</p>\n<p><img src=\"/../img/img26.jpg\"></p>\n<p>3.接下来创建一个自定义适配器继承自ArrayAdapter,将上下文，子项布局的id和数据都传入进来，通过getItem方法获取实例，然后使用LayoutInflater来为子项加载布局，这里LayoutInflater中的inflate方法接收三个数据，第三个参数指定为false表示只让父布局中声明的layout属性失效，但不为这个View添加父布局，因为一旦View有了父布局，它就不能再添加到ListView中了</p>\n<p><img src=\"/../img/img27.jpg\"></p>\n<p>4.添加一个initFruits方法，对数据进行初始化，将水果名称及图片这些数据传入列表中，并利用新建的那个适配器传递给ListView</p>\n<p><img src=\"/../img/img28.jpg\"></p>\n<p><img src=\"/../img/img29.jpg\"></p>\n<h3 id=\"提升ListView运行效率\"><a href=\"#提升ListView运行效率\" class=\"headerlink\" title=\"提升ListView运行效率\"></a>提升ListView运行效率</h3><p>主要在适配器中进行修改<br>1.原本布局需要多次重复加载，这样性能很低，所以可以利用convertView对其进行修改，用它来对布局进行缓存，重复利用。<br>2.控件也需要多次创建，这个可以通过建立一个内部类viewHolder对控件进行缓存，利用setTag进行缓存，用getTag进行取出，可以得到更好的性能</p>\n<p><img src=\"/../img/img30.jpg\"></p>\n<p><img src=\"/../img/img31.jpg\"></p>\n<h3 id=\"ListView的点击事件\"><a href=\"#ListView的点击事件\" class=\"headerlink\" title=\"ListView的点击事件\"></a>ListView的点击事件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListView listView=(ListView) findViewById(R.id.list_view);</span><br><span class=\"line\">listView.setOnItemClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">AdapterView</span>.OnItemClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; adapterView, View view, <span class=\"type\">int</span> i, <span class=\"type\">long</span> l)</span> &#123;</span><br><span class=\"line\">        Fruit fruit=fruitList.get(i);</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"built_in\">this</span>, fruit.getName(), Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"RecyclerView\"><a href=\"#RecyclerView\" class=\"headerlink\" title=\"RecyclerView\"></a>RecyclerView</h1><h3 id=\"RecyclerView基本用法\"><a href=\"#RecyclerView基本用法\" class=\"headerlink\" title=\"RecyclerView基本用法\"></a>RecyclerView基本用法</h3><p>增强版的ListView<br>使用时也需要提前添加依赖库</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;androidx.recyclerview:recyclerview:1.3.2&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>1.首先创建一个新的类作为适配类型，创建一个子项布局<br>2.创建一个适配器让这个适配器继承自RecyclerView.Adapter,并把泛型指定为FruitAdapter.ViewHolder.<br>先建立一个内部类，传入一个参数 这个参数通常是子项的最外层布局，通过findViewById获取实例，然后通过其中的构造函数将数据源传入并赋值给一个全局变量，由于其继承自RecyclerView.Adapter所以要重写onCreateViewHolder,onBindViewHolder,getItemCount三个方法，第一个用于创建ViewHolder实例，第二个用于对数据进行赋值，第三个得到有多少个子项<br>3.写一个InitFruits方法初始化数据，获取recyclerview实例，然后创建一个LinearLayoutManager对象指定布局方式并将其设置到recyclerView中，创建适配器的实例并将水果数据传入其中，最后建立联系</p>\n<p><img src=\"/../img/img32.jpg\"></p>\n<p><img src=\"/../img/img33.jpg\"></p>\n<p><img src=\"/../img/img34.jpg\"></p>\n<h3 id=\"实现横向滚动\"><a href=\"#实现横向滚动\" class=\"headerlink\" title=\"实现横向滚动\"></a>实现横向滚动</h3><p>在原有的代码上进行少量修改：<br>1.修改fruit_item中的代码，将元素改为垂直排列，将ImageView和TextView改为水平居中<br>2.在主活动中添加layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL)即可</p>\n<p><img src=\"/../img/img35.jpg\"></p>\n<h3 id=\"实现瀑布流布局\"><a href=\"#实现瀑布流布局\" class=\"headerlink\" title=\"实现瀑布流布局\"></a>实现瀑布流布局</h3><p>瀑布流布局(GridLayoutManager用于实现网格布局，StaggeredGridLayoutManager用于实现瀑布流布局)<br>在原有代码上修改：<br>1.首先对fruit_item进行细微修改<br>2.在主活动onCreate方法中加入一句代码</p>\n<p><img src=\"/../img/img36.jpg\"></p>\n<p>接受俩参数，第一个用于指定列数，第二个用于指定布局排列方式，到这里瀑布式布局已经完成了，但还可以用一个小技巧使观察的更清晰<br>3.创建一个getRandomLengthName方法，先利用random创造一个随机数，然后将名字重复生成</p>\n<p><img src=\"/../img/img37.jpg\"></p>\n<h3 id=\"RecyclerView点击事件\"><a href=\"#RecyclerView点击事件\" class=\"headerlink\" title=\"RecyclerView点击事件\"></a>RecyclerView点击事件</h3><p>无法直接全部直接注册监听器，需要对具体的View分别注册<br>1.先修改ViewHolder在其中加入变量fruitView来保存子项最外层布局<br>2.在onCreateViewHolder中注册点击事件，在点击事件中先获取用户点击的position，拿到相应的实例，再用Toast弹出不同的内容</p>\n<p><img src=\"/../img/img38.jpg\"></p>\n<hr>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-09-14T08:24:59.546Z","updated":"2024-12-09T16:49:02.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcb001js4s7eniqfu1m","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\n\nQuick Start\nCreate a new post\n1\n\n\n$ hexo new \"My New Post\"\n\n\nMore info: Writing\n\nRun server\n1\n\n\n$ hexo s","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"try,catch和finally","date":"2025-03-07T15:02:39.000Z","_content":"\n在 Java 中，`try`、`catch` 和 `finally` 是异常处理机制的核心部分。它们用于捕获、处理异常，并确保无论是否发生异常，某些代码都会被执行。下面是对它们的详细解释：\n\n# try块\n\n`try` 块用于包含可能会抛出异常的代码。如果 `try` 块中的代码抛出了异常，程序会立即跳转到匹配的 `catch` 块进行处理。\n\n```java\ntry{\n    //可能抛出异常的代码\n}\n```\n\n- `try` 中的代码是你认为可能会发生异常的部分。例如，读取文件、连接数据库等操作可能会抛出异常。\n\n  ------\n\n  \n\n# catch块\n\n`catch` 块用于捕获和处理异常。如果 `try` 块中的代码抛出了异常，程序会跳转到与异常类型匹配的 `catch` 块来处理这个异常。\n\n```java\ntry {\n    // 可能抛出异常的代码\n} catch (ExceptionType1 e1) {\n    // 处理异常类型 1\n} catch (ExceptionType2 e2) {\n    // 处理异常类型 2\n}\n```\n\n- 你可以有多个 `catch` 块来处理不同类型的异常。`catch` 块中传入的参数（如 `ExceptionType1 e1`）是捕获到的异常对象，你可以通过它来访问异常的详细信息（如异常的消息、堆栈跟踪等）。\n- 如果 `try` 块抛出的异常类型与某个 `catch` 块中的异常类型匹配，那么该 `catch` 块将会被执行。\n\n------\n\n\n\n# finally块\n\n`finally` 块中的代码总会在 `try-catch` 执行完后执行，无论是否发生异常。这使得 `finally` 块非常适合用于清理资源、关闭流等操作。\n\n```java\ntry {\n    // 可能抛出异常的代码\n} catch (ExceptionType e) {\n    // 处理异常\n} finally {\n    // 总会执行的代码\n}\n```\n\n- `finally` 块中的代码不受是否发生异常的影响，无论 `try` 块中的代码是否抛出异常，`finally` 块都会执行，除非程序被强制中断（如调用 `System.exit()`，或者发生严重的错误）。\n\n- `finally` 常用于关闭资源（如文件流、数据库连接等），确保即使在出现异常时资源也能被正确释放。\n\n- **例子：**\n\n  ```java\n  try {\n      FileReader reader = new FileReader(\"somefile.txt\");\n      // 处理文件\n  } catch (IOException e) {\n      System.out.println(\"文件操作失败: \" + e.getMessage());\n  } finally {\n      // 确保文件流关闭\n      System.out.println(\"关闭文件流\");\n  }\n  ```\n\n  ------\n\n  \n\n  # try-catch-finally 的完整流程\n\n  1. 执行 `try` 块：\n\n     - 如果 `try` 块中的代码没有抛出异常，`catch` 块会被跳过，接着执行 `finally` 块。\n     - 如果 `try` 块中的代码抛出了异常，程序会跳转到匹配的 `catch` 块执行，`finally` 块会被执行。\n\n  2. 执行 `catch` 块：\n\n     - 如果有异常发生并且与某个 `catch` 块中的异常类型匹配，该 `catch` 块会处理异常。多个 `catch` 块可以用来捕获不同类型的异常。\n\n  3. 执行 `finally` 块：\n\n     - `finally` 块会在 `try` 和 `catch` 完成后执行，无论是否发生异常。即使在 `try` 或 `catch` 块中调用了 `return` 语句，`finally` 也会执行。\n\n       \n\n### 完整的语法实例：\n\n```java\ntry {\n    // 可能抛出异常的代码\n    int result = 10 / 0; // 这里会抛出 ArithmeticException\n} catch (ArithmeticException e) {\n    // 捕获并处理 ArithmeticException\n    System.out.println(\"发生异常: \" + e.getMessage());\n} finally {\n    // 无论是否发生异常，都会执行的代码\n    System.out.println(\"最终执行：无论异常与否都执行\");\n}\n```\n\n### 运行过程：\n\n\n\n- 执行 `try` 块，抛出 `ArithmeticException`。\n- 跳到 `catch` 块，处理该异常。\n- 无论是否发生异常，`finally` 块都将被执行。\n\n### **总结：**\n\n\n\n- `try`：用于包含可能抛出异常的代码。\n- `catch`：用于捕获并处理异常。如果 `try` 块抛出异常，程序跳到合适的 `catch` 块处理异常。\n- `finally`：用于包含必须执行的代码，通常用于资源清理或关闭文件等操作。它无论是否发生异常都会执行。\n\n这种异常处理机制帮助开发者处理程序中可能出现的错误，并保证程序在发生错误时不会崩溃，还能执行一些必要的清理工作。\n\n------\n\n> ​     内容源于github用户11111-beep的Android学习笔记``\n","source":"_posts/try-catch和finally.md","raw":"---\ntitle: try,catch和finally\ndate: 2025-03-07 23:02:39\ncategories:\n- Android(Java版)\ntags:\n---\n\n在 Java 中，`try`、`catch` 和 `finally` 是异常处理机制的核心部分。它们用于捕获、处理异常，并确保无论是否发生异常，某些代码都会被执行。下面是对它们的详细解释：\n\n# try块\n\n`try` 块用于包含可能会抛出异常的代码。如果 `try` 块中的代码抛出了异常，程序会立即跳转到匹配的 `catch` 块进行处理。\n\n```java\ntry{\n    //可能抛出异常的代码\n}\n```\n\n- `try` 中的代码是你认为可能会发生异常的部分。例如，读取文件、连接数据库等操作可能会抛出异常。\n\n  ------\n\n  \n\n# catch块\n\n`catch` 块用于捕获和处理异常。如果 `try` 块中的代码抛出了异常，程序会跳转到与异常类型匹配的 `catch` 块来处理这个异常。\n\n```java\ntry {\n    // 可能抛出异常的代码\n} catch (ExceptionType1 e1) {\n    // 处理异常类型 1\n} catch (ExceptionType2 e2) {\n    // 处理异常类型 2\n}\n```\n\n- 你可以有多个 `catch` 块来处理不同类型的异常。`catch` 块中传入的参数（如 `ExceptionType1 e1`）是捕获到的异常对象，你可以通过它来访问异常的详细信息（如异常的消息、堆栈跟踪等）。\n- 如果 `try` 块抛出的异常类型与某个 `catch` 块中的异常类型匹配，那么该 `catch` 块将会被执行。\n\n------\n\n\n\n# finally块\n\n`finally` 块中的代码总会在 `try-catch` 执行完后执行，无论是否发生异常。这使得 `finally` 块非常适合用于清理资源、关闭流等操作。\n\n```java\ntry {\n    // 可能抛出异常的代码\n} catch (ExceptionType e) {\n    // 处理异常\n} finally {\n    // 总会执行的代码\n}\n```\n\n- `finally` 块中的代码不受是否发生异常的影响，无论 `try` 块中的代码是否抛出异常，`finally` 块都会执行，除非程序被强制中断（如调用 `System.exit()`，或者发生严重的错误）。\n\n- `finally` 常用于关闭资源（如文件流、数据库连接等），确保即使在出现异常时资源也能被正确释放。\n\n- **例子：**\n\n  ```java\n  try {\n      FileReader reader = new FileReader(\"somefile.txt\");\n      // 处理文件\n  } catch (IOException e) {\n      System.out.println(\"文件操作失败: \" + e.getMessage());\n  } finally {\n      // 确保文件流关闭\n      System.out.println(\"关闭文件流\");\n  }\n  ```\n\n  ------\n\n  \n\n  # try-catch-finally 的完整流程\n\n  1. 执行 `try` 块：\n\n     - 如果 `try` 块中的代码没有抛出异常，`catch` 块会被跳过，接着执行 `finally` 块。\n     - 如果 `try` 块中的代码抛出了异常，程序会跳转到匹配的 `catch` 块执行，`finally` 块会被执行。\n\n  2. 执行 `catch` 块：\n\n     - 如果有异常发生并且与某个 `catch` 块中的异常类型匹配，该 `catch` 块会处理异常。多个 `catch` 块可以用来捕获不同类型的异常。\n\n  3. 执行 `finally` 块：\n\n     - `finally` 块会在 `try` 和 `catch` 完成后执行，无论是否发生异常。即使在 `try` 或 `catch` 块中调用了 `return` 语句，`finally` 也会执行。\n\n       \n\n### 完整的语法实例：\n\n```java\ntry {\n    // 可能抛出异常的代码\n    int result = 10 / 0; // 这里会抛出 ArithmeticException\n} catch (ArithmeticException e) {\n    // 捕获并处理 ArithmeticException\n    System.out.println(\"发生异常: \" + e.getMessage());\n} finally {\n    // 无论是否发生异常，都会执行的代码\n    System.out.println(\"最终执行：无论异常与否都执行\");\n}\n```\n\n### 运行过程：\n\n\n\n- 执行 `try` 块，抛出 `ArithmeticException`。\n- 跳到 `catch` 块，处理该异常。\n- 无论是否发生异常，`finally` 块都将被执行。\n\n### **总结：**\n\n\n\n- `try`：用于包含可能抛出异常的代码。\n- `catch`：用于捕获并处理异常。如果 `try` 块抛出异常，程序跳到合适的 `catch` 块处理异常。\n- `finally`：用于包含必须执行的代码，通常用于资源清理或关闭文件等操作。它无论是否发生异常都会执行。\n\n这种异常处理机制帮助开发者处理程序中可能出现的错误，并保证程序在发生错误时不会崩溃，还能执行一些必要的清理工作。\n\n------\n\n> ​     内容源于github用户11111-beep的Android学习笔记``\n","slug":"try-catch和finally","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcc001ls4s7f4fz6ccg","content":"<p>在 Java 中，<code>try</code>、<code>catch</code> 和 <code>finally</code> 是异常处理机制的核心部分。它们用于捕获、处理异常，并确保无论是否发生异常，某些代码都会被执行。下面是对它们的详细解释：</p>\n<h1 id=\"try块\"><a href=\"#try块\" class=\"headerlink\" title=\"try块\"></a>try块</h1><p><code>try</code> 块用于包含可能会抛出异常的代码。如果 <code>try</code> 块中的代码抛出了异常，程序会立即跳转到匹配的 <code>catch</code> 块进行处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//可能抛出异常的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>try</code> 中的代码是你认为可能会发生异常的部分。例如，读取文件、连接数据库等操作可能会抛出异常。</p>\n<hr>\n</li>\n</ul>\n<h1 id=\"catch块\"><a href=\"#catch块\" class=\"headerlink\" title=\"catch块\"></a>catch块</h1><p><code>catch</code> 块用于捕获和处理异常。如果 <code>try</code> 块中的代码抛出了异常，程序会跳转到与异常类型匹配的 <code>catch</code> 块来处理这个异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可能抛出异常的代码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ExceptionType1 e1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理异常类型 1</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ExceptionType2 e2) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理异常类型 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>你可以有多个 <code>catch</code> 块来处理不同类型的异常。<code>catch</code> 块中传入的参数（如 <code>ExceptionType1 e1</code>）是捕获到的异常对象，你可以通过它来访问异常的详细信息（如异常的消息、堆栈跟踪等）。</li>\n<li>如果 <code>try</code> 块抛出的异常类型与某个 <code>catch</code> 块中的异常类型匹配，那么该 <code>catch</code> 块将会被执行。</li>\n</ul>\n<hr>\n<h1 id=\"finally块\"><a href=\"#finally块\" class=\"headerlink\" title=\"finally块\"></a>finally块</h1><p><code>finally</code> 块中的代码总会在 <code>try-catch</code> 执行完后执行，无论是否发生异常。这使得 <code>finally</code> 块非常适合用于清理资源、关闭流等操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可能抛出异常的代码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ExceptionType e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理异常</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 总会执行的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>finally</code> 块中的代码不受是否发生异常的影响，无论 <code>try</code> 块中的代码是否抛出异常，<code>finally</code> 块都会执行，除非程序被强制中断（如调用 <code>System.exit()</code>，或者发生严重的错误）。</p>\n</li>\n<li><p><code>finally</code> 常用于关闭资源（如文件流、数据库连接等），确保即使在出现异常时资源也能被正确释放。</p>\n</li>\n<li><p><strong>例子：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">FileReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;somefile.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 处理文件</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;文件操作失败: &quot;</span> + e.getMessage());</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 确保文件流关闭</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;关闭文件流&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"try-catch-finally-的完整流程\"><a href=\"#try-catch-finally-的完整流程\" class=\"headerlink\" title=\"try-catch-finally 的完整流程\"></a>try-catch-finally 的完整流程</h1><ol>\n<li><p>执行 <code>try</code> 块：</p>\n<ul>\n<li>如果 <code>try</code> 块中的代码没有抛出异常，<code>catch</code> 块会被跳过，接着执行 <code>finally</code> 块。</li>\n<li>如果 <code>try</code> 块中的代码抛出了异常，程序会跳转到匹配的 <code>catch</code> 块执行，<code>finally</code> 块会被执行。</li>\n</ul>\n</li>\n<li><p>执行 <code>catch</code> 块：</p>\n<ul>\n<li>如果有异常发生并且与某个 <code>catch</code> 块中的异常类型匹配，该 <code>catch</code> 块会处理异常。多个 <code>catch</code> 块可以用来捕获不同类型的异常。</li>\n</ul>\n</li>\n<li><p>执行 <code>finally</code> 块：</p>\n<ul>\n<li><code>finally</code> 块会在 <code>try</code> 和 <code>catch</code> 完成后执行，无论是否发生异常。即使在 <code>try</code> 或 <code>catch</code> 块中调用了 <code>return</code> 语句，<code>finally</code> 也会执行。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"完整的语法实例：\"><a href=\"#完整的语法实例：\" class=\"headerlink\" title=\"完整的语法实例：\"></a>完整的语法实例：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可能抛出异常的代码</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">10</span> / <span class=\"number\">0</span>; <span class=\"comment\">// 这里会抛出 ArithmeticException</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 捕获并处理 ArithmeticException</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;发生异常: &quot;</span> + e.getMessage());</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 无论是否发生异常，都会执行的代码</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;最终执行：无论异常与否都执行&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行过程：\"><a href=\"#运行过程：\" class=\"headerlink\" title=\"运行过程：\"></a>运行过程：</h3><ul>\n<li>执行 <code>try</code> 块，抛出 <code>ArithmeticException</code>。</li>\n<li>跳到 <code>catch</code> 块，处理该异常。</li>\n<li>无论是否发生异常，<code>finally</code> 块都将被执行。</li>\n</ul>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a><strong>总结：</strong></h3><ul>\n<li><code>try</code>：用于包含可能抛出异常的代码。</li>\n<li><code>catch</code>：用于捕获并处理异常。如果 <code>try</code> 块抛出异常，程序跳到合适的 <code>catch</code> 块处理异常。</li>\n<li><code>finally</code>：用于包含必须执行的代码，通常用于资源清理或关闭文件等操作。它无论是否发生异常都会执行。</li>\n</ul>\n<p>这种异常处理机制帮助开发者处理程序中可能出现的错误，并保证程序在发生错误时不会崩溃，还能执行一些必要的清理工作。</p>\n<hr>\n<blockquote>\n<p>​     内容源于github用户11111-beep的Android学习笔记&#96;&#96;</p>\n</blockquote>\n","excerpt":"在 Java 中，try、catch 和 finally 是异常处理机制的核心部分。它们用于捕获、处理异常，并确保无论是否发生异常，某些代码都会被执行。下面是对它们的详细解释：\n\ntry块\ntry 块用于包含可能会抛出异常的代码。如果 try 块中的代码抛出了异常，程序会立即跳转到匹配的 catch 块进行处理。\n\n1\n2\n3\n\n\ntry{\n    //可能抛出异常的代码\n}\n\n\n * try 中的代码是你认为可能会发生异常的部分。例如，读取文件、连接数据库等操作可能会抛出异常。\n   \n   \n   \n   \n   \n\ncatch块\ncatch 块用于捕获和处理异常。如果 try 块中的代码","more":"<p>在 Java 中，<code>try</code>、<code>catch</code> 和 <code>finally</code> 是异常处理机制的核心部分。它们用于捕获、处理异常，并确保无论是否发生异常，某些代码都会被执行。下面是对它们的详细解释：</p>\n<h1 id=\"try块\"><a href=\"#try块\" class=\"headerlink\" title=\"try块\"></a>try块</h1><p><code>try</code> 块用于包含可能会抛出异常的代码。如果 <code>try</code> 块中的代码抛出了异常，程序会立即跳转到匹配的 <code>catch</code> 块进行处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//可能抛出异常的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>try</code> 中的代码是你认为可能会发生异常的部分。例如，读取文件、连接数据库等操作可能会抛出异常。</p>\n<hr>\n</li>\n</ul>\n<h1 id=\"catch块\"><a href=\"#catch块\" class=\"headerlink\" title=\"catch块\"></a>catch块</h1><p><code>catch</code> 块用于捕获和处理异常。如果 <code>try</code> 块中的代码抛出了异常，程序会跳转到与异常类型匹配的 <code>catch</code> 块来处理这个异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可能抛出异常的代码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ExceptionType1 e1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理异常类型 1</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ExceptionType2 e2) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理异常类型 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>你可以有多个 <code>catch</code> 块来处理不同类型的异常。<code>catch</code> 块中传入的参数（如 <code>ExceptionType1 e1</code>）是捕获到的异常对象，你可以通过它来访问异常的详细信息（如异常的消息、堆栈跟踪等）。</li>\n<li>如果 <code>try</code> 块抛出的异常类型与某个 <code>catch</code> 块中的异常类型匹配，那么该 <code>catch</code> 块将会被执行。</li>\n</ul>\n<hr>\n<h1 id=\"finally块\"><a href=\"#finally块\" class=\"headerlink\" title=\"finally块\"></a>finally块</h1><p><code>finally</code> 块中的代码总会在 <code>try-catch</code> 执行完后执行，无论是否发生异常。这使得 <code>finally</code> 块非常适合用于清理资源、关闭流等操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可能抛出异常的代码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ExceptionType e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理异常</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 总会执行的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>finally</code> 块中的代码不受是否发生异常的影响，无论 <code>try</code> 块中的代码是否抛出异常，<code>finally</code> 块都会执行，除非程序被强制中断（如调用 <code>System.exit()</code>，或者发生严重的错误）。</p>\n</li>\n<li><p><code>finally</code> 常用于关闭资源（如文件流、数据库连接等），确保即使在出现异常时资源也能被正确释放。</p>\n</li>\n<li><p><strong>例子：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">FileReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;somefile.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 处理文件</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;文件操作失败: &quot;</span> + e.getMessage());</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 确保文件流关闭</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;关闭文件流&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"try-catch-finally-的完整流程\"><a href=\"#try-catch-finally-的完整流程\" class=\"headerlink\" title=\"try-catch-finally 的完整流程\"></a>try-catch-finally 的完整流程</h1><ol>\n<li><p>执行 <code>try</code> 块：</p>\n<ul>\n<li>如果 <code>try</code> 块中的代码没有抛出异常，<code>catch</code> 块会被跳过，接着执行 <code>finally</code> 块。</li>\n<li>如果 <code>try</code> 块中的代码抛出了异常，程序会跳转到匹配的 <code>catch</code> 块执行，<code>finally</code> 块会被执行。</li>\n</ul>\n</li>\n<li><p>执行 <code>catch</code> 块：</p>\n<ul>\n<li>如果有异常发生并且与某个 <code>catch</code> 块中的异常类型匹配，该 <code>catch</code> 块会处理异常。多个 <code>catch</code> 块可以用来捕获不同类型的异常。</li>\n</ul>\n</li>\n<li><p>执行 <code>finally</code> 块：</p>\n<ul>\n<li><code>finally</code> 块会在 <code>try</code> 和 <code>catch</code> 完成后执行，无论是否发生异常。即使在 <code>try</code> 或 <code>catch</code> 块中调用了 <code>return</code> 语句，<code>finally</code> 也会执行。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"完整的语法实例：\"><a href=\"#完整的语法实例：\" class=\"headerlink\" title=\"完整的语法实例：\"></a>完整的语法实例：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可能抛出异常的代码</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">10</span> / <span class=\"number\">0</span>; <span class=\"comment\">// 这里会抛出 ArithmeticException</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 捕获并处理 ArithmeticException</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;发生异常: &quot;</span> + e.getMessage());</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 无论是否发生异常，都会执行的代码</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;最终执行：无论异常与否都执行&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行过程：\"><a href=\"#运行过程：\" class=\"headerlink\" title=\"运行过程：\"></a>运行过程：</h3><ul>\n<li>执行 <code>try</code> 块，抛出 <code>ArithmeticException</code>。</li>\n<li>跳到 <code>catch</code> 块，处理该异常。</li>\n<li>无论是否发生异常，<code>finally</code> 块都将被执行。</li>\n</ul>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a><strong>总结：</strong></h3><ul>\n<li><code>try</code>：用于包含可能抛出异常的代码。</li>\n<li><code>catch</code>：用于捕获并处理异常。如果 <code>try</code> 块抛出异常，程序跳到合适的 <code>catch</code> 块处理异常。</li>\n<li><code>finally</code>：用于包含必须执行的代码，通常用于资源清理或关闭文件等操作。它无论是否发生异常都会执行。</li>\n</ul>\n<p>这种异常处理机制帮助开发者处理程序中可能出现的错误，并保证程序在发生错误时不会崩溃，还能执行一些必要的清理工作。</p>\n<hr>\n<blockquote>\n<p>​     内容源于github用户11111-beep的Android学习笔记&#96;&#96;</p>\n</blockquote>\n"},{"title":"事务篇","date":"2025-08-09T07:20:04.000Z","_content":"\n### 简介\n\n![](../img/img101.png)\n\n- **默认MYSQL事务是自动提交的，所以需要手动开启事务，手动提交事务，有异常手动回滚事务**\n\n------\n\n### 事务操作\n\n- **方法一**\n\n  ![](../img/img102.png)\n\n- **方法二**\n\n  ![](../img/img103.png)\n\n------\n\n### 事务四大特性\n\n![](../img/img104.png)\n\n------\n\n### 并发事务问题\n\n![](../img/img105.png)\n\n------\n\n### 事务隔离级别\n\n![](../img/img106.png)\n\n**注意**：事务隔离级别越高，安全性越高，性能越低\n\n------\n\n","source":"_posts/事务篇.md","raw":"---\ntitle: 事务篇\ndate: 2025-08-09 15:20:04\ncategories:\n- 数据库(SQL)\ntags:\n---\n\n### 简介\n\n![](../img/img101.png)\n\n- **默认MYSQL事务是自动提交的，所以需要手动开启事务，手动提交事务，有异常手动回滚事务**\n\n------\n\n### 事务操作\n\n- **方法一**\n\n  ![](../img/img102.png)\n\n- **方法二**\n\n  ![](../img/img103.png)\n\n------\n\n### 事务四大特性\n\n![](../img/img104.png)\n\n------\n\n### 并发事务问题\n\n![](../img/img105.png)\n\n------\n\n### 事务隔离级别\n\n![](../img/img106.png)\n\n**注意**：事务隔离级别越高，安全性越高，性能越低\n\n------\n\n","slug":"事务篇","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcd001os4s7c5vub9jr","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p><img src=\"/../img/img101.png\"></p>\n<ul>\n<li><strong>默认MYSQL事务是自动提交的，所以需要手动开启事务，手动提交事务，有异常手动回滚事务</strong></li>\n</ul>\n<hr>\n<h3 id=\"事务操作\"><a href=\"#事务操作\" class=\"headerlink\" title=\"事务操作\"></a>事务操作</h3><ul>\n<li><p><strong>方法一</strong></p>\n<p><img src=\"/../img/img102.png\"></p>\n</li>\n<li><p><strong>方法二</strong></p>\n<p><img src=\"/../img/img103.png\"></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"事务四大特性\"><a href=\"#事务四大特性\" class=\"headerlink\" title=\"事务四大特性\"></a>事务四大特性</h3><p><img src=\"/../img/img104.png\"></p>\n<hr>\n<h3 id=\"并发事务问题\"><a href=\"#并发事务问题\" class=\"headerlink\" title=\"并发事务问题\"></a>并发事务问题</h3><p><img src=\"/../img/img105.png\"></p>\n<hr>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><p><img src=\"/../img/img106.png\"></p>\n<p><strong>注意</strong>：事务隔离级别越高，安全性越高，性能越低</p>\n<hr>\n","excerpt":"简介\n\n\n * 默认MYSQL事务是自动提交的，所以需要手动开启事务，手动提交事务，有异常手动回滚事务\n\n\n\n\n事务操作\n * 方法一\n   \n   \n   \n   \n * 方法二\n   \n   \n   \n   \n\n\n\n\n事务四大特性\n\n\n\n\n\n并发事务问题\n\n\n\n\n\n事务隔离级别\n\n\n注意：事务隔离级别越高，安全性越高，性能越低","more":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p><img src=\"/../img/img101.png\"></p>\n<ul>\n<li><strong>默认MYSQL事务是自动提交的，所以需要手动开启事务，手动提交事务，有异常手动回滚事务</strong></li>\n</ul>\n<hr>\n<h3 id=\"事务操作\"><a href=\"#事务操作\" class=\"headerlink\" title=\"事务操作\"></a>事务操作</h3><ul>\n<li><p><strong>方法一</strong></p>\n<p><img src=\"/../img/img102.png\"></p>\n</li>\n<li><p><strong>方法二</strong></p>\n<p><img src=\"/../img/img103.png\"></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"事务四大特性\"><a href=\"#事务四大特性\" class=\"headerlink\" title=\"事务四大特性\"></a>事务四大特性</h3><p><img src=\"/../img/img104.png\"></p>\n<hr>\n<h3 id=\"并发事务问题\"><a href=\"#并发事务问题\" class=\"headerlink\" title=\"并发事务问题\"></a>并发事务问题</h3><p><img src=\"/../img/img105.png\"></p>\n<hr>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><p><img src=\"/../img/img106.png\"></p>\n<p><strong>注意</strong>：事务隔离级别越高，安全性越高，性能越低</p>\n<hr>\n"},{"title":"使用网络技术(Java)","date":"2025-03-19T14:25:07.000Z","_content":"\n# WebView\n\n可以利用其嵌入一个浏览器\n\n1.在布局文件中引入WebView控件\n\n2.获取该控件实例并设置浏览器属性\n\n3.用setWebViewClient使目标网页在WebView显示\n\n4.调用loadUrl方法传入网址并获取权限\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <WebView\n        android:id=\"@+id/web_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n\n</LinearLayout>\n```\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        WebView webView=(WebView) findViewById(R.id.web_view);\n        webView.getSettings().setJavaScriptEnabled(true);\n        webView.setWebViewClient(new WebViewClient());\n        webView.loadUrl(\"https://www.baidu.com\");\n    }\n}\n```\n\n```java\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\n------\n\n# 使用HTTP协议访问网络\n\n### 使用HttpURLConnection\n\n##### GET\n\n1.调用sendRequestWithHttpURLConnection()方法开启子线程,并使用HttpURLConnection发出HTTP请求\n\n2.利用BufferedReader对服务器返回的流进行读取，并将结果传入到showResponse()中\n\n3.在showResponse里通过runOnUiThread将线程切换到主线程,然后更新UI元素（安卓不允许在子线程进行UI操作）\n\n4.获取权限\n\n```java\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n    //定义TextView\n    TextView responseText;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        //获取按钮实例\n        Button sendRequest=(Button) findViewById(R.id.send_request);\n        //获取TextView实例\n        responseText=(TextView) findViewById(R.id.response_text);\n        //设置按钮点击事件\n        sendRequest.setOnClickListener(this);\n    }\n    //按钮点击事件\n    @Override\n    public void onClick(View view) {\n        if(view.getId()==R.id.send_request){\n            //发送网络请求\n            sendRequestWithHttpURLConnection();\n        }\n    }\n    private void sendRequestWithHttpURLConnection() {\n        //开启线程来发起网络请求\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                //获取HttpURLConnection和BufferedReader对象\n                HttpURLConnection connection=null;\n                BufferedReader reader=null;\n                try{\n                    //获取URL对象，并传入目标网址\n                    URL url=new URL(\"https://www.baidu.com\");\n                    //获取HttpURLConnection实例\n                    connection=(HttpURLConnection) url.openConnection();\n                    //设置HTTP请求使用的方法(方法主要有两个，一个是GET表示希望从服务器那里获取数据，POST表示希望提交数据给服务器)\n                    connection.setRequestMethod(\"GET\");\n                    //自由定制一些设置如连接超时或读取超时的毫秒数\n                    connection.setConnectTimeout(8000);\n                    connection.setReadTimeout(8000);\n                    //获取到服务器返回的输入流\n                    InputStream in=connection.getInputStream();\n                    //下面对获取到的输入流进行读取\n                    reader=new BufferedReader(new InputStreamReader(in));\n                    StringBuilder response=new StringBuilder();\n                    String line;\n                    //readLine一行一行读取并将其返回成字符串\n                    while((line= reader.readLine())!=null){\n                        response.append(line);\n                    }\n                    //将返回的数据显示显示到界面上\n                    showResponse(response.toString());\n                }catch (Exception e){\n                    e.printStackTrace();\n                }finally {\n                    if(reader!=null){\n                        try{\n                            //关掉BufferedReader对象\n                            reader.close();\n                        }catch (IOException e){\n                            e.printStackTrace();\n                        }\n                    }\n                    if(connection!=null){\n                        //将HTTP连接关掉\n                        connection.disconnect();\n                    }\n                }\n            }\n        }).start();\n    }\n    //将返回的数据显示显示到界面上\n    private void showResponse(final String response){\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                //在这里进行UI操作，将结果显示到界面上\n                responseText.setText(response);\n            }\n        });\n    }\n}\n```\n\n```\n <uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\n##### POST\n\n将请求方法改为POST，并在获取输入流之前把要提交数据写出即可。注意每条数据都要以键值对形式存在，数据与数据间用“&”隔开\n\n```java\nconnection.setRequestMethod(\"POST\");\nDataOutputStream out=new DataOutputStream(connection.getOutputStream);\nout.writeBytes(\"username=admin & password=123456\")\n```\n\n\n\n### 使用OkHttp\n\n##### GET\n\n1.添加依赖库\n\n2.获取OkHttpClient实例\n\n3.创建Request对象，发起一条HTTP请求，可以在build之前连缀很多方法来丰富该对象\n\n4.调用newCall()创建一个Call对象，并用execute方法发送请求并获取服务器返回的数据\n\n5.获取返回数据具体内容\n\n6.获取权限\n\n```java\nimplementation (\"com.squareup.okhttp3:okhttp:4.12.0\")\n```\n\n```java\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n    //定义TextView\n    TextView responseText;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        //获取按钮实例\n        Button sendRequest=(Button) findViewById(R.id.send_request);\n        //获取TextView实例\n        responseText=(TextView) findViewById(R.id.response_text);\n        //设置按钮点击事件\n        sendRequest.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View view) {\n        sendRequestWithOkHttp();\n    }\n\n    private void sendRequestWithOkHttp() {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    OkHttpClient client = new OkHttpClient();\n                    Request request = new Request.Builder()\n                            .url(\"https://www.baidu.com\")\n                            .build();\n                        Response response = client.newCall(request).execute();\n                        String responseData = response.body().string();\n                        showResponse(responseData);\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n    }\n    //将返回的数据显示显示到界面上\n    private void showResponse(final String response){\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                //在这里进行UI操作，将结果显示到界面上\n                responseText.setText(response);\n            }\n        });\n    }\n}\n```\n\n```java\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n##### POST\n\n1.先构建一个RequestBody对象来存放待提交的参数\n\n2.在Request.Builder()中调用post()方法将RequestBody对象传入\n\n3.接下来操作和GET的一样\n\n```java\nRequestBody requestBody=new FormBody.Builder()\n    .add(\"username\",\"admin\")\n    .add(\"password\",\"123456\")\n    .build();\n```\n\n```java\n Request request = new Request.Builder()\n     .url(\"https://www.baidu.com\")\n     .post(requestBody)\n     .build();\n```\n\n\n\n------\n\n","source":"_posts/使用网络技术.md","raw":"---\ntitle: 使用网络技术(Java)\ndate: 2025-03-19 22:25:07\ncategories:\n- Android(Java版)\ntags:\n---\n\n# WebView\n\n可以利用其嵌入一个浏览器\n\n1.在布局文件中引入WebView控件\n\n2.获取该控件实例并设置浏览器属性\n\n3.用setWebViewClient使目标网页在WebView显示\n\n4.调用loadUrl方法传入网址并获取权限\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <WebView\n        android:id=\"@+id/web_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n\n</LinearLayout>\n```\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        WebView webView=(WebView) findViewById(R.id.web_view);\n        webView.getSettings().setJavaScriptEnabled(true);\n        webView.setWebViewClient(new WebViewClient());\n        webView.loadUrl(\"https://www.baidu.com\");\n    }\n}\n```\n\n```java\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\n------\n\n# 使用HTTP协议访问网络\n\n### 使用HttpURLConnection\n\n##### GET\n\n1.调用sendRequestWithHttpURLConnection()方法开启子线程,并使用HttpURLConnection发出HTTP请求\n\n2.利用BufferedReader对服务器返回的流进行读取，并将结果传入到showResponse()中\n\n3.在showResponse里通过runOnUiThread将线程切换到主线程,然后更新UI元素（安卓不允许在子线程进行UI操作）\n\n4.获取权限\n\n```java\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n    //定义TextView\n    TextView responseText;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        //获取按钮实例\n        Button sendRequest=(Button) findViewById(R.id.send_request);\n        //获取TextView实例\n        responseText=(TextView) findViewById(R.id.response_text);\n        //设置按钮点击事件\n        sendRequest.setOnClickListener(this);\n    }\n    //按钮点击事件\n    @Override\n    public void onClick(View view) {\n        if(view.getId()==R.id.send_request){\n            //发送网络请求\n            sendRequestWithHttpURLConnection();\n        }\n    }\n    private void sendRequestWithHttpURLConnection() {\n        //开启线程来发起网络请求\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                //获取HttpURLConnection和BufferedReader对象\n                HttpURLConnection connection=null;\n                BufferedReader reader=null;\n                try{\n                    //获取URL对象，并传入目标网址\n                    URL url=new URL(\"https://www.baidu.com\");\n                    //获取HttpURLConnection实例\n                    connection=(HttpURLConnection) url.openConnection();\n                    //设置HTTP请求使用的方法(方法主要有两个，一个是GET表示希望从服务器那里获取数据，POST表示希望提交数据给服务器)\n                    connection.setRequestMethod(\"GET\");\n                    //自由定制一些设置如连接超时或读取超时的毫秒数\n                    connection.setConnectTimeout(8000);\n                    connection.setReadTimeout(8000);\n                    //获取到服务器返回的输入流\n                    InputStream in=connection.getInputStream();\n                    //下面对获取到的输入流进行读取\n                    reader=new BufferedReader(new InputStreamReader(in));\n                    StringBuilder response=new StringBuilder();\n                    String line;\n                    //readLine一行一行读取并将其返回成字符串\n                    while((line= reader.readLine())!=null){\n                        response.append(line);\n                    }\n                    //将返回的数据显示显示到界面上\n                    showResponse(response.toString());\n                }catch (Exception e){\n                    e.printStackTrace();\n                }finally {\n                    if(reader!=null){\n                        try{\n                            //关掉BufferedReader对象\n                            reader.close();\n                        }catch (IOException e){\n                            e.printStackTrace();\n                        }\n                    }\n                    if(connection!=null){\n                        //将HTTP连接关掉\n                        connection.disconnect();\n                    }\n                }\n            }\n        }).start();\n    }\n    //将返回的数据显示显示到界面上\n    private void showResponse(final String response){\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                //在这里进行UI操作，将结果显示到界面上\n                responseText.setText(response);\n            }\n        });\n    }\n}\n```\n\n```\n <uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\n##### POST\n\n将请求方法改为POST，并在获取输入流之前把要提交数据写出即可。注意每条数据都要以键值对形式存在，数据与数据间用“&”隔开\n\n```java\nconnection.setRequestMethod(\"POST\");\nDataOutputStream out=new DataOutputStream(connection.getOutputStream);\nout.writeBytes(\"username=admin & password=123456\")\n```\n\n\n\n### 使用OkHttp\n\n##### GET\n\n1.添加依赖库\n\n2.获取OkHttpClient实例\n\n3.创建Request对象，发起一条HTTP请求，可以在build之前连缀很多方法来丰富该对象\n\n4.调用newCall()创建一个Call对象，并用execute方法发送请求并获取服务器返回的数据\n\n5.获取返回数据具体内容\n\n6.获取权限\n\n```java\nimplementation (\"com.squareup.okhttp3:okhttp:4.12.0\")\n```\n\n```java\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n    //定义TextView\n    TextView responseText;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        //获取按钮实例\n        Button sendRequest=(Button) findViewById(R.id.send_request);\n        //获取TextView实例\n        responseText=(TextView) findViewById(R.id.response_text);\n        //设置按钮点击事件\n        sendRequest.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View view) {\n        sendRequestWithOkHttp();\n    }\n\n    private void sendRequestWithOkHttp() {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    OkHttpClient client = new OkHttpClient();\n                    Request request = new Request.Builder()\n                            .url(\"https://www.baidu.com\")\n                            .build();\n                        Response response = client.newCall(request).execute();\n                        String responseData = response.body().string();\n                        showResponse(responseData);\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n    }\n    //将返回的数据显示显示到界面上\n    private void showResponse(final String response){\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                //在这里进行UI操作，将结果显示到界面上\n                responseText.setText(response);\n            }\n        });\n    }\n}\n```\n\n```java\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n##### POST\n\n1.先构建一个RequestBody对象来存放待提交的参数\n\n2.在Request.Builder()中调用post()方法将RequestBody对象传入\n\n3.接下来操作和GET的一样\n\n```java\nRequestBody requestBody=new FormBody.Builder()\n    .add(\"username\",\"admin\")\n    .add(\"password\",\"123456\")\n    .build();\n```\n\n```java\n Request request = new Request.Builder()\n     .url(\"https://www.baidu.com\")\n     .post(requestBody)\n     .build();\n```\n\n\n\n------\n\n","slug":"使用网络技术","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcd001qs4s7c39o65xs","content":"<h1 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h1><p>可以利用其嵌入一个浏览器</p>\n<p>1.在布局文件中引入WebView控件</p>\n<p>2.获取该控件实例并设置浏览器属性</p>\n<p>3.用setWebViewClient使目标网页在WebView显示</p>\n<p>4.调用loadUrl方法传入网址并获取权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;WebView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/web_view&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        WebView webView=(WebView) findViewById(R.id.web_view);</span><br><span class=\"line\">        webView.getSettings().setJavaScriptEnabled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        webView.setWebViewClient(<span class=\"keyword\">new</span> <span class=\"title class_\">WebViewClient</span>());</span><br><span class=\"line\">        webView.loadUrl(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.INTERNET&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"使用HTTP协议访问网络\"><a href=\"#使用HTTP协议访问网络\" class=\"headerlink\" title=\"使用HTTP协议访问网络\"></a>使用HTTP协议访问网络</h1><h3 id=\"使用HttpURLConnection\"><a href=\"#使用HttpURLConnection\" class=\"headerlink\" title=\"使用HttpURLConnection\"></a>使用HttpURLConnection</h3><h5 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h5><p>1.调用sendRequestWithHttpURLConnection()方法开启子线程,并使用HttpURLConnection发出HTTP请求</p>\n<p>2.利用BufferedReader对服务器返回的流进行读取，并将结果传入到showResponse()中</p>\n<p>3.在showResponse里通过runOnUiThread将线程切换到主线程,然后更新UI元素（安卓不允许在子线程进行UI操作）</p>\n<p>4.获取权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">View</span>.OnClickListener &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义TextView</span></span><br><span class=\"line\">    TextView responseText;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        <span class=\"comment\">//获取按钮实例</span></span><br><span class=\"line\">        Button sendRequest=(Button) findViewById(R.id.send_request);</span><br><span class=\"line\">        <span class=\"comment\">//获取TextView实例</span></span><br><span class=\"line\">        responseText=(TextView) findViewById(R.id.response_text);</span><br><span class=\"line\">        <span class=\"comment\">//设置按钮点击事件</span></span><br><span class=\"line\">        sendRequest.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//按钮点击事件</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view.getId()==R.id.send_request)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//发送网络请求</span></span><br><span class=\"line\">            sendRequestWithHttpURLConnection();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendRequestWithHttpURLConnection</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开启线程来发起网络请求</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取HttpURLConnection和BufferedReader对象</span></span><br><span class=\"line\">                HttpURLConnection connection=<span class=\"literal\">null</span>;</span><br><span class=\"line\">                BufferedReader reader=<span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//获取URL对象，并传入目标网址</span></span><br><span class=\"line\">                    URL url=<span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//获取HttpURLConnection实例</span></span><br><span class=\"line\">                    connection=(HttpURLConnection) url.openConnection();</span><br><span class=\"line\">                    <span class=\"comment\">//设置HTTP请求使用的方法(方法主要有两个，一个是GET表示希望从服务器那里获取数据，POST表示希望提交数据给服务器)</span></span><br><span class=\"line\">                    connection.setRequestMethod(<span class=\"string\">&quot;GET&quot;</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//自由定制一些设置如连接超时或读取超时的毫秒数</span></span><br><span class=\"line\">                    connection.setConnectTimeout(<span class=\"number\">8000</span>);</span><br><span class=\"line\">                    connection.setReadTimeout(<span class=\"number\">8000</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//获取到服务器返回的输入流</span></span><br><span class=\"line\">                    InputStream in=connection.getInputStream();</span><br><span class=\"line\">                    <span class=\"comment\">//下面对获取到的输入流进行读取</span></span><br><span class=\"line\">                    reader=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(in));</span><br><span class=\"line\">                    StringBuilder response=<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                    String line;</span><br><span class=\"line\">                    <span class=\"comment\">//readLine一行一行读取并将其返回成字符串</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span>((line= reader.readLine())!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                        response.append(line);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//将返回的数据显示显示到界面上</span></span><br><span class=\"line\">                    showResponse(response.toString());</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(reader!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                            <span class=\"comment\">//关掉BufferedReader对象</span></span><br><span class=\"line\">                            reader.close();</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(connection!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//将HTTP连接关掉</span></span><br><span class=\"line\">                        connection.disconnect();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//将返回的数据显示显示到界面上</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showResponse</span><span class=\"params\">(<span class=\"keyword\">final</span> String response)</span>&#123;</span><br><span class=\"line\">        runOnUiThread(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//在这里进行UI操作，将结果显示到界面上</span></span><br><span class=\"line\">                responseText.setText(response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h5><p>将请求方法改为POST，并在获取输入流之前把要提交数据写出即可。注意每条数据都要以键值对形式存在，数据与数据间用“&amp;”隔开</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connection.setRequestMethod(<span class=\"string\">&quot;POST&quot;</span>);</span><br><span class=\"line\">DataOutputStream out=<span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(connection.getOutputStream);</span><br><span class=\"line\">out.writeBytes(<span class=\"string\">&quot;username=admin &amp; password=123456&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用OkHttp\"><a href=\"#使用OkHttp\" class=\"headerlink\" title=\"使用OkHttp\"></a>使用OkHttp</h3><h5 id=\"GET-1\"><a href=\"#GET-1\" class=\"headerlink\" title=\"GET\"></a>GET</h5><p>1.添加依赖库</p>\n<p>2.获取OkHttpClient实例</p>\n<p>3.创建Request对象，发起一条HTTP请求，可以在build之前连缀很多方法来丰富该对象</p>\n<p>4.调用newCall()创建一个Call对象，并用execute方法发送请求并获取服务器返回的数据</p>\n<p>5.获取返回数据具体内容</p>\n<p>6.获取权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;com.squareup.okhttp3:okhttp:4.12.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">View</span>.OnClickListener &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义TextView</span></span><br><span class=\"line\">    TextView responseText;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        <span class=\"comment\">//获取按钮实例</span></span><br><span class=\"line\">        Button sendRequest=(Button) findViewById(R.id.send_request);</span><br><span class=\"line\">        <span class=\"comment\">//获取TextView实例</span></span><br><span class=\"line\">        responseText=(TextView) findViewById(R.id.response_text);</span><br><span class=\"line\">        <span class=\"comment\">//设置按钮点击事件</span></span><br><span class=\"line\">        sendRequest.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">        sendRequestWithOkHttp();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendRequestWithOkHttp</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">OkHttpClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OkHttpClient</span>();</span><br><span class=\"line\">                    <span class=\"type\">Request</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>.Builder()</span><br><span class=\"line\">                            .url(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)</span><br><span class=\"line\">                            .build();</span><br><span class=\"line\">                        <span class=\"type\">Response</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.newCall(request).execute();</span><br><span class=\"line\">                        <span class=\"type\">String</span> <span class=\"variable\">responseData</span> <span class=\"operator\">=</span> response.body().string();</span><br><span class=\"line\">                        showResponse(responseData);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//将返回的数据显示显示到界面上</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showResponse</span><span class=\"params\">(<span class=\"keyword\">final</span> String response)</span>&#123;</span><br><span class=\"line\">        runOnUiThread(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//在这里进行UI操作，将结果显示到界面上</span></span><br><span class=\"line\">                responseText.setText(response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"POST-1\"><a href=\"#POST-1\" class=\"headerlink\" title=\"POST\"></a>POST</h5><p>1.先构建一个RequestBody对象来存放待提交的参数</p>\n<p>2.在Request.Builder()中调用post()方法将RequestBody对象传入</p>\n<p>3.接下来操作和GET的一样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestBody requestBody=<span class=\"keyword\">new</span> <span class=\"title class_\">FormBody</span>.Builder()</span><br><span class=\"line\">    .add(<span class=\"string\">&quot;username&quot;</span>,<span class=\"string\">&quot;admin&quot;</span>)</span><br><span class=\"line\">    .add(<span class=\"string\">&quot;password&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">    .build();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Request</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>.Builder()</span><br><span class=\"line\">    .url(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)</span><br><span class=\"line\">    .post(requestBody)</span><br><span class=\"line\">    .build();</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n","excerpt":"WebView\n可以利用其嵌入一个浏览器\n\n1.在布局文件中引入WebView控件\n\n2.获取该控件实例并设置浏览器属性\n\n3.用setWebViewClient使目标网页在WebView显示\n\n4.调用loadUrl方法传入网址并获取权限\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n   ","more":"<h1 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h1><p>可以利用其嵌入一个浏览器</p>\n<p>1.在布局文件中引入WebView控件</p>\n<p>2.获取该控件实例并设置浏览器属性</p>\n<p>3.用setWebViewClient使目标网页在WebView显示</p>\n<p>4.调用loadUrl方法传入网址并获取权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;WebView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/web_view&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        WebView webView=(WebView) findViewById(R.id.web_view);</span><br><span class=\"line\">        webView.getSettings().setJavaScriptEnabled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        webView.setWebViewClient(<span class=\"keyword\">new</span> <span class=\"title class_\">WebViewClient</span>());</span><br><span class=\"line\">        webView.loadUrl(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.INTERNET&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"使用HTTP协议访问网络\"><a href=\"#使用HTTP协议访问网络\" class=\"headerlink\" title=\"使用HTTP协议访问网络\"></a>使用HTTP协议访问网络</h1><h3 id=\"使用HttpURLConnection\"><a href=\"#使用HttpURLConnection\" class=\"headerlink\" title=\"使用HttpURLConnection\"></a>使用HttpURLConnection</h3><h5 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h5><p>1.调用sendRequestWithHttpURLConnection()方法开启子线程,并使用HttpURLConnection发出HTTP请求</p>\n<p>2.利用BufferedReader对服务器返回的流进行读取，并将结果传入到showResponse()中</p>\n<p>3.在showResponse里通过runOnUiThread将线程切换到主线程,然后更新UI元素（安卓不允许在子线程进行UI操作）</p>\n<p>4.获取权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">View</span>.OnClickListener &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义TextView</span></span><br><span class=\"line\">    TextView responseText;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        <span class=\"comment\">//获取按钮实例</span></span><br><span class=\"line\">        Button sendRequest=(Button) findViewById(R.id.send_request);</span><br><span class=\"line\">        <span class=\"comment\">//获取TextView实例</span></span><br><span class=\"line\">        responseText=(TextView) findViewById(R.id.response_text);</span><br><span class=\"line\">        <span class=\"comment\">//设置按钮点击事件</span></span><br><span class=\"line\">        sendRequest.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//按钮点击事件</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view.getId()==R.id.send_request)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//发送网络请求</span></span><br><span class=\"line\">            sendRequestWithHttpURLConnection();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendRequestWithHttpURLConnection</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开启线程来发起网络请求</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取HttpURLConnection和BufferedReader对象</span></span><br><span class=\"line\">                HttpURLConnection connection=<span class=\"literal\">null</span>;</span><br><span class=\"line\">                BufferedReader reader=<span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//获取URL对象，并传入目标网址</span></span><br><span class=\"line\">                    URL url=<span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//获取HttpURLConnection实例</span></span><br><span class=\"line\">                    connection=(HttpURLConnection) url.openConnection();</span><br><span class=\"line\">                    <span class=\"comment\">//设置HTTP请求使用的方法(方法主要有两个，一个是GET表示希望从服务器那里获取数据，POST表示希望提交数据给服务器)</span></span><br><span class=\"line\">                    connection.setRequestMethod(<span class=\"string\">&quot;GET&quot;</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//自由定制一些设置如连接超时或读取超时的毫秒数</span></span><br><span class=\"line\">                    connection.setConnectTimeout(<span class=\"number\">8000</span>);</span><br><span class=\"line\">                    connection.setReadTimeout(<span class=\"number\">8000</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//获取到服务器返回的输入流</span></span><br><span class=\"line\">                    InputStream in=connection.getInputStream();</span><br><span class=\"line\">                    <span class=\"comment\">//下面对获取到的输入流进行读取</span></span><br><span class=\"line\">                    reader=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(in));</span><br><span class=\"line\">                    StringBuilder response=<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                    String line;</span><br><span class=\"line\">                    <span class=\"comment\">//readLine一行一行读取并将其返回成字符串</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span>((line= reader.readLine())!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                        response.append(line);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//将返回的数据显示显示到界面上</span></span><br><span class=\"line\">                    showResponse(response.toString());</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(reader!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                            <span class=\"comment\">//关掉BufferedReader对象</span></span><br><span class=\"line\">                            reader.close();</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(connection!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//将HTTP连接关掉</span></span><br><span class=\"line\">                        connection.disconnect();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//将返回的数据显示显示到界面上</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showResponse</span><span class=\"params\">(<span class=\"keyword\">final</span> String response)</span>&#123;</span><br><span class=\"line\">        runOnUiThread(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//在这里进行UI操作，将结果显示到界面上</span></span><br><span class=\"line\">                responseText.setText(response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h5><p>将请求方法改为POST，并在获取输入流之前把要提交数据写出即可。注意每条数据都要以键值对形式存在，数据与数据间用“&amp;”隔开</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connection.setRequestMethod(<span class=\"string\">&quot;POST&quot;</span>);</span><br><span class=\"line\">DataOutputStream out=<span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(connection.getOutputStream);</span><br><span class=\"line\">out.writeBytes(<span class=\"string\">&quot;username=admin &amp; password=123456&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用OkHttp\"><a href=\"#使用OkHttp\" class=\"headerlink\" title=\"使用OkHttp\"></a>使用OkHttp</h3><h5 id=\"GET-1\"><a href=\"#GET-1\" class=\"headerlink\" title=\"GET\"></a>GET</h5><p>1.添加依赖库</p>\n<p>2.获取OkHttpClient实例</p>\n<p>3.创建Request对象，发起一条HTTP请求，可以在build之前连缀很多方法来丰富该对象</p>\n<p>4.调用newCall()创建一个Call对象，并用execute方法发送请求并获取服务器返回的数据</p>\n<p>5.获取返回数据具体内容</p>\n<p>6.获取权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;com.squareup.okhttp3:okhttp:4.12.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">View</span>.OnClickListener &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义TextView</span></span><br><span class=\"line\">    TextView responseText;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        <span class=\"comment\">//获取按钮实例</span></span><br><span class=\"line\">        Button sendRequest=(Button) findViewById(R.id.send_request);</span><br><span class=\"line\">        <span class=\"comment\">//获取TextView实例</span></span><br><span class=\"line\">        responseText=(TextView) findViewById(R.id.response_text);</span><br><span class=\"line\">        <span class=\"comment\">//设置按钮点击事件</span></span><br><span class=\"line\">        sendRequest.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">        sendRequestWithOkHttp();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendRequestWithOkHttp</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">OkHttpClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OkHttpClient</span>();</span><br><span class=\"line\">                    <span class=\"type\">Request</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>.Builder()</span><br><span class=\"line\">                            .url(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)</span><br><span class=\"line\">                            .build();</span><br><span class=\"line\">                        <span class=\"type\">Response</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.newCall(request).execute();</span><br><span class=\"line\">                        <span class=\"type\">String</span> <span class=\"variable\">responseData</span> <span class=\"operator\">=</span> response.body().string();</span><br><span class=\"line\">                        showResponse(responseData);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//将返回的数据显示显示到界面上</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showResponse</span><span class=\"params\">(<span class=\"keyword\">final</span> String response)</span>&#123;</span><br><span class=\"line\">        runOnUiThread(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//在这里进行UI操作，将结果显示到界面上</span></span><br><span class=\"line\">                responseText.setText(response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"POST-1\"><a href=\"#POST-1\" class=\"headerlink\" title=\"POST\"></a>POST</h5><p>1.先构建一个RequestBody对象来存放待提交的参数</p>\n<p>2.在Request.Builder()中调用post()方法将RequestBody对象传入</p>\n<p>3.接下来操作和GET的一样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestBody requestBody=<span class=\"keyword\">new</span> <span class=\"title class_\">FormBody</span>.Builder()</span><br><span class=\"line\">    .add(<span class=\"string\">&quot;username&quot;</span>,<span class=\"string\">&quot;admin&quot;</span>)</span><br><span class=\"line\">    .add(<span class=\"string\">&quot;password&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">    .build();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Request</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>.Builder()</span><br><span class=\"line\">    .url(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)</span><br><span class=\"line\">    .post(requestBody)</span><br><span class=\"line\">    .build();</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n"},{"title":"内容提供器(Java)","date":"2025-03-11T06:56:45.000Z","_content":"\n# 运行时权限\n\n### 危险权限表格\n\n![](../img/img45.jpg)\n\n### 运行时申请权限(以打电话为例)\n\n1.先借助ContextCompat.checkSelfPermission()方法判断用户是否进行了授权。\n\ncheckSelfPermission()接收两个参数，第一个是Context，第二个是具体的权限名\n\n2.使用方法的返回值和PackageManager.PERMISSION_GRANTED作比较，不等表示未授权，相等表示已授权\n\n3.把打电话的逻辑封装在**call()**方法当中如果授权直接执行该方法，如果未授权，利用**ActivityCompat.requestPermissions()**方法向用户申请授权，**requestPermissions()**接收三个参数，第一个是Activity实例，第二个是String数组，把权限名放入其中，第三个是请求码，只要是唯一值就行。\n\n4.调用**requestPermissions()**方法后最终会回调到**onRequestPermissionResult()**方法，而授权结果会封装在**grantResults**参数中，判断最后的授权结果\n\n**完整的实例：**\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button makeCall=(Button) findViewById(R.id.make_call);\n        makeCall.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if(ContextCompat.checkSelfPermission(MainActivity.this,Manifest.permission.CALL_PHONE)!= PackageManager.PERMISSION_GRANTED){\n                    ActivityCompat.requestPermissions(MainActivity.this,new String[]{Manifest.permission.CALL_PHONE},1);\n                }\n                else{\n                    call();\n                }\n            }\n        });\n    }\n    private void call(){\n        try{\n            Intent intent=new Intent(Intent.ACTION_CALL);\n            intent.setData(Uri.parse(\"tel:10086\"));\n            startActivity(intent);\n        }catch (SecurityException e){\n            e.printStackTrace();\n        }\n    }\n    @SuppressLint(\"MissingSuperCall\")\n    @Override\n    public void onRequestPermissionsResult(int requestCode,String[] permissions,int[] grantResults){\n        switch(requestCode){\n            case 1:\n                if(grantResults.length>0 && grantResults[0]== PERMISSION_GRANTED){\n                    call();\n                }else{\n                    Toast.makeText(this, \"You denied the permission\", Toast.LENGTH_SHORT).show();\n                }\n                break;\n            default:\n        }\n    }\n}\n```\n\n\n\n------\n\n# 访问其他程序的数据\n\n### ContentResolver的基本用法\n\n通过getContentResolver()方法获取ContentResolver实例ContentResolver提供了一系列方法，用于对数据进行CRUD和SQLite相似但参数上略有一些区别。\n\n不同于数据库的是表名参数被Uri参数代替，主要由两部分组成authority和path，authority一般以程序包名进行命名，path则对同一程序不同表进行区分，标准格式为：content://com.example.app.provider/table1,还需要将其解析才可以作为参数传入，\n\n`Uri uri=Uri.parse(\"content://com.example.app.provider/table1\")`\n\n### Query( )\n\n```java\n          Cursor cursor=getContentResolver().query(uri,projection,selection,selectionArgs,sortOrder);\n          if(cursor!=null){\n              while(cursor.moveToNext()){\n                  String column1=cursor.getString(cursor.getColumnIndex(\"column1\"));\n                   int column2=cursor.getInt(cursor.getColumnIndex(\"column2\"));\n              }\n              cursor.close();\n          }\n```\n\n### Insert( )\n\n```java\nContentValues values=new ContentValues();\nvalues.put(\"column1\",\"text\");\nvalues.put(\"column2\",1);\ngetContentResolver().insert(uri,values);\n```\n\n### update( )\n\n```java\nContentValues values=new ContentValues();\nvalues.put(\"column1\",\"\");\ngetContentResolver().update(uri,values,\"column1=? and column2=?\",new String[]{\"text\",\"1\"});\n```\n\n### delete( )\n\n```java\ngetContentResolver().delete(uri,\"column2=?\",new String[]{\"1\"});\n```\n\n\n\n### 读取系统联系人\n\n**完整实例：**\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    ArrayAdapter<String>adapter;\n    List<String>contactsList=new ArrayList<>();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ListView contactsView=(ListView) findViewById(R.id.contacts_view);\n        adapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,contactsList);\n        contactsView.setAdapter(adapter);\n        if(ContextCompat.checkSelfPermission(this, Manifest.permission.READ_CONTACTS)!= PackageManager.PERMISSION_GRANTED){\n            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.READ_CONTACTS},1);\n        }\n        else{\n            readContacts();\n        }\n    }\n\n    private void readContacts() {\n        Cursor cursor=null;\n        try{\n            cursor=getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,null,null,null);\n            if(cursor!=null){\n                while(cursor.moveToNext()){\n                    @SuppressLint(\"Range\") String displayName=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));\n                    @SuppressLint(\"Range\") String number=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));\n                    contactsList.add(displayName+\"\\n\"+number);\n                }\n                adapter.notifyDataSetChanged();\n            }\n        }catch(Exception e){\n            e.printStackTrace();\n        }finally{\n            if(cursor!=null){\n                cursor.close();\n            }\n        }\n    }\n\n    @SuppressLint(\"MissingSuperCall\")\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        if(requestCode==1){\n            if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){\n                readContacts();\n            }\n            else{\n                Toast.makeText(this, \"You denied the permission\", Toast.LENGTH_SHORT).show();\n            }\n        }\n    }\n}\n```\n\n重点看readContacts()方法 里面的uri与前面讲的不太一样，这是为什么呢？这是因为ContactsContract.CommonDataKinds.Phone类已经帮我们做好了封装，提供另一个CONTENT_URI常量，而这个常量就是Uri.parse解析出来的结果。\n\n------\n\n# 创建内容提供器\n\n1.利用Android Studio创建一个Content Provider，已经在在AndroidManifest.xml中自动注册。\n\nonCraete():返回true表示创建成功，返回false表示创建失败。\n\nquery():返回值为Cursor类型\n\ninsert():返回一个表示这条新记录的URI\n\nupdate():更新已有数据\n\ndelete():被删除的行数将作为返回值返回\n\ngetType():根据传入的URI来返回相应的MIME类型。\n\n使用通配符表示两种格式的URI：\n\n***：**表示匹配任意长度的任意字符。例子content://com.example.app.provider/*\n\n**#：**表示匹配任意长度的数字。例子content://com.example.app.provider/table1/#\n\n2.可以借助UriMatcher这个类实现匹配内容URI的功能，利用UriMatcher中的addURI（）方法，接受三个参数，第一个是authority第二个是path第三个是自定义代码，这样当调用match()方法时就能匹配相应的表数据。\n\n```java\n public static final int TABLE1_DIR=0;\n    public static final int TABLE1_ITEM=1;\n    public static final int TABLE2_DIR=2;\n    public static final int TABLE2_ITEM=3;\n    private static UriMatcher uriMatcher;\n    static {\n        uriMatcher=new UriMatcher(UriMatcher.NO_MATCH);\n        uriMatcher.addURI(\"com.example.app.provider\",\"table1\",TABLE1_DIR);\n        uriMatcher.addURI(\"com.example.app.provider\",\"table1\",TABLE1_DIR);\n        uriMatcher.addURI(\"com.example.app.provider\",\"table1\",TABLE1_DIR);\n        uriMatcher.addURI(\"com.example.app.provider\",\"table1\",TABLE1_DIR);\n    }\n@Override\n    public Cursor query(@NonNull Uri uri, @Nullable String[] strings, @Nullable String s, @Nullable String[] strings1, @Nullable String s1) {\n        if(uriMatcher.match(uri)==TABLE1_DIR){\n\n        } else if (uriMatcher.match(uri)==TABLE1_ITEM) {\n\n        } else if (uriMatcher.match(uri)==TABLE2_DIR) {\n\n        } else if (uriMatcher.match(uri) == TABLE2_ITEM) {\n\n        }\n        return null;\n    }\n```\n\n3.getType()方法一个URI内容对应的MIME字符由三部分组成：\n\n<必须以vnd开头>\n\n<如果内容以路径结尾，则后接android.cursor.dir/，如果以id结尾则后接android.cursor.item/.>\n\n<最后接上vnd.<authority>.<path>>\n\nURI为“content://com.example.app.provider/table1”对应的MIME类型为“vnd.android.cursor.dir/vnd.com.example.app.provider.table1”\n\nURI为“content://com.example.app.provider/table1/1”对应的MIME类型为“vnd.android.cursor.item/vnd.com.example.app.provider.table1”\n\n实例：\n\n```java\n @Override\n    public String getType(@NonNull Uri uri) {\n        if(uriMatcher.match(uri)==TABLE1_DIR){\n            return \"vnd.android.cursor.dir/vnd.com.example.app.provider.table1\";\n        } else if (uriMatcher.match(uri)==TABLE1_ITEM) {\n            return \"vnd.android.cursor.item/vnd.com.example.app.provider.table1\";\n        } else if (uriMatcher.match(uri)==TABLE2_DIR) {\n            return \"vnd.android.cursor.dir/vnd.com.example.app.provider.table2\";\n        } else if (uriMatcher.match(uri) == TABLE2_ITEM) {\n            return \"vnd.android.cursor.item/vnd.com.example.app.provider.table2\";\n        } \n        return null;\n    }\n```\n\n\n\n------\n\n","source":"_posts/内容提供器.md","raw":"---\ntitle: 内容提供器(Java)\ndate: 2025-03-11 14:56:45\ncategories:\n- Android(Java版)\ntags:\n---\n\n# 运行时权限\n\n### 危险权限表格\n\n![](../img/img45.jpg)\n\n### 运行时申请权限(以打电话为例)\n\n1.先借助ContextCompat.checkSelfPermission()方法判断用户是否进行了授权。\n\ncheckSelfPermission()接收两个参数，第一个是Context，第二个是具体的权限名\n\n2.使用方法的返回值和PackageManager.PERMISSION_GRANTED作比较，不等表示未授权，相等表示已授权\n\n3.把打电话的逻辑封装在**call()**方法当中如果授权直接执行该方法，如果未授权，利用**ActivityCompat.requestPermissions()**方法向用户申请授权，**requestPermissions()**接收三个参数，第一个是Activity实例，第二个是String数组，把权限名放入其中，第三个是请求码，只要是唯一值就行。\n\n4.调用**requestPermissions()**方法后最终会回调到**onRequestPermissionResult()**方法，而授权结果会封装在**grantResults**参数中，判断最后的授权结果\n\n**完整的实例：**\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button makeCall=(Button) findViewById(R.id.make_call);\n        makeCall.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if(ContextCompat.checkSelfPermission(MainActivity.this,Manifest.permission.CALL_PHONE)!= PackageManager.PERMISSION_GRANTED){\n                    ActivityCompat.requestPermissions(MainActivity.this,new String[]{Manifest.permission.CALL_PHONE},1);\n                }\n                else{\n                    call();\n                }\n            }\n        });\n    }\n    private void call(){\n        try{\n            Intent intent=new Intent(Intent.ACTION_CALL);\n            intent.setData(Uri.parse(\"tel:10086\"));\n            startActivity(intent);\n        }catch (SecurityException e){\n            e.printStackTrace();\n        }\n    }\n    @SuppressLint(\"MissingSuperCall\")\n    @Override\n    public void onRequestPermissionsResult(int requestCode,String[] permissions,int[] grantResults){\n        switch(requestCode){\n            case 1:\n                if(grantResults.length>0 && grantResults[0]== PERMISSION_GRANTED){\n                    call();\n                }else{\n                    Toast.makeText(this, \"You denied the permission\", Toast.LENGTH_SHORT).show();\n                }\n                break;\n            default:\n        }\n    }\n}\n```\n\n\n\n------\n\n# 访问其他程序的数据\n\n### ContentResolver的基本用法\n\n通过getContentResolver()方法获取ContentResolver实例ContentResolver提供了一系列方法，用于对数据进行CRUD和SQLite相似但参数上略有一些区别。\n\n不同于数据库的是表名参数被Uri参数代替，主要由两部分组成authority和path，authority一般以程序包名进行命名，path则对同一程序不同表进行区分，标准格式为：content://com.example.app.provider/table1,还需要将其解析才可以作为参数传入，\n\n`Uri uri=Uri.parse(\"content://com.example.app.provider/table1\")`\n\n### Query( )\n\n```java\n          Cursor cursor=getContentResolver().query(uri,projection,selection,selectionArgs,sortOrder);\n          if(cursor!=null){\n              while(cursor.moveToNext()){\n                  String column1=cursor.getString(cursor.getColumnIndex(\"column1\"));\n                   int column2=cursor.getInt(cursor.getColumnIndex(\"column2\"));\n              }\n              cursor.close();\n          }\n```\n\n### Insert( )\n\n```java\nContentValues values=new ContentValues();\nvalues.put(\"column1\",\"text\");\nvalues.put(\"column2\",1);\ngetContentResolver().insert(uri,values);\n```\n\n### update( )\n\n```java\nContentValues values=new ContentValues();\nvalues.put(\"column1\",\"\");\ngetContentResolver().update(uri,values,\"column1=? and column2=?\",new String[]{\"text\",\"1\"});\n```\n\n### delete( )\n\n```java\ngetContentResolver().delete(uri,\"column2=?\",new String[]{\"1\"});\n```\n\n\n\n### 读取系统联系人\n\n**完整实例：**\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    ArrayAdapter<String>adapter;\n    List<String>contactsList=new ArrayList<>();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ListView contactsView=(ListView) findViewById(R.id.contacts_view);\n        adapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,contactsList);\n        contactsView.setAdapter(adapter);\n        if(ContextCompat.checkSelfPermission(this, Manifest.permission.READ_CONTACTS)!= PackageManager.PERMISSION_GRANTED){\n            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.READ_CONTACTS},1);\n        }\n        else{\n            readContacts();\n        }\n    }\n\n    private void readContacts() {\n        Cursor cursor=null;\n        try{\n            cursor=getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,null,null,null);\n            if(cursor!=null){\n                while(cursor.moveToNext()){\n                    @SuppressLint(\"Range\") String displayName=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));\n                    @SuppressLint(\"Range\") String number=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));\n                    contactsList.add(displayName+\"\\n\"+number);\n                }\n                adapter.notifyDataSetChanged();\n            }\n        }catch(Exception e){\n            e.printStackTrace();\n        }finally{\n            if(cursor!=null){\n                cursor.close();\n            }\n        }\n    }\n\n    @SuppressLint(\"MissingSuperCall\")\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        if(requestCode==1){\n            if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){\n                readContacts();\n            }\n            else{\n                Toast.makeText(this, \"You denied the permission\", Toast.LENGTH_SHORT).show();\n            }\n        }\n    }\n}\n```\n\n重点看readContacts()方法 里面的uri与前面讲的不太一样，这是为什么呢？这是因为ContactsContract.CommonDataKinds.Phone类已经帮我们做好了封装，提供另一个CONTENT_URI常量，而这个常量就是Uri.parse解析出来的结果。\n\n------\n\n# 创建内容提供器\n\n1.利用Android Studio创建一个Content Provider，已经在在AndroidManifest.xml中自动注册。\n\nonCraete():返回true表示创建成功，返回false表示创建失败。\n\nquery():返回值为Cursor类型\n\ninsert():返回一个表示这条新记录的URI\n\nupdate():更新已有数据\n\ndelete():被删除的行数将作为返回值返回\n\ngetType():根据传入的URI来返回相应的MIME类型。\n\n使用通配符表示两种格式的URI：\n\n***：**表示匹配任意长度的任意字符。例子content://com.example.app.provider/*\n\n**#：**表示匹配任意长度的数字。例子content://com.example.app.provider/table1/#\n\n2.可以借助UriMatcher这个类实现匹配内容URI的功能，利用UriMatcher中的addURI（）方法，接受三个参数，第一个是authority第二个是path第三个是自定义代码，这样当调用match()方法时就能匹配相应的表数据。\n\n```java\n public static final int TABLE1_DIR=0;\n    public static final int TABLE1_ITEM=1;\n    public static final int TABLE2_DIR=2;\n    public static final int TABLE2_ITEM=3;\n    private static UriMatcher uriMatcher;\n    static {\n        uriMatcher=new UriMatcher(UriMatcher.NO_MATCH);\n        uriMatcher.addURI(\"com.example.app.provider\",\"table1\",TABLE1_DIR);\n        uriMatcher.addURI(\"com.example.app.provider\",\"table1\",TABLE1_DIR);\n        uriMatcher.addURI(\"com.example.app.provider\",\"table1\",TABLE1_DIR);\n        uriMatcher.addURI(\"com.example.app.provider\",\"table1\",TABLE1_DIR);\n    }\n@Override\n    public Cursor query(@NonNull Uri uri, @Nullable String[] strings, @Nullable String s, @Nullable String[] strings1, @Nullable String s1) {\n        if(uriMatcher.match(uri)==TABLE1_DIR){\n\n        } else if (uriMatcher.match(uri)==TABLE1_ITEM) {\n\n        } else if (uriMatcher.match(uri)==TABLE2_DIR) {\n\n        } else if (uriMatcher.match(uri) == TABLE2_ITEM) {\n\n        }\n        return null;\n    }\n```\n\n3.getType()方法一个URI内容对应的MIME字符由三部分组成：\n\n<必须以vnd开头>\n\n<如果内容以路径结尾，则后接android.cursor.dir/，如果以id结尾则后接android.cursor.item/.>\n\n<最后接上vnd.<authority>.<path>>\n\nURI为“content://com.example.app.provider/table1”对应的MIME类型为“vnd.android.cursor.dir/vnd.com.example.app.provider.table1”\n\nURI为“content://com.example.app.provider/table1/1”对应的MIME类型为“vnd.android.cursor.item/vnd.com.example.app.provider.table1”\n\n实例：\n\n```java\n @Override\n    public String getType(@NonNull Uri uri) {\n        if(uriMatcher.match(uri)==TABLE1_DIR){\n            return \"vnd.android.cursor.dir/vnd.com.example.app.provider.table1\";\n        } else if (uriMatcher.match(uri)==TABLE1_ITEM) {\n            return \"vnd.android.cursor.item/vnd.com.example.app.provider.table1\";\n        } else if (uriMatcher.match(uri)==TABLE2_DIR) {\n            return \"vnd.android.cursor.dir/vnd.com.example.app.provider.table2\";\n        } else if (uriMatcher.match(uri) == TABLE2_ITEM) {\n            return \"vnd.android.cursor.item/vnd.com.example.app.provider.table2\";\n        } \n        return null;\n    }\n```\n\n\n\n------\n\n","slug":"内容提供器","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gce001ts4s70lgad2rw","content":"<h1 id=\"运行时权限\"><a href=\"#运行时权限\" class=\"headerlink\" title=\"运行时权限\"></a>运行时权限</h1><h3 id=\"危险权限表格\"><a href=\"#危险权限表格\" class=\"headerlink\" title=\"危险权限表格\"></a>危险权限表格</h3><p><img src=\"/../img/img45.jpg\"></p>\n<h3 id=\"运行时申请权限-以打电话为例\"><a href=\"#运行时申请权限-以打电话为例\" class=\"headerlink\" title=\"运行时申请权限(以打电话为例)\"></a>运行时申请权限(以打电话为例)</h3><p>1.先借助ContextCompat.checkSelfPermission()方法判断用户是否进行了授权。</p>\n<p>checkSelfPermission()接收两个参数，第一个是Context，第二个是具体的权限名</p>\n<p>2.使用方法的返回值和PackageManager.PERMISSION_GRANTED作比较，不等表示未授权，相等表示已授权</p>\n<p>3.把打电话的逻辑封装在**call()<strong>方法当中如果授权直接执行该方法，如果未授权，利用</strong>ActivityCompat.requestPermissions()**方法向用户申请授权，**requestPermissions()**接收三个参数，第一个是Activity实例，第二个是String数组，把权限名放入其中，第三个是请求码，只要是唯一值就行。</p>\n<p>4.调用<strong>requestPermissions()<strong>方法后最终会回调到</strong>onRequestPermissionResult()<strong>方法，而授权结果会封装在</strong>grantResults</strong>参数中，判断最后的授权结果</p>\n<p><strong>完整的实例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Button makeCall=(Button) findViewById(R.id.make_call);</span><br><span class=\"line\">        makeCall.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class=\"built_in\">this</span>,Manifest.permission.CALL_PHONE)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                    ActivityCompat.requestPermissions(MainActivity.<span class=\"built_in\">this</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;Manifest.permission.CALL_PHONE&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    call();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(Intent.ACTION_CALL);</span><br><span class=\"line\">            intent.setData(Uri.parse(<span class=\"string\">&quot;tel:10086&quot;</span>));</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (SecurityException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(&quot;MissingSuperCall&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode,String[] permissions,<span class=\"type\">int</span>[] grantResults)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(requestCode)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grantResults.length&gt;<span class=\"number\">0</span> &amp;&amp; grantResults[<span class=\"number\">0</span>]== PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                    call();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You denied the permission&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"访问其他程序的数据\"><a href=\"#访问其他程序的数据\" class=\"headerlink\" title=\"访问其他程序的数据\"></a>访问其他程序的数据</h1><h3 id=\"ContentResolver的基本用法\"><a href=\"#ContentResolver的基本用法\" class=\"headerlink\" title=\"ContentResolver的基本用法\"></a>ContentResolver的基本用法</h3><p>通过getContentResolver()方法获取ContentResolver实例ContentResolver提供了一系列方法，用于对数据进行CRUD和SQLite相似但参数上略有一些区别。</p>\n<p>不同于数据库的是表名参数被Uri参数代替，主要由两部分组成authority和path，authority一般以程序包名进行命名，path则对同一程序不同表进行区分，标准格式为：content:&#x2F;&#x2F;com.example.app.provider&#x2F;table1,还需要将其解析才可以作为参数传入，</p>\n<p><code>Uri uri=Uri.parse(&quot;content://com.example.app.provider/table1&quot;)</code></p>\n<h3 id=\"Query\"><a href=\"#Query\" class=\"headerlink\" title=\"Query( )\"></a>Query( )</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cursor cursor=getContentResolver().query(uri,projection,selection,selectionArgs,sortOrder);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(cursor!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cursor.moveToNext())&#123;</span><br><span class=\"line\">        String column1=cursor.getString(cursor.getColumnIndex(<span class=\"string\">&quot;column1&quot;</span>));</span><br><span class=\"line\">         <span class=\"type\">int</span> column2=cursor.getInt(cursor.getColumnIndex(<span class=\"string\">&quot;column2&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cursor.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Insert\"><a href=\"#Insert\" class=\"headerlink\" title=\"Insert( )\"></a>Insert( )</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ContentValues values=<span class=\"keyword\">new</span> <span class=\"title class_\">ContentValues</span>();</span><br><span class=\"line\">values.put(<span class=\"string\">&quot;column1&quot;</span>,<span class=\"string\">&quot;text&quot;</span>);</span><br><span class=\"line\">values.put(<span class=\"string\">&quot;column2&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">getContentResolver().insert(uri,values);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update( )\"></a>update( )</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ContentValues values=<span class=\"keyword\">new</span> <span class=\"title class_\">ContentValues</span>();</span><br><span class=\"line\">values.put(<span class=\"string\">&quot;column1&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">getContentResolver().update(uri,values,<span class=\"string\">&quot;column1=? and column2=?&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;text&quot;</span>,<span class=\"string\">&quot;1&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete( )\"></a>delete( )</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getContentResolver().delete(uri,<span class=\"string\">&quot;column2=?&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;1&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"读取系统联系人\"><a href=\"#读取系统联系人\" class=\"headerlink\" title=\"读取系统联系人\"></a>读取系统联系人</h3><p><strong>完整实例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    ArrayAdapter&lt;String&gt;adapter;</span><br><span class=\"line\">    List&lt;String&gt;contactsList=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        ListView contactsView=(ListView) findViewById(R.id.contacts_view);</span><br><span class=\"line\">        adapter=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayAdapter</span>&lt;String&gt;(<span class=\"built_in\">this</span>,android.R.layout.simple_list_item_1,contactsList);</span><br><span class=\"line\">        contactsView.setAdapter(adapter);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ContextCompat.checkSelfPermission(<span class=\"built_in\">this</span>, Manifest.permission.READ_CONTACTS)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">            ActivityCompat.requestPermissions(<span class=\"built_in\">this</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;Manifest.permission.READ_CONTACTS&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            readContacts();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">readContacts</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Cursor cursor=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            cursor=getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cursor!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(cursor.moveToNext())&#123;</span><br><span class=\"line\">                    <span class=\"meta\">@SuppressLint(&quot;Range&quot;)</span> String displayName=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));</span><br><span class=\"line\">                    <span class=\"meta\">@SuppressLint(&quot;Range&quot;)</span> String number=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));</span><br><span class=\"line\">                    contactsList.add(displayName+<span class=\"string\">&quot;\\n&quot;</span>+number);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                adapter.notifyDataSetChanged();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cursor!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                cursor.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(&quot;MissingSuperCall&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"meta\">@NonNull</span> String[] permissions, <span class=\"meta\">@NonNull</span> <span class=\"type\">int</span>[] grantResults)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(requestCode==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(grantResults.length&gt;<span class=\"number\">0</span>&amp;&amp;grantResults[<span class=\"number\">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                readContacts();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You denied the permission&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重点看readContacts()方法 里面的uri与前面讲的不太一样，这是为什么呢？这是因为ContactsContract.CommonDataKinds.Phone类已经帮我们做好了封装，提供另一个CONTENT_URI常量，而这个常量就是Uri.parse解析出来的结果。</p>\n<hr>\n<h1 id=\"创建内容提供器\"><a href=\"#创建内容提供器\" class=\"headerlink\" title=\"创建内容提供器\"></a>创建内容提供器</h1><p>1.利用Android Studio创建一个Content Provider，已经在在AndroidManifest.xml中自动注册。</p>\n<p>onCraete():返回true表示创建成功，返回false表示创建失败。</p>\n<p>query():返回值为Cursor类型</p>\n<p>insert():返回一个表示这条新记录的URI</p>\n<p>update():更新已有数据</p>\n<p>delete():被删除的行数将作为返回值返回</p>\n<p>getType():根据传入的URI来返回相应的MIME类型。</p>\n<p>使用通配符表示两种格式的URI：</p>\n<p>***：*<em>表示匹配任意长度的任意字符。例子content:&#x2F;&#x2F;com.example.app.provider&#x2F;</em></p>\n<p>**#：**表示匹配任意长度的数字。例子content:&#x2F;&#x2F;com.example.app.provider&#x2F;table1&#x2F;#</p>\n<p>2.可以借助UriMatcher这个类实现匹配内容URI的功能，利用UriMatcher中的addURI（）方法，接受三个参数，第一个是authority第二个是path第三个是自定义代码，这样当调用match()方法时就能匹配相应的表数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TABLE1_DIR=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TABLE1_ITEM=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TABLE2_DIR=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TABLE2_ITEM=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> UriMatcher uriMatcher;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        uriMatcher=<span class=\"keyword\">new</span> <span class=\"title class_\">UriMatcher</span>(UriMatcher.NO_MATCH);</span><br><span class=\"line\">        uriMatcher.addURI(<span class=\"string\">&quot;com.example.app.provider&quot;</span>,<span class=\"string\">&quot;table1&quot;</span>,TABLE1_DIR);</span><br><span class=\"line\">        uriMatcher.addURI(<span class=\"string\">&quot;com.example.app.provider&quot;</span>,<span class=\"string\">&quot;table1&quot;</span>,TABLE1_DIR);</span><br><span class=\"line\">        uriMatcher.addURI(<span class=\"string\">&quot;com.example.app.provider&quot;</span>,<span class=\"string\">&quot;table1&quot;</span>,TABLE1_DIR);</span><br><span class=\"line\">        uriMatcher.addURI(<span class=\"string\">&quot;com.example.app.provider&quot;</span>,<span class=\"string\">&quot;table1&quot;</span>,TABLE1_DIR);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cursor <span class=\"title function_\">query</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Uri uri, <span class=\"meta\">@Nullable</span> String[] strings, <span class=\"meta\">@Nullable</span> String s, <span class=\"meta\">@Nullable</span> String[] strings1, <span class=\"meta\">@Nullable</span> String s1)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(uriMatcher.match(uri)==TABLE1_DIR)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (uriMatcher.match(uri)==TABLE1_ITEM) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (uriMatcher.match(uri)==TABLE2_DIR) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (uriMatcher.match(uri) == TABLE2_ITEM) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.getType()方法一个URI内容对应的MIME字符由三部分组成：</p>\n<p>&lt;必须以vnd开头&gt;</p>\n<p>&lt;如果内容以路径结尾，则后接android.cursor.dir&#x2F;，如果以id结尾则后接android.cursor.item&#x2F;.&gt;</p>\n<p>&lt;最后接上vnd.<authority>.<path>&gt;</p>\n<p>URI为“content:&#x2F;&#x2F;com.example.app.provider&#x2F;table1”对应的MIME类型为“vnd.android.cursor.dir&#x2F;vnd.com.example.app.provider.table1”</p>\n<p>URI为“content:&#x2F;&#x2F;com.example.app.provider&#x2F;table1&#x2F;1”对应的MIME类型为“vnd.android.cursor.item&#x2F;vnd.com.example.app.provider.table1”</p>\n<p>实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">getType</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Uri uri)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(uriMatcher.match(uri)==TABLE1_DIR)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">&quot;vnd.android.cursor.dir/vnd.com.example.app.provider.table1&quot;</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (uriMatcher.match(uri)==TABLE1_ITEM) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">&quot;vnd.android.cursor.item/vnd.com.example.app.provider.table1&quot;</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (uriMatcher.match(uri)==TABLE2_DIR) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">&quot;vnd.android.cursor.dir/vnd.com.example.app.provider.table2&quot;</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (uriMatcher.match(uri) == TABLE2_ITEM) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">&quot;vnd.android.cursor.item/vnd.com.example.app.provider.table2&quot;</span>;</span><br><span class=\"line\">       &#125; </span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n","excerpt":"运行时权限\n危险权限表格\n\n\n运行时申请权限(以打电话为例)\n1.先借助ContextCompat.checkSelfPermission()方法判断用户是否进行了授权。\n\ncheckSelfPermission()接收两个参数，第一个是Context，第二个是具体的权限名\n\n2.使用方法的返回值和PackageManager.PERMISSION_GRANTED作比较，不等表示未授权，相等表示已授权\n\n3.把打电话的逻辑封装在**call()方法当中如果授权直接执行该方法，如果未授权，利用ActivityCompat.requestPermissions()**方法向用户申请授权，**req","more":"<h1 id=\"运行时权限\"><a href=\"#运行时权限\" class=\"headerlink\" title=\"运行时权限\"></a>运行时权限</h1><h3 id=\"危险权限表格\"><a href=\"#危险权限表格\" class=\"headerlink\" title=\"危险权限表格\"></a>危险权限表格</h3><p><img src=\"/../img/img45.jpg\"></p>\n<h3 id=\"运行时申请权限-以打电话为例\"><a href=\"#运行时申请权限-以打电话为例\" class=\"headerlink\" title=\"运行时申请权限(以打电话为例)\"></a>运行时申请权限(以打电话为例)</h3><p>1.先借助ContextCompat.checkSelfPermission()方法判断用户是否进行了授权。</p>\n<p>checkSelfPermission()接收两个参数，第一个是Context，第二个是具体的权限名</p>\n<p>2.使用方法的返回值和PackageManager.PERMISSION_GRANTED作比较，不等表示未授权，相等表示已授权</p>\n<p>3.把打电话的逻辑封装在**call()<strong>方法当中如果授权直接执行该方法，如果未授权，利用</strong>ActivityCompat.requestPermissions()**方法向用户申请授权，**requestPermissions()**接收三个参数，第一个是Activity实例，第二个是String数组，把权限名放入其中，第三个是请求码，只要是唯一值就行。</p>\n<p>4.调用<strong>requestPermissions()<strong>方法后最终会回调到</strong>onRequestPermissionResult()<strong>方法，而授权结果会封装在</strong>grantResults</strong>参数中，判断最后的授权结果</p>\n<p><strong>完整的实例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Button makeCall=(Button) findViewById(R.id.make_call);</span><br><span class=\"line\">        makeCall.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class=\"built_in\">this</span>,Manifest.permission.CALL_PHONE)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                    ActivityCompat.requestPermissions(MainActivity.<span class=\"built_in\">this</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;Manifest.permission.CALL_PHONE&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    call();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(Intent.ACTION_CALL);</span><br><span class=\"line\">            intent.setData(Uri.parse(<span class=\"string\">&quot;tel:10086&quot;</span>));</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (SecurityException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(&quot;MissingSuperCall&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode,String[] permissions,<span class=\"type\">int</span>[] grantResults)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(requestCode)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grantResults.length&gt;<span class=\"number\">0</span> &amp;&amp; grantResults[<span class=\"number\">0</span>]== PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                    call();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You denied the permission&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"访问其他程序的数据\"><a href=\"#访问其他程序的数据\" class=\"headerlink\" title=\"访问其他程序的数据\"></a>访问其他程序的数据</h1><h3 id=\"ContentResolver的基本用法\"><a href=\"#ContentResolver的基本用法\" class=\"headerlink\" title=\"ContentResolver的基本用法\"></a>ContentResolver的基本用法</h3><p>通过getContentResolver()方法获取ContentResolver实例ContentResolver提供了一系列方法，用于对数据进行CRUD和SQLite相似但参数上略有一些区别。</p>\n<p>不同于数据库的是表名参数被Uri参数代替，主要由两部分组成authority和path，authority一般以程序包名进行命名，path则对同一程序不同表进行区分，标准格式为：content:&#x2F;&#x2F;com.example.app.provider&#x2F;table1,还需要将其解析才可以作为参数传入，</p>\n<p><code>Uri uri=Uri.parse(&quot;content://com.example.app.provider/table1&quot;)</code></p>\n<h3 id=\"Query\"><a href=\"#Query\" class=\"headerlink\" title=\"Query( )\"></a>Query( )</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cursor cursor=getContentResolver().query(uri,projection,selection,selectionArgs,sortOrder);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(cursor!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cursor.moveToNext())&#123;</span><br><span class=\"line\">        String column1=cursor.getString(cursor.getColumnIndex(<span class=\"string\">&quot;column1&quot;</span>));</span><br><span class=\"line\">         <span class=\"type\">int</span> column2=cursor.getInt(cursor.getColumnIndex(<span class=\"string\">&quot;column2&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cursor.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Insert\"><a href=\"#Insert\" class=\"headerlink\" title=\"Insert( )\"></a>Insert( )</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ContentValues values=<span class=\"keyword\">new</span> <span class=\"title class_\">ContentValues</span>();</span><br><span class=\"line\">values.put(<span class=\"string\">&quot;column1&quot;</span>,<span class=\"string\">&quot;text&quot;</span>);</span><br><span class=\"line\">values.put(<span class=\"string\">&quot;column2&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">getContentResolver().insert(uri,values);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update( )\"></a>update( )</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ContentValues values=<span class=\"keyword\">new</span> <span class=\"title class_\">ContentValues</span>();</span><br><span class=\"line\">values.put(<span class=\"string\">&quot;column1&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">getContentResolver().update(uri,values,<span class=\"string\">&quot;column1=? and column2=?&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;text&quot;</span>,<span class=\"string\">&quot;1&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete( )\"></a>delete( )</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getContentResolver().delete(uri,<span class=\"string\">&quot;column2=?&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;1&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"读取系统联系人\"><a href=\"#读取系统联系人\" class=\"headerlink\" title=\"读取系统联系人\"></a>读取系统联系人</h3><p><strong>完整实例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    ArrayAdapter&lt;String&gt;adapter;</span><br><span class=\"line\">    List&lt;String&gt;contactsList=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        ListView contactsView=(ListView) findViewById(R.id.contacts_view);</span><br><span class=\"line\">        adapter=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayAdapter</span>&lt;String&gt;(<span class=\"built_in\">this</span>,android.R.layout.simple_list_item_1,contactsList);</span><br><span class=\"line\">        contactsView.setAdapter(adapter);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ContextCompat.checkSelfPermission(<span class=\"built_in\">this</span>, Manifest.permission.READ_CONTACTS)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">            ActivityCompat.requestPermissions(<span class=\"built_in\">this</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;Manifest.permission.READ_CONTACTS&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            readContacts();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">readContacts</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Cursor cursor=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            cursor=getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cursor!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(cursor.moveToNext())&#123;</span><br><span class=\"line\">                    <span class=\"meta\">@SuppressLint(&quot;Range&quot;)</span> String displayName=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));</span><br><span class=\"line\">                    <span class=\"meta\">@SuppressLint(&quot;Range&quot;)</span> String number=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));</span><br><span class=\"line\">                    contactsList.add(displayName+<span class=\"string\">&quot;\\n&quot;</span>+number);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                adapter.notifyDataSetChanged();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cursor!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                cursor.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(&quot;MissingSuperCall&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"meta\">@NonNull</span> String[] permissions, <span class=\"meta\">@NonNull</span> <span class=\"type\">int</span>[] grantResults)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(requestCode==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(grantResults.length&gt;<span class=\"number\">0</span>&amp;&amp;grantResults[<span class=\"number\">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                readContacts();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You denied the permission&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重点看readContacts()方法 里面的uri与前面讲的不太一样，这是为什么呢？这是因为ContactsContract.CommonDataKinds.Phone类已经帮我们做好了封装，提供另一个CONTENT_URI常量，而这个常量就是Uri.parse解析出来的结果。</p>\n<hr>\n<h1 id=\"创建内容提供器\"><a href=\"#创建内容提供器\" class=\"headerlink\" title=\"创建内容提供器\"></a>创建内容提供器</h1><p>1.利用Android Studio创建一个Content Provider，已经在在AndroidManifest.xml中自动注册。</p>\n<p>onCraete():返回true表示创建成功，返回false表示创建失败。</p>\n<p>query():返回值为Cursor类型</p>\n<p>insert():返回一个表示这条新记录的URI</p>\n<p>update():更新已有数据</p>\n<p>delete():被删除的行数将作为返回值返回</p>\n<p>getType():根据传入的URI来返回相应的MIME类型。</p>\n<p>使用通配符表示两种格式的URI：</p>\n<p>***：*<em>表示匹配任意长度的任意字符。例子content:&#x2F;&#x2F;com.example.app.provider&#x2F;</em></p>\n<p>**#：**表示匹配任意长度的数字。例子content:&#x2F;&#x2F;com.example.app.provider&#x2F;table1&#x2F;#</p>\n<p>2.可以借助UriMatcher这个类实现匹配内容URI的功能，利用UriMatcher中的addURI（）方法，接受三个参数，第一个是authority第二个是path第三个是自定义代码，这样当调用match()方法时就能匹配相应的表数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TABLE1_DIR=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TABLE1_ITEM=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TABLE2_DIR=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TABLE2_ITEM=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> UriMatcher uriMatcher;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        uriMatcher=<span class=\"keyword\">new</span> <span class=\"title class_\">UriMatcher</span>(UriMatcher.NO_MATCH);</span><br><span class=\"line\">        uriMatcher.addURI(<span class=\"string\">&quot;com.example.app.provider&quot;</span>,<span class=\"string\">&quot;table1&quot;</span>,TABLE1_DIR);</span><br><span class=\"line\">        uriMatcher.addURI(<span class=\"string\">&quot;com.example.app.provider&quot;</span>,<span class=\"string\">&quot;table1&quot;</span>,TABLE1_DIR);</span><br><span class=\"line\">        uriMatcher.addURI(<span class=\"string\">&quot;com.example.app.provider&quot;</span>,<span class=\"string\">&quot;table1&quot;</span>,TABLE1_DIR);</span><br><span class=\"line\">        uriMatcher.addURI(<span class=\"string\">&quot;com.example.app.provider&quot;</span>,<span class=\"string\">&quot;table1&quot;</span>,TABLE1_DIR);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cursor <span class=\"title function_\">query</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Uri uri, <span class=\"meta\">@Nullable</span> String[] strings, <span class=\"meta\">@Nullable</span> String s, <span class=\"meta\">@Nullable</span> String[] strings1, <span class=\"meta\">@Nullable</span> String s1)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(uriMatcher.match(uri)==TABLE1_DIR)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (uriMatcher.match(uri)==TABLE1_ITEM) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (uriMatcher.match(uri)==TABLE2_DIR) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (uriMatcher.match(uri) == TABLE2_ITEM) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.getType()方法一个URI内容对应的MIME字符由三部分组成：</p>\n<p>&lt;必须以vnd开头&gt;</p>\n<p>&lt;如果内容以路径结尾，则后接android.cursor.dir&#x2F;，如果以id结尾则后接android.cursor.item&#x2F;.&gt;</p>\n<p>&lt;最后接上vnd.<authority>.<path>&gt;</p>\n<p>URI为“content:&#x2F;&#x2F;com.example.app.provider&#x2F;table1”对应的MIME类型为“vnd.android.cursor.dir&#x2F;vnd.com.example.app.provider.table1”</p>\n<p>URI为“content:&#x2F;&#x2F;com.example.app.provider&#x2F;table1&#x2F;1”对应的MIME类型为“vnd.android.cursor.item&#x2F;vnd.com.example.app.provider.table1”</p>\n<p>实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">getType</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Uri uri)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(uriMatcher.match(uri)==TABLE1_DIR)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">&quot;vnd.android.cursor.dir/vnd.com.example.app.provider.table1&quot;</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (uriMatcher.match(uri)==TABLE1_ITEM) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">&quot;vnd.android.cursor.item/vnd.com.example.app.provider.table1&quot;</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (uriMatcher.match(uri)==TABLE2_DIR) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">&quot;vnd.android.cursor.dir/vnd.com.example.app.provider.table2&quot;</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (uriMatcher.match(uri) == TABLE2_ITEM) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">&quot;vnd.android.cursor.item/vnd.com.example.app.provider.table2&quot;</span>;</span><br><span class=\"line\">       &#125; </span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n"},{"title":"分享功能","date":"2025-09-06T10:56:24.000Z","_content":"\n### 分享纯文本\n\n```kotlin\nfun shareText(text: String) {\n    val sendIntent = Intent().apply {\n        action = Intent.ACTION_SEND\n        putExtra(Intent.EXTRA_TEXT, text)\n        type = \"text/plain\"\n    }\n\n    // 创建一个选择器，让用户选择用哪个 App 分享\n    val shareIntent = Intent.createChooser(sendIntent, \"分享文本到...\")\n    startActivity(shareIntent)\n}\n```\n\n**注意**：始终使用 `Intent.createChooser()` 是一个好习惯。这会强制系统每次都显示一个应用选择列表，避免用户因为设置了某个应用的“默认操作”而无法选择其他应用。\n\n### 分享单张图片或单个文件\n\n- **在 `AndroidManifest.xml` 中声明 `FileProvider`**\n\n```kotlin\n<manifest ...>\n    <application ...>\n        ...\n        <provider\n            android:name=\"androidx.core.content.FileProvider\"\n            android:authorities=\"${applicationId}.fileprovider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/file_paths\" />\n        </provider>\n        ...\n    </application>\n</manifest>\n```\n\n- **创建 `res/xml/file_paths.xml` 文件**\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <cache-path name=\"my_cache_images\" path=\"images/\"/>\n    <files-path name=\"my_files\" path=\"docs/\"/>\n    <external-path name=\"my_external_files\" path=\".\"/>\n</paths>\n```\n\n- **编写分享代码**\n\n```kotlin\nprivate fun saveImgAndGetUri(context: Context,bitmap: Bitmap):Uri{\n        val imageFolder= File(context.cacheDir,\"images\")\n        val uri:Uri?\n        imageFolder.mkdirs()\n        val file= File(imageFolder,\"shared_image.png\")\n        val stream= FileOutputStream(file)\n        bitmap.compress(Bitmap.CompressFormat.PNG,90,stream)\n        stream.flush()\n        stream.close()\n        uri = FileProvider.getUriForFile(\n            context,\n            \"com.example.daysmatter.fileprovider\", // 必须和 Manifest 中的 authorities 一致\n            file\n        )\n        return uri\n    }\nprivate fun shareImage(context: Context, uri: Uri) {\n     // 创建 Intent\n        val shareIntent = Intent().apply {\n            action = Intent.ACTION_SEND\n            putExtra(Intent.EXTRA_STREAM, uri)\n            type = \"image/png\"            // 设置正确的 MIME Type\n           // 授予临时读取权限\n            addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)\n        }\n     // 4. 启动选择器\n        startActivity(Intent.createChooser(shareIntent, \"分享图片到...\"))\n    }\n```\n\n### 分享多张图片或多个文件\n\n与分享单张基本相同，有个别点有差异\n\n- **Intent Action: `Intent.ACTION_SEND_MULTIPLE`**\n\n- **分享内容: 使用 `putParcelableArrayListExtra(Intent.EXTRA_STREAM, ...)` 存放一个包含多个 `Uri` 的 `ArrayList`。**\n\n```\nfun shareMultipleImages(context: Context, imageFiles: List<File>) {\n    val uriList = ArrayList<Uri>()\n    imageFiles.forEach { file ->\n        val uri = FileProvider.getUriForFile(\n            context,\n            \"${context.packageName}.fileprovider\",\n            file\n        )\n        uriList.add(uri)\n    }\n\n    val shareIntent = Intent().apply {\n        action = Intent.ACTION_SEND_MULTIPLE\n        putParcelableArrayListExtra(Intent.EXTRA_STREAM, uriList)\n        type = \"image/*\" // 可以使用通配符\n        addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)\n    }\n\n    startActivity(Intent.createChooser(shareIntent, \"分享多张图片...\"))\n}\n```\n\n","source":"_posts/分享功能.md","raw":"---\ntitle: 分享功能\ndate: 2025-09-06 18:56:24\ncategories:\n- Android随笔\ntags:\n---\n\n### 分享纯文本\n\n```kotlin\nfun shareText(text: String) {\n    val sendIntent = Intent().apply {\n        action = Intent.ACTION_SEND\n        putExtra(Intent.EXTRA_TEXT, text)\n        type = \"text/plain\"\n    }\n\n    // 创建一个选择器，让用户选择用哪个 App 分享\n    val shareIntent = Intent.createChooser(sendIntent, \"分享文本到...\")\n    startActivity(shareIntent)\n}\n```\n\n**注意**：始终使用 `Intent.createChooser()` 是一个好习惯。这会强制系统每次都显示一个应用选择列表，避免用户因为设置了某个应用的“默认操作”而无法选择其他应用。\n\n### 分享单张图片或单个文件\n\n- **在 `AndroidManifest.xml` 中声明 `FileProvider`**\n\n```kotlin\n<manifest ...>\n    <application ...>\n        ...\n        <provider\n            android:name=\"androidx.core.content.FileProvider\"\n            android:authorities=\"${applicationId}.fileprovider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/file_paths\" />\n        </provider>\n        ...\n    </application>\n</manifest>\n```\n\n- **创建 `res/xml/file_paths.xml` 文件**\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <cache-path name=\"my_cache_images\" path=\"images/\"/>\n    <files-path name=\"my_files\" path=\"docs/\"/>\n    <external-path name=\"my_external_files\" path=\".\"/>\n</paths>\n```\n\n- **编写分享代码**\n\n```kotlin\nprivate fun saveImgAndGetUri(context: Context,bitmap: Bitmap):Uri{\n        val imageFolder= File(context.cacheDir,\"images\")\n        val uri:Uri?\n        imageFolder.mkdirs()\n        val file= File(imageFolder,\"shared_image.png\")\n        val stream= FileOutputStream(file)\n        bitmap.compress(Bitmap.CompressFormat.PNG,90,stream)\n        stream.flush()\n        stream.close()\n        uri = FileProvider.getUriForFile(\n            context,\n            \"com.example.daysmatter.fileprovider\", // 必须和 Manifest 中的 authorities 一致\n            file\n        )\n        return uri\n    }\nprivate fun shareImage(context: Context, uri: Uri) {\n     // 创建 Intent\n        val shareIntent = Intent().apply {\n            action = Intent.ACTION_SEND\n            putExtra(Intent.EXTRA_STREAM, uri)\n            type = \"image/png\"            // 设置正确的 MIME Type\n           // 授予临时读取权限\n            addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)\n        }\n     // 4. 启动选择器\n        startActivity(Intent.createChooser(shareIntent, \"分享图片到...\"))\n    }\n```\n\n### 分享多张图片或多个文件\n\n与分享单张基本相同，有个别点有差异\n\n- **Intent Action: `Intent.ACTION_SEND_MULTIPLE`**\n\n- **分享内容: 使用 `putParcelableArrayListExtra(Intent.EXTRA_STREAM, ...)` 存放一个包含多个 `Uri` 的 `ArrayList`。**\n\n```\nfun shareMultipleImages(context: Context, imageFiles: List<File>) {\n    val uriList = ArrayList<Uri>()\n    imageFiles.forEach { file ->\n        val uri = FileProvider.getUriForFile(\n            context,\n            \"${context.packageName}.fileprovider\",\n            file\n        )\n        uriList.add(uri)\n    }\n\n    val shareIntent = Intent().apply {\n        action = Intent.ACTION_SEND_MULTIPLE\n        putParcelableArrayListExtra(Intent.EXTRA_STREAM, uriList)\n        type = \"image/*\" // 可以使用通配符\n        addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)\n    }\n\n    startActivity(Intent.createChooser(shareIntent, \"分享多张图片...\"))\n}\n```\n\n","slug":"分享功能","published":1,"updated":"2025-09-06T11:59:38.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcf001vs4s7fiz52pz9","content":"<h3 id=\"分享纯文本\"><a href=\"#分享纯文本\" class=\"headerlink\" title=\"分享纯文本\"></a>分享纯文本</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shareText</span><span class=\"params\">(text: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sendIntent = Intent().apply &#123;</span><br><span class=\"line\">        action = Intent.ACTION_SEND</span><br><span class=\"line\">        putExtra(Intent.EXTRA_TEXT, text)</span><br><span class=\"line\">        type = <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个选择器，让用户选择用哪个 App 分享</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> shareIntent = Intent.createChooser(sendIntent, <span class=\"string\">&quot;分享文本到...&quot;</span>)</span><br><span class=\"line\">    startActivity(shareIntent)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：始终使用 <code>Intent.createChooser()</code> 是一个好习惯。这会强制系统每次都显示一个应用选择列表，避免用户因为设置了某个应用的“默认操作”而无法选择其他应用。</p>\n<h3 id=\"分享单张图片或单个文件\"><a href=\"#分享单张图片或单个文件\" class=\"headerlink\" title=\"分享单张图片或单个文件\"></a>分享单张图片或单个文件</h3><ul>\n<li><strong>在 <code>AndroidManifest.xml</code> 中声明 <code>FileProvider</code></strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;manifest ...&gt;</span><br><span class=\"line\">    &lt;application ...&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &lt;provider</span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;androidx.core.content.FileProvider&quot;</span></span><br><span class=\"line\">            android:authorities=<span class=\"string\">&quot;<span class=\"subst\">$&#123;applicationId&#125;</span>.fileprovider&quot;</span></span><br><span class=\"line\">            android:exported=<span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">            android:grantUriPermissions=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">            &lt;meta-<span class=\"keyword\">data</span></span><br><span class=\"line\">                android:name=<span class=\"string\">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span><br><span class=\"line\">                android:resource=<span class=\"string\">&quot;@xml/file_paths&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;/provider&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &lt;/application&gt;</span><br><span class=\"line\">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>创建 <code>res/xml/file_paths.xml</code> 文件</strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;paths xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class=\"line\">    &lt;cache-path name=<span class=\"string\">&quot;my_cache_images&quot;</span> path=<span class=\"string\">&quot;images/&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;files-path name=<span class=\"string\">&quot;my_files&quot;</span> path=<span class=\"string\">&quot;docs/&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">external</span>-path name=<span class=\"string\">&quot;my_external_files&quot;</span> path=<span class=\"string\">&quot;.&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/paths&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>编写分享代码</strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveImgAndGetUri</span><span class=\"params\">(context: <span class=\"type\">Context</span>,bitmap: <span class=\"type\">Bitmap</span>)</span></span>:Uri&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> imageFolder= File(context.cacheDir,<span class=\"string\">&quot;images&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> uri:Uri?</span><br><span class=\"line\">        imageFolder.mkdirs()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> file= File(imageFolder,<span class=\"string\">&quot;shared_image.png&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> stream= FileOutputStream(file)</span><br><span class=\"line\">        bitmap.compress(Bitmap.CompressFormat.PNG,<span class=\"number\">90</span>,stream)</span><br><span class=\"line\">        stream.flush()</span><br><span class=\"line\">        stream.close()</span><br><span class=\"line\">        uri = FileProvider.getUriForFile(</span><br><span class=\"line\">            context,</span><br><span class=\"line\">            <span class=\"string\">&quot;com.example.daysmatter.fileprovider&quot;</span>, <span class=\"comment\">// 必须和 Manifest 中的 authorities 一致</span></span><br><span class=\"line\">            file</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> uri</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shareImage</span><span class=\"params\">(context: <span class=\"type\">Context</span>, uri: <span class=\"type\">Uri</span>)</span></span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 创建 Intent</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> shareIntent = Intent().apply &#123;</span><br><span class=\"line\">            action = Intent.ACTION_SEND</span><br><span class=\"line\">            putExtra(Intent.EXTRA_STREAM, uri)</span><br><span class=\"line\">            type = <span class=\"string\">&quot;image/png&quot;</span>            <span class=\"comment\">// 设置正确的 MIME Type</span></span><br><span class=\"line\">           <span class=\"comment\">// 授予临时读取权限</span></span><br><span class=\"line\">            addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     <span class=\"comment\">// 4. 启动选择器</span></span><br><span class=\"line\">        startActivity(Intent.createChooser(shareIntent, <span class=\"string\">&quot;分享图片到...&quot;</span>))</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分享多张图片或多个文件\"><a href=\"#分享多张图片或多个文件\" class=\"headerlink\" title=\"分享多张图片或多个文件\"></a>分享多张图片或多个文件</h3><p>与分享单张基本相同，有个别点有差异</p>\n<ul>\n<li><p><strong>Intent Action: <code>Intent.ACTION_SEND_MULTIPLE</code></strong></p>\n</li>\n<li><p><strong>分享内容: 使用 <code>putParcelableArrayListExtra(Intent.EXTRA_STREAM, ...)</code> 存放一个包含多个 <code>Uri</code> 的 <code>ArrayList</code>。</strong></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun shareMultipleImages(context: Context, imageFiles: List&lt;File&gt;) &#123;</span><br><span class=\"line\">    val uriList = ArrayList&lt;Uri&gt;()</span><br><span class=\"line\">    imageFiles.forEach &#123; file -&gt;</span><br><span class=\"line\">        val uri = FileProvider.getUriForFile(</span><br><span class=\"line\">            context,</span><br><span class=\"line\">            &quot;$&#123;context.packageName&#125;.fileprovider&quot;,</span><br><span class=\"line\">            file</span><br><span class=\"line\">        )</span><br><span class=\"line\">        uriList.add(uri)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    val shareIntent = Intent().apply &#123;</span><br><span class=\"line\">        action = Intent.ACTION_SEND_MULTIPLE</span><br><span class=\"line\">        putParcelableArrayListExtra(Intent.EXTRA_STREAM, uriList)</span><br><span class=\"line\">        type = &quot;image/*&quot; // 可以使用通配符</span><br><span class=\"line\">        addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    startActivity(Intent.createChooser(shareIntent, &quot;分享多张图片...&quot;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"分享纯文本\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nfun shareText(text: String) {\n    val sendIntent = Intent().apply {\n        action = Intent.ACTION_SEND\n        putExtra(Intent.EXTRA_TEXT, text)\n        type = \"text/plain\"\n    }\n\n    // 创建一个选择器，让用户选择用哪个 App 分享\n    val shareIntent = Intent.createChooser(sendIntent, \"","more":"<h3 id=\"分享纯文本\"><a href=\"#分享纯文本\" class=\"headerlink\" title=\"分享纯文本\"></a>分享纯文本</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shareText</span><span class=\"params\">(text: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sendIntent = Intent().apply &#123;</span><br><span class=\"line\">        action = Intent.ACTION_SEND</span><br><span class=\"line\">        putExtra(Intent.EXTRA_TEXT, text)</span><br><span class=\"line\">        type = <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个选择器，让用户选择用哪个 App 分享</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> shareIntent = Intent.createChooser(sendIntent, <span class=\"string\">&quot;分享文本到...&quot;</span>)</span><br><span class=\"line\">    startActivity(shareIntent)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：始终使用 <code>Intent.createChooser()</code> 是一个好习惯。这会强制系统每次都显示一个应用选择列表，避免用户因为设置了某个应用的“默认操作”而无法选择其他应用。</p>\n<h3 id=\"分享单张图片或单个文件\"><a href=\"#分享单张图片或单个文件\" class=\"headerlink\" title=\"分享单张图片或单个文件\"></a>分享单张图片或单个文件</h3><ul>\n<li><strong>在 <code>AndroidManifest.xml</code> 中声明 <code>FileProvider</code></strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;manifest ...&gt;</span><br><span class=\"line\">    &lt;application ...&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &lt;provider</span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;androidx.core.content.FileProvider&quot;</span></span><br><span class=\"line\">            android:authorities=<span class=\"string\">&quot;<span class=\"subst\">$&#123;applicationId&#125;</span>.fileprovider&quot;</span></span><br><span class=\"line\">            android:exported=<span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">            android:grantUriPermissions=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">            &lt;meta-<span class=\"keyword\">data</span></span><br><span class=\"line\">                android:name=<span class=\"string\">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span><br><span class=\"line\">                android:resource=<span class=\"string\">&quot;@xml/file_paths&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;/provider&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &lt;/application&gt;</span><br><span class=\"line\">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>创建 <code>res/xml/file_paths.xml</code> 文件</strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;paths xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class=\"line\">    &lt;cache-path name=<span class=\"string\">&quot;my_cache_images&quot;</span> path=<span class=\"string\">&quot;images/&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;files-path name=<span class=\"string\">&quot;my_files&quot;</span> path=<span class=\"string\">&quot;docs/&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">external</span>-path name=<span class=\"string\">&quot;my_external_files&quot;</span> path=<span class=\"string\">&quot;.&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/paths&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>编写分享代码</strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveImgAndGetUri</span><span class=\"params\">(context: <span class=\"type\">Context</span>,bitmap: <span class=\"type\">Bitmap</span>)</span></span>:Uri&#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> imageFolder= File(context.cacheDir,<span class=\"string\">&quot;images&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> uri:Uri?</span><br><span class=\"line\">        imageFolder.mkdirs()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> file= File(imageFolder,<span class=\"string\">&quot;shared_image.png&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> stream= FileOutputStream(file)</span><br><span class=\"line\">        bitmap.compress(Bitmap.CompressFormat.PNG,<span class=\"number\">90</span>,stream)</span><br><span class=\"line\">        stream.flush()</span><br><span class=\"line\">        stream.close()</span><br><span class=\"line\">        uri = FileProvider.getUriForFile(</span><br><span class=\"line\">            context,</span><br><span class=\"line\">            <span class=\"string\">&quot;com.example.daysmatter.fileprovider&quot;</span>, <span class=\"comment\">// 必须和 Manifest 中的 authorities 一致</span></span><br><span class=\"line\">            file</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> uri</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">shareImage</span><span class=\"params\">(context: <span class=\"type\">Context</span>, uri: <span class=\"type\">Uri</span>)</span></span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 创建 Intent</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> shareIntent = Intent().apply &#123;</span><br><span class=\"line\">            action = Intent.ACTION_SEND</span><br><span class=\"line\">            putExtra(Intent.EXTRA_STREAM, uri)</span><br><span class=\"line\">            type = <span class=\"string\">&quot;image/png&quot;</span>            <span class=\"comment\">// 设置正确的 MIME Type</span></span><br><span class=\"line\">           <span class=\"comment\">// 授予临时读取权限</span></span><br><span class=\"line\">            addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     <span class=\"comment\">// 4. 启动选择器</span></span><br><span class=\"line\">        startActivity(Intent.createChooser(shareIntent, <span class=\"string\">&quot;分享图片到...&quot;</span>))</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分享多张图片或多个文件\"><a href=\"#分享多张图片或多个文件\" class=\"headerlink\" title=\"分享多张图片或多个文件\"></a>分享多张图片或多个文件</h3><p>与分享单张基本相同，有个别点有差异</p>\n<ul>\n<li><p><strong>Intent Action: <code>Intent.ACTION_SEND_MULTIPLE</code></strong></p>\n</li>\n<li><p><strong>分享内容: 使用 <code>putParcelableArrayListExtra(Intent.EXTRA_STREAM, ...)</code> 存放一个包含多个 <code>Uri</code> 的 <code>ArrayList</code>。</strong></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun shareMultipleImages(context: Context, imageFiles: List&lt;File&gt;) &#123;</span><br><span class=\"line\">    val uriList = ArrayList&lt;Uri&gt;()</span><br><span class=\"line\">    imageFiles.forEach &#123; file -&gt;</span><br><span class=\"line\">        val uri = FileProvider.getUriForFile(</span><br><span class=\"line\">            context,</span><br><span class=\"line\">            &quot;$&#123;context.packageName&#125;.fileprovider&quot;,</span><br><span class=\"line\">            file</span><br><span class=\"line\">        )</span><br><span class=\"line\">        uriList.add(uri)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    val shareIntent = Intent().apply &#123;</span><br><span class=\"line\">        action = Intent.ACTION_SEND_MULTIPLE</span><br><span class=\"line\">        putParcelableArrayListExtra(Intent.EXTRA_STREAM, uriList)</span><br><span class=\"line\">        type = &quot;image/*&quot; // 可以使用通配符</span><br><span class=\"line\">        addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    startActivity(Intent.createChooser(shareIntent, &quot;分享多张图片...&quot;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"原码补码反码","date":"2025-08-26T13:03:48.000Z","_content":"\n### 三者关系\n\n![](../img/img117.png)\n\n### 原码的弊端\n\n![](../img/img118.png)\n\n### 反码出现的目的\n\n解决原码不能计算负数的问题\n\n### 反码的弊端\n\n负数计算时结果不跨0没有任何问题，但是结果跨0会和实际结果有1的偏差\n\n### 补码出现的目的\n\n解决反码计算时的跨0问题\n\n**注意：**\n\n-  **计算机中数据的存储及运算都是以补码的形式进行的，补码完美解决了二进制负数的运算问题**\n\n- **原码反码的范围是-127~+127**\n\n- **补码的范围是-128~+127**\n\n### 运算符\n\n![](../img/img119.png)\n\n**左移一次相当于乘2**\n\n**右移一次相当于除2**\n","source":"_posts/原码补码反码.md","raw":"---\ntitle: 原码补码反码\ndate: 2025-08-26 21:03:48\ncategories:\n- 计算机底层\ntags:\n---\n\n### 三者关系\n\n![](../img/img117.png)\n\n### 原码的弊端\n\n![](../img/img118.png)\n\n### 反码出现的目的\n\n解决原码不能计算负数的问题\n\n### 反码的弊端\n\n负数计算时结果不跨0没有任何问题，但是结果跨0会和实际结果有1的偏差\n\n### 补码出现的目的\n\n解决反码计算时的跨0问题\n\n**注意：**\n\n-  **计算机中数据的存储及运算都是以补码的形式进行的，补码完美解决了二进制负数的运算问题**\n\n- **原码反码的范围是-127~+127**\n\n- **补码的范围是-128~+127**\n\n### 运算符\n\n![](../img/img119.png)\n\n**左移一次相当于乘2**\n\n**右移一次相当于除2**\n","slug":"原码补码反码","published":1,"updated":"2025-08-26T14:19:34.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcg001ys4s7c0z7dqkf","content":"<h3 id=\"三者关系\"><a href=\"#三者关系\" class=\"headerlink\" title=\"三者关系\"></a>三者关系</h3><p><img src=\"/../img/img117.png\"></p>\n<h3 id=\"原码的弊端\"><a href=\"#原码的弊端\" class=\"headerlink\" title=\"原码的弊端\"></a>原码的弊端</h3><p><img src=\"/../img/img118.png\"></p>\n<h3 id=\"反码出现的目的\"><a href=\"#反码出现的目的\" class=\"headerlink\" title=\"反码出现的目的\"></a>反码出现的目的</h3><p>解决原码不能计算负数的问题</p>\n<h3 id=\"反码的弊端\"><a href=\"#反码的弊端\" class=\"headerlink\" title=\"反码的弊端\"></a>反码的弊端</h3><p>负数计算时结果不跨0没有任何问题，但是结果跨0会和实际结果有1的偏差</p>\n<h3 id=\"补码出现的目的\"><a href=\"#补码出现的目的\" class=\"headerlink\" title=\"补码出现的目的\"></a>补码出现的目的</h3><p>解决反码计算时的跨0问题</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li><p><strong>计算机中数据的存储及运算都是以补码的形式进行的，补码完美解决了二进制负数的运算问题</strong></p>\n</li>\n<li><p><strong>原码反码的范围是-127~+127</strong></p>\n</li>\n<li><p><strong>补码的范围是-128~+127</strong></p>\n</li>\n</ul>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p><img src=\"/../img/img119.png\"></p>\n<p><strong>左移一次相当于乘2</strong></p>\n<p><strong>右移一次相当于除2</strong></p>\n","excerpt":"三者关系\n\n\n原码的弊端\n\n\n反码出现的目的\n解决原码不能计算负数的问题\n\n反码的弊端\n负数计算时结果不跨0没有任何问题，但是结果跨0会和实际结果有1的偏差\n\n补码出现的目的\n解决反码计算时的跨0问题\n\n注意：\n\n * 计算机中数据的存储及运算都是以补码的形式进行的，补码完美解决了二进制负数的运算问题\n   \n   \n * 原码反码的范围是-127~+127\n   \n   \n * 补码的范围是-128~+127\n   \n   \n\n运算符\n\n\n左移一次相当于乘2\n\n右移一次相当于除2","more":"<h3 id=\"三者关系\"><a href=\"#三者关系\" class=\"headerlink\" title=\"三者关系\"></a>三者关系</h3><p><img src=\"/../img/img117.png\"></p>\n<h3 id=\"原码的弊端\"><a href=\"#原码的弊端\" class=\"headerlink\" title=\"原码的弊端\"></a>原码的弊端</h3><p><img src=\"/../img/img118.png\"></p>\n<h3 id=\"反码出现的目的\"><a href=\"#反码出现的目的\" class=\"headerlink\" title=\"反码出现的目的\"></a>反码出现的目的</h3><p>解决原码不能计算负数的问题</p>\n<h3 id=\"反码的弊端\"><a href=\"#反码的弊端\" class=\"headerlink\" title=\"反码的弊端\"></a>反码的弊端</h3><p>负数计算时结果不跨0没有任何问题，但是结果跨0会和实际结果有1的偏差</p>\n<h3 id=\"补码出现的目的\"><a href=\"#补码出现的目的\" class=\"headerlink\" title=\"补码出现的目的\"></a>补码出现的目的</h3><p>解决反码计算时的跨0问题</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li><p><strong>计算机中数据的存储及运算都是以补码的形式进行的，补码完美解决了二进制负数的运算问题</strong></p>\n</li>\n<li><p><strong>原码反码的范围是-127~+127</strong></p>\n</li>\n<li><p><strong>补码的范围是-128~+127</strong></p>\n</li>\n</ul>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p><img src=\"/../img/img119.png\"></p>\n<p><strong>左移一次相当于乘2</strong></p>\n<p><strong>右移一次相当于除2</strong></p>\n"},{"title":"如何给项目引入AI助手","date":"2025-08-20T03:34:36.000Z","_content":"\n#                                        这里拿Gemini进行示范\n\n- ### 先根据返回的JSON数据格式写出数据模型\n\n```kotlin\n//AI的api调用请求体和响应体json格式不相同需要区别开来\ndata class GeminiRequestBody(val contents:List<Content>)\ndata class GeminiResponseBody(val candidates: List<Candidate>)\ndata class Candidate(val content: Content)\ndata class Content(val parts:List<Part>)\ndata class Part(val text:String)\n```\n\n- ### 定义接口，这里使用***POST***注解，***GET***注解只用于获取数据，这里不适用\n\n```kotlin\ninterface AIService {\n    @POST(\"v1beta/models/gemini-2.5-flash:generateContent\")\n     suspend fun generateContent(\n        @Query(\"key\") apiKey: String = MyApplication.GEMINI_API_KEY,\n        @Body requestBody: GeminiRequestBody\n    ) :Response<GeminiResponseBody>\n}\n```\n\n- ### 搭建Retrofit构建器\n\n```kotlin\nobject AICreator {\n    private const val BASE_URL = \"https://generativelanguage.googleapis.com/\"\n    private val retrofit = Retrofit.Builder()\n        .baseUrl(BASE_URL)\n        .addConverterFactory(GsonConverterFactory.create())\n        .build()\n        \n    fun <T> create(serviceClass:Class<T>):T= retrofit.create(serviceClass)\n    inline fun <reified T>create():T=create(T::class.java)\n}\n```\n\n- ### 提交申请并对返回的数据进行解析\n\n```kotlin\nobject AInetwork {\n    //创建接口的动态代理对象\n    private val aiService = AICreator.create<AIService>()\n    //向AI服务器发送一个请求，并处理返回的结果。\n    suspend fun generateContent(requestBody: GeminiRequestBody): Result<GeminiResponseBody> {\n        return try {\n            val response = aiService.generateContent(requestBody=requestBody)\n            if (response.isSuccessful && response.body() != null) {\n                Result.success(response.body()!!)\n            } else {\n                val errorMessage = response.errorBody()?.string() ?: \"未知错误\"\n                Log.e(\"AInetwork\", \"数据获取失败: $errorMessage\")\n                Result.failure(RuntimeException(\"API请求失败: ${response.code()} - $errorMessage\"))\n            }\n        } catch (e: Exception) {\n            Log.e(\"AInetwork\", \"网络请求失败: ${e.message}\", e)\n            Result.failure(e)\n        }\n    }\n}\n```\n\n- ### 进行调用\n\n```kotlin\n//界面逻辑\nclass AIActivity : AppCompatActivity() {\n    private lateinit var binder: ActivityAiactivityBinding\n    private lateinit var viewModel: AIViewModel\n    private val  msgList=ArrayList<Msg>()\n    private var adapter: MsgAdapter? = null\n        override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binder = ActivityAiactivityBinding.inflate(layoutInflater)\n        setContentView(binder.root)\n        \n        // 初始化ViewModel\n        viewModel = ViewModelProvider(this)[AIViewModel::class.java]\n        \n        // 设置工具栏\n        setSupportActionBar(binder.AiToolbar)\n        supportActionBar?.let {\n            it.title = \"\"\n            it.setDisplayHomeAsUpEnabled(true)\n            it.setHomeAsUpIndicator(R.drawable.ic_return)\n        }\n        \n        // 设置RecyclerView\n        binder.AiRecyclerView.layoutManager = LinearLayoutManager(this)\n        adapter = MsgAdapter(msgList)\n        binder.AiRecyclerView.adapter = adapter\n        \n        // 设置按钮点击事件\n        binder.AiButton.setOnClickListener {\n            send()\n        }\n        \n        // 观察数据变化\n        observeViewModel()\n    }\n\n\n    /**\n     * 观察ViewModel数据变化\n     */\n    private fun observeViewModel() {\n        // 观察消息列表变化\n        viewModel.messages.observe(this) { messages ->\n            adapter?.let { adapter ->\n                // 更新适配器数据\n                adapter.updateMessages(messages)\n                // 滚动到最新消息\n                if (messages.isNotEmpty()) {\n                    binder.AiRecyclerView.scrollToPosition(messages.size - 1)\n                }\n            }\n        }\n        // 观察加载状态\n        viewModel.isLoading.observe(this) { isLoading ->\n            // 当AI正在思考时，禁用发送按钮\n            binder.AiButton.isEnabled = !isLoading\n        }\n    }\n    \n    /**\n     * 发送消息\n     */\n    private fun send() {\n        val content = binder.AiEditText.text.toString()\n        if (content.isNotEmpty()) {\n            Log.d(\"AIActivity\", \"用户发送问题: $content\")\n            \n            // 清空输入框\n            binder.AiEditText.setText(\"\")\n            \n            // 通过ViewModel发送消息\n            viewModel.sendMessage(content)\n        }\n    }\n    \n}\n```\n\n```kotlin\n//ViewModel部分\nclass AIViewModel : ViewModel() {\n\n    // 消息列表\n    private val _messages = MutableLiveData<List<Msg>>()\n    val messages: LiveData<List<Msg>> = _messages\n\n    // 加载状态\n    private val _isLoading = MutableLiveData<Boolean>()\n    val isLoading: LiveData<Boolean> = _isLoading\n\n    // 错误状态\n    private val _error = MutableLiveData<String?>()\n    val error: LiveData<String?> = _error\n\n    // 内部消息列表\n    private val messageList = mutableListOf<Msg>()\n\n    init {\n        _messages.value = messageList\n        _isLoading.value = false\n        _error.value = null\n    }\n\n    /**\n     * 发送消息\n     */\n    fun sendMessage(content: String) {\n        if (content.isBlank()) return\n\n        // 添加用户消息\n        addMessage(Msg(content, Msg.TYPE_SENT))\n\n        // 请求AI回复\n        requestAIResponse(content)\n    }\n\n    /**\n     * 请求AI回复\n     */\n    private fun requestAIResponse(question: String) {\n        viewModelScope.launch {\n            try {\n                _isLoading.value = true\n                _error.value = null\n\n                // 添加加载提示\n                addMessage(Msg(\"正在思考中...\", Msg.TYPE_RESERVED))\n\n                // 在IO线程中执行网络请求\n                val result = withContext(Dispatchers.IO) {\n                    val requestBody = GeminiRequestBody(\n                        contents = listOf(Content(parts = listOf(Part(text = question))))\n                    )\n                    AInetwork.generateContent(requestBody)\n                }\n\n                // 移除加载提示\n                removeLastMessage()\n\n                // 处理结果\n                result.onSuccess { response ->\n                    val aiResponse = response.candidates.firstOrNull()?.content?.parts?.firstOrNull()?.text\n\n                    if (aiResponse.isNullOrEmpty()) {\n                        addMessage(Msg(\"抱歉，我暂时无法回答您的问题。\", Msg.TYPE_RESERVED))\n                    } else {\n                        addMessage(Msg(aiResponse, Msg.TYPE_RESERVED))\n                    }\n                }.onFailure { exception ->\n                    val errorMsg = \"网络请求失败: ${exception.message}\"\n                    addMessage(Msg(errorMsg, Msg.TYPE_RESERVED))\n                    _error.value = errorMsg\n                }\n\n            } catch (e: Exception) {\n                removeLastMessage()\n                val errorMsg = \"发生未知错误，请稍后重试。\"\n                addMessage(Msg(errorMsg, Msg.TYPE_RESERVED))\n                _error.value = errorMsg\n            } finally {\n                _isLoading.value = false\n            }\n        }\n    }\n\n    /**\n     * 添加消息到列表\n     */\n    private fun addMessage(message: Msg) {\n        messageList.add(message)\n        _messages.value = messageList.toList()\n    }\n\n    /**\n     * 移除最后一条消息\n     */\n    private fun removeLastMessage() {\n        if (messageList.isNotEmpty()) {\n            messageList.removeAt(messageList.size - 1)\n            _messages.value = messageList.toList()\n        }\n    }\n}\n```\n\n","source":"_posts/如何给项目引入AI助手.md","raw":"---\ntitle: 如何给项目引入AI助手\ndate: 2025-08-20 11:34:36\ncategories:\n- AI\ntags:\n---\n\n#                                        这里拿Gemini进行示范\n\n- ### 先根据返回的JSON数据格式写出数据模型\n\n```kotlin\n//AI的api调用请求体和响应体json格式不相同需要区别开来\ndata class GeminiRequestBody(val contents:List<Content>)\ndata class GeminiResponseBody(val candidates: List<Candidate>)\ndata class Candidate(val content: Content)\ndata class Content(val parts:List<Part>)\ndata class Part(val text:String)\n```\n\n- ### 定义接口，这里使用***POST***注解，***GET***注解只用于获取数据，这里不适用\n\n```kotlin\ninterface AIService {\n    @POST(\"v1beta/models/gemini-2.5-flash:generateContent\")\n     suspend fun generateContent(\n        @Query(\"key\") apiKey: String = MyApplication.GEMINI_API_KEY,\n        @Body requestBody: GeminiRequestBody\n    ) :Response<GeminiResponseBody>\n}\n```\n\n- ### 搭建Retrofit构建器\n\n```kotlin\nobject AICreator {\n    private const val BASE_URL = \"https://generativelanguage.googleapis.com/\"\n    private val retrofit = Retrofit.Builder()\n        .baseUrl(BASE_URL)\n        .addConverterFactory(GsonConverterFactory.create())\n        .build()\n        \n    fun <T> create(serviceClass:Class<T>):T= retrofit.create(serviceClass)\n    inline fun <reified T>create():T=create(T::class.java)\n}\n```\n\n- ### 提交申请并对返回的数据进行解析\n\n```kotlin\nobject AInetwork {\n    //创建接口的动态代理对象\n    private val aiService = AICreator.create<AIService>()\n    //向AI服务器发送一个请求，并处理返回的结果。\n    suspend fun generateContent(requestBody: GeminiRequestBody): Result<GeminiResponseBody> {\n        return try {\n            val response = aiService.generateContent(requestBody=requestBody)\n            if (response.isSuccessful && response.body() != null) {\n                Result.success(response.body()!!)\n            } else {\n                val errorMessage = response.errorBody()?.string() ?: \"未知错误\"\n                Log.e(\"AInetwork\", \"数据获取失败: $errorMessage\")\n                Result.failure(RuntimeException(\"API请求失败: ${response.code()} - $errorMessage\"))\n            }\n        } catch (e: Exception) {\n            Log.e(\"AInetwork\", \"网络请求失败: ${e.message}\", e)\n            Result.failure(e)\n        }\n    }\n}\n```\n\n- ### 进行调用\n\n```kotlin\n//界面逻辑\nclass AIActivity : AppCompatActivity() {\n    private lateinit var binder: ActivityAiactivityBinding\n    private lateinit var viewModel: AIViewModel\n    private val  msgList=ArrayList<Msg>()\n    private var adapter: MsgAdapter? = null\n        override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binder = ActivityAiactivityBinding.inflate(layoutInflater)\n        setContentView(binder.root)\n        \n        // 初始化ViewModel\n        viewModel = ViewModelProvider(this)[AIViewModel::class.java]\n        \n        // 设置工具栏\n        setSupportActionBar(binder.AiToolbar)\n        supportActionBar?.let {\n            it.title = \"\"\n            it.setDisplayHomeAsUpEnabled(true)\n            it.setHomeAsUpIndicator(R.drawable.ic_return)\n        }\n        \n        // 设置RecyclerView\n        binder.AiRecyclerView.layoutManager = LinearLayoutManager(this)\n        adapter = MsgAdapter(msgList)\n        binder.AiRecyclerView.adapter = adapter\n        \n        // 设置按钮点击事件\n        binder.AiButton.setOnClickListener {\n            send()\n        }\n        \n        // 观察数据变化\n        observeViewModel()\n    }\n\n\n    /**\n     * 观察ViewModel数据变化\n     */\n    private fun observeViewModel() {\n        // 观察消息列表变化\n        viewModel.messages.observe(this) { messages ->\n            adapter?.let { adapter ->\n                // 更新适配器数据\n                adapter.updateMessages(messages)\n                // 滚动到最新消息\n                if (messages.isNotEmpty()) {\n                    binder.AiRecyclerView.scrollToPosition(messages.size - 1)\n                }\n            }\n        }\n        // 观察加载状态\n        viewModel.isLoading.observe(this) { isLoading ->\n            // 当AI正在思考时，禁用发送按钮\n            binder.AiButton.isEnabled = !isLoading\n        }\n    }\n    \n    /**\n     * 发送消息\n     */\n    private fun send() {\n        val content = binder.AiEditText.text.toString()\n        if (content.isNotEmpty()) {\n            Log.d(\"AIActivity\", \"用户发送问题: $content\")\n            \n            // 清空输入框\n            binder.AiEditText.setText(\"\")\n            \n            // 通过ViewModel发送消息\n            viewModel.sendMessage(content)\n        }\n    }\n    \n}\n```\n\n```kotlin\n//ViewModel部分\nclass AIViewModel : ViewModel() {\n\n    // 消息列表\n    private val _messages = MutableLiveData<List<Msg>>()\n    val messages: LiveData<List<Msg>> = _messages\n\n    // 加载状态\n    private val _isLoading = MutableLiveData<Boolean>()\n    val isLoading: LiveData<Boolean> = _isLoading\n\n    // 错误状态\n    private val _error = MutableLiveData<String?>()\n    val error: LiveData<String?> = _error\n\n    // 内部消息列表\n    private val messageList = mutableListOf<Msg>()\n\n    init {\n        _messages.value = messageList\n        _isLoading.value = false\n        _error.value = null\n    }\n\n    /**\n     * 发送消息\n     */\n    fun sendMessage(content: String) {\n        if (content.isBlank()) return\n\n        // 添加用户消息\n        addMessage(Msg(content, Msg.TYPE_SENT))\n\n        // 请求AI回复\n        requestAIResponse(content)\n    }\n\n    /**\n     * 请求AI回复\n     */\n    private fun requestAIResponse(question: String) {\n        viewModelScope.launch {\n            try {\n                _isLoading.value = true\n                _error.value = null\n\n                // 添加加载提示\n                addMessage(Msg(\"正在思考中...\", Msg.TYPE_RESERVED))\n\n                // 在IO线程中执行网络请求\n                val result = withContext(Dispatchers.IO) {\n                    val requestBody = GeminiRequestBody(\n                        contents = listOf(Content(parts = listOf(Part(text = question))))\n                    )\n                    AInetwork.generateContent(requestBody)\n                }\n\n                // 移除加载提示\n                removeLastMessage()\n\n                // 处理结果\n                result.onSuccess { response ->\n                    val aiResponse = response.candidates.firstOrNull()?.content?.parts?.firstOrNull()?.text\n\n                    if (aiResponse.isNullOrEmpty()) {\n                        addMessage(Msg(\"抱歉，我暂时无法回答您的问题。\", Msg.TYPE_RESERVED))\n                    } else {\n                        addMessage(Msg(aiResponse, Msg.TYPE_RESERVED))\n                    }\n                }.onFailure { exception ->\n                    val errorMsg = \"网络请求失败: ${exception.message}\"\n                    addMessage(Msg(errorMsg, Msg.TYPE_RESERVED))\n                    _error.value = errorMsg\n                }\n\n            } catch (e: Exception) {\n                removeLastMessage()\n                val errorMsg = \"发生未知错误，请稍后重试。\"\n                addMessage(Msg(errorMsg, Msg.TYPE_RESERVED))\n                _error.value = errorMsg\n            } finally {\n                _isLoading.value = false\n            }\n        }\n    }\n\n    /**\n     * 添加消息到列表\n     */\n    private fun addMessage(message: Msg) {\n        messageList.add(message)\n        _messages.value = messageList.toList()\n    }\n\n    /**\n     * 移除最后一条消息\n     */\n    private fun removeLastMessage() {\n        if (messageList.isNotEmpty()) {\n            messageList.removeAt(messageList.size - 1)\n            _messages.value = messageList.toList()\n        }\n    }\n}\n```\n\n","slug":"如何给项目引入AI助手","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gch0020s4s77wjs7w0k","content":"<h1 id=\"这里拿Gemini进行示范\"><a href=\"#这里拿Gemini进行示范\" class=\"headerlink\" title=\"这里拿Gemini进行示范\"></a>这里拿Gemini进行示范</h1><ul>\n<li><h3 id=\"先根据返回的JSON数据格式写出数据模型\"><a href=\"#先根据返回的JSON数据格式写出数据模型\" class=\"headerlink\" title=\"先根据返回的JSON数据格式写出数据模型\"></a>先根据返回的JSON数据格式写出数据模型</h3></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//AI的api调用请求体和响应体json格式不相同需要区别开来</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GeminiRequestBody</span>(<span class=\"keyword\">val</span> contents:List&lt;Content&gt;)</span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GeminiResponseBody</span>(<span class=\"keyword\">val</span> candidates: List&lt;Candidate&gt;)</span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Candidate</span>(<span class=\"keyword\">val</span> content: Content)</span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Content</span>(<span class=\"keyword\">val</span> parts:List&lt;Part&gt;)</span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Part</span>(<span class=\"keyword\">val</span> text:String)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"定义接口，这里使用POST注解，GET注解只用于获取数据，这里不适用\"><a href=\"#定义接口，这里使用POST注解，GET注解只用于获取数据，这里不适用\" class=\"headerlink\" title=\"定义接口，这里使用POST注解，GET注解只用于获取数据，这里不适用\"></a>定义接口，这里使用<em><strong>POST</strong></em>注解，<em><strong>GET</strong></em>注解只用于获取数据，这里不适用</h3></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">AIService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@POST(<span class=\"string\">&quot;v1beta/models/gemini-2.5-flash:generateContent&quot;</span>)</span></span><br><span class=\"line\">     <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">generateContent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"meta\">@Query(<span class=\"string\">&quot;key&quot;</span>)</span> apiKey: <span class=\"type\">String</span> = MyApplication.GEMINI_API_KEY,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"meta\">@Body</span> requestBody: <span class=\"type\">GeminiRequestBody</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span> :Response&lt;GeminiResponseBody&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"搭建Retrofit构建器\"><a href=\"#搭建Retrofit构建器\" class=\"headerlink\" title=\"搭建Retrofit构建器\"></a>搭建Retrofit构建器</h3></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> AICreator &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> BASE_URL = <span class=\"string\">&quot;https://generativelanguage.googleapis.com/&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> retrofit = Retrofit.Builder()</span><br><span class=\"line\">        .baseUrl(BASE_URL)</span><br><span class=\"line\">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">        .build()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">create</span><span class=\"params\">(serviceClass:<span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>:T= retrofit.create(serviceClass)</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span><span class=\"title\">create</span><span class=\"params\">()</span></span>:T=create(T::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"提交申请并对返回的数据进行解析\"><a href=\"#提交申请并对返回的数据进行解析\" class=\"headerlink\" title=\"提交申请并对返回的数据进行解析\"></a>提交申请并对返回的数据进行解析</h3></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> AInetwork &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建接口的动态代理对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> aiService = AICreator.create&lt;AIService&gt;()</span><br><span class=\"line\">    <span class=\"comment\">//向AI服务器发送一个请求，并处理返回的结果。</span></span><br><span class=\"line\">    <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">generateContent</span><span class=\"params\">(requestBody: <span class=\"type\">GeminiRequestBody</span>)</span></span>: Result&lt;GeminiResponseBody&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> response = aiService.generateContent(requestBody=requestBody)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response.isSuccessful &amp;&amp; response.body() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                Result.success(response.body()!!)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> errorMessage = response.errorBody()?.string() ?: <span class=\"string\">&quot;未知错误&quot;</span></span><br><span class=\"line\">                Log.e(<span class=\"string\">&quot;AInetwork&quot;</span>, <span class=\"string\">&quot;数据获取失败: <span class=\"variable\">$errorMessage</span>&quot;</span>)</span><br><span class=\"line\">                Result.failure(RuntimeException(<span class=\"string\">&quot;API请求失败: <span class=\"subst\">$&#123;response.code()&#125;</span> - <span class=\"variable\">$errorMessage</span>&quot;</span>))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">            Log.e(<span class=\"string\">&quot;AInetwork&quot;</span>, <span class=\"string\">&quot;网络请求失败: <span class=\"subst\">$&#123;e.message&#125;</span>&quot;</span>, e)</span><br><span class=\"line\">            Result.failure(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"进行调用\"><a href=\"#进行调用\" class=\"headerlink\" title=\"进行调用\"></a>进行调用</h3></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//界面逻辑</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AIActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binder: ActivityAiactivityBinding</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> viewModel: AIViewModel</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span>  msgList=ArrayList&lt;Msg&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> adapter: MsgAdapter? = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        binder = ActivityAiactivityBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binder.root)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 初始化ViewModel</span></span><br><span class=\"line\">        viewModel = ViewModelProvider(<span class=\"keyword\">this</span>)[AIViewModel::<span class=\"keyword\">class</span>.java]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 设置工具栏</span></span><br><span class=\"line\">        setSupportActionBar(binder.AiToolbar)</span><br><span class=\"line\">        supportActionBar?.let &#123;</span><br><span class=\"line\">            it.title = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            it.setDisplayHomeAsUpEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">            it.setHomeAsUpIndicator(R.drawable.ic_return)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 设置RecyclerView</span></span><br><span class=\"line\">        binder.AiRecyclerView.layoutManager = LinearLayoutManager(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        adapter = MsgAdapter(msgList)</span><br><span class=\"line\">        binder.AiRecyclerView.adapter = adapter</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 设置按钮点击事件</span></span><br><span class=\"line\">        binder.AiButton.setOnClickListener &#123;</span><br><span class=\"line\">            send()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 观察数据变化</span></span><br><span class=\"line\">        observeViewModel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 观察ViewModel数据变化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">observeViewModel</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 观察消息列表变化</span></span><br><span class=\"line\">        viewModel.messages.observe(<span class=\"keyword\">this</span>) &#123; messages -&gt;</span><br><span class=\"line\">            adapter?.let &#123; adapter -&gt;</span><br><span class=\"line\">                <span class=\"comment\">// 更新适配器数据</span></span><br><span class=\"line\">                adapter.updateMessages(messages)</span><br><span class=\"line\">                <span class=\"comment\">// 滚动到最新消息</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (messages.isNotEmpty()) &#123;</span><br><span class=\"line\">                    binder.AiRecyclerView.scrollToPosition(messages.size - <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 观察加载状态</span></span><br><span class=\"line\">        viewModel.isLoading.observe(<span class=\"keyword\">this</span>) &#123; isLoading -&gt;</span><br><span class=\"line\">            <span class=\"comment\">// 当AI正在思考时，禁用发送按钮</span></span><br><span class=\"line\">            binder.AiButton.isEnabled = !isLoading</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">send</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> content = binder.AiEditText.text.toString()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (content.isNotEmpty()) &#123;</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;AIActivity&quot;</span>, <span class=\"string\">&quot;用户发送问题: <span class=\"variable\">$content</span>&quot;</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 清空输入框</span></span><br><span class=\"line\">            binder.AiEditText.setText(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 通过ViewModel发送消息</span></span><br><span class=\"line\">            viewModel.sendMessage(content)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ViewModel部分</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AIViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 消息列表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _messages = MutableLiveData&lt;List&lt;Msg&gt;&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> messages: LiveData&lt;List&lt;Msg&gt;&gt; = _messages</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加载状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _isLoading = MutableLiveData&lt;<span class=\"built_in\">Boolean</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> isLoading: LiveData&lt;<span class=\"built_in\">Boolean</span>&gt; = _isLoading</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 错误状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _error = MutableLiveData&lt;String?&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> error: LiveData&lt;String?&gt; = _error</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内部消息列表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> messageList = mutableListOf&lt;Msg&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        _messages.value = messageList</span><br><span class=\"line\">        _isLoading.value = <span class=\"literal\">false</span></span><br><span class=\"line\">        _error.value = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sendMessage</span><span class=\"params\">(content: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (content.isBlank()) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加用户消息</span></span><br><span class=\"line\">        addMessage(Msg(content, Msg.TYPE_SENT))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 请求AI回复</span></span><br><span class=\"line\">        requestAIResponse(content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 请求AI回复</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">requestAIResponse</span><span class=\"params\">(question: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        viewModelScope.launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                _isLoading.value = <span class=\"literal\">true</span></span><br><span class=\"line\">                _error.value = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 添加加载提示</span></span><br><span class=\"line\">                addMessage(Msg(<span class=\"string\">&quot;正在思考中...&quot;</span>, Msg.TYPE_RESERVED))</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 在IO线程中执行网络请求</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> result = withContext(Dispatchers.IO) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">val</span> requestBody = GeminiRequestBody(</span><br><span class=\"line\">                        contents = listOf(Content(parts = listOf(Part(text = question))))</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                    AInetwork.generateContent(requestBody)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 移除加载提示</span></span><br><span class=\"line\">                removeLastMessage()</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 处理结果</span></span><br><span class=\"line\">                result.onSuccess &#123; response -&gt;</span><br><span class=\"line\">                    <span class=\"keyword\">val</span> aiResponse = response.candidates.firstOrNull()?.content?.parts?.firstOrNull()?.text</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (aiResponse.isNullOrEmpty()) &#123;</span><br><span class=\"line\">                        addMessage(Msg(<span class=\"string\">&quot;抱歉，我暂时无法回答您的问题。&quot;</span>, Msg.TYPE_RESERVED))</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        addMessage(Msg(aiResponse, Msg.TYPE_RESERVED))</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;.onFailure &#123; exception -&gt;</span><br><span class=\"line\">                    <span class=\"keyword\">val</span> errorMsg = <span class=\"string\">&quot;网络请求失败: <span class=\"subst\">$&#123;exception.message&#125;</span>&quot;</span></span><br><span class=\"line\">                    addMessage(Msg(errorMsg, Msg.TYPE_RESERVED))</span><br><span class=\"line\">                    _error.value = errorMsg</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">                removeLastMessage()</span><br><span class=\"line\">                <span class=\"keyword\">val</span> errorMsg = <span class=\"string\">&quot;发生未知错误，请稍后重试。&quot;</span></span><br><span class=\"line\">                addMessage(Msg(errorMsg, Msg.TYPE_RESERVED))</span><br><span class=\"line\">                _error.value = errorMsg</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                _isLoading.value = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加消息到列表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addMessage</span><span class=\"params\">(message: <span class=\"type\">Msg</span>)</span></span> &#123;</span><br><span class=\"line\">        messageList.add(message)</span><br><span class=\"line\">        _messages.value = messageList.toList()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除最后一条消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">removeLastMessage</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (messageList.isNotEmpty()) &#123;</span><br><span class=\"line\">            messageList.removeAt(messageList.size - <span class=\"number\">1</span>)</span><br><span class=\"line\">            _messages.value = messageList.toList()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"这里拿Gemini进行示范\n * 先根据返回的JSON数据格式写出数据模型\n   \n\n1\n2\n3\n4\n5\n6\n\n\n//AI的api调用请求体和响应体json格式不相同需要区别开来\ndata class GeminiRequestBody(val contents:List<Content>)\ndata class GeminiResponseBody(val candidates: List<Candidate>)\ndata class Candidate(val content: Content)\ndata class Content(val parts:List<Part>)\ndata c","more":"<h1 id=\"这里拿Gemini进行示范\"><a href=\"#这里拿Gemini进行示范\" class=\"headerlink\" title=\"这里拿Gemini进行示范\"></a>这里拿Gemini进行示范</h1><ul>\n<li><h3 id=\"先根据返回的JSON数据格式写出数据模型\"><a href=\"#先根据返回的JSON数据格式写出数据模型\" class=\"headerlink\" title=\"先根据返回的JSON数据格式写出数据模型\"></a>先根据返回的JSON数据格式写出数据模型</h3></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//AI的api调用请求体和响应体json格式不相同需要区别开来</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GeminiRequestBody</span>(<span class=\"keyword\">val</span> contents:List&lt;Content&gt;)</span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GeminiResponseBody</span>(<span class=\"keyword\">val</span> candidates: List&lt;Candidate&gt;)</span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Candidate</span>(<span class=\"keyword\">val</span> content: Content)</span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Content</span>(<span class=\"keyword\">val</span> parts:List&lt;Part&gt;)</span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Part</span>(<span class=\"keyword\">val</span> text:String)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"定义接口，这里使用POST注解，GET注解只用于获取数据，这里不适用\"><a href=\"#定义接口，这里使用POST注解，GET注解只用于获取数据，这里不适用\" class=\"headerlink\" title=\"定义接口，这里使用POST注解，GET注解只用于获取数据，这里不适用\"></a>定义接口，这里使用<em><strong>POST</strong></em>注解，<em><strong>GET</strong></em>注解只用于获取数据，这里不适用</h3></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">AIService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@POST(<span class=\"string\">&quot;v1beta/models/gemini-2.5-flash:generateContent&quot;</span>)</span></span><br><span class=\"line\">     <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">generateContent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"meta\">@Query(<span class=\"string\">&quot;key&quot;</span>)</span> apiKey: <span class=\"type\">String</span> = MyApplication.GEMINI_API_KEY,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"meta\">@Body</span> requestBody: <span class=\"type\">GeminiRequestBody</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span> :Response&lt;GeminiResponseBody&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"搭建Retrofit构建器\"><a href=\"#搭建Retrofit构建器\" class=\"headerlink\" title=\"搭建Retrofit构建器\"></a>搭建Retrofit构建器</h3></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> AICreator &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> BASE_URL = <span class=\"string\">&quot;https://generativelanguage.googleapis.com/&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> retrofit = Retrofit.Builder()</span><br><span class=\"line\">        .baseUrl(BASE_URL)</span><br><span class=\"line\">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">        .build()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">create</span><span class=\"params\">(serviceClass:<span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>:T= retrofit.create(serviceClass)</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span><span class=\"title\">create</span><span class=\"params\">()</span></span>:T=create(T::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"提交申请并对返回的数据进行解析\"><a href=\"#提交申请并对返回的数据进行解析\" class=\"headerlink\" title=\"提交申请并对返回的数据进行解析\"></a>提交申请并对返回的数据进行解析</h3></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> AInetwork &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建接口的动态代理对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> aiService = AICreator.create&lt;AIService&gt;()</span><br><span class=\"line\">    <span class=\"comment\">//向AI服务器发送一个请求，并处理返回的结果。</span></span><br><span class=\"line\">    <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">generateContent</span><span class=\"params\">(requestBody: <span class=\"type\">GeminiRequestBody</span>)</span></span>: Result&lt;GeminiResponseBody&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> response = aiService.generateContent(requestBody=requestBody)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response.isSuccessful &amp;&amp; response.body() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                Result.success(response.body()!!)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> errorMessage = response.errorBody()?.string() ?: <span class=\"string\">&quot;未知错误&quot;</span></span><br><span class=\"line\">                Log.e(<span class=\"string\">&quot;AInetwork&quot;</span>, <span class=\"string\">&quot;数据获取失败: <span class=\"variable\">$errorMessage</span>&quot;</span>)</span><br><span class=\"line\">                Result.failure(RuntimeException(<span class=\"string\">&quot;API请求失败: <span class=\"subst\">$&#123;response.code()&#125;</span> - <span class=\"variable\">$errorMessage</span>&quot;</span>))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">            Log.e(<span class=\"string\">&quot;AInetwork&quot;</span>, <span class=\"string\">&quot;网络请求失败: <span class=\"subst\">$&#123;e.message&#125;</span>&quot;</span>, e)</span><br><span class=\"line\">            Result.failure(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"进行调用\"><a href=\"#进行调用\" class=\"headerlink\" title=\"进行调用\"></a>进行调用</h3></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//界面逻辑</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AIActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binder: ActivityAiactivityBinding</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> viewModel: AIViewModel</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span>  msgList=ArrayList&lt;Msg&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> adapter: MsgAdapter? = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        binder = ActivityAiactivityBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binder.root)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 初始化ViewModel</span></span><br><span class=\"line\">        viewModel = ViewModelProvider(<span class=\"keyword\">this</span>)[AIViewModel::<span class=\"keyword\">class</span>.java]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 设置工具栏</span></span><br><span class=\"line\">        setSupportActionBar(binder.AiToolbar)</span><br><span class=\"line\">        supportActionBar?.let &#123;</span><br><span class=\"line\">            it.title = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            it.setDisplayHomeAsUpEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">            it.setHomeAsUpIndicator(R.drawable.ic_return)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 设置RecyclerView</span></span><br><span class=\"line\">        binder.AiRecyclerView.layoutManager = LinearLayoutManager(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        adapter = MsgAdapter(msgList)</span><br><span class=\"line\">        binder.AiRecyclerView.adapter = adapter</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 设置按钮点击事件</span></span><br><span class=\"line\">        binder.AiButton.setOnClickListener &#123;</span><br><span class=\"line\">            send()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 观察数据变化</span></span><br><span class=\"line\">        observeViewModel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 观察ViewModel数据变化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">observeViewModel</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 观察消息列表变化</span></span><br><span class=\"line\">        viewModel.messages.observe(<span class=\"keyword\">this</span>) &#123; messages -&gt;</span><br><span class=\"line\">            adapter?.let &#123; adapter -&gt;</span><br><span class=\"line\">                <span class=\"comment\">// 更新适配器数据</span></span><br><span class=\"line\">                adapter.updateMessages(messages)</span><br><span class=\"line\">                <span class=\"comment\">// 滚动到最新消息</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (messages.isNotEmpty()) &#123;</span><br><span class=\"line\">                    binder.AiRecyclerView.scrollToPosition(messages.size - <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 观察加载状态</span></span><br><span class=\"line\">        viewModel.isLoading.observe(<span class=\"keyword\">this</span>) &#123; isLoading -&gt;</span><br><span class=\"line\">            <span class=\"comment\">// 当AI正在思考时，禁用发送按钮</span></span><br><span class=\"line\">            binder.AiButton.isEnabled = !isLoading</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">send</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> content = binder.AiEditText.text.toString()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (content.isNotEmpty()) &#123;</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;AIActivity&quot;</span>, <span class=\"string\">&quot;用户发送问题: <span class=\"variable\">$content</span>&quot;</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 清空输入框</span></span><br><span class=\"line\">            binder.AiEditText.setText(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 通过ViewModel发送消息</span></span><br><span class=\"line\">            viewModel.sendMessage(content)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ViewModel部分</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AIViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 消息列表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _messages = MutableLiveData&lt;List&lt;Msg&gt;&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> messages: LiveData&lt;List&lt;Msg&gt;&gt; = _messages</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加载状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _isLoading = MutableLiveData&lt;<span class=\"built_in\">Boolean</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> isLoading: LiveData&lt;<span class=\"built_in\">Boolean</span>&gt; = _isLoading</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 错误状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _error = MutableLiveData&lt;String?&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> error: LiveData&lt;String?&gt; = _error</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内部消息列表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> messageList = mutableListOf&lt;Msg&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        _messages.value = messageList</span><br><span class=\"line\">        _isLoading.value = <span class=\"literal\">false</span></span><br><span class=\"line\">        _error.value = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sendMessage</span><span class=\"params\">(content: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (content.isBlank()) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加用户消息</span></span><br><span class=\"line\">        addMessage(Msg(content, Msg.TYPE_SENT))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 请求AI回复</span></span><br><span class=\"line\">        requestAIResponse(content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 请求AI回复</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">requestAIResponse</span><span class=\"params\">(question: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        viewModelScope.launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                _isLoading.value = <span class=\"literal\">true</span></span><br><span class=\"line\">                _error.value = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 添加加载提示</span></span><br><span class=\"line\">                addMessage(Msg(<span class=\"string\">&quot;正在思考中...&quot;</span>, Msg.TYPE_RESERVED))</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 在IO线程中执行网络请求</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> result = withContext(Dispatchers.IO) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">val</span> requestBody = GeminiRequestBody(</span><br><span class=\"line\">                        contents = listOf(Content(parts = listOf(Part(text = question))))</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                    AInetwork.generateContent(requestBody)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 移除加载提示</span></span><br><span class=\"line\">                removeLastMessage()</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 处理结果</span></span><br><span class=\"line\">                result.onSuccess &#123; response -&gt;</span><br><span class=\"line\">                    <span class=\"keyword\">val</span> aiResponse = response.candidates.firstOrNull()?.content?.parts?.firstOrNull()?.text</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (aiResponse.isNullOrEmpty()) &#123;</span><br><span class=\"line\">                        addMessage(Msg(<span class=\"string\">&quot;抱歉，我暂时无法回答您的问题。&quot;</span>, Msg.TYPE_RESERVED))</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        addMessage(Msg(aiResponse, Msg.TYPE_RESERVED))</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;.onFailure &#123; exception -&gt;</span><br><span class=\"line\">                    <span class=\"keyword\">val</span> errorMsg = <span class=\"string\">&quot;网络请求失败: <span class=\"subst\">$&#123;exception.message&#125;</span>&quot;</span></span><br><span class=\"line\">                    addMessage(Msg(errorMsg, Msg.TYPE_RESERVED))</span><br><span class=\"line\">                    _error.value = errorMsg</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">                removeLastMessage()</span><br><span class=\"line\">                <span class=\"keyword\">val</span> errorMsg = <span class=\"string\">&quot;发生未知错误，请稍后重试。&quot;</span></span><br><span class=\"line\">                addMessage(Msg(errorMsg, Msg.TYPE_RESERVED))</span><br><span class=\"line\">                _error.value = errorMsg</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                _isLoading.value = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加消息到列表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addMessage</span><span class=\"params\">(message: <span class=\"type\">Msg</span>)</span></span> &#123;</span><br><span class=\"line\">        messageList.add(message)</span><br><span class=\"line\">        _messages.value = messageList.toList()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除最后一条消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">removeLastMessage</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (messageList.isNotEmpty()) &#123;</span><br><span class=\"line\">            messageList.removeAt(messageList.size - <span class=\"number\">1</span>)</span><br><span class=\"line\">            _messages.value = messageList.toList()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"广播机制(Java)","date":"2025-03-03T12:42:38.000Z","_content":"\n# 广播机制简介\n\n### 标准广播\n\n![](../img/img42.jpg)\n\n\n\n### 有序广播\n\n![](../img/img43.jpg)\n\n------\n\n\n\n# 接收系统广播\n\n### 动态注册监听网络变化\n\n#### 简易版\n\n首先先创建一个类，按例子来是建立一个内部类，并在里面重写父类的onReceive()方法。\n\n然后在onCreate()方法中首先创建一个IntentFilter的实例，并给他添加一个值为\"android.net.conn.CONNECTIVITY_CHANGE\"的action，**为什么添加这个值**，就是因为当网络状态发生变化时，系统发出的正是一条值为\"android.net.conn.CONNECTIVITY_CHANGE\"的广播，也就是说想监听什么广播就要添加相应的action。接下来创建内部类实例然后调用 registerReceiver()方法进行注册，然后把NetworkChangeReceiver实例和IntentFilter实例都传进去。\n\n最后记的也要取消注册，在onDestroy()中调用 unregisterReceiver实现。\n\n\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    private IntentFilter intentFilter;\n    private NetworkChangeReceiver networkChangeReceiver;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        intentFilter=new IntentFilter();\n        intentFilter.addAction(\"android.net.conn.CONNECTIVITY_CHANGE\");\n       networkChangeReceiver=new NetworkChangeReceiver();\n        registerReceiver(networkChangeReceiver, intentFilter);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        unregisterReceiver( networkChangeReceiver);\n    }\n    class NetworkChangeReceiver extends BroadcastReceiver{\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            Toast.makeText(context, \"network changes\", Toast.LENGTH_SHORT).show();\n        }\n    }\n}\n```\n\n#### 优化版\n\n使提醒网络发生变化更人性化，可以进一步修改：\n\n```java\nclass NetworkChangeReceiver extends BroadcastReceiver {\n  @Override\n  public void onReceive(Context context, Intent intent) {\n   ConnectivityManager connectivityManager=(ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n   NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();\n   if(networkInfo!=null&&networkInfo.isAvailable()){\n    Toast.makeText(context, \"network is available\", Toast.LENGTH_SHORT).show();\n   }\n   else{\n    Toast.makeText(context, \"network is unavailable\", Toast.LENGTH_SHORT).show();\n   }\n  }\n }\n```\n\n首先通过getSystemService()方法得到ConnectivityManager实例，这是一个系统服务类，专门用于管理网络连接。然后调用他的getActiveNetworkInfo方法得到NetworkInfo实例，然后用它的isAvailable()方法判断是否有网络\n\n[^注意]: 为了保护用户设备的安全和隐私，如果进行敏感操作，需要在配置文件中声明权限，否则程序将会崩溃\n\n`<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>`\n\n\n\n### 静态注册实现开机启动\n\n动态注册的广播必须在程序启动之后才能实现，而静态注册的可以实现开机启动。\n\n先用Android Studio提供的快捷方式来创建一个广播接收器<右击包->New->Other->Broadcast Receiver>，然后修改其中代码，作为广播内容。\n\n其次静态注册的广播需要在Androidmanifest.xml中进行注册<快捷方式创建，注册自动完成>，然后在注册的receiver里面添加一条action\n\n`<intent-filter>`\n    `<action android:name=\"android.intent.action.BOOT_COMPLETED\" />`\n`</intent-filter>`\n\n最后也要添加一项权限\n\n`<uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>`\n\n------\n\n# 自定义广播\n\n### 发送标准广播\n\n首先新建一个广播接收器\n\n```java\npublic class MyBroadcastReceiver extends BroadcastReceiver {\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Toast.makeText(context, \"received in MyBroadcastReceiver\", Toast.LENGTH_SHORT).show();\n    }\n}\n```\n\n然后在AndroidManifest中 添加一条action\n\n```java\n            <intent-filter>\n                <action android:name=\"com.example.broadcasttest.MY_BROADCAST\"/>\n            </intent-filter>\n```\n\n接着可以定义一个按钮作为触发点\n\n然后修改主活动中的代码，首先构建出来一个Intent对象，并把要发送的广播的值传入，然后调用sendBroadcast()方法将广播消息发送，这样所有监听\"com.example.broadcasttest.MY_BROADCAST\"这条广播的接收器都会收到消息\n\n```java\n  Button button=(Button) findViewById(R.id.button);\n  button.setOnClickListener(new View.OnClickListener() {\n   @Override\n   public void onClick(View view) {\n    Intent intent=new Intent(\"com.example.casttest.MY_BROADCAST\");\n    intent.setPackage(getPackageName());\n    sendBroadcast(intent);\n   }\n  });\n }\n```\n\n[^注意事项]: 自Android8.0以后静态注册需要用setPackage指定包名\n\n\n\n### 发送有序广播\n\n先新建一个广播接收器，用于接收自定义广播。并在广播接收器中添加想要显示的内容\n\n```java\npublic class AnotherBroadcastReceiver extends BroadcastReceiver {\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Toast.makeText(context, \"received in AnotherBroadcastReceiver\", Toast.LENGTH_SHORT).show();\n    }\n}\n```\n\n然后在AndroidManifest.xml中对该接收器进行修改添加一条action\n\n```java\n<intent-filter>\n      <action android:name=\"com.example.broadcasttest.MY_BROADCAST\"/>\n </intent-filter>\n```\n\n使用sendOrderedBroadcast()发送有序广播\n\n```java\n                Intent intent=new Intent(\"com.example.broadcasttest.MY_BROADCAST\");\n                intent.setPackage(getPackageName());\n                sendOrderedBroadcast(intent,null);\n```\n\n设置优先级(在AndroidManifest中使用android:priority=\"\"设置优先级，优先级大的先执行)并利用abortBroadcast截断广播\n\n`<intent-filter android:priority=\"100\">`\n\n在优先级高的广播接收器中使用abortBroadcast方法\n\n------\n\n# 本地广播\n\n<!--解决了安全性问题-->\n\n<!--无法通过静态注册-->\n\n基本上和之前动态注册广播一样，只是首先通过LocalBroadcastManager的getInstance()方法获取一个他的实例，然后注册的时候调用LocalBroadcastManager的registerReceiver()方法，发送广播的时候调用LocalBroadcastManager的sendBroadcast()方法，仅此而已。\n\n以下是完整的代码展示：\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    private IntentFilter intentFilter;\n    private LocalReceiver localReceiver;\n    private LocalBroadcastManager localBroadcastManager;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        localBroadcastManager = LocalBroadcastManager.getInstance(this);\n        Button button = (Button) findViewById(R.id.button);\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Intent intent = new Intent(\"com.example.broadcasttest.LOCAL_BROADCAST\");\n                localBroadcastManager.sendBroadcast(intent);\n            }\n        });\n        intentFilter = new IntentFilter();\n        intentFilter.addAction(\"com.example.broadcasttest.LOCAL_BROADCAST\");\n        localReceiver = new LocalReceiver();\n        localBroadcastManager.registerReceiver(localReceiver, intentFilter);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        localBroadcastManager.unregisterReceiver(localReceiver);\n    }\n\n    class LocalReceiver extends BroadcastReceiver {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            Toast.makeText(context, \"received local broadcast\", Toast.LENGTH_SHORT).show();\n        }\n    }\n}\n```\n\n------\n\n","source":"_posts/广播机制.md","raw":"---\ntitle: 广播机制(Java)\ndate: 2025-03-03 20:42:38\ncategories:\n- Android(Java版)\ntags:\n---\n\n# 广播机制简介\n\n### 标准广播\n\n![](../img/img42.jpg)\n\n\n\n### 有序广播\n\n![](../img/img43.jpg)\n\n------\n\n\n\n# 接收系统广播\n\n### 动态注册监听网络变化\n\n#### 简易版\n\n首先先创建一个类，按例子来是建立一个内部类，并在里面重写父类的onReceive()方法。\n\n然后在onCreate()方法中首先创建一个IntentFilter的实例，并给他添加一个值为\"android.net.conn.CONNECTIVITY_CHANGE\"的action，**为什么添加这个值**，就是因为当网络状态发生变化时，系统发出的正是一条值为\"android.net.conn.CONNECTIVITY_CHANGE\"的广播，也就是说想监听什么广播就要添加相应的action。接下来创建内部类实例然后调用 registerReceiver()方法进行注册，然后把NetworkChangeReceiver实例和IntentFilter实例都传进去。\n\n最后记的也要取消注册，在onDestroy()中调用 unregisterReceiver实现。\n\n\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    private IntentFilter intentFilter;\n    private NetworkChangeReceiver networkChangeReceiver;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        intentFilter=new IntentFilter();\n        intentFilter.addAction(\"android.net.conn.CONNECTIVITY_CHANGE\");\n       networkChangeReceiver=new NetworkChangeReceiver();\n        registerReceiver(networkChangeReceiver, intentFilter);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        unregisterReceiver( networkChangeReceiver);\n    }\n    class NetworkChangeReceiver extends BroadcastReceiver{\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            Toast.makeText(context, \"network changes\", Toast.LENGTH_SHORT).show();\n        }\n    }\n}\n```\n\n#### 优化版\n\n使提醒网络发生变化更人性化，可以进一步修改：\n\n```java\nclass NetworkChangeReceiver extends BroadcastReceiver {\n  @Override\n  public void onReceive(Context context, Intent intent) {\n   ConnectivityManager connectivityManager=(ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n   NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();\n   if(networkInfo!=null&&networkInfo.isAvailable()){\n    Toast.makeText(context, \"network is available\", Toast.LENGTH_SHORT).show();\n   }\n   else{\n    Toast.makeText(context, \"network is unavailable\", Toast.LENGTH_SHORT).show();\n   }\n  }\n }\n```\n\n首先通过getSystemService()方法得到ConnectivityManager实例，这是一个系统服务类，专门用于管理网络连接。然后调用他的getActiveNetworkInfo方法得到NetworkInfo实例，然后用它的isAvailable()方法判断是否有网络\n\n[^注意]: 为了保护用户设备的安全和隐私，如果进行敏感操作，需要在配置文件中声明权限，否则程序将会崩溃\n\n`<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>`\n\n\n\n### 静态注册实现开机启动\n\n动态注册的广播必须在程序启动之后才能实现，而静态注册的可以实现开机启动。\n\n先用Android Studio提供的快捷方式来创建一个广播接收器<右击包->New->Other->Broadcast Receiver>，然后修改其中代码，作为广播内容。\n\n其次静态注册的广播需要在Androidmanifest.xml中进行注册<快捷方式创建，注册自动完成>，然后在注册的receiver里面添加一条action\n\n`<intent-filter>`\n    `<action android:name=\"android.intent.action.BOOT_COMPLETED\" />`\n`</intent-filter>`\n\n最后也要添加一项权限\n\n`<uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>`\n\n------\n\n# 自定义广播\n\n### 发送标准广播\n\n首先新建一个广播接收器\n\n```java\npublic class MyBroadcastReceiver extends BroadcastReceiver {\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Toast.makeText(context, \"received in MyBroadcastReceiver\", Toast.LENGTH_SHORT).show();\n    }\n}\n```\n\n然后在AndroidManifest中 添加一条action\n\n```java\n            <intent-filter>\n                <action android:name=\"com.example.broadcasttest.MY_BROADCAST\"/>\n            </intent-filter>\n```\n\n接着可以定义一个按钮作为触发点\n\n然后修改主活动中的代码，首先构建出来一个Intent对象，并把要发送的广播的值传入，然后调用sendBroadcast()方法将广播消息发送，这样所有监听\"com.example.broadcasttest.MY_BROADCAST\"这条广播的接收器都会收到消息\n\n```java\n  Button button=(Button) findViewById(R.id.button);\n  button.setOnClickListener(new View.OnClickListener() {\n   @Override\n   public void onClick(View view) {\n    Intent intent=new Intent(\"com.example.casttest.MY_BROADCAST\");\n    intent.setPackage(getPackageName());\n    sendBroadcast(intent);\n   }\n  });\n }\n```\n\n[^注意事项]: 自Android8.0以后静态注册需要用setPackage指定包名\n\n\n\n### 发送有序广播\n\n先新建一个广播接收器，用于接收自定义广播。并在广播接收器中添加想要显示的内容\n\n```java\npublic class AnotherBroadcastReceiver extends BroadcastReceiver {\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Toast.makeText(context, \"received in AnotherBroadcastReceiver\", Toast.LENGTH_SHORT).show();\n    }\n}\n```\n\n然后在AndroidManifest.xml中对该接收器进行修改添加一条action\n\n```java\n<intent-filter>\n      <action android:name=\"com.example.broadcasttest.MY_BROADCAST\"/>\n </intent-filter>\n```\n\n使用sendOrderedBroadcast()发送有序广播\n\n```java\n                Intent intent=new Intent(\"com.example.broadcasttest.MY_BROADCAST\");\n                intent.setPackage(getPackageName());\n                sendOrderedBroadcast(intent,null);\n```\n\n设置优先级(在AndroidManifest中使用android:priority=\"\"设置优先级，优先级大的先执行)并利用abortBroadcast截断广播\n\n`<intent-filter android:priority=\"100\">`\n\n在优先级高的广播接收器中使用abortBroadcast方法\n\n------\n\n# 本地广播\n\n<!--解决了安全性问题-->\n\n<!--无法通过静态注册-->\n\n基本上和之前动态注册广播一样，只是首先通过LocalBroadcastManager的getInstance()方法获取一个他的实例，然后注册的时候调用LocalBroadcastManager的registerReceiver()方法，发送广播的时候调用LocalBroadcastManager的sendBroadcast()方法，仅此而已。\n\n以下是完整的代码展示：\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    private IntentFilter intentFilter;\n    private LocalReceiver localReceiver;\n    private LocalBroadcastManager localBroadcastManager;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        localBroadcastManager = LocalBroadcastManager.getInstance(this);\n        Button button = (Button) findViewById(R.id.button);\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Intent intent = new Intent(\"com.example.broadcasttest.LOCAL_BROADCAST\");\n                localBroadcastManager.sendBroadcast(intent);\n            }\n        });\n        intentFilter = new IntentFilter();\n        intentFilter.addAction(\"com.example.broadcasttest.LOCAL_BROADCAST\");\n        localReceiver = new LocalReceiver();\n        localBroadcastManager.registerReceiver(localReceiver, intentFilter);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        localBroadcastManager.unregisterReceiver(localReceiver);\n    }\n\n    class LocalReceiver extends BroadcastReceiver {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            Toast.makeText(context, \"received local broadcast\", Toast.LENGTH_SHORT).show();\n        }\n    }\n}\n```\n\n------\n\n","slug":"广播机制","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gci0023s4s79np24zzn","content":"<h1 id=\"广播机制简介\"><a href=\"#广播机制简介\" class=\"headerlink\" title=\"广播机制简介\"></a>广播机制简介</h1><h3 id=\"标准广播\"><a href=\"#标准广播\" class=\"headerlink\" title=\"标准广播\"></a>标准广播</h3><p><img src=\"/../img/img42.jpg\"></p>\n<h3 id=\"有序广播\"><a href=\"#有序广播\" class=\"headerlink\" title=\"有序广播\"></a>有序广播</h3><p><img src=\"/../img/img43.jpg\"></p>\n<hr>\n<h1 id=\"接收系统广播\"><a href=\"#接收系统广播\" class=\"headerlink\" title=\"接收系统广播\"></a>接收系统广播</h1><h3 id=\"动态注册监听网络变化\"><a href=\"#动态注册监听网络变化\" class=\"headerlink\" title=\"动态注册监听网络变化\"></a>动态注册监听网络变化</h3><h4 id=\"简易版\"><a href=\"#简易版\" class=\"headerlink\" title=\"简易版\"></a>简易版</h4><p>首先先创建一个类，按例子来是建立一个内部类，并在里面重写父类的onReceive()方法。</p>\n<p>然后在onCreate()方法中首先创建一个IntentFilter的实例，并给他添加一个值为”android.net.conn.CONNECTIVITY_CHANGE”的action，<strong>为什么添加这个值</strong>，就是因为当网络状态发生变化时，系统发出的正是一条值为”android.net.conn.CONNECTIVITY_CHANGE”的广播，也就是说想监听什么广播就要添加相应的action。接下来创建内部类实例然后调用 registerReceiver()方法进行注册，然后把NetworkChangeReceiver实例和IntentFilter实例都传进去。</p>\n<p>最后记的也要取消注册，在onDestroy()中调用 unregisterReceiver实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IntentFilter intentFilter;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> NetworkChangeReceiver networkChangeReceiver;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        intentFilter=<span class=\"keyword\">new</span> <span class=\"title class_\">IntentFilter</span>();</span><br><span class=\"line\">        intentFilter.addAction(<span class=\"string\">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>);</span><br><span class=\"line\">       networkChangeReceiver=<span class=\"keyword\">new</span> <span class=\"title class_\">NetworkChangeReceiver</span>();</span><br><span class=\"line\">        registerReceiver(networkChangeReceiver, intentFilter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        unregisterReceiver( networkChangeReceiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">NetworkChangeReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BroadcastReceiver</span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> &#123;</span><br><span class=\"line\">            Toast.makeText(context, <span class=\"string\">&quot;network changes&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优化版\"><a href=\"#优化版\" class=\"headerlink\" title=\"优化版\"></a>优化版</h4><p>使提醒网络发生变化更人性化，可以进一步修改：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NetworkChangeReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BroadcastReceiver</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> &#123;</span><br><span class=\"line\">   ConnectivityManager connectivityManager=(ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class=\"line\">   NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(networkInfo!=<span class=\"literal\">null</span>&amp;&amp;networkInfo.isAvailable())&#123;</span><br><span class=\"line\">    Toast.makeText(context, <span class=\"string\">&quot;network is available&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    Toast.makeText(context, <span class=\"string\">&quot;network is unavailable&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先通过getSystemService()方法得到ConnectivityManager实例，这是一个系统服务类，专门用于管理网络连接。然后调用他的getActiveNetworkInfo方法得到NetworkInfo实例，然后用它的isAvailable()方法判断是否有网络</p>\n<p><code>&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;</code></p>\n<h3 id=\"静态注册实现开机启动\"><a href=\"#静态注册实现开机启动\" class=\"headerlink\" title=\"静态注册实现开机启动\"></a>静态注册实现开机启动</h3><p>动态注册的广播必须在程序启动之后才能实现，而静态注册的可以实现开机启动。</p>\n<p>先用Android Studio提供的快捷方式来创建一个广播接收器&lt;右击包-&gt;New-&gt;Other-&gt;Broadcast Receiver&gt;，然后修改其中代码，作为广播内容。</p>\n<p>其次静态注册的广播需要在Androidmanifest.xml中进行注册&lt;快捷方式创建，注册自动完成&gt;，然后在注册的receiver里面添加一条action</p>\n<p><code>&lt;intent-filter&gt;</code><br>    <code>&lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;</code><br><code>&lt;/intent-filter&gt;</code></p>\n<p>最后也要添加一项权限</p>\n<p><code>&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;/&gt;</code></p>\n<hr>\n<h1 id=\"自定义广播\"><a href=\"#自定义广播\" class=\"headerlink\" title=\"自定义广播\"></a>自定义广播</h1><h3 id=\"发送标准广播\"><a href=\"#发送标准广播\" class=\"headerlink\" title=\"发送标准广播\"></a>发送标准广播</h3><p>首先新建一个广播接收器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBroadcastReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BroadcastReceiver</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> &#123;</span><br><span class=\"line\">        Toast.makeText(context, <span class=\"string\">&quot;received in MyBroadcastReceiver&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在AndroidManifest中 添加一条action</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;intent-filter&gt;</span><br><span class=\"line\">    &lt;action android:name=<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接着可以定义一个按钮作为触发点</p>\n<p>然后修改主活动中的代码，首先构建出来一个Intent对象，并把要发送的广播的值传入，然后调用sendBroadcast()方法将广播消息发送，这样所有监听”com.example.broadcasttest.MY_BROADCAST”这条广播的接收器都会收到消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Button button=(Button) findViewById(R.id.button);</span><br><span class=\"line\"> button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">   Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"string\">&quot;com.example.casttest.MY_BROADCAST&quot;</span>);</span><br><span class=\"line\">   intent.setPackage(getPackageName());</span><br><span class=\"line\">   sendBroadcast(intent);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送有序广播\"><a href=\"#发送有序广播\" class=\"headerlink\" title=\"发送有序广播\"></a>发送有序广播</h3><p>先新建一个广播接收器，用于接收自定义广播。并在广播接收器中添加想要显示的内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnotherBroadcastReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BroadcastReceiver</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> &#123;</span><br><span class=\"line\">        Toast.makeText(context, <span class=\"string\">&quot;received in AnotherBroadcastReceiver&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在AndroidManifest.xml中对该接收器进行修改添加一条action</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;intent-filter&gt;</span><br><span class=\"line\">      &lt;action android:name=<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>/&gt;</span><br><span class=\"line\"> &lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用sendOrderedBroadcast()发送有序广播</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>);</span><br><span class=\"line\">intent.setPackage(getPackageName());</span><br><span class=\"line\">sendOrderedBroadcast(intent,<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>设置优先级(在AndroidManifest中使用android:priority&#x3D;””设置优先级，优先级大的先执行)并利用abortBroadcast截断广播</p>\n<p><code>&lt;intent-filter android:priority=&quot;100&quot;&gt;</code></p>\n<p>在优先级高的广播接收器中使用abortBroadcast方法</p>\n<hr>\n<h1 id=\"本地广播\"><a href=\"#本地广播\" class=\"headerlink\" title=\"本地广播\"></a>本地广播</h1><!--解决了安全性问题-->\n\n<!--无法通过静态注册-->\n\n<p>基本上和之前动态注册广播一样，只是首先通过LocalBroadcastManager的getInstance()方法获取一个他的实例，然后注册的时候调用LocalBroadcastManager的registerReceiver()方法，发送广播的时候调用LocalBroadcastManager的sendBroadcast()方法，仅此而已。</p>\n<p>以下是完整的代码展示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IntentFilter intentFilter;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalReceiver localReceiver;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalBroadcastManager localBroadcastManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        localBroadcastManager = LocalBroadcastManager.getInstance(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button</span> <span class=\"operator\">=</span> (Button) findViewById(R.id.button);</span><br><span class=\"line\">        button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">Intent</span> <span class=\"variable\">intent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"string\">&quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;</span>);</span><br><span class=\"line\">                localBroadcastManager.sendBroadcast(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        intentFilter = <span class=\"keyword\">new</span> <span class=\"title class_\">IntentFilter</span>();</span><br><span class=\"line\">        intentFilter.addAction(<span class=\"string\">&quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;</span>);</span><br><span class=\"line\">        localReceiver = <span class=\"keyword\">new</span> <span class=\"title class_\">LocalReceiver</span>();</span><br><span class=\"line\">        localBroadcastManager.registerReceiver(localReceiver, intentFilter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        localBroadcastManager.unregisterReceiver(localReceiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">LocalReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BroadcastReceiver</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> &#123;</span><br><span class=\"line\">            Toast.makeText(context, <span class=\"string\">&quot;received local broadcast&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"广播机制简介\n标准广播\n\n\n有序广播\n\n\n\n\n\n接收系统广播\n动态注册监听网络变化\n简易版\n首先先创建一个类，按例子来是建立一个内部类，并在里面重写父类的onReceive()方法。\n\n然后在onCreate()方法中首先创建一个IntentFilter的实例，并给他添加一个值为”android.net.conn.CONNECTIVITY_CHANGE”的action，为什么添加这个值，就是因为当网络状态发生变化时，系统发出的正是一条值为”android.net.conn.CONNECTIVITY_CHANGE”的广播，也就是说想监听什么广播就要添加相应的action。接下来创建内部类实例然后","more":"<h1 id=\"广播机制简介\"><a href=\"#广播机制简介\" class=\"headerlink\" title=\"广播机制简介\"></a>广播机制简介</h1><h3 id=\"标准广播\"><a href=\"#标准广播\" class=\"headerlink\" title=\"标准广播\"></a>标准广播</h3><p><img src=\"/../img/img42.jpg\"></p>\n<h3 id=\"有序广播\"><a href=\"#有序广播\" class=\"headerlink\" title=\"有序广播\"></a>有序广播</h3><p><img src=\"/../img/img43.jpg\"></p>\n<hr>\n<h1 id=\"接收系统广播\"><a href=\"#接收系统广播\" class=\"headerlink\" title=\"接收系统广播\"></a>接收系统广播</h1><h3 id=\"动态注册监听网络变化\"><a href=\"#动态注册监听网络变化\" class=\"headerlink\" title=\"动态注册监听网络变化\"></a>动态注册监听网络变化</h3><h4 id=\"简易版\"><a href=\"#简易版\" class=\"headerlink\" title=\"简易版\"></a>简易版</h4><p>首先先创建一个类，按例子来是建立一个内部类，并在里面重写父类的onReceive()方法。</p>\n<p>然后在onCreate()方法中首先创建一个IntentFilter的实例，并给他添加一个值为”android.net.conn.CONNECTIVITY_CHANGE”的action，<strong>为什么添加这个值</strong>，就是因为当网络状态发生变化时，系统发出的正是一条值为”android.net.conn.CONNECTIVITY_CHANGE”的广播，也就是说想监听什么广播就要添加相应的action。接下来创建内部类实例然后调用 registerReceiver()方法进行注册，然后把NetworkChangeReceiver实例和IntentFilter实例都传进去。</p>\n<p>最后记的也要取消注册，在onDestroy()中调用 unregisterReceiver实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IntentFilter intentFilter;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> NetworkChangeReceiver networkChangeReceiver;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        intentFilter=<span class=\"keyword\">new</span> <span class=\"title class_\">IntentFilter</span>();</span><br><span class=\"line\">        intentFilter.addAction(<span class=\"string\">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>);</span><br><span class=\"line\">       networkChangeReceiver=<span class=\"keyword\">new</span> <span class=\"title class_\">NetworkChangeReceiver</span>();</span><br><span class=\"line\">        registerReceiver(networkChangeReceiver, intentFilter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        unregisterReceiver( networkChangeReceiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">NetworkChangeReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BroadcastReceiver</span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> &#123;</span><br><span class=\"line\">            Toast.makeText(context, <span class=\"string\">&quot;network changes&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优化版\"><a href=\"#优化版\" class=\"headerlink\" title=\"优化版\"></a>优化版</h4><p>使提醒网络发生变化更人性化，可以进一步修改：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NetworkChangeReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BroadcastReceiver</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> &#123;</span><br><span class=\"line\">   ConnectivityManager connectivityManager=(ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class=\"line\">   NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(networkInfo!=<span class=\"literal\">null</span>&amp;&amp;networkInfo.isAvailable())&#123;</span><br><span class=\"line\">    Toast.makeText(context, <span class=\"string\">&quot;network is available&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    Toast.makeText(context, <span class=\"string\">&quot;network is unavailable&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先通过getSystemService()方法得到ConnectivityManager实例，这是一个系统服务类，专门用于管理网络连接。然后调用他的getActiveNetworkInfo方法得到NetworkInfo实例，然后用它的isAvailable()方法判断是否有网络</p>\n<p><code>&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;</code></p>\n<h3 id=\"静态注册实现开机启动\"><a href=\"#静态注册实现开机启动\" class=\"headerlink\" title=\"静态注册实现开机启动\"></a>静态注册实现开机启动</h3><p>动态注册的广播必须在程序启动之后才能实现，而静态注册的可以实现开机启动。</p>\n<p>先用Android Studio提供的快捷方式来创建一个广播接收器&lt;右击包-&gt;New-&gt;Other-&gt;Broadcast Receiver&gt;，然后修改其中代码，作为广播内容。</p>\n<p>其次静态注册的广播需要在Androidmanifest.xml中进行注册&lt;快捷方式创建，注册自动完成&gt;，然后在注册的receiver里面添加一条action</p>\n<p><code>&lt;intent-filter&gt;</code><br>    <code>&lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;</code><br><code>&lt;/intent-filter&gt;</code></p>\n<p>最后也要添加一项权限</p>\n<p><code>&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;/&gt;</code></p>\n<hr>\n<h1 id=\"自定义广播\"><a href=\"#自定义广播\" class=\"headerlink\" title=\"自定义广播\"></a>自定义广播</h1><h3 id=\"发送标准广播\"><a href=\"#发送标准广播\" class=\"headerlink\" title=\"发送标准广播\"></a>发送标准广播</h3><p>首先新建一个广播接收器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBroadcastReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BroadcastReceiver</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> &#123;</span><br><span class=\"line\">        Toast.makeText(context, <span class=\"string\">&quot;received in MyBroadcastReceiver&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在AndroidManifest中 添加一条action</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;intent-filter&gt;</span><br><span class=\"line\">    &lt;action android:name=<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接着可以定义一个按钮作为触发点</p>\n<p>然后修改主活动中的代码，首先构建出来一个Intent对象，并把要发送的广播的值传入，然后调用sendBroadcast()方法将广播消息发送，这样所有监听”com.example.broadcasttest.MY_BROADCAST”这条广播的接收器都会收到消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Button button=(Button) findViewById(R.id.button);</span><br><span class=\"line\"> button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">   Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"string\">&quot;com.example.casttest.MY_BROADCAST&quot;</span>);</span><br><span class=\"line\">   intent.setPackage(getPackageName());</span><br><span class=\"line\">   sendBroadcast(intent);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送有序广播\"><a href=\"#发送有序广播\" class=\"headerlink\" title=\"发送有序广播\"></a>发送有序广播</h3><p>先新建一个广播接收器，用于接收自定义广播。并在广播接收器中添加想要显示的内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnotherBroadcastReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BroadcastReceiver</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> &#123;</span><br><span class=\"line\">        Toast.makeText(context, <span class=\"string\">&quot;received in AnotherBroadcastReceiver&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在AndroidManifest.xml中对该接收器进行修改添加一条action</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;intent-filter&gt;</span><br><span class=\"line\">      &lt;action android:name=<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>/&gt;</span><br><span class=\"line\"> &lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用sendOrderedBroadcast()发送有序广播</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>);</span><br><span class=\"line\">intent.setPackage(getPackageName());</span><br><span class=\"line\">sendOrderedBroadcast(intent,<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>设置优先级(在AndroidManifest中使用android:priority&#x3D;””设置优先级，优先级大的先执行)并利用abortBroadcast截断广播</p>\n<p><code>&lt;intent-filter android:priority=&quot;100&quot;&gt;</code></p>\n<p>在优先级高的广播接收器中使用abortBroadcast方法</p>\n<hr>\n<h1 id=\"本地广播\"><a href=\"#本地广播\" class=\"headerlink\" title=\"本地广播\"></a>本地广播</h1><!--解决了安全性问题-->\n\n<!--无法通过静态注册-->\n\n<p>基本上和之前动态注册广播一样，只是首先通过LocalBroadcastManager的getInstance()方法获取一个他的实例，然后注册的时候调用LocalBroadcastManager的registerReceiver()方法，发送广播的时候调用LocalBroadcastManager的sendBroadcast()方法，仅此而已。</p>\n<p>以下是完整的代码展示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IntentFilter intentFilter;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalReceiver localReceiver;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalBroadcastManager localBroadcastManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        localBroadcastManager = LocalBroadcastManager.getInstance(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">button</span> <span class=\"operator\">=</span> (Button) findViewById(R.id.button);</span><br><span class=\"line\">        button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">Intent</span> <span class=\"variable\">intent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"string\">&quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;</span>);</span><br><span class=\"line\">                localBroadcastManager.sendBroadcast(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        intentFilter = <span class=\"keyword\">new</span> <span class=\"title class_\">IntentFilter</span>();</span><br><span class=\"line\">        intentFilter.addAction(<span class=\"string\">&quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;</span>);</span><br><span class=\"line\">        localReceiver = <span class=\"keyword\">new</span> <span class=\"title class_\">LocalReceiver</span>();</span><br><span class=\"line\">        localBroadcastManager.registerReceiver(localReceiver, intentFilter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        localBroadcastManager.unregisterReceiver(localReceiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">LocalReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BroadcastReceiver</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> &#123;</span><br><span class=\"line\">            Toast.makeText(context, <span class=\"string\">&quot;received local broadcast&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"广播机制(Kotlin)","date":"2025-05-05T12:44:19.000Z","_content":"\n# 接收系统广播\n\n### 动态注册\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    // 声明广播接收器变量\n    lateinit var timeChangeReceiver:TimeChangeReceiver\n    // 声明视图绑定变量\n    private lateinit var binding:ActivityMainBinding\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        // 初始化视图绑定\n        binding=ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        // 创建IntentFilter并添加系统时间变化的广播action\n        val intentFilter=IntentFilter()\n        intentFilter.addAction(\"android.intent.action.TIME_TICK\")\n        // 初始化广播接收器\n        timeChangeReceiver=TimeChangeReceiver()\n        // 注册广播接收器\n        registerReceiver(timeChangeReceiver,intentFilter)\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        // 在Activity销毁时注销广播接收器，防止内存泄漏\n        unregisterReceiver(timeChangeReceiver)\n    }\n\n    // 内部类：时间变化广播接收器\n    inner class TimeChangeReceiver:BroadcastReceiver(){\n        override fun onReceive(context: Context?, intent: Intent?) {\n            // 当接收到时间变化的广播时，显示Toast提示\n            Toast.makeText(context,\"Time has changed\",Toast.LENGTH_SHORT).show()\n        }\n    }\n}\n```\n\n**查看完整的系统广播列表(查看路径)：**\n\n**<Android SDK>/platforms/<任意 android api 版本>/data/broadcast_actions.txt**\n\n### 静态注册\n\n**特点**：开机自启动\n\n**步骤**：\n\n- 使用Android Studio创建的Broadcast Receiver,会自动注册\n\n- 添加相应的权限并添加action属性\n\n  ```kotlin\n  class BootCompleteReceiver : BroadcastReceiver() {\n  \n      override fun onReceive(context: Context, intent: Intent) {\n                  Toast.makeText(context,\"Boot Complete\",Toast.LENGTH_SHORT).show()\n      }\n  }\n  ```\n\n  ```kotlin\n         <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />\n        <receiver\n              android:name=\".BootCompleteReceiver\"\n              android:enabled=\"true\"\n              android:exported=\"true\">\n              <intent-filter>\n                  <action android:name=\"android.intent.action.BOOT_COMPLETED\" />\n              </intent-filter>\n          </receiver>\n  ```\n\n  \n\n------\n\n# 发送自定义广播\n\n### 发送标准广播\n\n- 新建BroadcastReceiver并定义接收逻辑\n\n- 在Manifest.xml中添加action属性\n\n- 构建Intent对象发送广播\n\n  ```kotlin\n  class MyBroadcastReceiver : BroadcastReceiver() {\n  \n      override fun onReceive(context: Context, intent: Intent) {\n          Toast.makeText(context,\"received in MyBroadcastReceiver\",Toast.LENGTH_SHORT).show()\n          abortBroadcast()\n      }\n  }\n  ```\n\n  ```kotlin\n          <receiver\n              android:name=\".MyBroadcastReceiver\"\n              android:enabled=\"true\"\n              android:exported=\"true\">\n              <intent-filter android:priority=\"100\">\n                  <action android:name=\"com.example.broadcasttest.MY_BROADCAST\" />\n              </intent-filter>\n          </receiver>\n  ```\n\n  ```kotlin\n  class MainActivity : AppCompatActivity() {\n      // 声明视图绑定变量\n      private lateinit var binding:ActivityMainBinding\n  \n      override fun onCreate(savedInstanceState: Bundle?) {\n          super.onCreate(savedInstanceState)\n          // 初始化视图绑定\n          binding=ActivityMainBinding.inflate(layoutInflater)\n          setContentView(binding.root)\n          // 设置按钮点击事件\n          binding.button.setOnClickListener {\n              // 创建自定义广播Intent\n              val intent=Intent(\"com.example.broadcasttest.MY_BROADCAST\")\n              // 设置包名，将隐式广播转换为显式广播（Android 8.0及以上版本要求）\n              intent.setPackage(packageName)\n              //发送标准广播\n              sendBroadcast(intent)\n          }\n      }\n  ```\n\n  \n\n### 发送有序广播\n\n- 新建广播接收器\n\n- 添加action属性并设置优先级\n\n- 利用sendOrderedBroadcast()发送广播\n\n- 在广播接收器中使用abortBroadcast()方法可以中断后续广播发送\n\n  ```kotlin\n  class AnotherBroadcastReceiver : BroadcastReceiver() {\n  \n      override fun onReceive(context: Context, intent: Intent) {\n          Toast.makeText(context,\"received in AnotherBroadcastReceiver\",Toast.LENGTH_SHORT).show()\n      }\n  }\n  ```\n\n  ```kotlin\n  <receiver\n              android:name=\".AnotherBroadcastReceiver\"\n              android:enabled=\"true\"\n              android:exported=\"true\">\n              <intent-filter>\n                  <action android:name=\"com.example.broadcasttest.MY_BROADCAST\"/>\n              </intent-filter>\n          </receiver>\n          <receiver\n              android:name=\".MyBroadcastReceiver\"\n              android:enabled=\"true\"\n              android:exported=\"true\">\n              <intent-filter android:priority=\"100\">//设置优先级\n                  <action android:name=\"com.example.broadcasttest.MY_BROADCAST\" />\n              </intent-filter>\n          </receiver>\n  ```\n\n  ```kotlin\n  // 设置按钮点击事件\n          binding.button.setOnClickListener {\n              // 创建自定义广播Intent\n              val intent=Intent(\"com.example.broadcasttest.MY_BROADCAST\")\n              // 设置包名，将隐式广播转换为显式广播（Android 8.0及以上版本要求）\n              intent.setPackage(packageName)\n              // 发送有序广播\n              sendOrderedBroadcast(intent,null)\n          }\n  ```\n\n  ```kotlin\n  class MyBroadcastReceiver : BroadcastReceiver() {\n  \n      override fun onReceive(context: Context, intent: Intent) {\n          Toast.makeText(context,\"received in MyBroadcastReceiver\",Toast.LENGTH_SHORT).show()\n          //截断广播\n          abortBroadcast()\n      }\n  }\n  ```\n\n  \n\n------\n\n","source":"_posts/广播机制-Kotlin.md","raw":"---\ntitle: 广播机制(Kotlin)\ndate: 2025-05-05 20:44:19\ncategories:\n- Android(Kotlin版)\ntags:\n---\n\n# 接收系统广播\n\n### 动态注册\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    // 声明广播接收器变量\n    lateinit var timeChangeReceiver:TimeChangeReceiver\n    // 声明视图绑定变量\n    private lateinit var binding:ActivityMainBinding\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        // 初始化视图绑定\n        binding=ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        // 创建IntentFilter并添加系统时间变化的广播action\n        val intentFilter=IntentFilter()\n        intentFilter.addAction(\"android.intent.action.TIME_TICK\")\n        // 初始化广播接收器\n        timeChangeReceiver=TimeChangeReceiver()\n        // 注册广播接收器\n        registerReceiver(timeChangeReceiver,intentFilter)\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        // 在Activity销毁时注销广播接收器，防止内存泄漏\n        unregisterReceiver(timeChangeReceiver)\n    }\n\n    // 内部类：时间变化广播接收器\n    inner class TimeChangeReceiver:BroadcastReceiver(){\n        override fun onReceive(context: Context?, intent: Intent?) {\n            // 当接收到时间变化的广播时，显示Toast提示\n            Toast.makeText(context,\"Time has changed\",Toast.LENGTH_SHORT).show()\n        }\n    }\n}\n```\n\n**查看完整的系统广播列表(查看路径)：**\n\n**<Android SDK>/platforms/<任意 android api 版本>/data/broadcast_actions.txt**\n\n### 静态注册\n\n**特点**：开机自启动\n\n**步骤**：\n\n- 使用Android Studio创建的Broadcast Receiver,会自动注册\n\n- 添加相应的权限并添加action属性\n\n  ```kotlin\n  class BootCompleteReceiver : BroadcastReceiver() {\n  \n      override fun onReceive(context: Context, intent: Intent) {\n                  Toast.makeText(context,\"Boot Complete\",Toast.LENGTH_SHORT).show()\n      }\n  }\n  ```\n\n  ```kotlin\n         <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />\n        <receiver\n              android:name=\".BootCompleteReceiver\"\n              android:enabled=\"true\"\n              android:exported=\"true\">\n              <intent-filter>\n                  <action android:name=\"android.intent.action.BOOT_COMPLETED\" />\n              </intent-filter>\n          </receiver>\n  ```\n\n  \n\n------\n\n# 发送自定义广播\n\n### 发送标准广播\n\n- 新建BroadcastReceiver并定义接收逻辑\n\n- 在Manifest.xml中添加action属性\n\n- 构建Intent对象发送广播\n\n  ```kotlin\n  class MyBroadcastReceiver : BroadcastReceiver() {\n  \n      override fun onReceive(context: Context, intent: Intent) {\n          Toast.makeText(context,\"received in MyBroadcastReceiver\",Toast.LENGTH_SHORT).show()\n          abortBroadcast()\n      }\n  }\n  ```\n\n  ```kotlin\n          <receiver\n              android:name=\".MyBroadcastReceiver\"\n              android:enabled=\"true\"\n              android:exported=\"true\">\n              <intent-filter android:priority=\"100\">\n                  <action android:name=\"com.example.broadcasttest.MY_BROADCAST\" />\n              </intent-filter>\n          </receiver>\n  ```\n\n  ```kotlin\n  class MainActivity : AppCompatActivity() {\n      // 声明视图绑定变量\n      private lateinit var binding:ActivityMainBinding\n  \n      override fun onCreate(savedInstanceState: Bundle?) {\n          super.onCreate(savedInstanceState)\n          // 初始化视图绑定\n          binding=ActivityMainBinding.inflate(layoutInflater)\n          setContentView(binding.root)\n          // 设置按钮点击事件\n          binding.button.setOnClickListener {\n              // 创建自定义广播Intent\n              val intent=Intent(\"com.example.broadcasttest.MY_BROADCAST\")\n              // 设置包名，将隐式广播转换为显式广播（Android 8.0及以上版本要求）\n              intent.setPackage(packageName)\n              //发送标准广播\n              sendBroadcast(intent)\n          }\n      }\n  ```\n\n  \n\n### 发送有序广播\n\n- 新建广播接收器\n\n- 添加action属性并设置优先级\n\n- 利用sendOrderedBroadcast()发送广播\n\n- 在广播接收器中使用abortBroadcast()方法可以中断后续广播发送\n\n  ```kotlin\n  class AnotherBroadcastReceiver : BroadcastReceiver() {\n  \n      override fun onReceive(context: Context, intent: Intent) {\n          Toast.makeText(context,\"received in AnotherBroadcastReceiver\",Toast.LENGTH_SHORT).show()\n      }\n  }\n  ```\n\n  ```kotlin\n  <receiver\n              android:name=\".AnotherBroadcastReceiver\"\n              android:enabled=\"true\"\n              android:exported=\"true\">\n              <intent-filter>\n                  <action android:name=\"com.example.broadcasttest.MY_BROADCAST\"/>\n              </intent-filter>\n          </receiver>\n          <receiver\n              android:name=\".MyBroadcastReceiver\"\n              android:enabled=\"true\"\n              android:exported=\"true\">\n              <intent-filter android:priority=\"100\">//设置优先级\n                  <action android:name=\"com.example.broadcasttest.MY_BROADCAST\" />\n              </intent-filter>\n          </receiver>\n  ```\n\n  ```kotlin\n  // 设置按钮点击事件\n          binding.button.setOnClickListener {\n              // 创建自定义广播Intent\n              val intent=Intent(\"com.example.broadcasttest.MY_BROADCAST\")\n              // 设置包名，将隐式广播转换为显式广播（Android 8.0及以上版本要求）\n              intent.setPackage(packageName)\n              // 发送有序广播\n              sendOrderedBroadcast(intent,null)\n          }\n  ```\n\n  ```kotlin\n  class MyBroadcastReceiver : BroadcastReceiver() {\n  \n      override fun onReceive(context: Context, intent: Intent) {\n          Toast.makeText(context,\"received in MyBroadcastReceiver\",Toast.LENGTH_SHORT).show()\n          //截断广播\n          abortBroadcast()\n      }\n  }\n  ```\n\n  \n\n------\n\n","slug":"广播机制-Kotlin","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gci0025s4s72wro9t4w","content":"<h1 id=\"接收系统广播\"><a href=\"#接收系统广播\" class=\"headerlink\" title=\"接收系统广播\"></a>接收系统广播</h1><h3 id=\"动态注册\"><a href=\"#动态注册\" class=\"headerlink\" title=\"动态注册\"></a>动态注册</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明广播接收器变量</span></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> timeChangeReceiver:TimeChangeReceiver</span><br><span class=\"line\">    <span class=\"comment\">// 声明视图绑定变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding:ActivityMainBinding</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        <span class=\"comment\">// 初始化视图绑定</span></span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建IntentFilter并添加系统时间变化的广播action</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> intentFilter=IntentFilter()</span><br><span class=\"line\">        intentFilter.addAction(<span class=\"string\">&quot;android.intent.action.TIME_TICK&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 初始化广播接收器</span></span><br><span class=\"line\">        timeChangeReceiver=TimeChangeReceiver()</span><br><span class=\"line\">        <span class=\"comment\">// 注册广播接收器</span></span><br><span class=\"line\">        registerReceiver(timeChangeReceiver,intentFilter)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        <span class=\"comment\">// 在Activity销毁时注销广播接收器，防止内存泄漏</span></span><br><span class=\"line\">        unregisterReceiver(timeChangeReceiver)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内部类：时间变化广播接收器</span></span><br><span class=\"line\">    <span class=\"keyword\">inner</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeChangeReceiver</span>:<span class=\"type\">BroadcastReceiver</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onReceive</span><span class=\"params\">(context: <span class=\"type\">Context</span>?, intent: <span class=\"type\">Intent</span>?)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当接收到时间变化的广播时，显示Toast提示</span></span><br><span class=\"line\">            Toast.makeText(context,<span class=\"string\">&quot;Time has changed&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看完整的系统广播列表(查看路径)：</strong></p>\n<p><strong><Android SDK>&#x2F;platforms&#x2F;&lt;任意 android api 版本&gt;&#x2F;data&#x2F;broadcast_actions.txt</strong></p>\n<h3 id=\"静态注册\"><a href=\"#静态注册\" class=\"headerlink\" title=\"静态注册\"></a>静态注册</h3><p><strong>特点</strong>：开机自启动</p>\n<p><strong>步骤</strong>：</p>\n<ul>\n<li><p>使用Android Studio创建的Broadcast Receiver,会自动注册</p>\n</li>\n<li><p>添加相应的权限并添加action属性</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BootCompleteReceiver</span> : <span class=\"type\">BroadcastReceiver</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onReceive</span><span class=\"params\">(context: <span class=\"type\">Context</span>, intent: <span class=\"type\">Intent</span>)</span></span> &#123;</span><br><span class=\"line\">                Toast.makeText(context,<span class=\"string\">&quot;Boot Complete&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span> /&gt;</span><br><span class=\"line\">&lt;receiver</span><br><span class=\"line\">      android:name=<span class=\"string\">&quot;.BootCompleteReceiver&quot;</span></span><br><span class=\"line\">      android:enabled=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">      android:exported=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">      &lt;intent-filter&gt;</span><br><span class=\"line\">          &lt;action android:name=<span class=\"string\">&quot;android.intent.action.BOOT_COMPLETED&quot;</span> /&gt;</span><br><span class=\"line\">      &lt;/intent-filter&gt;</span><br><span class=\"line\">  &lt;/receiver&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"发送自定义广播\"><a href=\"#发送自定义广播\" class=\"headerlink\" title=\"发送自定义广播\"></a>发送自定义广播</h1><h3 id=\"发送标准广播\"><a href=\"#发送标准广播\" class=\"headerlink\" title=\"发送标准广播\"></a>发送标准广播</h3><ul>\n<li><p>新建BroadcastReceiver并定义接收逻辑</p>\n</li>\n<li><p>在Manifest.xml中添加action属性</p>\n</li>\n<li><p>构建Intent对象发送广播</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyBroadcastReceiver</span> : <span class=\"type\">BroadcastReceiver</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onReceive</span><span class=\"params\">(context: <span class=\"type\">Context</span>, intent: <span class=\"type\">Intent</span>)</span></span> &#123;</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">&quot;received in MyBroadcastReceiver&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        abortBroadcast()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;receiver</span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;.MyBroadcastReceiver&quot;</span></span><br><span class=\"line\">    android:enabled=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    android:exported=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">    &lt;intent-filter android:priority=<span class=\"string\">&quot;100&quot;</span>&gt;</span><br><span class=\"line\">        &lt;action android:name=<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明视图绑定变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding:ActivityMainBinding</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        <span class=\"comment\">// 初始化视图绑定</span></span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        <span class=\"comment\">// 设置按钮点击事件</span></span><br><span class=\"line\">        binding.button.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建自定义广播Intent</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> intent=Intent(<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 设置包名，将隐式广播转换为显式广播（Android 8.0及以上版本要求）</span></span><br><span class=\"line\">            intent.setPackage(packageName)</span><br><span class=\"line\">            <span class=\"comment\">//发送标准广播</span></span><br><span class=\"line\">            sendBroadcast(intent)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"发送有序广播\"><a href=\"#发送有序广播\" class=\"headerlink\" title=\"发送有序广播\"></a>发送有序广播</h3><ul>\n<li><p>新建广播接收器</p>\n</li>\n<li><p>添加action属性并设置优先级</p>\n</li>\n<li><p>利用sendOrderedBroadcast()发送广播</p>\n</li>\n<li><p>在广播接收器中使用abortBroadcast()方法可以中断后续广播发送</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AnotherBroadcastReceiver</span> : <span class=\"type\">BroadcastReceiver</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onReceive</span><span class=\"params\">(context: <span class=\"type\">Context</span>, intent: <span class=\"type\">Intent</span>)</span></span> &#123;</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">&quot;received in AnotherBroadcastReceiver&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;receiver</span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;.AnotherBroadcastReceiver&quot;</span></span><br><span class=\"line\">            android:enabled=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">            android:exported=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">            &lt;intent-filter&gt;</span><br><span class=\"line\">                &lt;action android:name=<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;/intent-filter&gt;</span><br><span class=\"line\">        &lt;/receiver&gt;</span><br><span class=\"line\">        &lt;receiver</span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;.MyBroadcastReceiver&quot;</span></span><br><span class=\"line\">            android:enabled=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">            android:exported=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">            &lt;intent-filter android:priority=<span class=\"string\">&quot;100&quot;</span>&gt;<span class=\"comment\">//设置优先级</span></span><br><span class=\"line\">                &lt;action android:name=<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span> /&gt;</span><br><span class=\"line\">            &lt;/intent-filter&gt;</span><br><span class=\"line\">        &lt;/receiver&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置按钮点击事件</span></span><br><span class=\"line\">        binding.button.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建自定义广播Intent</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> intent=Intent(<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 设置包名，将隐式广播转换为显式广播（Android 8.0及以上版本要求）</span></span><br><span class=\"line\">            intent.setPackage(packageName)</span><br><span class=\"line\">            <span class=\"comment\">// 发送有序广播</span></span><br><span class=\"line\">            sendOrderedBroadcast(intent,<span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyBroadcastReceiver</span> : <span class=\"type\">BroadcastReceiver</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onReceive</span><span class=\"params\">(context: <span class=\"type\">Context</span>, intent: <span class=\"type\">Intent</span>)</span></span> &#123;</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">&quot;received in MyBroadcastReceiver&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        <span class=\"comment\">//截断广播</span></span><br><span class=\"line\">        abortBroadcast()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n","excerpt":"接收系统广播\n动态注册\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\nclass MainActivity : AppCompatActivity() {\n    // 声明广播接收器变量\n    lateinit var timeChangeReceiver:TimeChangeReceiver\n    // 声明视图绑定变量\n    private lateinit var binding:ActivityMainBinding\n\n    o","more":"<h1 id=\"接收系统广播\"><a href=\"#接收系统广播\" class=\"headerlink\" title=\"接收系统广播\"></a>接收系统广播</h1><h3 id=\"动态注册\"><a href=\"#动态注册\" class=\"headerlink\" title=\"动态注册\"></a>动态注册</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明广播接收器变量</span></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> timeChangeReceiver:TimeChangeReceiver</span><br><span class=\"line\">    <span class=\"comment\">// 声明视图绑定变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding:ActivityMainBinding</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        <span class=\"comment\">// 初始化视图绑定</span></span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建IntentFilter并添加系统时间变化的广播action</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> intentFilter=IntentFilter()</span><br><span class=\"line\">        intentFilter.addAction(<span class=\"string\">&quot;android.intent.action.TIME_TICK&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 初始化广播接收器</span></span><br><span class=\"line\">        timeChangeReceiver=TimeChangeReceiver()</span><br><span class=\"line\">        <span class=\"comment\">// 注册广播接收器</span></span><br><span class=\"line\">        registerReceiver(timeChangeReceiver,intentFilter)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        <span class=\"comment\">// 在Activity销毁时注销广播接收器，防止内存泄漏</span></span><br><span class=\"line\">        unregisterReceiver(timeChangeReceiver)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内部类：时间变化广播接收器</span></span><br><span class=\"line\">    <span class=\"keyword\">inner</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TimeChangeReceiver</span>:<span class=\"type\">BroadcastReceiver</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onReceive</span><span class=\"params\">(context: <span class=\"type\">Context</span>?, intent: <span class=\"type\">Intent</span>?)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当接收到时间变化的广播时，显示Toast提示</span></span><br><span class=\"line\">            Toast.makeText(context,<span class=\"string\">&quot;Time has changed&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看完整的系统广播列表(查看路径)：</strong></p>\n<p><strong><Android SDK>&#x2F;platforms&#x2F;&lt;任意 android api 版本&gt;&#x2F;data&#x2F;broadcast_actions.txt</strong></p>\n<h3 id=\"静态注册\"><a href=\"#静态注册\" class=\"headerlink\" title=\"静态注册\"></a>静态注册</h3><p><strong>特点</strong>：开机自启动</p>\n<p><strong>步骤</strong>：</p>\n<ul>\n<li><p>使用Android Studio创建的Broadcast Receiver,会自动注册</p>\n</li>\n<li><p>添加相应的权限并添加action属性</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BootCompleteReceiver</span> : <span class=\"type\">BroadcastReceiver</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onReceive</span><span class=\"params\">(context: <span class=\"type\">Context</span>, intent: <span class=\"type\">Intent</span>)</span></span> &#123;</span><br><span class=\"line\">                Toast.makeText(context,<span class=\"string\">&quot;Boot Complete&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span> /&gt;</span><br><span class=\"line\">&lt;receiver</span><br><span class=\"line\">      android:name=<span class=\"string\">&quot;.BootCompleteReceiver&quot;</span></span><br><span class=\"line\">      android:enabled=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">      android:exported=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">      &lt;intent-filter&gt;</span><br><span class=\"line\">          &lt;action android:name=<span class=\"string\">&quot;android.intent.action.BOOT_COMPLETED&quot;</span> /&gt;</span><br><span class=\"line\">      &lt;/intent-filter&gt;</span><br><span class=\"line\">  &lt;/receiver&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"发送自定义广播\"><a href=\"#发送自定义广播\" class=\"headerlink\" title=\"发送自定义广播\"></a>发送自定义广播</h1><h3 id=\"发送标准广播\"><a href=\"#发送标准广播\" class=\"headerlink\" title=\"发送标准广播\"></a>发送标准广播</h3><ul>\n<li><p>新建BroadcastReceiver并定义接收逻辑</p>\n</li>\n<li><p>在Manifest.xml中添加action属性</p>\n</li>\n<li><p>构建Intent对象发送广播</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyBroadcastReceiver</span> : <span class=\"type\">BroadcastReceiver</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onReceive</span><span class=\"params\">(context: <span class=\"type\">Context</span>, intent: <span class=\"type\">Intent</span>)</span></span> &#123;</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">&quot;received in MyBroadcastReceiver&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        abortBroadcast()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;receiver</span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;.MyBroadcastReceiver&quot;</span></span><br><span class=\"line\">    android:enabled=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    android:exported=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">    &lt;intent-filter android:priority=<span class=\"string\">&quot;100&quot;</span>&gt;</span><br><span class=\"line\">        &lt;action android:name=<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明视图绑定变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding:ActivityMainBinding</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        <span class=\"comment\">// 初始化视图绑定</span></span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        <span class=\"comment\">// 设置按钮点击事件</span></span><br><span class=\"line\">        binding.button.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建自定义广播Intent</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> intent=Intent(<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 设置包名，将隐式广播转换为显式广播（Android 8.0及以上版本要求）</span></span><br><span class=\"line\">            intent.setPackage(packageName)</span><br><span class=\"line\">            <span class=\"comment\">//发送标准广播</span></span><br><span class=\"line\">            sendBroadcast(intent)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"发送有序广播\"><a href=\"#发送有序广播\" class=\"headerlink\" title=\"发送有序广播\"></a>发送有序广播</h3><ul>\n<li><p>新建广播接收器</p>\n</li>\n<li><p>添加action属性并设置优先级</p>\n</li>\n<li><p>利用sendOrderedBroadcast()发送广播</p>\n</li>\n<li><p>在广播接收器中使用abortBroadcast()方法可以中断后续广播发送</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AnotherBroadcastReceiver</span> : <span class=\"type\">BroadcastReceiver</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onReceive</span><span class=\"params\">(context: <span class=\"type\">Context</span>, intent: <span class=\"type\">Intent</span>)</span></span> &#123;</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">&quot;received in AnotherBroadcastReceiver&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;receiver</span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;.AnotherBroadcastReceiver&quot;</span></span><br><span class=\"line\">            android:enabled=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">            android:exported=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">            &lt;intent-filter&gt;</span><br><span class=\"line\">                &lt;action android:name=<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;/intent-filter&gt;</span><br><span class=\"line\">        &lt;/receiver&gt;</span><br><span class=\"line\">        &lt;receiver</span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;.MyBroadcastReceiver&quot;</span></span><br><span class=\"line\">            android:enabled=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">            android:exported=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">            &lt;intent-filter android:priority=<span class=\"string\">&quot;100&quot;</span>&gt;<span class=\"comment\">//设置优先级</span></span><br><span class=\"line\">                &lt;action android:name=<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span> /&gt;</span><br><span class=\"line\">            &lt;/intent-filter&gt;</span><br><span class=\"line\">        &lt;/receiver&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置按钮点击事件</span></span><br><span class=\"line\">        binding.button.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建自定义广播Intent</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> intent=Intent(<span class=\"string\">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 设置包名，将隐式广播转换为显式广播（Android 8.0及以上版本要求）</span></span><br><span class=\"line\">            intent.setPackage(packageName)</span><br><span class=\"line\">            <span class=\"comment\">// 发送有序广播</span></span><br><span class=\"line\">            sendOrderedBroadcast(intent,<span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyBroadcastReceiver</span> : <span class=\"type\">BroadcastReceiver</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onReceive</span><span class=\"params\">(context: <span class=\"type\">Context</span>, intent: <span class=\"type\">Intent</span>)</span></span> &#123;</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">&quot;received in MyBroadcastReceiver&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        <span class=\"comment\">//截断广播</span></span><br><span class=\"line\">        abortBroadcast()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n"},{"title":"手机多媒体(Kotlin)","date":"2025-05-24T15:49:21.000Z","_content":"\n# 通知(进阶)\n\n1. 创建通知渠道\n\n   ```kotlin\n    val manager=getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n           if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){\n               /*参数介绍：\n               1.渠道id\n               2.渠道名称\n               3.重要等级\n               */\n               val channel=NotificationChannel(\"normal\",\"Normal\",NotificationManager.IMPORTANCE_DEFAULT)\n               val channel2=NotificationChannel(\"important\",\"Important\",NotificationManager.IMPORTANCE_HIGH)\n               //创建通道\n               manager.createNotificationChannel(channel2)\n               manager.createNotificationChannel(channel)\n           }\n   ```\n\n   \n\n2. 创建Notification对象\n\n3. 通过连缀设置丰富的Notification对象\n\n   ```kotlin\n   val notification=NotificationCompat.Builder(this,\"important\")\n                   .setContentTitle(\"Title\")\n                   .setContentText(\"Text\")\n                   .setSmallIcon(R.drawable.small_icon)\n                   .setLargeIcon(BitmapFactory.decodeResource(resources,R.drawable.large_icon))\n                   .setContentIntent(pi)//点击界面跳转\n                   .setAutoCancel(true)//点击后图标自动消失\n   //富文本\n                   .setStyle(NotificationCompat.BigTextStyle().bigText(\"Learn how to build notifications, send and sync data, and use voice actions. Get the official Android IDE and developer tools to build apps for Android.\"))    \n   //显示图片\n   .setStyle(NotificationCompat.BigPictureStyle().bigPicture(BitmapFactory.decodeResource(resources,R.drawable.big_image)))\n                   .build()\n   ```\n\n   \n\n4. 显示通知\n\n   ```kotlin\n   manager.notify(1,notification)\n   ```\n\n   \n\n5. 设置点击事件\n\n   ```kotlin\n    val intent=Intent(this,NotificationActivity::class.java)\n    val pi=PendingIntent.getActivity(this,0,intent,0)\n   //在Notification对象中加入setContentIntent连缀\n   ```\n\n- 图标消失的两种方法：\n\n  ```kotlin\n  //1.在Notification对象后加setAutoCancel连缀\n  //2.在界面跳转后的那个界面输入以下代码：\n  //val manager=getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n  //manager.cancel(1)“1”是指notify方法中传入的那个id\n  ```\n\n------\n\n# 调用摄像头和相册\n\n### 用摄像头拍照\n\n1. 首先创建一个File对象，用于存储拍下的照片\n\n2. 接下来通过判断版本进行操作，如果版本低于Android7.0就调用Uri的**fromFile()**方法转换为Uri对象（这个标识着图片的本地真实路径），如果版本高于7.0就调用FileProvider的getUriForFile()方法，将File转换成一个封装过的Uri对象\n\n3. 构建Intent对象，启动相机程序(利用startActivityForResult进行启动)\n\n4. 重写onActivityResult方法\n\n5. 判断图片方向，如果需要旋转并进行旋转\n\n6. 由于用到ContentProvider，故需要注册\n\n   ```kotlin\n    <provider\n               android:authorities=\"com.example.cameraalbumtest.fileprovider\"\n               android:name=\"androidx.core.content.FileProvider\"\n               android:exported=\"false\"\n               android:grantUriPermissions=\"true\"\n               >\n               <meta-data\n                   android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                   android:resource=\"@xml/file_paths\"/>\n           </provider>\n   ```\n\n   \n\n7. 指定共享路径\n\n   ```kotlin\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n       <external-path\n           name=\"my_images\"\n           path=\"/\"/>\n   </paths>\n   ```\n\n   \n\n### 从相册中选择\n\n1. 构建一个Intent对象表示打开文件选择器，并设置条件过滤\n2. 结果返回到onActivityResult中，调用getBitmapFromUri方法将Uri转换成Bitmap对象\n3. 将图片显示出来\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    // ViewBinding对象\n    private lateinit var binding:ActivityMainBinding\n    // 从相册选择照片的请求码\n    val fromAlbum=2\n    // 拍照请求码\n    val takePhoto=1\n    // 用于存储拍照后图片的Uri\n    lateinit var imageUri:Uri\n    // 用于存储拍照后图片的文件\n    lateinit var outputImage:File\n    @SuppressLint(\"ObsoleteSdkInt\")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        // 启用沉浸式状态栏\n        enableEdgeToEdge()\n        // 初始化ViewBinding\n        binding=ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        // 适配系统窗口，防止内容被遮挡\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n            insets\n        }\n        // 拍照按钮点击事件\n        binding.takephoto.setOnClickListener {\n            // 创建File对象，用于存储照片\n            outputImage=File(externalCacheDir,\"output_image.jpg\")\n            if (outputImage.exists()){\n                // 如果文件已存在则删除\n                outputImage.delete()\n            }\n            // 创建新文件\n            outputImage.createNewFile()\n            // 判断Android版本，获取图片Uri\n            imageUri=if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.N){\n                // 7.0及以上使用FileProvider\n                /**\n                *第一个参数是Context\n                第二个参数是任意的唯一字符串\n                第三个是刚创建的File对象\n                **/\n                FileProvider.getUriForFile(this,\"com.example.cameraalbumtest.fileprovider\",outputImage)\n            }else{\n                // 7.0以下直接使用Uri.fromFile\n                Uri.fromFile(outputImage)\n            }\n            // 启动相机程序\n            val intent=Intent(\"android.media.action.IMAGE_CAPTURE\")\n            // 指定图片输出地址\n            intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri)\n            // 启动相机Activity\n            startActivityForResult(intent,takePhoto)\n        }\n        // 从相册选择按钮点击事件\n        binding.fromAlbumBtn.setOnClickListener {\n            // 打开文件选择器\n            val intent=Intent(Intent.ACTION_OPEN_DOCUMENT)\n            // 添加可打开的类别，确保文件可以被打开\n            intent.addCategory(Intent.CATEGORY_OPENABLE)\n            // 指定只显示图片类型的文件\n            intent.type=\"image/*\"\n            // 启动文件选择器Activity\n            startActivityForResult(intent,fromAlbum)\n        }\n    }\n    // 拍照Activity返回结果回调\n    override fun onActivityResult(\n        requestCode: Int,\n        resultCode: Int,\n        data: Intent?,\n        caller: ComponentCaller\n    ) {\n        super.onActivityResult(requestCode, resultCode, data, caller)\n        when(requestCode){\n            takePhoto->{\n                if(resultCode== Activity.RESULT_OK){\n                    // 将拍摄照片显示出来\n                    val bitmap=BitmapFactory.decodeStream(contentResolver.openInputStream(imageUri))\n                    // 处理图片旋转问题后显示\n                    binding.imageView.setImageBitmap(rotateIfRequired(bitmap))\n                }\n            }\n            // 处理从相册选择照片的返回结果\n            fromAlbum->{\n                // 检查结果码是否成功且数据不为空\n                if(resultCode==Activity.RESULT_OK&&data!=null){\n                    // 获取选定图片的Uri\n                    data.data?.let { uri->\n                        // 根据Uri获取Bitmap对象并显示\n                        val bitmap=getBitmapFromUri(uri)\n                        binding.imageView.setImageBitmap(bitmap)\n                    }\n                }\n            }\n        }\n    }\n\n    // 根据Uri获取图片的Bitmap对象\n    private fun getBitmapFromUri(uri: Any)=contentResolver.openFileDescriptor(uri as Uri,\"r\")?.use {\n        // 使用文件描述符解码Bitmap\n        BitmapFactory.decodeFileDescriptor(it.fileDescriptor)\n    }\n    // 判断图片是否需要旋转，并进行旋转\n    private fun rotateIfRequired(bitmap: Bitmap?): Bitmap? {\n         val exif=ExifInterface(outputImage.path)\n        // 读取图片的旋转角度\n        val orientation=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,ExifInterface.ORIENTATION_NORMAL)\n        return when(orientation){\n            ExifInterface.ORIENTATION_ROTATE_90->rotateBitmap(bitmap,90)\n            ExifInterface.ORIENTATION_ROTATE_180->rotateBitmap(bitmap,180)\n            ExifInterface.ORIENTATION_ROTATE_270->rotateBitmap(bitmap,270)\n            else->bitmap\n        }\n    }\n\n    // 旋转Bitmap图片\n    private fun rotateBitmap(bitmap: Bitmap?, i: Int): Bitmap? {\n            val matrix=Matrix()\n        // 设置旋转角度\n        matrix.postRotate(degree.toFloat())\n        // 创建旋转后的Bitmap\n        val rotatedBitmap=Bitmap.createBitmap(bitmap!!,0,0,bitmap.width,bitmap.height,matrix,true)\n        // 将不再需要的Bitmap对象回收，释放内存\n        bitmap.recycle()\n        return rotatedBitmap\n    }\n}\n```\n\n\n\n------\n\n# 播放多媒体\n\n### 播放音频\n\n- **MdeiaPlayer类常用方法**\n\n  ![](../img/img58.jpg)\n\n- **过程**\n\n  1. 首先在main文件夹下创建一个assets文件夹，在里面放入要播放的音频\n\n  2. 创建一个MediaPlayer对象\n\n  3. 初始化MdeiaPlayer对象\n\n  4. 利用MediaPlayer中的方法对音频文件状态进行判断并执行相应的操作\n\n     ```kotlin\n     class MainActivity : AppCompatActivity() {\n         private lateinit var binding:ActivityMainBinding\n         //创建对象\n         private val mediaPlayer=MediaPlayer()\n         override fun onCreate(savedInstanceState: Bundle?) {\n             super.onCreate(savedInstanceState)\n             enableEdgeToEdge()\n             binding=ActivityMainBinding.inflate(layoutInflater)\n             setContentView(binding.root)\n             ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n                 val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n                 v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n                 insets\n             }\n             //初始化\n             initMediaPlayer()\n             binding.play.setOnClickListener {\n                 if(!mediaPlayer.isPlaying){\n                     mediaPlayer.start()//开始播放\n                 }\n             }\n             binding.pause.setOnClickListener {\n                 if(mediaPlayer.isPlaying){\n                     mediaPlayer.pause()//暂停播放\n                 }\n             }\n             binding.stop.setOnClickListener {\n                 if(mediaPlayer.isPlaying){\n                     //停止播放\n                     mediaPlayer.reset()\n                     initMediaPlayer()\n                 }\n             }\n         }\n         private fun initMediaPlayer() {\n             //得到AssetManager实例，读取assets目录下任何资源\n             val assetManager=assets\n             //将音频文件句柄打开\n             val fd=assetManager.openFd(\"music.mp3\")\n             //为音频做好播放前准备\n             mediaPlayer.setDataSource(fd.fileDescriptor,fd.startOffset,fd.length)\n             mediaPlayer.prepare()\n         }\n         override fun onDestroy() {\n             super.onDestroy()\n             mediaPlayer.stop()\n             mediaPlayer.release()\n         }\n     }\n     ```\n\n     \n\n### 播放视频\n\n- **VideoView常用方法**\n\n  ![](../img/img57.jpg)\n\n- **过程**\n\n  1. 利用VideoView控件显示视频\n\n  2. 在res文件夹下新建raw文件夹放置视频文件\n\n  3. 利用VideoView中的方法对音频文件状态进行判断并执行相应的操作\n\n     ```kotlin\n     <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n         xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n         xmlns:tools=\"http://schemas.android.com/tools\"\n         android:id=\"@+id/main\"\n         android:layout_width=\"match_parent\"\n         android:layout_height=\"match_parent\"\n         tools:context=\".MainActivity\"\n         android:orientation=\"vertical\">\n         <LinearLayout\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"wrap_content\">\n             <Button\n                 android:id=\"@+id/play\"\n                 android:layout_width=\"0dp\"\n                 android:layout_height=\"wrap_content\"\n                 android:layout_weight=\"1\"\n                 android:text=\"Play\"/>\n             <Button\n                 android:id=\"@+id/pause\"\n                 android:layout_width=\"0dp\"\n                 android:layout_height=\"wrap_content\"\n                 android:layout_weight=\"1\"\n                 android:text=\"Pause\"/>\n             <Button\n                 android:id=\"@+id/replay\"\n                 android:layout_width=\"0dp\"\n                 android:layout_height=\"wrap_content\"\n                 android:layout_weight=\"1\"\n                 android:text=\"Replay\"/>\n         </LinearLayout>\n         <VideoView\n             android:id=\"@+id/videoView\"\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"wrap_content\"/>\n     </LinearLayout>\n     ```\n\n     ```kotlin\n     class MainActivity : AppCompatActivity() {\n         private lateinit var binding:ActivityMainBinding\n         override fun onCreate(savedInstanceState: Bundle?) {\n             super.onCreate(savedInstanceState)\n             enableEdgeToEdge()\n             binding=ActivityMainBinding.inflate(layoutInflater)\n             setContentView(binding.root)\n             ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n                 val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n                 v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n                 insets\n             }\n             val uri=Uri.parse(\"android.resource://$packageName/${R.raw.video}\")\n             binding.videoView.setVideoURI(uri)\n             binding.play.setOnClickListener {\n                 if(!binding.videoView.isPlaying){\n                     binding.videoView.start()\n                 }\n             }\n             binding.pause.setOnClickListener {\n                 if(binding.videoView.isPlaying){\n                     binding.videoView.pause()\n                 }\n             }\n             binding.replay.setOnClickListener {\n                 if(binding.videoView.isPlaying){\n                     binding.videoView.resume()\n                 }\n             }\n         }\n     \n         override fun onDestroy() {\n             super.onDestroy()\n             binding.videoView.suspend()\n         }\n     }\n     ```\n\n     \n\n------\n\n","source":"_posts/手机多媒体-Kotlin.md","raw":"---\ntitle: 手机多媒体(Kotlin)\ndate: 2025-05-24 23:49:21\ncategories:\n- Android(Kotlin版)\ntags:\n---\n\n# 通知(进阶)\n\n1. 创建通知渠道\n\n   ```kotlin\n    val manager=getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n           if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){\n               /*参数介绍：\n               1.渠道id\n               2.渠道名称\n               3.重要等级\n               */\n               val channel=NotificationChannel(\"normal\",\"Normal\",NotificationManager.IMPORTANCE_DEFAULT)\n               val channel2=NotificationChannel(\"important\",\"Important\",NotificationManager.IMPORTANCE_HIGH)\n               //创建通道\n               manager.createNotificationChannel(channel2)\n               manager.createNotificationChannel(channel)\n           }\n   ```\n\n   \n\n2. 创建Notification对象\n\n3. 通过连缀设置丰富的Notification对象\n\n   ```kotlin\n   val notification=NotificationCompat.Builder(this,\"important\")\n                   .setContentTitle(\"Title\")\n                   .setContentText(\"Text\")\n                   .setSmallIcon(R.drawable.small_icon)\n                   .setLargeIcon(BitmapFactory.decodeResource(resources,R.drawable.large_icon))\n                   .setContentIntent(pi)//点击界面跳转\n                   .setAutoCancel(true)//点击后图标自动消失\n   //富文本\n                   .setStyle(NotificationCompat.BigTextStyle().bigText(\"Learn how to build notifications, send and sync data, and use voice actions. Get the official Android IDE and developer tools to build apps for Android.\"))    \n   //显示图片\n   .setStyle(NotificationCompat.BigPictureStyle().bigPicture(BitmapFactory.decodeResource(resources,R.drawable.big_image)))\n                   .build()\n   ```\n\n   \n\n4. 显示通知\n\n   ```kotlin\n   manager.notify(1,notification)\n   ```\n\n   \n\n5. 设置点击事件\n\n   ```kotlin\n    val intent=Intent(this,NotificationActivity::class.java)\n    val pi=PendingIntent.getActivity(this,0,intent,0)\n   //在Notification对象中加入setContentIntent连缀\n   ```\n\n- 图标消失的两种方法：\n\n  ```kotlin\n  //1.在Notification对象后加setAutoCancel连缀\n  //2.在界面跳转后的那个界面输入以下代码：\n  //val manager=getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n  //manager.cancel(1)“1”是指notify方法中传入的那个id\n  ```\n\n------\n\n# 调用摄像头和相册\n\n### 用摄像头拍照\n\n1. 首先创建一个File对象，用于存储拍下的照片\n\n2. 接下来通过判断版本进行操作，如果版本低于Android7.0就调用Uri的**fromFile()**方法转换为Uri对象（这个标识着图片的本地真实路径），如果版本高于7.0就调用FileProvider的getUriForFile()方法，将File转换成一个封装过的Uri对象\n\n3. 构建Intent对象，启动相机程序(利用startActivityForResult进行启动)\n\n4. 重写onActivityResult方法\n\n5. 判断图片方向，如果需要旋转并进行旋转\n\n6. 由于用到ContentProvider，故需要注册\n\n   ```kotlin\n    <provider\n               android:authorities=\"com.example.cameraalbumtest.fileprovider\"\n               android:name=\"androidx.core.content.FileProvider\"\n               android:exported=\"false\"\n               android:grantUriPermissions=\"true\"\n               >\n               <meta-data\n                   android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                   android:resource=\"@xml/file_paths\"/>\n           </provider>\n   ```\n\n   \n\n7. 指定共享路径\n\n   ```kotlin\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n       <external-path\n           name=\"my_images\"\n           path=\"/\"/>\n   </paths>\n   ```\n\n   \n\n### 从相册中选择\n\n1. 构建一个Intent对象表示打开文件选择器，并设置条件过滤\n2. 结果返回到onActivityResult中，调用getBitmapFromUri方法将Uri转换成Bitmap对象\n3. 将图片显示出来\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    // ViewBinding对象\n    private lateinit var binding:ActivityMainBinding\n    // 从相册选择照片的请求码\n    val fromAlbum=2\n    // 拍照请求码\n    val takePhoto=1\n    // 用于存储拍照后图片的Uri\n    lateinit var imageUri:Uri\n    // 用于存储拍照后图片的文件\n    lateinit var outputImage:File\n    @SuppressLint(\"ObsoleteSdkInt\")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        // 启用沉浸式状态栏\n        enableEdgeToEdge()\n        // 初始化ViewBinding\n        binding=ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        // 适配系统窗口，防止内容被遮挡\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n            insets\n        }\n        // 拍照按钮点击事件\n        binding.takephoto.setOnClickListener {\n            // 创建File对象，用于存储照片\n            outputImage=File(externalCacheDir,\"output_image.jpg\")\n            if (outputImage.exists()){\n                // 如果文件已存在则删除\n                outputImage.delete()\n            }\n            // 创建新文件\n            outputImage.createNewFile()\n            // 判断Android版本，获取图片Uri\n            imageUri=if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.N){\n                // 7.0及以上使用FileProvider\n                /**\n                *第一个参数是Context\n                第二个参数是任意的唯一字符串\n                第三个是刚创建的File对象\n                **/\n                FileProvider.getUriForFile(this,\"com.example.cameraalbumtest.fileprovider\",outputImage)\n            }else{\n                // 7.0以下直接使用Uri.fromFile\n                Uri.fromFile(outputImage)\n            }\n            // 启动相机程序\n            val intent=Intent(\"android.media.action.IMAGE_CAPTURE\")\n            // 指定图片输出地址\n            intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri)\n            // 启动相机Activity\n            startActivityForResult(intent,takePhoto)\n        }\n        // 从相册选择按钮点击事件\n        binding.fromAlbumBtn.setOnClickListener {\n            // 打开文件选择器\n            val intent=Intent(Intent.ACTION_OPEN_DOCUMENT)\n            // 添加可打开的类别，确保文件可以被打开\n            intent.addCategory(Intent.CATEGORY_OPENABLE)\n            // 指定只显示图片类型的文件\n            intent.type=\"image/*\"\n            // 启动文件选择器Activity\n            startActivityForResult(intent,fromAlbum)\n        }\n    }\n    // 拍照Activity返回结果回调\n    override fun onActivityResult(\n        requestCode: Int,\n        resultCode: Int,\n        data: Intent?,\n        caller: ComponentCaller\n    ) {\n        super.onActivityResult(requestCode, resultCode, data, caller)\n        when(requestCode){\n            takePhoto->{\n                if(resultCode== Activity.RESULT_OK){\n                    // 将拍摄照片显示出来\n                    val bitmap=BitmapFactory.decodeStream(contentResolver.openInputStream(imageUri))\n                    // 处理图片旋转问题后显示\n                    binding.imageView.setImageBitmap(rotateIfRequired(bitmap))\n                }\n            }\n            // 处理从相册选择照片的返回结果\n            fromAlbum->{\n                // 检查结果码是否成功且数据不为空\n                if(resultCode==Activity.RESULT_OK&&data!=null){\n                    // 获取选定图片的Uri\n                    data.data?.let { uri->\n                        // 根据Uri获取Bitmap对象并显示\n                        val bitmap=getBitmapFromUri(uri)\n                        binding.imageView.setImageBitmap(bitmap)\n                    }\n                }\n            }\n        }\n    }\n\n    // 根据Uri获取图片的Bitmap对象\n    private fun getBitmapFromUri(uri: Any)=contentResolver.openFileDescriptor(uri as Uri,\"r\")?.use {\n        // 使用文件描述符解码Bitmap\n        BitmapFactory.decodeFileDescriptor(it.fileDescriptor)\n    }\n    // 判断图片是否需要旋转，并进行旋转\n    private fun rotateIfRequired(bitmap: Bitmap?): Bitmap? {\n         val exif=ExifInterface(outputImage.path)\n        // 读取图片的旋转角度\n        val orientation=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,ExifInterface.ORIENTATION_NORMAL)\n        return when(orientation){\n            ExifInterface.ORIENTATION_ROTATE_90->rotateBitmap(bitmap,90)\n            ExifInterface.ORIENTATION_ROTATE_180->rotateBitmap(bitmap,180)\n            ExifInterface.ORIENTATION_ROTATE_270->rotateBitmap(bitmap,270)\n            else->bitmap\n        }\n    }\n\n    // 旋转Bitmap图片\n    private fun rotateBitmap(bitmap: Bitmap?, i: Int): Bitmap? {\n            val matrix=Matrix()\n        // 设置旋转角度\n        matrix.postRotate(degree.toFloat())\n        // 创建旋转后的Bitmap\n        val rotatedBitmap=Bitmap.createBitmap(bitmap!!,0,0,bitmap.width,bitmap.height,matrix,true)\n        // 将不再需要的Bitmap对象回收，释放内存\n        bitmap.recycle()\n        return rotatedBitmap\n    }\n}\n```\n\n\n\n------\n\n# 播放多媒体\n\n### 播放音频\n\n- **MdeiaPlayer类常用方法**\n\n  ![](../img/img58.jpg)\n\n- **过程**\n\n  1. 首先在main文件夹下创建一个assets文件夹，在里面放入要播放的音频\n\n  2. 创建一个MediaPlayer对象\n\n  3. 初始化MdeiaPlayer对象\n\n  4. 利用MediaPlayer中的方法对音频文件状态进行判断并执行相应的操作\n\n     ```kotlin\n     class MainActivity : AppCompatActivity() {\n         private lateinit var binding:ActivityMainBinding\n         //创建对象\n         private val mediaPlayer=MediaPlayer()\n         override fun onCreate(savedInstanceState: Bundle?) {\n             super.onCreate(savedInstanceState)\n             enableEdgeToEdge()\n             binding=ActivityMainBinding.inflate(layoutInflater)\n             setContentView(binding.root)\n             ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n                 val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n                 v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n                 insets\n             }\n             //初始化\n             initMediaPlayer()\n             binding.play.setOnClickListener {\n                 if(!mediaPlayer.isPlaying){\n                     mediaPlayer.start()//开始播放\n                 }\n             }\n             binding.pause.setOnClickListener {\n                 if(mediaPlayer.isPlaying){\n                     mediaPlayer.pause()//暂停播放\n                 }\n             }\n             binding.stop.setOnClickListener {\n                 if(mediaPlayer.isPlaying){\n                     //停止播放\n                     mediaPlayer.reset()\n                     initMediaPlayer()\n                 }\n             }\n         }\n         private fun initMediaPlayer() {\n             //得到AssetManager实例，读取assets目录下任何资源\n             val assetManager=assets\n             //将音频文件句柄打开\n             val fd=assetManager.openFd(\"music.mp3\")\n             //为音频做好播放前准备\n             mediaPlayer.setDataSource(fd.fileDescriptor,fd.startOffset,fd.length)\n             mediaPlayer.prepare()\n         }\n         override fun onDestroy() {\n             super.onDestroy()\n             mediaPlayer.stop()\n             mediaPlayer.release()\n         }\n     }\n     ```\n\n     \n\n### 播放视频\n\n- **VideoView常用方法**\n\n  ![](../img/img57.jpg)\n\n- **过程**\n\n  1. 利用VideoView控件显示视频\n\n  2. 在res文件夹下新建raw文件夹放置视频文件\n\n  3. 利用VideoView中的方法对音频文件状态进行判断并执行相应的操作\n\n     ```kotlin\n     <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n         xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n         xmlns:tools=\"http://schemas.android.com/tools\"\n         android:id=\"@+id/main\"\n         android:layout_width=\"match_parent\"\n         android:layout_height=\"match_parent\"\n         tools:context=\".MainActivity\"\n         android:orientation=\"vertical\">\n         <LinearLayout\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"wrap_content\">\n             <Button\n                 android:id=\"@+id/play\"\n                 android:layout_width=\"0dp\"\n                 android:layout_height=\"wrap_content\"\n                 android:layout_weight=\"1\"\n                 android:text=\"Play\"/>\n             <Button\n                 android:id=\"@+id/pause\"\n                 android:layout_width=\"0dp\"\n                 android:layout_height=\"wrap_content\"\n                 android:layout_weight=\"1\"\n                 android:text=\"Pause\"/>\n             <Button\n                 android:id=\"@+id/replay\"\n                 android:layout_width=\"0dp\"\n                 android:layout_height=\"wrap_content\"\n                 android:layout_weight=\"1\"\n                 android:text=\"Replay\"/>\n         </LinearLayout>\n         <VideoView\n             android:id=\"@+id/videoView\"\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"wrap_content\"/>\n     </LinearLayout>\n     ```\n\n     ```kotlin\n     class MainActivity : AppCompatActivity() {\n         private lateinit var binding:ActivityMainBinding\n         override fun onCreate(savedInstanceState: Bundle?) {\n             super.onCreate(savedInstanceState)\n             enableEdgeToEdge()\n             binding=ActivityMainBinding.inflate(layoutInflater)\n             setContentView(binding.root)\n             ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n                 val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n                 v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n                 insets\n             }\n             val uri=Uri.parse(\"android.resource://$packageName/${R.raw.video}\")\n             binding.videoView.setVideoURI(uri)\n             binding.play.setOnClickListener {\n                 if(!binding.videoView.isPlaying){\n                     binding.videoView.start()\n                 }\n             }\n             binding.pause.setOnClickListener {\n                 if(binding.videoView.isPlaying){\n                     binding.videoView.pause()\n                 }\n             }\n             binding.replay.setOnClickListener {\n                 if(binding.videoView.isPlaying){\n                     binding.videoView.resume()\n                 }\n             }\n         }\n     \n         override fun onDestroy() {\n             super.onDestroy()\n             binding.videoView.suspend()\n         }\n     }\n     ```\n\n     \n\n------\n\n","slug":"手机多媒体-Kotlin","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcj0028s4s734o090zp","content":"<h1 id=\"通知-进阶\"><a href=\"#通知-进阶\" class=\"headerlink\" title=\"通知(进阶)\"></a>通知(进阶)</h1><ol>\n<li><p>创建通知渠道</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> manager=getSystemService(Context.NOTIFICATION_SERVICE) <span class=\"keyword\">as</span> NotificationManager</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O)&#123;</span><br><span class=\"line\">           <span class=\"comment\">/*参数介绍：</span></span><br><span class=\"line\"><span class=\"comment\">           1.渠道id</span></span><br><span class=\"line\"><span class=\"comment\">           2.渠道名称</span></span><br><span class=\"line\"><span class=\"comment\">           3.重要等级</span></span><br><span class=\"line\"><span class=\"comment\">           */</span></span><br><span class=\"line\">           <span class=\"keyword\">val</span> channel=NotificationChannel(<span class=\"string\">&quot;normal&quot;</span>,<span class=\"string\">&quot;Normal&quot;</span>,NotificationManager.IMPORTANCE_DEFAULT)</span><br><span class=\"line\">           <span class=\"keyword\">val</span> channel2=NotificationChannel(<span class=\"string\">&quot;important&quot;</span>,<span class=\"string\">&quot;Important&quot;</span>,NotificationManager.IMPORTANCE_HIGH)</span><br><span class=\"line\">           <span class=\"comment\">//创建通道</span></span><br><span class=\"line\">           manager.createNotificationChannel(channel2)</span><br><span class=\"line\">           manager.createNotificationChannel(channel)</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>创建Notification对象</p>\n</li>\n<li><p>通过连缀设置丰富的Notification对象</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> notification=NotificationCompat.Builder(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;important&quot;</span>)</span><br><span class=\"line\">                .setContentTitle(<span class=\"string\">&quot;Title&quot;</span>)</span><br><span class=\"line\">                .setContentText(<span class=\"string\">&quot;Text&quot;</span>)</span><br><span class=\"line\">                .setSmallIcon(R.drawable.small_icon)</span><br><span class=\"line\">                .setLargeIcon(BitmapFactory.decodeResource(resources,R.drawable.large_icon))</span><br><span class=\"line\">                .setContentIntent(pi)<span class=\"comment\">//点击界面跳转</span></span><br><span class=\"line\">                .setAutoCancel(<span class=\"literal\">true</span>)<span class=\"comment\">//点击后图标自动消失</span></span><br><span class=\"line\"><span class=\"comment\">//富文本</span></span><br><span class=\"line\">                .setStyle(NotificationCompat.BigTextStyle().bigText(<span class=\"string\">&quot;Learn how to build notifications, send and sync data, and use voice actions. Get the official Android IDE and developer tools to build apps for Android.&quot;</span>))    </span><br><span class=\"line\"><span class=\"comment\">//显示图片</span></span><br><span class=\"line\">.setStyle(NotificationCompat.BigPictureStyle().bigPicture(BitmapFactory.decodeResource(resources,R.drawable.big_image)))</span><br><span class=\"line\">                .build()</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>显示通知</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">manager.notify(<span class=\"number\">1</span>,notification)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>设置点击事件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,NotificationActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\"> <span class=\"keyword\">val</span> pi=PendingIntent.getActivity(<span class=\"keyword\">this</span>,<span class=\"number\">0</span>,intent,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">//在Notification对象中加入setContentIntent连缀</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><p>图标消失的两种方法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.在Notification对象后加setAutoCancel连缀</span></span><br><span class=\"line\"><span class=\"comment\">//2.在界面跳转后的那个界面输入以下代码：</span></span><br><span class=\"line\"><span class=\"comment\">//val manager=getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager</span></span><br><span class=\"line\"><span class=\"comment\">//manager.cancel(1)“1”是指notify方法中传入的那个id</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"调用摄像头和相册\"><a href=\"#调用摄像头和相册\" class=\"headerlink\" title=\"调用摄像头和相册\"></a>调用摄像头和相册</h1><h3 id=\"用摄像头拍照\"><a href=\"#用摄像头拍照\" class=\"headerlink\" title=\"用摄像头拍照\"></a>用摄像头拍照</h3><ol>\n<li><p>首先创建一个File对象，用于存储拍下的照片</p>\n</li>\n<li><p>接下来通过判断版本进行操作，如果版本低于Android7.0就调用Uri的**fromFile()**方法转换为Uri对象（这个标识着图片的本地真实路径），如果版本高于7.0就调用FileProvider的getUriForFile()方法，将File转换成一个封装过的Uri对象</p>\n</li>\n<li><p>构建Intent对象，启动相机程序(利用startActivityForResult进行启动)</p>\n</li>\n<li><p>重写onActivityResult方法</p>\n</li>\n<li><p>判断图片方向，如果需要旋转并进行旋转</p>\n</li>\n<li><p>由于用到ContentProvider，故需要注册</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;provider</span><br><span class=\"line\">           android:authorities=<span class=\"string\">&quot;com.example.cameraalbumtest.fileprovider&quot;</span></span><br><span class=\"line\">           android:name=<span class=\"string\">&quot;androidx.core.content.FileProvider&quot;</span></span><br><span class=\"line\">           android:exported=<span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">           android:grantUriPermissions=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">           &gt;</span><br><span class=\"line\">           &lt;meta-<span class=\"keyword\">data</span></span><br><span class=\"line\">               android:name=<span class=\"string\">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span><br><span class=\"line\">               android:resource=<span class=\"string\">&quot;@xml/file_paths&quot;</span>/&gt;</span><br><span class=\"line\">       &lt;/provider&gt;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>指定共享路径</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;paths xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">external</span>-path</span><br><span class=\"line\">        name=<span class=\"string\">&quot;my_images&quot;</span></span><br><span class=\"line\">        path=<span class=\"string\">&quot;/&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/paths&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"从相册中选择\"><a href=\"#从相册中选择\" class=\"headerlink\" title=\"从相册中选择\"></a>从相册中选择</h3><ol>\n<li>构建一个Intent对象表示打开文件选择器，并设置条件过滤</li>\n<li>结果返回到onActivityResult中，调用getBitmapFromUri方法将Uri转换成Bitmap对象</li>\n<li>将图片显示出来</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ViewBinding对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding:ActivityMainBinding</span><br><span class=\"line\">    <span class=\"comment\">// 从相册选择照片的请求码</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> fromAlbum=<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"comment\">// 拍照请求码</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> takePhoto=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储拍照后图片的Uri</span></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> imageUri:Uri</span><br><span class=\"line\">    <span class=\"comment\">// 用于存储拍照后图片的文件</span></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> outputImage:File</span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(<span class=\"string\">&quot;ObsoleteSdkInt&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        <span class=\"comment\">// 启用沉浸式状态栏</span></span><br><span class=\"line\">        enableEdgeToEdge()</span><br><span class=\"line\">        <span class=\"comment\">// 初始化ViewBinding</span></span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        <span class=\"comment\">// 适配系统窗口，防止内容被遮挡</span></span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) &#123; v, insets -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())</span><br><span class=\"line\">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)</span><br><span class=\"line\">            insets</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 拍照按钮点击事件</span></span><br><span class=\"line\">        binding.takephoto.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建File对象，用于存储照片</span></span><br><span class=\"line\">            outputImage=File(externalCacheDir,<span class=\"string\">&quot;output_image.jpg&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (outputImage.exists())&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果文件已存在则删除</span></span><br><span class=\"line\">                outputImage.delete()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 创建新文件</span></span><br><span class=\"line\">            outputImage.createNewFile()</span><br><span class=\"line\">            <span class=\"comment\">// 判断Android版本，获取图片Uri</span></span><br><span class=\"line\">            imageUri=<span class=\"keyword\">if</span>(Build.VERSION.SDK_INT&gt;=Build.VERSION_CODES.N)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 7.0及以上使用FileProvider</span></span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                *第一个参数是Context</span></span><br><span class=\"line\"><span class=\"comment\">                第二个参数是任意的唯一字符串</span></span><br><span class=\"line\"><span class=\"comment\">                第三个是刚创建的File对象</span></span><br><span class=\"line\"><span class=\"comment\">                **/</span></span><br><span class=\"line\">                FileProvider.getUriForFile(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;com.example.cameraalbumtest.fileprovider&quot;</span>,outputImage)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 7.0以下直接使用Uri.fromFile</span></span><br><span class=\"line\">                Uri.fromFile(outputImage)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 启动相机程序</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> intent=Intent(<span class=\"string\">&quot;android.media.action.IMAGE_CAPTURE&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 指定图片输出地址</span></span><br><span class=\"line\">            intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri)</span><br><span class=\"line\">            <span class=\"comment\">// 启动相机Activity</span></span><br><span class=\"line\">            startActivityForResult(intent,takePhoto)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 从相册选择按钮点击事件</span></span><br><span class=\"line\">        binding.fromAlbumBtn.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 打开文件选择器</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> intent=Intent(Intent.ACTION_OPEN_DOCUMENT)</span><br><span class=\"line\">            <span class=\"comment\">// 添加可打开的类别，确保文件可以被打开</span></span><br><span class=\"line\">            intent.addCategory(Intent.CATEGORY_OPENABLE)</span><br><span class=\"line\">            <span class=\"comment\">// 指定只显示图片类型的文件</span></span><br><span class=\"line\">            intent.type=<span class=\"string\">&quot;image/*&quot;</span></span><br><span class=\"line\">            <span class=\"comment\">// 启动文件选择器Activity</span></span><br><span class=\"line\">            startActivityForResult(intent,fromAlbum)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拍照Activity返回结果回调</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        requestCode: <span class=\"type\">Int</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        resultCode: <span class=\"type\">Int</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">data</span>: <span class=\"type\">Intent</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        caller: <span class=\"type\">ComponentCaller</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, <span class=\"keyword\">data</span>, caller)</span><br><span class=\"line\">        <span class=\"keyword\">when</span>(requestCode)&#123;</span><br><span class=\"line\">            takePhoto-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(resultCode== Activity.RESULT_OK)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 将拍摄照片显示出来</span></span><br><span class=\"line\">                    <span class=\"keyword\">val</span> bitmap=BitmapFactory.decodeStream(contentResolver.openInputStream(imageUri))</span><br><span class=\"line\">                    <span class=\"comment\">// 处理图片旋转问题后显示</span></span><br><span class=\"line\">                    binding.imageView.setImageBitmap(rotateIfRequired(bitmap))</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 处理从相册选择照片的返回结果</span></span><br><span class=\"line\">            fromAlbum-&gt;&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 检查结果码是否成功且数据不为空</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(resultCode==Activity.RESULT_OK&amp;&amp;<span class=\"keyword\">data</span>!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 获取选定图片的Uri</span></span><br><span class=\"line\">                    <span class=\"keyword\">data</span>.<span class=\"keyword\">data</span>?.let &#123; uri-&gt;</span><br><span class=\"line\">                        <span class=\"comment\">// 根据Uri获取Bitmap对象并显示</span></span><br><span class=\"line\">                        <span class=\"keyword\">val</span> bitmap=getBitmapFromUri(uri)</span><br><span class=\"line\">                        binding.imageView.setImageBitmap(bitmap)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据Uri获取图片的Bitmap对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getBitmapFromUri</span><span class=\"params\">(uri: <span class=\"type\">Any</span>)</span></span>=contentResolver.openFileDescriptor(uri <span class=\"keyword\">as</span> Uri,<span class=\"string\">&quot;r&quot;</span>)?.use &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用文件描述符解码Bitmap</span></span><br><span class=\"line\">        BitmapFactory.decodeFileDescriptor(it.fileDescriptor)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断图片是否需要旋转，并进行旋转</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">rotateIfRequired</span><span class=\"params\">(bitmap: <span class=\"type\">Bitmap</span>?)</span></span>: Bitmap? &#123;</span><br><span class=\"line\">         <span class=\"keyword\">val</span> exif=ExifInterface(outputImage.path)</span><br><span class=\"line\">        <span class=\"comment\">// 读取图片的旋转角度</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> orientation=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,ExifInterface.ORIENTATION_NORMAL)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">when</span>(orientation)&#123;</span><br><span class=\"line\">            ExifInterface.ORIENTATION_ROTATE_90-&gt;rotateBitmap(bitmap,<span class=\"number\">90</span>)</span><br><span class=\"line\">            ExifInterface.ORIENTATION_ROTATE_180-&gt;rotateBitmap(bitmap,<span class=\"number\">180</span>)</span><br><span class=\"line\">            ExifInterface.ORIENTATION_ROTATE_270-&gt;rotateBitmap(bitmap,<span class=\"number\">270</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>-&gt;bitmap</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 旋转Bitmap图片</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">rotateBitmap</span><span class=\"params\">(bitmap: <span class=\"type\">Bitmap</span>?, i: <span class=\"type\">Int</span>)</span></span>: Bitmap? &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> matrix=Matrix()</span><br><span class=\"line\">        <span class=\"comment\">// 设置旋转角度</span></span><br><span class=\"line\">        matrix.postRotate(degree.toFloat())</span><br><span class=\"line\">        <span class=\"comment\">// 创建旋转后的Bitmap</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> rotatedBitmap=Bitmap.createBitmap(bitmap!!,<span class=\"number\">0</span>,<span class=\"number\">0</span>,bitmap.width,bitmap.height,matrix,<span class=\"literal\">true</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 将不再需要的Bitmap对象回收，释放内存</span></span><br><span class=\"line\">        bitmap.recycle()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rotatedBitmap</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"播放多媒体\"><a href=\"#播放多媒体\" class=\"headerlink\" title=\"播放多媒体\"></a>播放多媒体</h1><h3 id=\"播放音频\"><a href=\"#播放音频\" class=\"headerlink\" title=\"播放音频\"></a>播放音频</h3><ul>\n<li><p><strong>MdeiaPlayer类常用方法</strong></p>\n<p><img src=\"/../img/img58.jpg\"></p>\n</li>\n<li><p><strong>过程</strong></p>\n<ol>\n<li><p>首先在main文件夹下创建一个assets文件夹，在里面放入要播放的音频</p>\n</li>\n<li><p>创建一个MediaPlayer对象</p>\n</li>\n<li><p>初始化MdeiaPlayer对象</p>\n</li>\n<li><p>利用MediaPlayer中的方法对音频文件状态进行判断并执行相应的操作</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding:ActivityMainBinding</span><br><span class=\"line\">    <span class=\"comment\">//创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mediaPlayer=MediaPlayer()</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        enableEdgeToEdge()</span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) &#123; v, insets -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())</span><br><span class=\"line\">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)</span><br><span class=\"line\">            insets</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//初始化</span></span><br><span class=\"line\">        initMediaPlayer()</span><br><span class=\"line\">        binding.play.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!mediaPlayer.isPlaying)&#123;</span><br><span class=\"line\">                mediaPlayer.start()<span class=\"comment\">//开始播放</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.pause.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mediaPlayer.isPlaying)&#123;</span><br><span class=\"line\">                mediaPlayer.pause()<span class=\"comment\">//暂停播放</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.stop.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mediaPlayer.isPlaying)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//停止播放</span></span><br><span class=\"line\">                mediaPlayer.reset()</span><br><span class=\"line\">                initMediaPlayer()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initMediaPlayer</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//得到AssetManager实例，读取assets目录下任何资源</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> assetManager=assets</span><br><span class=\"line\">        <span class=\"comment\">//将音频文件句柄打开</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> fd=assetManager.openFd(<span class=\"string\">&quot;music.mp3&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">//为音频做好播放前准备</span></span><br><span class=\"line\">        mediaPlayer.setDataSource(fd.fileDescriptor,fd.startOffset,fd.length)</span><br><span class=\"line\">        mediaPlayer.prepare()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        mediaPlayer.stop()</span><br><span class=\"line\">        mediaPlayer.release()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"播放视频\"><a href=\"#播放视频\" class=\"headerlink\" title=\"播放视频\"></a>播放视频</h3><ul>\n<li><p><strong>VideoView常用方法</strong></p>\n<p><img src=\"/../img/img57.jpg\"></p>\n</li>\n<li><p><strong>过程</strong></p>\n<ol>\n<li><p>利用VideoView控件显示视频</p>\n</li>\n<li><p>在res文件夹下新建raw文件夹放置视频文件</p>\n</li>\n<li><p>利用VideoView中的方法对音频文件状态进行判断并执行相应的操作</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/main&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    tools:context=<span class=\"string\">&quot;.MainActivity&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>&gt;</span><br><span class=\"line\">        &lt;Button</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/play&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_weight=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">            android:text=<span class=\"string\">&quot;Play&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;Button</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/pause&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_weight=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">            android:text=<span class=\"string\">&quot;Pause&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;Button</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/replay&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_weight=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">            android:text=<span class=\"string\">&quot;Replay&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\">    &lt;VideoView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/videoView&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding:ActivityMainBinding</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        enableEdgeToEdge()</span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) &#123; v, insets -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())</span><br><span class=\"line\">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)</span><br><span class=\"line\">            insets</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> uri=Uri.parse(<span class=\"string\">&quot;android.resource://<span class=\"variable\">$packageName</span>/<span class=\"subst\">$&#123;R.raw.video&#125;</span>&quot;</span>)</span><br><span class=\"line\">        binding.videoView.setVideoURI(uri)</span><br><span class=\"line\">        binding.play.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!binding.videoView.isPlaying)&#123;</span><br><span class=\"line\">                binding.videoView.start()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.pause.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(binding.videoView.isPlaying)&#123;</span><br><span class=\"line\">                binding.videoView.pause()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.replay.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(binding.videoView.isPlaying)&#123;</span><br><span class=\"line\">                binding.videoView.resume()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        binding.videoView.<span class=\"keyword\">suspend</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<hr>\n","excerpt":"通知(进阶)\n 1. 创建通知渠道\n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    \n    \n    val manager=getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n           if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){\n               /*参数介绍：\n             ","more":"<h1 id=\"通知-进阶\"><a href=\"#通知-进阶\" class=\"headerlink\" title=\"通知(进阶)\"></a>通知(进阶)</h1><ol>\n<li><p>创建通知渠道</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> manager=getSystemService(Context.NOTIFICATION_SERVICE) <span class=\"keyword\">as</span> NotificationManager</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O)&#123;</span><br><span class=\"line\">           <span class=\"comment\">/*参数介绍：</span></span><br><span class=\"line\"><span class=\"comment\">           1.渠道id</span></span><br><span class=\"line\"><span class=\"comment\">           2.渠道名称</span></span><br><span class=\"line\"><span class=\"comment\">           3.重要等级</span></span><br><span class=\"line\"><span class=\"comment\">           */</span></span><br><span class=\"line\">           <span class=\"keyword\">val</span> channel=NotificationChannel(<span class=\"string\">&quot;normal&quot;</span>,<span class=\"string\">&quot;Normal&quot;</span>,NotificationManager.IMPORTANCE_DEFAULT)</span><br><span class=\"line\">           <span class=\"keyword\">val</span> channel2=NotificationChannel(<span class=\"string\">&quot;important&quot;</span>,<span class=\"string\">&quot;Important&quot;</span>,NotificationManager.IMPORTANCE_HIGH)</span><br><span class=\"line\">           <span class=\"comment\">//创建通道</span></span><br><span class=\"line\">           manager.createNotificationChannel(channel2)</span><br><span class=\"line\">           manager.createNotificationChannel(channel)</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>创建Notification对象</p>\n</li>\n<li><p>通过连缀设置丰富的Notification对象</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> notification=NotificationCompat.Builder(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;important&quot;</span>)</span><br><span class=\"line\">                .setContentTitle(<span class=\"string\">&quot;Title&quot;</span>)</span><br><span class=\"line\">                .setContentText(<span class=\"string\">&quot;Text&quot;</span>)</span><br><span class=\"line\">                .setSmallIcon(R.drawable.small_icon)</span><br><span class=\"line\">                .setLargeIcon(BitmapFactory.decodeResource(resources,R.drawable.large_icon))</span><br><span class=\"line\">                .setContentIntent(pi)<span class=\"comment\">//点击界面跳转</span></span><br><span class=\"line\">                .setAutoCancel(<span class=\"literal\">true</span>)<span class=\"comment\">//点击后图标自动消失</span></span><br><span class=\"line\"><span class=\"comment\">//富文本</span></span><br><span class=\"line\">                .setStyle(NotificationCompat.BigTextStyle().bigText(<span class=\"string\">&quot;Learn how to build notifications, send and sync data, and use voice actions. Get the official Android IDE and developer tools to build apps for Android.&quot;</span>))    </span><br><span class=\"line\"><span class=\"comment\">//显示图片</span></span><br><span class=\"line\">.setStyle(NotificationCompat.BigPictureStyle().bigPicture(BitmapFactory.decodeResource(resources,R.drawable.big_image)))</span><br><span class=\"line\">                .build()</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>显示通知</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">manager.notify(<span class=\"number\">1</span>,notification)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>设置点击事件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,NotificationActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\"> <span class=\"keyword\">val</span> pi=PendingIntent.getActivity(<span class=\"keyword\">this</span>,<span class=\"number\">0</span>,intent,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">//在Notification对象中加入setContentIntent连缀</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><p>图标消失的两种方法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.在Notification对象后加setAutoCancel连缀</span></span><br><span class=\"line\"><span class=\"comment\">//2.在界面跳转后的那个界面输入以下代码：</span></span><br><span class=\"line\"><span class=\"comment\">//val manager=getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager</span></span><br><span class=\"line\"><span class=\"comment\">//manager.cancel(1)“1”是指notify方法中传入的那个id</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"调用摄像头和相册\"><a href=\"#调用摄像头和相册\" class=\"headerlink\" title=\"调用摄像头和相册\"></a>调用摄像头和相册</h1><h3 id=\"用摄像头拍照\"><a href=\"#用摄像头拍照\" class=\"headerlink\" title=\"用摄像头拍照\"></a>用摄像头拍照</h3><ol>\n<li><p>首先创建一个File对象，用于存储拍下的照片</p>\n</li>\n<li><p>接下来通过判断版本进行操作，如果版本低于Android7.0就调用Uri的**fromFile()**方法转换为Uri对象（这个标识着图片的本地真实路径），如果版本高于7.0就调用FileProvider的getUriForFile()方法，将File转换成一个封装过的Uri对象</p>\n</li>\n<li><p>构建Intent对象，启动相机程序(利用startActivityForResult进行启动)</p>\n</li>\n<li><p>重写onActivityResult方法</p>\n</li>\n<li><p>判断图片方向，如果需要旋转并进行旋转</p>\n</li>\n<li><p>由于用到ContentProvider，故需要注册</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;provider</span><br><span class=\"line\">           android:authorities=<span class=\"string\">&quot;com.example.cameraalbumtest.fileprovider&quot;</span></span><br><span class=\"line\">           android:name=<span class=\"string\">&quot;androidx.core.content.FileProvider&quot;</span></span><br><span class=\"line\">           android:exported=<span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">           android:grantUriPermissions=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">           &gt;</span><br><span class=\"line\">           &lt;meta-<span class=\"keyword\">data</span></span><br><span class=\"line\">               android:name=<span class=\"string\">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span><br><span class=\"line\">               android:resource=<span class=\"string\">&quot;@xml/file_paths&quot;</span>/&gt;</span><br><span class=\"line\">       &lt;/provider&gt;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>指定共享路径</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;paths xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">external</span>-path</span><br><span class=\"line\">        name=<span class=\"string\">&quot;my_images&quot;</span></span><br><span class=\"line\">        path=<span class=\"string\">&quot;/&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/paths&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"从相册中选择\"><a href=\"#从相册中选择\" class=\"headerlink\" title=\"从相册中选择\"></a>从相册中选择</h3><ol>\n<li>构建一个Intent对象表示打开文件选择器，并设置条件过滤</li>\n<li>结果返回到onActivityResult中，调用getBitmapFromUri方法将Uri转换成Bitmap对象</li>\n<li>将图片显示出来</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ViewBinding对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding:ActivityMainBinding</span><br><span class=\"line\">    <span class=\"comment\">// 从相册选择照片的请求码</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> fromAlbum=<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"comment\">// 拍照请求码</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> takePhoto=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储拍照后图片的Uri</span></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> imageUri:Uri</span><br><span class=\"line\">    <span class=\"comment\">// 用于存储拍照后图片的文件</span></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> outputImage:File</span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(<span class=\"string\">&quot;ObsoleteSdkInt&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        <span class=\"comment\">// 启用沉浸式状态栏</span></span><br><span class=\"line\">        enableEdgeToEdge()</span><br><span class=\"line\">        <span class=\"comment\">// 初始化ViewBinding</span></span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        <span class=\"comment\">// 适配系统窗口，防止内容被遮挡</span></span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) &#123; v, insets -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())</span><br><span class=\"line\">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)</span><br><span class=\"line\">            insets</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 拍照按钮点击事件</span></span><br><span class=\"line\">        binding.takephoto.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建File对象，用于存储照片</span></span><br><span class=\"line\">            outputImage=File(externalCacheDir,<span class=\"string\">&quot;output_image.jpg&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (outputImage.exists())&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果文件已存在则删除</span></span><br><span class=\"line\">                outputImage.delete()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 创建新文件</span></span><br><span class=\"line\">            outputImage.createNewFile()</span><br><span class=\"line\">            <span class=\"comment\">// 判断Android版本，获取图片Uri</span></span><br><span class=\"line\">            imageUri=<span class=\"keyword\">if</span>(Build.VERSION.SDK_INT&gt;=Build.VERSION_CODES.N)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 7.0及以上使用FileProvider</span></span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                *第一个参数是Context</span></span><br><span class=\"line\"><span class=\"comment\">                第二个参数是任意的唯一字符串</span></span><br><span class=\"line\"><span class=\"comment\">                第三个是刚创建的File对象</span></span><br><span class=\"line\"><span class=\"comment\">                **/</span></span><br><span class=\"line\">                FileProvider.getUriForFile(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;com.example.cameraalbumtest.fileprovider&quot;</span>,outputImage)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 7.0以下直接使用Uri.fromFile</span></span><br><span class=\"line\">                Uri.fromFile(outputImage)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 启动相机程序</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> intent=Intent(<span class=\"string\">&quot;android.media.action.IMAGE_CAPTURE&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 指定图片输出地址</span></span><br><span class=\"line\">            intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri)</span><br><span class=\"line\">            <span class=\"comment\">// 启动相机Activity</span></span><br><span class=\"line\">            startActivityForResult(intent,takePhoto)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 从相册选择按钮点击事件</span></span><br><span class=\"line\">        binding.fromAlbumBtn.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 打开文件选择器</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> intent=Intent(Intent.ACTION_OPEN_DOCUMENT)</span><br><span class=\"line\">            <span class=\"comment\">// 添加可打开的类别，确保文件可以被打开</span></span><br><span class=\"line\">            intent.addCategory(Intent.CATEGORY_OPENABLE)</span><br><span class=\"line\">            <span class=\"comment\">// 指定只显示图片类型的文件</span></span><br><span class=\"line\">            intent.type=<span class=\"string\">&quot;image/*&quot;</span></span><br><span class=\"line\">            <span class=\"comment\">// 启动文件选择器Activity</span></span><br><span class=\"line\">            startActivityForResult(intent,fromAlbum)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拍照Activity返回结果回调</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        requestCode: <span class=\"type\">Int</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        resultCode: <span class=\"type\">Int</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">data</span>: <span class=\"type\">Intent</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        caller: <span class=\"type\">ComponentCaller</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, <span class=\"keyword\">data</span>, caller)</span><br><span class=\"line\">        <span class=\"keyword\">when</span>(requestCode)&#123;</span><br><span class=\"line\">            takePhoto-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(resultCode== Activity.RESULT_OK)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 将拍摄照片显示出来</span></span><br><span class=\"line\">                    <span class=\"keyword\">val</span> bitmap=BitmapFactory.decodeStream(contentResolver.openInputStream(imageUri))</span><br><span class=\"line\">                    <span class=\"comment\">// 处理图片旋转问题后显示</span></span><br><span class=\"line\">                    binding.imageView.setImageBitmap(rotateIfRequired(bitmap))</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 处理从相册选择照片的返回结果</span></span><br><span class=\"line\">            fromAlbum-&gt;&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 检查结果码是否成功且数据不为空</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(resultCode==Activity.RESULT_OK&amp;&amp;<span class=\"keyword\">data</span>!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 获取选定图片的Uri</span></span><br><span class=\"line\">                    <span class=\"keyword\">data</span>.<span class=\"keyword\">data</span>?.let &#123; uri-&gt;</span><br><span class=\"line\">                        <span class=\"comment\">// 根据Uri获取Bitmap对象并显示</span></span><br><span class=\"line\">                        <span class=\"keyword\">val</span> bitmap=getBitmapFromUri(uri)</span><br><span class=\"line\">                        binding.imageView.setImageBitmap(bitmap)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据Uri获取图片的Bitmap对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getBitmapFromUri</span><span class=\"params\">(uri: <span class=\"type\">Any</span>)</span></span>=contentResolver.openFileDescriptor(uri <span class=\"keyword\">as</span> Uri,<span class=\"string\">&quot;r&quot;</span>)?.use &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用文件描述符解码Bitmap</span></span><br><span class=\"line\">        BitmapFactory.decodeFileDescriptor(it.fileDescriptor)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断图片是否需要旋转，并进行旋转</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">rotateIfRequired</span><span class=\"params\">(bitmap: <span class=\"type\">Bitmap</span>?)</span></span>: Bitmap? &#123;</span><br><span class=\"line\">         <span class=\"keyword\">val</span> exif=ExifInterface(outputImage.path)</span><br><span class=\"line\">        <span class=\"comment\">// 读取图片的旋转角度</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> orientation=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,ExifInterface.ORIENTATION_NORMAL)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">when</span>(orientation)&#123;</span><br><span class=\"line\">            ExifInterface.ORIENTATION_ROTATE_90-&gt;rotateBitmap(bitmap,<span class=\"number\">90</span>)</span><br><span class=\"line\">            ExifInterface.ORIENTATION_ROTATE_180-&gt;rotateBitmap(bitmap,<span class=\"number\">180</span>)</span><br><span class=\"line\">            ExifInterface.ORIENTATION_ROTATE_270-&gt;rotateBitmap(bitmap,<span class=\"number\">270</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>-&gt;bitmap</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 旋转Bitmap图片</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">rotateBitmap</span><span class=\"params\">(bitmap: <span class=\"type\">Bitmap</span>?, i: <span class=\"type\">Int</span>)</span></span>: Bitmap? &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> matrix=Matrix()</span><br><span class=\"line\">        <span class=\"comment\">// 设置旋转角度</span></span><br><span class=\"line\">        matrix.postRotate(degree.toFloat())</span><br><span class=\"line\">        <span class=\"comment\">// 创建旋转后的Bitmap</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> rotatedBitmap=Bitmap.createBitmap(bitmap!!,<span class=\"number\">0</span>,<span class=\"number\">0</span>,bitmap.width,bitmap.height,matrix,<span class=\"literal\">true</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 将不再需要的Bitmap对象回收，释放内存</span></span><br><span class=\"line\">        bitmap.recycle()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rotatedBitmap</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"播放多媒体\"><a href=\"#播放多媒体\" class=\"headerlink\" title=\"播放多媒体\"></a>播放多媒体</h1><h3 id=\"播放音频\"><a href=\"#播放音频\" class=\"headerlink\" title=\"播放音频\"></a>播放音频</h3><ul>\n<li><p><strong>MdeiaPlayer类常用方法</strong></p>\n<p><img src=\"/../img/img58.jpg\"></p>\n</li>\n<li><p><strong>过程</strong></p>\n<ol>\n<li><p>首先在main文件夹下创建一个assets文件夹，在里面放入要播放的音频</p>\n</li>\n<li><p>创建一个MediaPlayer对象</p>\n</li>\n<li><p>初始化MdeiaPlayer对象</p>\n</li>\n<li><p>利用MediaPlayer中的方法对音频文件状态进行判断并执行相应的操作</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding:ActivityMainBinding</span><br><span class=\"line\">    <span class=\"comment\">//创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mediaPlayer=MediaPlayer()</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        enableEdgeToEdge()</span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) &#123; v, insets -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())</span><br><span class=\"line\">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)</span><br><span class=\"line\">            insets</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//初始化</span></span><br><span class=\"line\">        initMediaPlayer()</span><br><span class=\"line\">        binding.play.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!mediaPlayer.isPlaying)&#123;</span><br><span class=\"line\">                mediaPlayer.start()<span class=\"comment\">//开始播放</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.pause.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mediaPlayer.isPlaying)&#123;</span><br><span class=\"line\">                mediaPlayer.pause()<span class=\"comment\">//暂停播放</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.stop.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mediaPlayer.isPlaying)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//停止播放</span></span><br><span class=\"line\">                mediaPlayer.reset()</span><br><span class=\"line\">                initMediaPlayer()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initMediaPlayer</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//得到AssetManager实例，读取assets目录下任何资源</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> assetManager=assets</span><br><span class=\"line\">        <span class=\"comment\">//将音频文件句柄打开</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> fd=assetManager.openFd(<span class=\"string\">&quot;music.mp3&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">//为音频做好播放前准备</span></span><br><span class=\"line\">        mediaPlayer.setDataSource(fd.fileDescriptor,fd.startOffset,fd.length)</span><br><span class=\"line\">        mediaPlayer.prepare()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        mediaPlayer.stop()</span><br><span class=\"line\">        mediaPlayer.release()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"播放视频\"><a href=\"#播放视频\" class=\"headerlink\" title=\"播放视频\"></a>播放视频</h3><ul>\n<li><p><strong>VideoView常用方法</strong></p>\n<p><img src=\"/../img/img57.jpg\"></p>\n</li>\n<li><p><strong>过程</strong></p>\n<ol>\n<li><p>利用VideoView控件显示视频</p>\n</li>\n<li><p>在res文件夹下新建raw文件夹放置视频文件</p>\n</li>\n<li><p>利用VideoView中的方法对音频文件状态进行判断并执行相应的操作</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/main&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    tools:context=<span class=\"string\">&quot;.MainActivity&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>&gt;</span><br><span class=\"line\">        &lt;Button</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/play&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_weight=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">            android:text=<span class=\"string\">&quot;Play&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;Button</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/pause&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_weight=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">            android:text=<span class=\"string\">&quot;Pause&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;Button</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/replay&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_weight=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">            android:text=<span class=\"string\">&quot;Replay&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\">    &lt;VideoView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/videoView&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding:ActivityMainBinding</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        enableEdgeToEdge()</span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) &#123; v, insets -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())</span><br><span class=\"line\">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)</span><br><span class=\"line\">            insets</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> uri=Uri.parse(<span class=\"string\">&quot;android.resource://<span class=\"variable\">$packageName</span>/<span class=\"subst\">$&#123;R.raw.video&#125;</span>&quot;</span>)</span><br><span class=\"line\">        binding.videoView.setVideoURI(uri)</span><br><span class=\"line\">        binding.play.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!binding.videoView.isPlaying)&#123;</span><br><span class=\"line\">                binding.videoView.start()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.pause.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(binding.videoView.isPlaying)&#123;</span><br><span class=\"line\">                binding.videoView.pause()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.replay.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(binding.videoView.isPlaying)&#123;</span><br><span class=\"line\">                binding.videoView.resume()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        binding.videoView.<span class=\"keyword\">suspend</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<hr>\n"},{"title":"手机多媒体(Java)","date":"2025-03-18T08:14:22.000Z","_content":"\n# 通知(进阶)\n\n1.创建通知通道并请求通知权限\n\n2.用getSystemService()获取一个NotificationManager对通知进行管理\n\n3.创建Notification对象并进行一些基础设置\n\n4.用notify()显示通知\n\n```java\n\n/**\n * 演示通知功能的主活动类\n */\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // 加载布局文件\n        setContentView(R.layout.activity_main);\n\n        // 创建通知通道（仅在 Android 8.0 及以上版本需要）\n        createNotificationChannel();\n\n        // 获取按钮控件并绑定点击事件\n        Button sendNotice = findViewById(R.id.send_notice);\n        sendNotice.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n        // 判断是否是发送通知按钮被点击\n        if (v.getId() == R.id.send_notice) {\n            try {\n                // 创建一个Intent，用于在通知被点击时启动NotificationActivity\n                Intent intent = new Intent(this, NotificationActivity.class);\n                // 创建一个PendingIntent，作为通知的点击动作\n                PendingIntent pi = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);\n\n                // 获取通知管理器实例\n                NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n\n                // 构建通知对象\n                Notification notification = new NotificationCompat.Builder(this, \"default_channel_id\")\n                        // 设置通知标题\n                        .setContentTitle(\"This is content title\")\n                        // 设置通知内容\n                        .setContentText(\"Learn how to build notifications, send and sync data, and use voice actions. Get the official Android IDE and developer tools to build apps for Android.\")\n                        // 设置通知时间\n                        .setWhen(System.currentTimeMillis())\n                        // 设置小图标\n                        .setSmallIcon(R.mipmap.ic_launcher)\n                        // 设置大图标\n                        .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))\n                        // 设置通知点击的Intent\n                        .setContentIntent(pi)\n                        // 设置自动取消通知\n                        .setAutoCancel(true)\n                        // 设置默认通知声音、震动、灯光\n                        .setDefaults(NotificationCompat.DEFAULT_ALL)\n                        // 使用大文本样式\n                        .setStyle(new NotificationCompat.BigTextStyle().bigText(\"Learn how to build notifications, send and\" +\n                                \"sync data, and use voice actions,Get the official Android IDE and developer tools to build apps for Android.\"))\n                        // 设置通知优先级\n                        .setPriority(NotificationCompat.PRIORITY_MAX)\n                        // 构建通知对象\n                        .build();\n\n                // 处理 Android 13 及以上版本的 POST_NOTIFICATIONS 权限\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n                    if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED) {\n                        // 如果没有权限，请求权限\n                        ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.POST_NOTIFICATIONS}, 1);\n                    } else {\n                        // 如果有权限，发送通知\n                        manager.notify(1, notification);\n                    }\n                } else {\n                    // Android 13 以下版本直接发送通知\n                    manager.notify(1, notification);\n                }\n            } catch (Exception e) {\n                // 捕获并处理异常\n                e.printStackTrace();\n                Toast.makeText(this, \"发送通知失败： \" + e.getMessage(), Toast.LENGTH_LONG).show();\n            }\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        // 获取通知管理器实例\n        NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n\n        try {\n            // 重新构建通知对象（与 onClick 中相同）\n            Notification notification = new NotificationCompat.Builder(this, \"default_channel_id\")\n                    .setContentTitle(\"This is content title\")\n                    .setContentText(\"Learn how to build notifications, send and sync data, and use voice actions. Get the official Android IDE and developer tools to build apps for Android.\")\n                    .setWhen(System.currentTimeMillis())\n                    .setSmallIcon(R.mipmap.ic_launcher)\n                    .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))\n                    .setAutoCancel(true)\n                    .setDefaults(NotificationCompat.DEFAULT_ALL)\n                    .setStyle(new NotificationCompat.BigTextStyle().bigText(\"Learn how to build notifications, send and\" +\n                            \"sync data, and use voice actions,Get the official Android IDE and developer tools to build apps for Android.\"))\n                    .setPriority(NotificationCompat.PRIORITY_MAX)\n                    .build();\n\n            // 根据请求码处理权限请求结果\n            switch (requestCode) {\n                case 1:\n                    // 处理 POST_NOTIFICATIONS 权限请求结果\n                    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                        // 权限授予，发送通知\n                        manager.notify(1, notification);\n                    } else {\n                        // 权限被拒绝，显示提示信息\n                        Toast.makeText(this, \"You denied the permission\", Toast.LENGTH_SHORT).show();\n                    }\n                    break;\n                default:\n                    // 处理其他请求码\n                    break;\n            }\n        } catch (Exception e) {\n            // 捕获并处理异常\n            e.printStackTrace();\n            Toast.makeText(this, \"发送通知失败： \" + e.getMessage(), Toast.LENGTH_LONG).show();\n        }\n    }\n\n    /**\n     * 创建通知通道（仅在 Android 8.0 及以上版本需要）\n     * 通知通道用于分组和管理不同的通知\n     */\n    private void createNotificationChannel() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            // 创建一个 NotificationChannel 对象\n            NotificationChannel channel = new NotificationChannel(\n                    \"default_channel_id\", // 通道 ID\n                    \"Default Channel\",    // 通道名称\n                    NotificationManager.IMPORTANCE_DEFAULT // 重要性级别\n            );\n            // 获取通知管理器实例\n            NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n            // 创建通知通道\n            manager.createNotificationChannel(channel);\n        }\n    }\n}\n```\n\n```java\npublic class NotificationActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.notification_layout);\n        NotificationManager manager=(NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n        manager.cancel(1);\n    }\n}\n```\n\n```java\n<uses-permission android:name=\"android.permission.POST_NOTIFICATIONS\" />\n    <uses-permission android:name=\"android.permission.VIBRATE\"/>\n```\n\n\n\n------\n\n# 摄像头和相册\n\n### 调用摄像头拍照\n\n1.设置Button和ImageView控件\n\n2.申请相机权限,创建File对象存放在SD卡的应用关联缓存目录下\n\n3.把File转换为Uri,被内容提供器FileProvider通过getUriForFile()接收\n\n4.构建intent启动相机\n\n5.重写onActivityResult处理结果\n\n6.在AndroidManifest.xml注册内容提供器,声明权限\n\n7.在xml目录下创建file_paths.xml共享路径\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    public static final int TAKE_PHOTO=1;//声明一个请求码，用于识别返回的结果\n    public static final int CHOOSE_PHOTO=2;\n    private ImageView picture;\n    private Uri imageUri;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button takePhoto=(Button) findViewById(R.id.take_photo);\n        picture =(ImageView) findViewById(R.id.picture);\n        takePhoto.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                //创建File对象，用于存储拍照后的图片\n                File outputImage=new File(getExternalCacheDir(),\"output_image.jpg\");\n                try //判断图片是否存在，存在则删除重建，不存在则直接创建\n                {\n                    if(outputImage.exists()){\n                        outputImage.delete();\n                    }\n                    outputImage.createNewFile();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if(Build.VERSION.SDK_INT>=24)\n                    //判断安卓的版本是否高于7.0，高于则调用高于的方法，低于则调用低于的方法\n                    //把文件转化成Uri对象\n                    /*之所以这样是因为android7.0之后直接使用本地真实路径是不安全的，会抛出异常。\n                    FileProvider是一种特殊的内容提供器，可以对数据进行保护*/\n                {\n                    imageUri= FileProvider.getUriForFile(MainActivity.this,\"com.example.cameraalbumtest.fileprovider\",outputImage);\n                    /*\n                    第一个参数：content对象\n                    第二个参数：任意唯一的字符串\n                    第三个参数：文件对象\n                    */\n                }else{\n                    imageUri=Uri.fromFile(outputImage);\n                }\n                //启动相机程序\n                Intent intent=new Intent(\"android.media.action.IMAGE_CAPTURE\");\n                intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri);\n                startActivityForResult(intent,TAKE_PHOTO);\n            }\n        });\n    }\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n       switch(requestCode){\n           case TAKE_PHOTO:\n            if (resultCode == RESULT_OK) {\n                try {\n                    Bitmap bitmap = BitmapFactory.decodeStream(getContentResolver().openInputStream(imageUri));\n                    picture.setImageBitmap(bitmap);\n                } catch (FileNotFoundException e) {\n                    e.printStackTrace();\n                }\n            }\n            break;\n        \n           default:\n               break;\n        }\n    }\n\n        }\n}\n```\n\n```java\n       <provider\n            android:name=\"androidx.core.content.FileProvider\"\n            android:authorities=\"com.example.cameraalbumtest.fileprovider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/file_paths\"/>\n        </provider>\n```\n\n```java\n   <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n```java\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <external-path\n        name=\"my_images\"\n        path=\"\" />\n</paths>\n```\n\n\n\n### 从相册中选择图片\n\n1.申请权限\n\n2.创建并调用openAlum()方法\n\n3.重写onActivityResult处理结果\n\n4.针对不同图片格式进行不同操作\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    public static final int TAKE_PHOTO=1;//声明一个请求码，用于识别返回的结果\n    public static final int CHOOSE_PHOTO=2;\n    private ImageView picture;\n    private Uri imageUri;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button takePhoto=(Button) findViewById(R.id.take_photo);\n        Button choosePhoto=(Button) findViewById(R.id.choose_from_album);\n        picture =(ImageView) findViewById(R.id.picture);\n        takePhoto.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                //创建File对象，用于存储拍照后的图片\n                File outputImage=new File(getExternalCacheDir(),\"output_image.jpg\");\n                try //判断图片是否存在，存在则删除重建，不存在则直接创建\n                {\n                    if(outputImage.exists()){\n                        outputImage.delete();\n                    }\n                    outputImage.createNewFile();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if(Build.VERSION.SDK_INT>=24)\n                    //判断安卓的版本是否高于7.0，高于则调用高于的方法，低于则调用低于的方法\n                    //把文件转化成Uri对象\n                    /*之所以这样是因为android7.0之后直接使用本地真实路径是不安全的，会抛出异常。\n                    FileProvider是一种特殊的内容提供器，可以对数据进行保护*/\n                {\n                    imageUri= FileProvider.getUriForFile(MainActivity.this,\"com.example.cameraalbumtest.fileprovider\",outputImage);\n                    /*\n                    第一个参数：content对象\n                    第二个参数：任意唯一的字符串\n                    第三个参数：文件对象\n                    */\n                }else{\n                    imageUri=Uri.fromFile(outputImage);\n                }\n                //启动相机程序\n                Intent intent=new Intent(\"android.media.action.IMAGE_CAPTURE\");\n                intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri);\n                startActivityForResult(intent,TAKE_PHOTO);\n            }\n        });\n        choosePhoto.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if(ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED){\n                    ActivityCompat.requestPermissions(MainActivity.this,new String[]{ Manifest.permission.WRITE_EXTERNAL_STORAGE},1);\n                }\n                else{\n                    openAlbum();\n                }\n            }\n        });\n    }\nprivate void openAlbum(){\n        Intent intent=new Intent(\"android.intent.action.GET_CONTENT\");\n        intent.setType(\"image/*\");\n        startActivityForResult(intent,CHOOSE_PHOTO);\n}\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n       if(requestCode==1){\n           if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){\n               openAlbum();\n           }else{\n               Toast.makeText(this, \"You denide the permission\", Toast.LENGTH_SHORT).show();\n           }\n       }\n    }\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n       switch(requestCode){\n           case TAKE_PHOTO:\n            if (resultCode == RESULT_OK) {\n                try {\n                    Bitmap bitmap = BitmapFactory.decodeStream(getContentResolver().openInputStream(imageUri));\n                    picture.setImageBitmap(bitmap);\n                } catch (FileNotFoundException e) {\n                    e.printStackTrace();\n                }\n            }\n            break;\n           case CHOOSE_PHOTO:\n               if(resultCode==RESULT_OK){\n                   if( Build.VERSION.SDK_INT>=19){\n                       //4.4以上系统使用这个方法处理照片\n                       handleImageOnKitKat(data);\n\n                   }\n                   else{\n                       //4.4以下使用\n                       handleImageBeforeKitKat(data);\n                   }\n               }\n               break;\n           default:\n               break;\n        }\n    }\n\n    private void handleImageBeforeKitKat(Intent data) {\n        Uri uri=data.getData();\n        String imagePath=getImagePath(uri,null);\n        displayImage(imagePath);//根据路径显示图片\n    }\n\n    private void handleImageOnKitKat(Intent data) {\n        String imagePath=null;\n        Uri uri=data.getData();\n        if (DocumentsContract.isDocumentUri(this,uri)) {\n            //如果是document类型的Uri，则通过document id处理\n            String docId = DocumentsContract.getDocumentId(uri);\n            if (\"com.android.providers.media.documents\".equals(uri.getAuthority())) {\n                String id = docId.split(\":\")[1];//解析出数字格式的id\n                String selection = MediaStore.Images.Media._ID + \"=\" + id;\n                imagePath = getImagePath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, selection);\n            } else if (\"com.android.providers.downloads.documents\".equals(uri.getAuthority())) {\n                Uri contentUri = ContentUris.withAppendedId(Uri.parse(\"content://downloads/public_downloads\"), Long.valueOf(docId));\n                imagePath = getImagePath(contentUri, null);\n            }\n        }else if (\"content\".equalsIgnoreCase(uri.getScheme())) {\n                //如果是Content类型的uri则使用普通方法处理\n                imagePath=getImagePath(uri,null);\n\n            } else if (\"file\".equalsIgnoreCase(uri.getScheme())) {\n                imagePath=uri.getPath();\n\n            }\n            displayImage(imagePath);//根据路径显示图片\n        }\n        @SuppressLint(\"Range\")\n        private String getImagePath(Uri uri, String selection){\n        String path=null;\n        //通过Uri和selection来获取真实的图片路径\n            Cursor cursor=getContentResolver().query(uri,null,selection,null,null);\n            if(cursor!=null){\n                if(cursor.moveToFirst()){\n                    path=cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));\n                }\n                cursor.close();\n            }\n            return path;\n        }\n        private void displayImage(String imagePath){\n        if(imagePath!=null){\n            Bitmap bitmap=BitmapFactory.decodeFile(imagePath);\n            picture.setImageBitmap(bitmap);\n        }else{\n            Toast.makeText(this, \"failed to get image\", Toast.LENGTH_SHORT).show();\n        }\n        }\n\n}\n```\n\n\n\n------\n\n# 播放多媒体文件\n\n### 播放音频\n\nMediaPlayer类的方法：\n\n![](../img/img46.jpg)\n\n1.创建一个MediaPlayer类\n\n2.动态申请权限\n\n3.调用initMediaPlayer方法对其进行初始化\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    >\n    <Button\n        android:id=\"@+id/play\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Play\"\n         />\n    <Button\n        android:id=\"@+id/pause\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Pause\"\n         />\n\n    <Button\n        android:id=\"@+id/stop\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Stop\" />\n\n</LinearLayout>\n```\n\n\n\n```java\npublic class MainActivity extends AppCompatActivity {\nprivate MediaPlayer mediaPlayer=new MediaPlayer();\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button play=(Button) findViewById(R.id.play);\n        Button pause=(Button) findViewById(R.id.pause);\n        Button stop=(Button) findViewById(R.id.stop);\n        play.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if(!mediaPlayer.isPlaying()){\n                    mediaPlayer.start();\n                }\n            }\n        });\n        pause.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if(mediaPlayer.isPlaying()){\n                    mediaPlayer.pause();\n                }\n            }\n        });\n        stop.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if(mediaPlayer.isPlaying()){\n                    mediaPlayer.reset();//停止播放\n                    initMediaPlayer();\n                }\n            }\n        });\n        if(ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED){\n            ActivityCompat.requestPermissions(MainActivity.this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},1);\n        }else{\n            initMediaPlayer();\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if(requestCode==1){\n            if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){\n                initMediaPlayer();\n            }else{\n                Toast.makeText(this, \"拒绝权限将无法使用程序\", Toast.LENGTH_SHORT).show();\n                finish();\n            }\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        if(mediaPlayer!=null){\n            mediaPlayer.stop();\n            mediaPlayer.release();\n        }\n    }\n    private void initMediaPlayer(){\n        try{\n            File file=new File(Environment.getExternalStorageDirectory(),\"music.mp3\");\n            mediaPlayer.setDataSource(file.getPath());//指定音频文件的路径\n            mediaPlayer.prepare();//让mediaPlayer进入到准备状态\n        }\n        catch (Exception e){\n            e.printStackTrace();\n        }\n\n    }\n}\n```\n\n```java\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n```\n\n\n\n### 播放视频\n\nVideoView类的方法：\n\n![](../img/img47.jpg)\n\n1.创建VideoView实例\n\n2.动态申请权限\n\n3.利用initVideoView方法初始化\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    >\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n        <Button\n            android:id=\"@+id/play\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"Play\"/>\n       <Button\n           android:id=\"@+id/pause\"\n           android:layout_width=\"0dp\"\n           android:layout_height=\"wrap_content\"\n           android:layout_weight=\"1\"\n           android:text=\"Pause\"/>\n        <Button\n            android:id=\"@+id/replay\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"Replay\"/>\n    </LinearLayout>\n    <VideoView\n        android:id=\"@+id/video_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"/>\n</LinearLayout>\n```\n\n```java\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\nprivate VideoView videoView;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        videoView=(VideoView) findViewById(R.id.video_view);\n        Button play=(Button) findViewById(R.id.play);\n        Button pause=(Button) findViewById(R.id.pause);\n        Button replay=(Button) findViewById(R.id.replay);\n        play.setOnClickListener(this);\n        pause.setOnClickListener(this);\n        replay.setOnClickListener(this);\n        if(ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED){\n            ActivityCompat.requestPermissions(MainActivity.this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},1);\n        }else{\n            initVideoPath();//初始化MediaPlayer\n        }\n    }\n\n    private void initVideoPath() {\n        File file=new File(Environment.getExternalStorageDirectory(),\"movie.mp4\");\n        videoView.setVideoPath(file.getPath());\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if(requestCode==1){\n            if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){\n                initVideoPath();\n            }\n            else{\n                Toast.makeText(this, \"拒绝权限将无法使用该程序\", Toast.LENGTH_SHORT).show();\n                finish();\n            }\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        if(videoView!=null){\n            videoView.suspend();\n        }\n    }\n\n    @Override\n    public void onClick(View view) {\n       if(view.getId()==R.id.play){\n           if(!videoView.isPlaying()){\n               videoView.start();\n           }\n       } else if (view.getId()==R.id.pause) {\n           if(videoView.isPlaying()){\n               videoView.pause();\n           }\n\n       } else if (videoView.isPlaying()) {\n           //停止播放视频，并释放资源\n           videoView.resume();\n       }\n\n    }\n}\n```\n\n```java\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n```\n\n------\n\n","source":"_posts/手机多媒体.md","raw":"---\ntitle: 手机多媒体(Java)\ndate: 2025-03-18 16:14:22\ncategories:\n- Android(Java版)\ntags:\n---\n\n# 通知(进阶)\n\n1.创建通知通道并请求通知权限\n\n2.用getSystemService()获取一个NotificationManager对通知进行管理\n\n3.创建Notification对象并进行一些基础设置\n\n4.用notify()显示通知\n\n```java\n\n/**\n * 演示通知功能的主活动类\n */\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // 加载布局文件\n        setContentView(R.layout.activity_main);\n\n        // 创建通知通道（仅在 Android 8.0 及以上版本需要）\n        createNotificationChannel();\n\n        // 获取按钮控件并绑定点击事件\n        Button sendNotice = findViewById(R.id.send_notice);\n        sendNotice.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n        // 判断是否是发送通知按钮被点击\n        if (v.getId() == R.id.send_notice) {\n            try {\n                // 创建一个Intent，用于在通知被点击时启动NotificationActivity\n                Intent intent = new Intent(this, NotificationActivity.class);\n                // 创建一个PendingIntent，作为通知的点击动作\n                PendingIntent pi = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);\n\n                // 获取通知管理器实例\n                NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n\n                // 构建通知对象\n                Notification notification = new NotificationCompat.Builder(this, \"default_channel_id\")\n                        // 设置通知标题\n                        .setContentTitle(\"This is content title\")\n                        // 设置通知内容\n                        .setContentText(\"Learn how to build notifications, send and sync data, and use voice actions. Get the official Android IDE and developer tools to build apps for Android.\")\n                        // 设置通知时间\n                        .setWhen(System.currentTimeMillis())\n                        // 设置小图标\n                        .setSmallIcon(R.mipmap.ic_launcher)\n                        // 设置大图标\n                        .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))\n                        // 设置通知点击的Intent\n                        .setContentIntent(pi)\n                        // 设置自动取消通知\n                        .setAutoCancel(true)\n                        // 设置默认通知声音、震动、灯光\n                        .setDefaults(NotificationCompat.DEFAULT_ALL)\n                        // 使用大文本样式\n                        .setStyle(new NotificationCompat.BigTextStyle().bigText(\"Learn how to build notifications, send and\" +\n                                \"sync data, and use voice actions,Get the official Android IDE and developer tools to build apps for Android.\"))\n                        // 设置通知优先级\n                        .setPriority(NotificationCompat.PRIORITY_MAX)\n                        // 构建通知对象\n                        .build();\n\n                // 处理 Android 13 及以上版本的 POST_NOTIFICATIONS 权限\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n                    if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED) {\n                        // 如果没有权限，请求权限\n                        ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.POST_NOTIFICATIONS}, 1);\n                    } else {\n                        // 如果有权限，发送通知\n                        manager.notify(1, notification);\n                    }\n                } else {\n                    // Android 13 以下版本直接发送通知\n                    manager.notify(1, notification);\n                }\n            } catch (Exception e) {\n                // 捕获并处理异常\n                e.printStackTrace();\n                Toast.makeText(this, \"发送通知失败： \" + e.getMessage(), Toast.LENGTH_LONG).show();\n            }\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        // 获取通知管理器实例\n        NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n\n        try {\n            // 重新构建通知对象（与 onClick 中相同）\n            Notification notification = new NotificationCompat.Builder(this, \"default_channel_id\")\n                    .setContentTitle(\"This is content title\")\n                    .setContentText(\"Learn how to build notifications, send and sync data, and use voice actions. Get the official Android IDE and developer tools to build apps for Android.\")\n                    .setWhen(System.currentTimeMillis())\n                    .setSmallIcon(R.mipmap.ic_launcher)\n                    .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))\n                    .setAutoCancel(true)\n                    .setDefaults(NotificationCompat.DEFAULT_ALL)\n                    .setStyle(new NotificationCompat.BigTextStyle().bigText(\"Learn how to build notifications, send and\" +\n                            \"sync data, and use voice actions,Get the official Android IDE and developer tools to build apps for Android.\"))\n                    .setPriority(NotificationCompat.PRIORITY_MAX)\n                    .build();\n\n            // 根据请求码处理权限请求结果\n            switch (requestCode) {\n                case 1:\n                    // 处理 POST_NOTIFICATIONS 权限请求结果\n                    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                        // 权限授予，发送通知\n                        manager.notify(1, notification);\n                    } else {\n                        // 权限被拒绝，显示提示信息\n                        Toast.makeText(this, \"You denied the permission\", Toast.LENGTH_SHORT).show();\n                    }\n                    break;\n                default:\n                    // 处理其他请求码\n                    break;\n            }\n        } catch (Exception e) {\n            // 捕获并处理异常\n            e.printStackTrace();\n            Toast.makeText(this, \"发送通知失败： \" + e.getMessage(), Toast.LENGTH_LONG).show();\n        }\n    }\n\n    /**\n     * 创建通知通道（仅在 Android 8.0 及以上版本需要）\n     * 通知通道用于分组和管理不同的通知\n     */\n    private void createNotificationChannel() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            // 创建一个 NotificationChannel 对象\n            NotificationChannel channel = new NotificationChannel(\n                    \"default_channel_id\", // 通道 ID\n                    \"Default Channel\",    // 通道名称\n                    NotificationManager.IMPORTANCE_DEFAULT // 重要性级别\n            );\n            // 获取通知管理器实例\n            NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n            // 创建通知通道\n            manager.createNotificationChannel(channel);\n        }\n    }\n}\n```\n\n```java\npublic class NotificationActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.notification_layout);\n        NotificationManager manager=(NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n        manager.cancel(1);\n    }\n}\n```\n\n```java\n<uses-permission android:name=\"android.permission.POST_NOTIFICATIONS\" />\n    <uses-permission android:name=\"android.permission.VIBRATE\"/>\n```\n\n\n\n------\n\n# 摄像头和相册\n\n### 调用摄像头拍照\n\n1.设置Button和ImageView控件\n\n2.申请相机权限,创建File对象存放在SD卡的应用关联缓存目录下\n\n3.把File转换为Uri,被内容提供器FileProvider通过getUriForFile()接收\n\n4.构建intent启动相机\n\n5.重写onActivityResult处理结果\n\n6.在AndroidManifest.xml注册内容提供器,声明权限\n\n7.在xml目录下创建file_paths.xml共享路径\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    public static final int TAKE_PHOTO=1;//声明一个请求码，用于识别返回的结果\n    public static final int CHOOSE_PHOTO=2;\n    private ImageView picture;\n    private Uri imageUri;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button takePhoto=(Button) findViewById(R.id.take_photo);\n        picture =(ImageView) findViewById(R.id.picture);\n        takePhoto.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                //创建File对象，用于存储拍照后的图片\n                File outputImage=new File(getExternalCacheDir(),\"output_image.jpg\");\n                try //判断图片是否存在，存在则删除重建，不存在则直接创建\n                {\n                    if(outputImage.exists()){\n                        outputImage.delete();\n                    }\n                    outputImage.createNewFile();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if(Build.VERSION.SDK_INT>=24)\n                    //判断安卓的版本是否高于7.0，高于则调用高于的方法，低于则调用低于的方法\n                    //把文件转化成Uri对象\n                    /*之所以这样是因为android7.0之后直接使用本地真实路径是不安全的，会抛出异常。\n                    FileProvider是一种特殊的内容提供器，可以对数据进行保护*/\n                {\n                    imageUri= FileProvider.getUriForFile(MainActivity.this,\"com.example.cameraalbumtest.fileprovider\",outputImage);\n                    /*\n                    第一个参数：content对象\n                    第二个参数：任意唯一的字符串\n                    第三个参数：文件对象\n                    */\n                }else{\n                    imageUri=Uri.fromFile(outputImage);\n                }\n                //启动相机程序\n                Intent intent=new Intent(\"android.media.action.IMAGE_CAPTURE\");\n                intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri);\n                startActivityForResult(intent,TAKE_PHOTO);\n            }\n        });\n    }\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n       switch(requestCode){\n           case TAKE_PHOTO:\n            if (resultCode == RESULT_OK) {\n                try {\n                    Bitmap bitmap = BitmapFactory.decodeStream(getContentResolver().openInputStream(imageUri));\n                    picture.setImageBitmap(bitmap);\n                } catch (FileNotFoundException e) {\n                    e.printStackTrace();\n                }\n            }\n            break;\n        \n           default:\n               break;\n        }\n    }\n\n        }\n}\n```\n\n```java\n       <provider\n            android:name=\"androidx.core.content.FileProvider\"\n            android:authorities=\"com.example.cameraalbumtest.fileprovider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/file_paths\"/>\n        </provider>\n```\n\n```java\n   <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n```java\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <external-path\n        name=\"my_images\"\n        path=\"\" />\n</paths>\n```\n\n\n\n### 从相册中选择图片\n\n1.申请权限\n\n2.创建并调用openAlum()方法\n\n3.重写onActivityResult处理结果\n\n4.针对不同图片格式进行不同操作\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    public static final int TAKE_PHOTO=1;//声明一个请求码，用于识别返回的结果\n    public static final int CHOOSE_PHOTO=2;\n    private ImageView picture;\n    private Uri imageUri;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button takePhoto=(Button) findViewById(R.id.take_photo);\n        Button choosePhoto=(Button) findViewById(R.id.choose_from_album);\n        picture =(ImageView) findViewById(R.id.picture);\n        takePhoto.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                //创建File对象，用于存储拍照后的图片\n                File outputImage=new File(getExternalCacheDir(),\"output_image.jpg\");\n                try //判断图片是否存在，存在则删除重建，不存在则直接创建\n                {\n                    if(outputImage.exists()){\n                        outputImage.delete();\n                    }\n                    outputImage.createNewFile();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if(Build.VERSION.SDK_INT>=24)\n                    //判断安卓的版本是否高于7.0，高于则调用高于的方法，低于则调用低于的方法\n                    //把文件转化成Uri对象\n                    /*之所以这样是因为android7.0之后直接使用本地真实路径是不安全的，会抛出异常。\n                    FileProvider是一种特殊的内容提供器，可以对数据进行保护*/\n                {\n                    imageUri= FileProvider.getUriForFile(MainActivity.this,\"com.example.cameraalbumtest.fileprovider\",outputImage);\n                    /*\n                    第一个参数：content对象\n                    第二个参数：任意唯一的字符串\n                    第三个参数：文件对象\n                    */\n                }else{\n                    imageUri=Uri.fromFile(outputImage);\n                }\n                //启动相机程序\n                Intent intent=new Intent(\"android.media.action.IMAGE_CAPTURE\");\n                intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri);\n                startActivityForResult(intent,TAKE_PHOTO);\n            }\n        });\n        choosePhoto.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if(ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED){\n                    ActivityCompat.requestPermissions(MainActivity.this,new String[]{ Manifest.permission.WRITE_EXTERNAL_STORAGE},1);\n                }\n                else{\n                    openAlbum();\n                }\n            }\n        });\n    }\nprivate void openAlbum(){\n        Intent intent=new Intent(\"android.intent.action.GET_CONTENT\");\n        intent.setType(\"image/*\");\n        startActivityForResult(intent,CHOOSE_PHOTO);\n}\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n       if(requestCode==1){\n           if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){\n               openAlbum();\n           }else{\n               Toast.makeText(this, \"You denide the permission\", Toast.LENGTH_SHORT).show();\n           }\n       }\n    }\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n       switch(requestCode){\n           case TAKE_PHOTO:\n            if (resultCode == RESULT_OK) {\n                try {\n                    Bitmap bitmap = BitmapFactory.decodeStream(getContentResolver().openInputStream(imageUri));\n                    picture.setImageBitmap(bitmap);\n                } catch (FileNotFoundException e) {\n                    e.printStackTrace();\n                }\n            }\n            break;\n           case CHOOSE_PHOTO:\n               if(resultCode==RESULT_OK){\n                   if( Build.VERSION.SDK_INT>=19){\n                       //4.4以上系统使用这个方法处理照片\n                       handleImageOnKitKat(data);\n\n                   }\n                   else{\n                       //4.4以下使用\n                       handleImageBeforeKitKat(data);\n                   }\n               }\n               break;\n           default:\n               break;\n        }\n    }\n\n    private void handleImageBeforeKitKat(Intent data) {\n        Uri uri=data.getData();\n        String imagePath=getImagePath(uri,null);\n        displayImage(imagePath);//根据路径显示图片\n    }\n\n    private void handleImageOnKitKat(Intent data) {\n        String imagePath=null;\n        Uri uri=data.getData();\n        if (DocumentsContract.isDocumentUri(this,uri)) {\n            //如果是document类型的Uri，则通过document id处理\n            String docId = DocumentsContract.getDocumentId(uri);\n            if (\"com.android.providers.media.documents\".equals(uri.getAuthority())) {\n                String id = docId.split(\":\")[1];//解析出数字格式的id\n                String selection = MediaStore.Images.Media._ID + \"=\" + id;\n                imagePath = getImagePath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, selection);\n            } else if (\"com.android.providers.downloads.documents\".equals(uri.getAuthority())) {\n                Uri contentUri = ContentUris.withAppendedId(Uri.parse(\"content://downloads/public_downloads\"), Long.valueOf(docId));\n                imagePath = getImagePath(contentUri, null);\n            }\n        }else if (\"content\".equalsIgnoreCase(uri.getScheme())) {\n                //如果是Content类型的uri则使用普通方法处理\n                imagePath=getImagePath(uri,null);\n\n            } else if (\"file\".equalsIgnoreCase(uri.getScheme())) {\n                imagePath=uri.getPath();\n\n            }\n            displayImage(imagePath);//根据路径显示图片\n        }\n        @SuppressLint(\"Range\")\n        private String getImagePath(Uri uri, String selection){\n        String path=null;\n        //通过Uri和selection来获取真实的图片路径\n            Cursor cursor=getContentResolver().query(uri,null,selection,null,null);\n            if(cursor!=null){\n                if(cursor.moveToFirst()){\n                    path=cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));\n                }\n                cursor.close();\n            }\n            return path;\n        }\n        private void displayImage(String imagePath){\n        if(imagePath!=null){\n            Bitmap bitmap=BitmapFactory.decodeFile(imagePath);\n            picture.setImageBitmap(bitmap);\n        }else{\n            Toast.makeText(this, \"failed to get image\", Toast.LENGTH_SHORT).show();\n        }\n        }\n\n}\n```\n\n\n\n------\n\n# 播放多媒体文件\n\n### 播放音频\n\nMediaPlayer类的方法：\n\n![](../img/img46.jpg)\n\n1.创建一个MediaPlayer类\n\n2.动态申请权限\n\n3.调用initMediaPlayer方法对其进行初始化\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    >\n    <Button\n        android:id=\"@+id/play\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Play\"\n         />\n    <Button\n        android:id=\"@+id/pause\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Pause\"\n         />\n\n    <Button\n        android:id=\"@+id/stop\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Stop\" />\n\n</LinearLayout>\n```\n\n\n\n```java\npublic class MainActivity extends AppCompatActivity {\nprivate MediaPlayer mediaPlayer=new MediaPlayer();\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button play=(Button) findViewById(R.id.play);\n        Button pause=(Button) findViewById(R.id.pause);\n        Button stop=(Button) findViewById(R.id.stop);\n        play.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if(!mediaPlayer.isPlaying()){\n                    mediaPlayer.start();\n                }\n            }\n        });\n        pause.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if(mediaPlayer.isPlaying()){\n                    mediaPlayer.pause();\n                }\n            }\n        });\n        stop.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if(mediaPlayer.isPlaying()){\n                    mediaPlayer.reset();//停止播放\n                    initMediaPlayer();\n                }\n            }\n        });\n        if(ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED){\n            ActivityCompat.requestPermissions(MainActivity.this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},1);\n        }else{\n            initMediaPlayer();\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if(requestCode==1){\n            if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){\n                initMediaPlayer();\n            }else{\n                Toast.makeText(this, \"拒绝权限将无法使用程序\", Toast.LENGTH_SHORT).show();\n                finish();\n            }\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        if(mediaPlayer!=null){\n            mediaPlayer.stop();\n            mediaPlayer.release();\n        }\n    }\n    private void initMediaPlayer(){\n        try{\n            File file=new File(Environment.getExternalStorageDirectory(),\"music.mp3\");\n            mediaPlayer.setDataSource(file.getPath());//指定音频文件的路径\n            mediaPlayer.prepare();//让mediaPlayer进入到准备状态\n        }\n        catch (Exception e){\n            e.printStackTrace();\n        }\n\n    }\n}\n```\n\n```java\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n```\n\n\n\n### 播放视频\n\nVideoView类的方法：\n\n![](../img/img47.jpg)\n\n1.创建VideoView实例\n\n2.动态申请权限\n\n3.利用initVideoView方法初始化\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    >\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n        <Button\n            android:id=\"@+id/play\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"Play\"/>\n       <Button\n           android:id=\"@+id/pause\"\n           android:layout_width=\"0dp\"\n           android:layout_height=\"wrap_content\"\n           android:layout_weight=\"1\"\n           android:text=\"Pause\"/>\n        <Button\n            android:id=\"@+id/replay\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"Replay\"/>\n    </LinearLayout>\n    <VideoView\n        android:id=\"@+id/video_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"/>\n</LinearLayout>\n```\n\n```java\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\nprivate VideoView videoView;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        videoView=(VideoView) findViewById(R.id.video_view);\n        Button play=(Button) findViewById(R.id.play);\n        Button pause=(Button) findViewById(R.id.pause);\n        Button replay=(Button) findViewById(R.id.replay);\n        play.setOnClickListener(this);\n        pause.setOnClickListener(this);\n        replay.setOnClickListener(this);\n        if(ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED){\n            ActivityCompat.requestPermissions(MainActivity.this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},1);\n        }else{\n            initVideoPath();//初始化MediaPlayer\n        }\n    }\n\n    private void initVideoPath() {\n        File file=new File(Environment.getExternalStorageDirectory(),\"movie.mp4\");\n        videoView.setVideoPath(file.getPath());\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if(requestCode==1){\n            if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){\n                initVideoPath();\n            }\n            else{\n                Toast.makeText(this, \"拒绝权限将无法使用该程序\", Toast.LENGTH_SHORT).show();\n                finish();\n            }\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        if(videoView!=null){\n            videoView.suspend();\n        }\n    }\n\n    @Override\n    public void onClick(View view) {\n       if(view.getId()==R.id.play){\n           if(!videoView.isPlaying()){\n               videoView.start();\n           }\n       } else if (view.getId()==R.id.pause) {\n           if(videoView.isPlaying()){\n               videoView.pause();\n           }\n\n       } else if (videoView.isPlaying()) {\n           //停止播放视频，并释放资源\n           videoView.resume();\n       }\n\n    }\n}\n```\n\n```java\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n```\n\n------\n\n","slug":"手机多媒体","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gck002as4s7962i95mi","content":"<h1 id=\"通知-进阶\"><a href=\"#通知-进阶\" class=\"headerlink\" title=\"通知(进阶)\"></a>通知(进阶)</h1><p>1.创建通知通道并请求通知权限</p>\n<p>2.用getSystemService()获取一个NotificationManager对通知进行管理</p>\n<p>3.创建Notification对象并进行一些基础设置</p>\n<p>4.用notify()显示通知</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示通知功能的主活动类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">View</span>.OnClickListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"comment\">// 加载布局文件</span></span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建通知通道（仅在 Android 8.0 及以上版本需要）</span></span><br><span class=\"line\">        createNotificationChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取按钮控件并绑定点击事件</span></span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">sendNotice</span> <span class=\"operator\">=</span> findViewById(R.id.send_notice);</span><br><span class=\"line\">        sendNotice.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View v)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否是发送通知按钮被点击</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v.getId() == R.id.send_notice) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 创建一个Intent，用于在通知被点击时启动NotificationActivity</span></span><br><span class=\"line\">                <span class=\"type\">Intent</span> <span class=\"variable\">intent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>, NotificationActivity.class);</span><br><span class=\"line\">                <span class=\"comment\">// 创建一个PendingIntent，作为通知的点击动作</span></span><br><span class=\"line\">                <span class=\"type\">PendingIntent</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> PendingIntent.getActivity(<span class=\"built_in\">this</span>, <span class=\"number\">0</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 获取通知管理器实例</span></span><br><span class=\"line\">                <span class=\"type\">NotificationManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 构建通知对象</span></span><br><span class=\"line\">                <span class=\"type\">Notification</span> <span class=\"variable\">notification</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.Builder(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;default_channel_id&quot;</span>)</span><br><span class=\"line\">                        <span class=\"comment\">// 设置通知标题</span></span><br><span class=\"line\">                        .setContentTitle(<span class=\"string\">&quot;This is content title&quot;</span>)</span><br><span class=\"line\">                        <span class=\"comment\">// 设置通知内容</span></span><br><span class=\"line\">                        .setContentText(<span class=\"string\">&quot;Learn how to build notifications, send and sync data, and use voice actions. Get the official Android IDE and developer tools to build apps for Android.&quot;</span>)</span><br><span class=\"line\">                        <span class=\"comment\">// 设置通知时间</span></span><br><span class=\"line\">                        .setWhen(System.currentTimeMillis())</span><br><span class=\"line\">                        <span class=\"comment\">// 设置小图标</span></span><br><span class=\"line\">                        .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class=\"line\">                        <span class=\"comment\">// 设置大图标</span></span><br><span class=\"line\">                        .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))</span><br><span class=\"line\">                        <span class=\"comment\">// 设置通知点击的Intent</span></span><br><span class=\"line\">                        .setContentIntent(pi)</span><br><span class=\"line\">                        <span class=\"comment\">// 设置自动取消通知</span></span><br><span class=\"line\">                        .setAutoCancel(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                        <span class=\"comment\">// 设置默认通知声音、震动、灯光</span></span><br><span class=\"line\">                        .setDefaults(NotificationCompat.DEFAULT_ALL)</span><br><span class=\"line\">                        <span class=\"comment\">// 使用大文本样式</span></span><br><span class=\"line\">                        .setStyle(<span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.BigTextStyle().bigText(<span class=\"string\">&quot;Learn how to build notifications, send and&quot;</span> +</span><br><span class=\"line\">                                <span class=\"string\">&quot;sync data, and use voice actions,Get the official Android IDE and developer tools to build apps for Android.&quot;</span>))</span><br><span class=\"line\">                        <span class=\"comment\">// 设置通知优先级</span></span><br><span class=\"line\">                        .setPriority(NotificationCompat.PRIORITY_MAX)</span><br><span class=\"line\">                        <span class=\"comment\">// 构建通知对象</span></span><br><span class=\"line\">                        .build();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 处理 Android 13 及以上版本的 POST_NOTIFICATIONS 权限</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class=\"built_in\">this</span>, Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 如果没有权限，请求权限</span></span><br><span class=\"line\">                        ActivityCompat.requestPermissions(MainActivity.<span class=\"built_in\">this</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;Manifest.permission.POST_NOTIFICATIONS&#125;, <span class=\"number\">1</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 如果有权限，发送通知</span></span><br><span class=\"line\">                        manager.notify(<span class=\"number\">1</span>, notification);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Android 13 以下版本直接发送通知</span></span><br><span class=\"line\">                    manager.notify(<span class=\"number\">1</span>, notification);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 捕获并处理异常</span></span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;发送通知失败： &quot;</span> + e.getMessage(), Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"meta\">@NonNull</span> String[] permissions, <span class=\"meta\">@NonNull</span> <span class=\"type\">int</span>[] grantResults)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">        <span class=\"comment\">// 获取通知管理器实例</span></span><br><span class=\"line\">        <span class=\"type\">NotificationManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 重新构建通知对象（与 onClick 中相同）</span></span><br><span class=\"line\">            <span class=\"type\">Notification</span> <span class=\"variable\">notification</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.Builder(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;default_channel_id&quot;</span>)</span><br><span class=\"line\">                    .setContentTitle(<span class=\"string\">&quot;This is content title&quot;</span>)</span><br><span class=\"line\">                    .setContentText(<span class=\"string\">&quot;Learn how to build notifications, send and sync data, and use voice actions. Get the official Android IDE and developer tools to build apps for Android.&quot;</span>)</span><br><span class=\"line\">                    .setWhen(System.currentTimeMillis())</span><br><span class=\"line\">                    .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class=\"line\">                    .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))</span><br><span class=\"line\">                    .setAutoCancel(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                    .setDefaults(NotificationCompat.DEFAULT_ALL)</span><br><span class=\"line\">                    .setStyle(<span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.BigTextStyle().bigText(<span class=\"string\">&quot;Learn how to build notifications, send and&quot;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&quot;sync data, and use voice actions,Get the official Android IDE and developer tools to build apps for Android.&quot;</span>))</span><br><span class=\"line\">                    .setPriority(NotificationCompat.PRIORITY_MAX)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 根据请求码处理权限请求结果</span></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (requestCode) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// 处理 POST_NOTIFICATIONS 权限请求结果</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (grantResults.length &gt; <span class=\"number\">0</span> &amp;&amp; grantResults[<span class=\"number\">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 权限授予，发送通知</span></span><br><span class=\"line\">                        manager.notify(<span class=\"number\">1</span>, notification);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 权限被拒绝，显示提示信息</span></span><br><span class=\"line\">                        Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You denied the permission&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// 处理其他请求码</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 捕获并处理异常</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;发送通知失败： &quot;</span> + e.getMessage(), Toast.LENGTH_LONG).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建通知通道（仅在 Android 8.0 及以上版本需要）</span></span><br><span class=\"line\"><span class=\"comment\">     * 通知通道用于分组和管理不同的通知</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createNotificationChannel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建一个 NotificationChannel 对象</span></span><br><span class=\"line\">            <span class=\"type\">NotificationChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationChannel</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;default_channel_id&quot;</span>, <span class=\"comment\">// 通道 ID</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;Default Channel&quot;</span>,    <span class=\"comment\">// 通道名称</span></span><br><span class=\"line\">                    NotificationManager.IMPORTANCE_DEFAULT <span class=\"comment\">// 重要性级别</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"comment\">// 获取通知管理器实例</span></span><br><span class=\"line\">            <span class=\"type\">NotificationManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class=\"line\">            <span class=\"comment\">// 创建通知通道</span></span><br><span class=\"line\">            manager.createNotificationChannel(channel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NotificationActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.notification_layout);</span><br><span class=\"line\">        NotificationManager manager=(NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class=\"line\">        manager.cancel(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.POST_NOTIFICATIONS&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.VIBRATE&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"摄像头和相册\"><a href=\"#摄像头和相册\" class=\"headerlink\" title=\"摄像头和相册\"></a>摄像头和相册</h1><h3 id=\"调用摄像头拍照\"><a href=\"#调用摄像头拍照\" class=\"headerlink\" title=\"调用摄像头拍照\"></a>调用摄像头拍照</h3><p>1.设置Button和ImageView控件</p>\n<p>2.申请相机权限,创建File对象存放在SD卡的应用关联缓存目录下</p>\n<p>3.把File转换为Uri,被内容提供器FileProvider通过getUriForFile()接收</p>\n<p>4.构建intent启动相机</p>\n<p>5.重写onActivityResult处理结果</p>\n<p>6.在AndroidManifest.xml注册内容提供器,声明权限</p>\n<p>7.在xml目录下创建file_paths.xml共享路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TAKE_PHOTO=<span class=\"number\">1</span>;<span class=\"comment\">//声明一个请求码，用于识别返回的结果</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> CHOOSE_PHOTO=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImageView picture;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Uri imageUri;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Button takePhoto=(Button) findViewById(R.id.take_photo);</span><br><span class=\"line\">        picture =(ImageView) findViewById(R.id.picture);</span><br><span class=\"line\">        takePhoto.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//创建File对象，用于存储拍照后的图片</span></span><br><span class=\"line\">                File outputImage=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(getExternalCacheDir(),<span class=\"string\">&quot;output_image.jpg&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> <span class=\"comment\">//判断图片是否存在，存在则删除重建，不存在则直接创建</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(outputImage.exists())&#123;</span><br><span class=\"line\">                        outputImage.delete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    outputImage.createNewFile();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Build.VERSION.SDK_INT&gt;=<span class=\"number\">24</span>)</span><br><span class=\"line\">                    <span class=\"comment\">//判断安卓的版本是否高于7.0，高于则调用高于的方法，低于则调用低于的方法</span></span><br><span class=\"line\">                    <span class=\"comment\">//把文件转化成Uri对象</span></span><br><span class=\"line\">                    <span class=\"comment\">/*之所以这样是因为android7.0之后直接使用本地真实路径是不安全的，会抛出异常。</span></span><br><span class=\"line\"><span class=\"comment\">                    FileProvider是一种特殊的内容提供器，可以对数据进行保护*/</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    imageUri= FileProvider.getUriForFile(MainActivity.<span class=\"built_in\">this</span>,<span class=\"string\">&quot;com.example.cameraalbumtest.fileprovider&quot;</span>,outputImage);</span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                    第一个参数：content对象</span></span><br><span class=\"line\"><span class=\"comment\">                    第二个参数：任意唯一的字符串</span></span><br><span class=\"line\"><span class=\"comment\">                    第三个参数：文件对象</span></span><br><span class=\"line\"><span class=\"comment\">                    */</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    imageUri=Uri.fromFile(outputImage);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//启动相机程序</span></span><br><span class=\"line\">                Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"string\">&quot;android.media.action.IMAGE_CAPTURE&quot;</span>);</span><br><span class=\"line\">                intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri);</span><br><span class=\"line\">                startActivityForResult(intent,TAKE_PHOTO);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"type\">int</span> resultCode, <span class=\"meta\">@Nullable</span> Intent data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">       <span class=\"keyword\">switch</span>(requestCode)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> TAKE_PHOTO:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resultCode == RESULT_OK) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">Bitmap</span> <span class=\"variable\">bitmap</span> <span class=\"operator\">=</span> BitmapFactory.decodeStream(getContentResolver().openInputStream(imageUri));</span><br><span class=\"line\">                    picture.setImageBitmap(bitmap);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">           <span class=\"keyword\">default</span>:</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;provider</span><br><span class=\"line\">     android:name=<span class=\"string\">&quot;androidx.core.content.FileProvider&quot;</span></span><br><span class=\"line\">     android:authorities=<span class=\"string\">&quot;com.example.cameraalbumtest.fileprovider&quot;</span></span><br><span class=\"line\">     android:exported=<span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">     android:grantUriPermissions=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">     &lt;meta-data</span><br><span class=\"line\">         android:name=<span class=\"string\">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span><br><span class=\"line\">         android:resource=<span class=\"string\">&quot;@xml/file_paths&quot;</span>/&gt;</span><br><span class=\"line\"> &lt;/provider&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;paths xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class=\"line\">    &lt;external-path</span><br><span class=\"line\">        name=<span class=\"string\">&quot;my_images&quot;</span></span><br><span class=\"line\">        path=<span class=\"string\">&quot;&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/paths&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"从相册中选择图片\"><a href=\"#从相册中选择图片\" class=\"headerlink\" title=\"从相册中选择图片\"></a>从相册中选择图片</h3><p>1.申请权限</p>\n<p>2.创建并调用openAlum()方法</p>\n<p>3.重写onActivityResult处理结果</p>\n<p>4.针对不同图片格式进行不同操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TAKE_PHOTO=<span class=\"number\">1</span>;<span class=\"comment\">//声明一个请求码，用于识别返回的结果</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> CHOOSE_PHOTO=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImageView picture;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Uri imageUri;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Button takePhoto=(Button) findViewById(R.id.take_photo);</span><br><span class=\"line\">        Button choosePhoto=(Button) findViewById(R.id.choose_from_album);</span><br><span class=\"line\">        picture =(ImageView) findViewById(R.id.picture);</span><br><span class=\"line\">        takePhoto.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//创建File对象，用于存储拍照后的图片</span></span><br><span class=\"line\">                File outputImage=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(getExternalCacheDir(),<span class=\"string\">&quot;output_image.jpg&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> <span class=\"comment\">//判断图片是否存在，存在则删除重建，不存在则直接创建</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(outputImage.exists())&#123;</span><br><span class=\"line\">                        outputImage.delete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    outputImage.createNewFile();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Build.VERSION.SDK_INT&gt;=<span class=\"number\">24</span>)</span><br><span class=\"line\">                    <span class=\"comment\">//判断安卓的版本是否高于7.0，高于则调用高于的方法，低于则调用低于的方法</span></span><br><span class=\"line\">                    <span class=\"comment\">//把文件转化成Uri对象</span></span><br><span class=\"line\">                    <span class=\"comment\">/*之所以这样是因为android7.0之后直接使用本地真实路径是不安全的，会抛出异常。</span></span><br><span class=\"line\"><span class=\"comment\">                    FileProvider是一种特殊的内容提供器，可以对数据进行保护*/</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    imageUri= FileProvider.getUriForFile(MainActivity.<span class=\"built_in\">this</span>,<span class=\"string\">&quot;com.example.cameraalbumtest.fileprovider&quot;</span>,outputImage);</span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                    第一个参数：content对象</span></span><br><span class=\"line\"><span class=\"comment\">                    第二个参数：任意唯一的字符串</span></span><br><span class=\"line\"><span class=\"comment\">                    第三个参数：文件对象</span></span><br><span class=\"line\"><span class=\"comment\">                    */</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    imageUri=Uri.fromFile(outputImage);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//启动相机程序</span></span><br><span class=\"line\">                Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"string\">&quot;android.media.action.IMAGE_CAPTURE&quot;</span>);</span><br><span class=\"line\">                intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri);</span><br><span class=\"line\">                startActivityForResult(intent,TAKE_PHOTO);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        choosePhoto.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class=\"built_in\">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                    ActivityCompat.requestPermissions(MainActivity.<span class=\"built_in\">this</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123; Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    openAlbum();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">openAlbum</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"string\">&quot;android.intent.action.GET_CONTENT&quot;</span>);</span><br><span class=\"line\">        intent.setType(<span class=\"string\">&quot;image/*&quot;</span>);</span><br><span class=\"line\">        startActivityForResult(intent,CHOOSE_PHOTO);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"meta\">@NonNull</span> String[] permissions, <span class=\"meta\">@NonNull</span> <span class=\"type\">int</span>[] grantResults)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(requestCode==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(grantResults.length&gt;<span class=\"number\">0</span>&amp;&amp;grantResults[<span class=\"number\">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">               openAlbum();</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You denide the permission&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"type\">int</span> resultCode, <span class=\"meta\">@Nullable</span> Intent data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">       <span class=\"keyword\">switch</span>(requestCode)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> TAKE_PHOTO:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resultCode == RESULT_OK) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">Bitmap</span> <span class=\"variable\">bitmap</span> <span class=\"operator\">=</span> BitmapFactory.decodeStream(getContentResolver().openInputStream(imageUri));</span><br><span class=\"line\">                    picture.setImageBitmap(bitmap);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> CHOOSE_PHOTO:</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(resultCode==RESULT_OK)&#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span>( Build.VERSION.SDK_INT&gt;=<span class=\"number\">19</span>)&#123;</span><br><span class=\"line\">                       <span class=\"comment\">//4.4以上系统使用这个方法处理照片</span></span><br><span class=\"line\">                       handleImageOnKitKat(data);</span><br><span class=\"line\"></span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                       <span class=\"comment\">//4.4以下使用</span></span><br><span class=\"line\">                       handleImageBeforeKitKat(data);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           <span class=\"keyword\">default</span>:</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleImageBeforeKitKat</span><span class=\"params\">(Intent data)</span> &#123;</span><br><span class=\"line\">        Uri uri=data.getData();</span><br><span class=\"line\">        String imagePath=getImagePath(uri,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        displayImage(imagePath);<span class=\"comment\">//根据路径显示图片</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleImageOnKitKat</span><span class=\"params\">(Intent data)</span> &#123;</span><br><span class=\"line\">        String imagePath=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        Uri uri=data.getData();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (DocumentsContract.isDocumentUri(<span class=\"built_in\">this</span>,uri)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果是document类型的Uri，则通过document id处理</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">docId</span> <span class=\"operator\">=</span> DocumentsContract.getDocumentId(uri);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">&quot;com.android.providers.media.documents&quot;</span>.equals(uri.getAuthority())) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> docId.split(<span class=\"string\">&quot;:&quot;</span>)[<span class=\"number\">1</span>];<span class=\"comment\">//解析出数字格式的id</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">selection</span> <span class=\"operator\">=</span> MediaStore.Images.Media._ID + <span class=\"string\">&quot;=&quot;</span> + id;</span><br><span class=\"line\">                imagePath = getImagePath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, selection);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;com.android.providers.downloads.documents&quot;</span>.equals(uri.getAuthority())) &#123;</span><br><span class=\"line\">                <span class=\"type\">Uri</span> <span class=\"variable\">contentUri</span> <span class=\"operator\">=</span> ContentUris.withAppendedId(Uri.parse(<span class=\"string\">&quot;content://downloads/public_downloads&quot;</span>), Long.valueOf(docId));</span><br><span class=\"line\">                imagePath = getImagePath(contentUri, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;content&quot;</span>.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果是Content类型的uri则使用普通方法处理</span></span><br><span class=\"line\">                imagePath=getImagePath(uri,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;file&quot;</span>.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class=\"line\">                imagePath=uri.getPath();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            displayImage(imagePath);<span class=\"comment\">//根据路径显示图片</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;Range&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String <span class=\"title function_\">getImagePath</span><span class=\"params\">(Uri uri, String selection)</span>&#123;</span><br><span class=\"line\">        String path=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//通过Uri和selection来获取真实的图片路径</span></span><br><span class=\"line\">            Cursor cursor=getContentResolver().query(uri,<span class=\"literal\">null</span>,selection,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cursor!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cursor.moveToFirst())&#123;</span><br><span class=\"line\">                    path=cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                cursor.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> path;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">displayImage</span><span class=\"params\">(String imagePath)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(imagePath!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            Bitmap bitmap=BitmapFactory.decodeFile(imagePath);</span><br><span class=\"line\">            picture.setImageBitmap(bitmap);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;failed to get image&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"播放多媒体文件\"><a href=\"#播放多媒体文件\" class=\"headerlink\" title=\"播放多媒体文件\"></a>播放多媒体文件</h1><h3 id=\"播放音频\"><a href=\"#播放音频\" class=\"headerlink\" title=\"播放音频\"></a>播放音频</h3><p>MediaPlayer类的方法：</p>\n<p><img src=\"/../img/img46.jpg\"></p>\n<p>1.创建一个MediaPlayer类</p>\n<p>2.动态申请权限</p>\n<p>3.调用initMediaPlayer方法对其进行初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/play&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Play&quot;</span></span><br><span class=\"line\">         /&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/pause&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Pause&quot;</span></span><br><span class=\"line\">         /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/stop&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Stop&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> MediaPlayer mediaPlayer=<span class=\"keyword\">new</span> <span class=\"title class_\">MediaPlayer</span>();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Button play=(Button) findViewById(R.id.play);</span><br><span class=\"line\">        Button pause=(Button) findViewById(R.id.pause);</span><br><span class=\"line\">        Button stop=(Button) findViewById(R.id.stop);</span><br><span class=\"line\">        play.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!mediaPlayer.isPlaying())&#123;</span><br><span class=\"line\">                    mediaPlayer.start();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        pause.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mediaPlayer.isPlaying())&#123;</span><br><span class=\"line\">                    mediaPlayer.pause();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        stop.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mediaPlayer.isPlaying())&#123;</span><br><span class=\"line\">                    mediaPlayer.reset();<span class=\"comment\">//停止播放</span></span><br><span class=\"line\">                    initMediaPlayer();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class=\"built_in\">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">            ActivityCompat.requestPermissions(MainActivity.<span class=\"built_in\">this</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            initMediaPlayer();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"meta\">@NonNull</span> String[] permissions, <span class=\"meta\">@NonNull</span> <span class=\"type\">int</span>[] grantResults)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(requestCode==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(grantResults.length&gt;<span class=\"number\">0</span>&amp;&amp;grantResults[<span class=\"number\">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                initMediaPlayer();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;拒绝权限将无法使用程序&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mediaPlayer!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            mediaPlayer.stop();</span><br><span class=\"line\">            mediaPlayer.release();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initMediaPlayer</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            File file=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(Environment.getExternalStorageDirectory(),<span class=\"string\">&quot;music.mp3&quot;</span>);</span><br><span class=\"line\">            mediaPlayer.setDataSource(file.getPath());<span class=\"comment\">//指定音频文件的路径</span></span><br><span class=\"line\">            mediaPlayer.prepare();<span class=\"comment\">//让mediaPlayer进入到准备状态</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"播放视频\"><a href=\"#播放视频\" class=\"headerlink\" title=\"播放视频\"></a>播放视频</h3><p>VideoView类的方法：</p>\n<p><img src=\"/../img/img47.jpg\"></p>\n<p>1.创建VideoView实例</p>\n<p>2.动态申请权限</p>\n<p>3.利用initVideoView方法初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>&gt;</span><br><span class=\"line\">        &lt;Button</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/play&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_weight=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">            android:text=<span class=\"string\">&quot;Play&quot;</span>/&gt;</span><br><span class=\"line\">       &lt;Button</span><br><span class=\"line\">           android:id=<span class=\"string\">&quot;@+id/pause&quot;</span></span><br><span class=\"line\">           android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">           android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">           android:layout_weight=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">           android:text=<span class=\"string\">&quot;Pause&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;Button</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/replay&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_weight=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">            android:text=<span class=\"string\">&quot;Replay&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\">    &lt;VideoView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/video_view&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">View</span>.OnClickListener &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> VideoView videoView;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        videoView=(VideoView) findViewById(R.id.video_view);</span><br><span class=\"line\">        Button play=(Button) findViewById(R.id.play);</span><br><span class=\"line\">        Button pause=(Button) findViewById(R.id.pause);</span><br><span class=\"line\">        Button replay=(Button) findViewById(R.id.replay);</span><br><span class=\"line\">        play.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        pause.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        replay.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class=\"built_in\">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">            ActivityCompat.requestPermissions(MainActivity.<span class=\"built_in\">this</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            initVideoPath();<span class=\"comment\">//初始化MediaPlayer</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initVideoPath</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        File file=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(Environment.getExternalStorageDirectory(),<span class=\"string\">&quot;movie.mp4&quot;</span>);</span><br><span class=\"line\">        videoView.setVideoPath(file.getPath());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"meta\">@NonNull</span> String[] permissions, <span class=\"meta\">@NonNull</span> <span class=\"type\">int</span>[] grantResults)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(requestCode==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(grantResults.length&gt;<span class=\"number\">0</span>&amp;&amp;grantResults[<span class=\"number\">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                initVideoPath();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;拒绝权限将无法使用该程序&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(videoView!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            videoView.suspend();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(view.getId()==R.id.play)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(!videoView.isPlaying())&#123;</span><br><span class=\"line\">               videoView.start();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.getId()==R.id.pause) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(videoView.isPlaying())&#123;</span><br><span class=\"line\">               videoView.pause();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (videoView.isPlaying()) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//停止播放视频，并释放资源</span></span><br><span class=\"line\">           videoView.resume();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"通知(进阶)\n1.创建通知通道并请求通知权限\n\n2.用getSystemService()获取一个NotificationManager对通知进行管理\n\n3.创建Notification对象并进行一些基础设置\n\n4.用notify()显示通知\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n","more":"<h1 id=\"通知-进阶\"><a href=\"#通知-进阶\" class=\"headerlink\" title=\"通知(进阶)\"></a>通知(进阶)</h1><p>1.创建通知通道并请求通知权限</p>\n<p>2.用getSystemService()获取一个NotificationManager对通知进行管理</p>\n<p>3.创建Notification对象并进行一些基础设置</p>\n<p>4.用notify()显示通知</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示通知功能的主活动类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">View</span>.OnClickListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"comment\">// 加载布局文件</span></span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建通知通道（仅在 Android 8.0 及以上版本需要）</span></span><br><span class=\"line\">        createNotificationChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取按钮控件并绑定点击事件</span></span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">sendNotice</span> <span class=\"operator\">=</span> findViewById(R.id.send_notice);</span><br><span class=\"line\">        sendNotice.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View v)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否是发送通知按钮被点击</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v.getId() == R.id.send_notice) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 创建一个Intent，用于在通知被点击时启动NotificationActivity</span></span><br><span class=\"line\">                <span class=\"type\">Intent</span> <span class=\"variable\">intent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>, NotificationActivity.class);</span><br><span class=\"line\">                <span class=\"comment\">// 创建一个PendingIntent，作为通知的点击动作</span></span><br><span class=\"line\">                <span class=\"type\">PendingIntent</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> PendingIntent.getActivity(<span class=\"built_in\">this</span>, <span class=\"number\">0</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 获取通知管理器实例</span></span><br><span class=\"line\">                <span class=\"type\">NotificationManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 构建通知对象</span></span><br><span class=\"line\">                <span class=\"type\">Notification</span> <span class=\"variable\">notification</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.Builder(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;default_channel_id&quot;</span>)</span><br><span class=\"line\">                        <span class=\"comment\">// 设置通知标题</span></span><br><span class=\"line\">                        .setContentTitle(<span class=\"string\">&quot;This is content title&quot;</span>)</span><br><span class=\"line\">                        <span class=\"comment\">// 设置通知内容</span></span><br><span class=\"line\">                        .setContentText(<span class=\"string\">&quot;Learn how to build notifications, send and sync data, and use voice actions. Get the official Android IDE and developer tools to build apps for Android.&quot;</span>)</span><br><span class=\"line\">                        <span class=\"comment\">// 设置通知时间</span></span><br><span class=\"line\">                        .setWhen(System.currentTimeMillis())</span><br><span class=\"line\">                        <span class=\"comment\">// 设置小图标</span></span><br><span class=\"line\">                        .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class=\"line\">                        <span class=\"comment\">// 设置大图标</span></span><br><span class=\"line\">                        .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))</span><br><span class=\"line\">                        <span class=\"comment\">// 设置通知点击的Intent</span></span><br><span class=\"line\">                        .setContentIntent(pi)</span><br><span class=\"line\">                        <span class=\"comment\">// 设置自动取消通知</span></span><br><span class=\"line\">                        .setAutoCancel(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                        <span class=\"comment\">// 设置默认通知声音、震动、灯光</span></span><br><span class=\"line\">                        .setDefaults(NotificationCompat.DEFAULT_ALL)</span><br><span class=\"line\">                        <span class=\"comment\">// 使用大文本样式</span></span><br><span class=\"line\">                        .setStyle(<span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.BigTextStyle().bigText(<span class=\"string\">&quot;Learn how to build notifications, send and&quot;</span> +</span><br><span class=\"line\">                                <span class=\"string\">&quot;sync data, and use voice actions,Get the official Android IDE and developer tools to build apps for Android.&quot;</span>))</span><br><span class=\"line\">                        <span class=\"comment\">// 设置通知优先级</span></span><br><span class=\"line\">                        .setPriority(NotificationCompat.PRIORITY_MAX)</span><br><span class=\"line\">                        <span class=\"comment\">// 构建通知对象</span></span><br><span class=\"line\">                        .build();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 处理 Android 13 及以上版本的 POST_NOTIFICATIONS 权限</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class=\"built_in\">this</span>, Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 如果没有权限，请求权限</span></span><br><span class=\"line\">                        ActivityCompat.requestPermissions(MainActivity.<span class=\"built_in\">this</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;Manifest.permission.POST_NOTIFICATIONS&#125;, <span class=\"number\">1</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 如果有权限，发送通知</span></span><br><span class=\"line\">                        manager.notify(<span class=\"number\">1</span>, notification);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Android 13 以下版本直接发送通知</span></span><br><span class=\"line\">                    manager.notify(<span class=\"number\">1</span>, notification);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 捕获并处理异常</span></span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;发送通知失败： &quot;</span> + e.getMessage(), Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"meta\">@NonNull</span> String[] permissions, <span class=\"meta\">@NonNull</span> <span class=\"type\">int</span>[] grantResults)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">        <span class=\"comment\">// 获取通知管理器实例</span></span><br><span class=\"line\">        <span class=\"type\">NotificationManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 重新构建通知对象（与 onClick 中相同）</span></span><br><span class=\"line\">            <span class=\"type\">Notification</span> <span class=\"variable\">notification</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.Builder(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;default_channel_id&quot;</span>)</span><br><span class=\"line\">                    .setContentTitle(<span class=\"string\">&quot;This is content title&quot;</span>)</span><br><span class=\"line\">                    .setContentText(<span class=\"string\">&quot;Learn how to build notifications, send and sync data, and use voice actions. Get the official Android IDE and developer tools to build apps for Android.&quot;</span>)</span><br><span class=\"line\">                    .setWhen(System.currentTimeMillis())</span><br><span class=\"line\">                    .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class=\"line\">                    .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))</span><br><span class=\"line\">                    .setAutoCancel(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                    .setDefaults(NotificationCompat.DEFAULT_ALL)</span><br><span class=\"line\">                    .setStyle(<span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.BigTextStyle().bigText(<span class=\"string\">&quot;Learn how to build notifications, send and&quot;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&quot;sync data, and use voice actions,Get the official Android IDE and developer tools to build apps for Android.&quot;</span>))</span><br><span class=\"line\">                    .setPriority(NotificationCompat.PRIORITY_MAX)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 根据请求码处理权限请求结果</span></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (requestCode) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// 处理 POST_NOTIFICATIONS 权限请求结果</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (grantResults.length &gt; <span class=\"number\">0</span> &amp;&amp; grantResults[<span class=\"number\">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 权限授予，发送通知</span></span><br><span class=\"line\">                        manager.notify(<span class=\"number\">1</span>, notification);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 权限被拒绝，显示提示信息</span></span><br><span class=\"line\">                        Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You denied the permission&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// 处理其他请求码</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 捕获并处理异常</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;发送通知失败： &quot;</span> + e.getMessage(), Toast.LENGTH_LONG).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建通知通道（仅在 Android 8.0 及以上版本需要）</span></span><br><span class=\"line\"><span class=\"comment\">     * 通知通道用于分组和管理不同的通知</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createNotificationChannel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建一个 NotificationChannel 对象</span></span><br><span class=\"line\">            <span class=\"type\">NotificationChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationChannel</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;default_channel_id&quot;</span>, <span class=\"comment\">// 通道 ID</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;Default Channel&quot;</span>,    <span class=\"comment\">// 通道名称</span></span><br><span class=\"line\">                    NotificationManager.IMPORTANCE_DEFAULT <span class=\"comment\">// 重要性级别</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"comment\">// 获取通知管理器实例</span></span><br><span class=\"line\">            <span class=\"type\">NotificationManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class=\"line\">            <span class=\"comment\">// 创建通知通道</span></span><br><span class=\"line\">            manager.createNotificationChannel(channel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NotificationActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.notification_layout);</span><br><span class=\"line\">        NotificationManager manager=(NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class=\"line\">        manager.cancel(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.POST_NOTIFICATIONS&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.VIBRATE&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"摄像头和相册\"><a href=\"#摄像头和相册\" class=\"headerlink\" title=\"摄像头和相册\"></a>摄像头和相册</h1><h3 id=\"调用摄像头拍照\"><a href=\"#调用摄像头拍照\" class=\"headerlink\" title=\"调用摄像头拍照\"></a>调用摄像头拍照</h3><p>1.设置Button和ImageView控件</p>\n<p>2.申请相机权限,创建File对象存放在SD卡的应用关联缓存目录下</p>\n<p>3.把File转换为Uri,被内容提供器FileProvider通过getUriForFile()接收</p>\n<p>4.构建intent启动相机</p>\n<p>5.重写onActivityResult处理结果</p>\n<p>6.在AndroidManifest.xml注册内容提供器,声明权限</p>\n<p>7.在xml目录下创建file_paths.xml共享路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TAKE_PHOTO=<span class=\"number\">1</span>;<span class=\"comment\">//声明一个请求码，用于识别返回的结果</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> CHOOSE_PHOTO=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImageView picture;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Uri imageUri;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Button takePhoto=(Button) findViewById(R.id.take_photo);</span><br><span class=\"line\">        picture =(ImageView) findViewById(R.id.picture);</span><br><span class=\"line\">        takePhoto.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//创建File对象，用于存储拍照后的图片</span></span><br><span class=\"line\">                File outputImage=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(getExternalCacheDir(),<span class=\"string\">&quot;output_image.jpg&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> <span class=\"comment\">//判断图片是否存在，存在则删除重建，不存在则直接创建</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(outputImage.exists())&#123;</span><br><span class=\"line\">                        outputImage.delete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    outputImage.createNewFile();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Build.VERSION.SDK_INT&gt;=<span class=\"number\">24</span>)</span><br><span class=\"line\">                    <span class=\"comment\">//判断安卓的版本是否高于7.0，高于则调用高于的方法，低于则调用低于的方法</span></span><br><span class=\"line\">                    <span class=\"comment\">//把文件转化成Uri对象</span></span><br><span class=\"line\">                    <span class=\"comment\">/*之所以这样是因为android7.0之后直接使用本地真实路径是不安全的，会抛出异常。</span></span><br><span class=\"line\"><span class=\"comment\">                    FileProvider是一种特殊的内容提供器，可以对数据进行保护*/</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    imageUri= FileProvider.getUriForFile(MainActivity.<span class=\"built_in\">this</span>,<span class=\"string\">&quot;com.example.cameraalbumtest.fileprovider&quot;</span>,outputImage);</span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                    第一个参数：content对象</span></span><br><span class=\"line\"><span class=\"comment\">                    第二个参数：任意唯一的字符串</span></span><br><span class=\"line\"><span class=\"comment\">                    第三个参数：文件对象</span></span><br><span class=\"line\"><span class=\"comment\">                    */</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    imageUri=Uri.fromFile(outputImage);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//启动相机程序</span></span><br><span class=\"line\">                Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"string\">&quot;android.media.action.IMAGE_CAPTURE&quot;</span>);</span><br><span class=\"line\">                intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri);</span><br><span class=\"line\">                startActivityForResult(intent,TAKE_PHOTO);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"type\">int</span> resultCode, <span class=\"meta\">@Nullable</span> Intent data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">       <span class=\"keyword\">switch</span>(requestCode)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> TAKE_PHOTO:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resultCode == RESULT_OK) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">Bitmap</span> <span class=\"variable\">bitmap</span> <span class=\"operator\">=</span> BitmapFactory.decodeStream(getContentResolver().openInputStream(imageUri));</span><br><span class=\"line\">                    picture.setImageBitmap(bitmap);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">           <span class=\"keyword\">default</span>:</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;provider</span><br><span class=\"line\">     android:name=<span class=\"string\">&quot;androidx.core.content.FileProvider&quot;</span></span><br><span class=\"line\">     android:authorities=<span class=\"string\">&quot;com.example.cameraalbumtest.fileprovider&quot;</span></span><br><span class=\"line\">     android:exported=<span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">     android:grantUriPermissions=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">     &lt;meta-data</span><br><span class=\"line\">         android:name=<span class=\"string\">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span><br><span class=\"line\">         android:resource=<span class=\"string\">&quot;@xml/file_paths&quot;</span>/&gt;</span><br><span class=\"line\"> &lt;/provider&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;paths xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class=\"line\">    &lt;external-path</span><br><span class=\"line\">        name=<span class=\"string\">&quot;my_images&quot;</span></span><br><span class=\"line\">        path=<span class=\"string\">&quot;&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/paths&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"从相册中选择图片\"><a href=\"#从相册中选择图片\" class=\"headerlink\" title=\"从相册中选择图片\"></a>从相册中选择图片</h3><p>1.申请权限</p>\n<p>2.创建并调用openAlum()方法</p>\n<p>3.重写onActivityResult处理结果</p>\n<p>4.针对不同图片格式进行不同操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TAKE_PHOTO=<span class=\"number\">1</span>;<span class=\"comment\">//声明一个请求码，用于识别返回的结果</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> CHOOSE_PHOTO=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImageView picture;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Uri imageUri;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Button takePhoto=(Button) findViewById(R.id.take_photo);</span><br><span class=\"line\">        Button choosePhoto=(Button) findViewById(R.id.choose_from_album);</span><br><span class=\"line\">        picture =(ImageView) findViewById(R.id.picture);</span><br><span class=\"line\">        takePhoto.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//创建File对象，用于存储拍照后的图片</span></span><br><span class=\"line\">                File outputImage=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(getExternalCacheDir(),<span class=\"string\">&quot;output_image.jpg&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> <span class=\"comment\">//判断图片是否存在，存在则删除重建，不存在则直接创建</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(outputImage.exists())&#123;</span><br><span class=\"line\">                        outputImage.delete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    outputImage.createNewFile();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Build.VERSION.SDK_INT&gt;=<span class=\"number\">24</span>)</span><br><span class=\"line\">                    <span class=\"comment\">//判断安卓的版本是否高于7.0，高于则调用高于的方法，低于则调用低于的方法</span></span><br><span class=\"line\">                    <span class=\"comment\">//把文件转化成Uri对象</span></span><br><span class=\"line\">                    <span class=\"comment\">/*之所以这样是因为android7.0之后直接使用本地真实路径是不安全的，会抛出异常。</span></span><br><span class=\"line\"><span class=\"comment\">                    FileProvider是一种特殊的内容提供器，可以对数据进行保护*/</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    imageUri= FileProvider.getUriForFile(MainActivity.<span class=\"built_in\">this</span>,<span class=\"string\">&quot;com.example.cameraalbumtest.fileprovider&quot;</span>,outputImage);</span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                    第一个参数：content对象</span></span><br><span class=\"line\"><span class=\"comment\">                    第二个参数：任意唯一的字符串</span></span><br><span class=\"line\"><span class=\"comment\">                    第三个参数：文件对象</span></span><br><span class=\"line\"><span class=\"comment\">                    */</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    imageUri=Uri.fromFile(outputImage);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//启动相机程序</span></span><br><span class=\"line\">                Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"string\">&quot;android.media.action.IMAGE_CAPTURE&quot;</span>);</span><br><span class=\"line\">                intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri);</span><br><span class=\"line\">                startActivityForResult(intent,TAKE_PHOTO);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        choosePhoto.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class=\"built_in\">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                    ActivityCompat.requestPermissions(MainActivity.<span class=\"built_in\">this</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123; Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    openAlbum();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">openAlbum</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"string\">&quot;android.intent.action.GET_CONTENT&quot;</span>);</span><br><span class=\"line\">        intent.setType(<span class=\"string\">&quot;image/*&quot;</span>);</span><br><span class=\"line\">        startActivityForResult(intent,CHOOSE_PHOTO);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"meta\">@NonNull</span> String[] permissions, <span class=\"meta\">@NonNull</span> <span class=\"type\">int</span>[] grantResults)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(requestCode==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(grantResults.length&gt;<span class=\"number\">0</span>&amp;&amp;grantResults[<span class=\"number\">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">               openAlbum();</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You denide the permission&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"type\">int</span> resultCode, <span class=\"meta\">@Nullable</span> Intent data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">       <span class=\"keyword\">switch</span>(requestCode)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> TAKE_PHOTO:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resultCode == RESULT_OK) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">Bitmap</span> <span class=\"variable\">bitmap</span> <span class=\"operator\">=</span> BitmapFactory.decodeStream(getContentResolver().openInputStream(imageUri));</span><br><span class=\"line\">                    picture.setImageBitmap(bitmap);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> CHOOSE_PHOTO:</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(resultCode==RESULT_OK)&#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span>( Build.VERSION.SDK_INT&gt;=<span class=\"number\">19</span>)&#123;</span><br><span class=\"line\">                       <span class=\"comment\">//4.4以上系统使用这个方法处理照片</span></span><br><span class=\"line\">                       handleImageOnKitKat(data);</span><br><span class=\"line\"></span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                       <span class=\"comment\">//4.4以下使用</span></span><br><span class=\"line\">                       handleImageBeforeKitKat(data);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           <span class=\"keyword\">default</span>:</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleImageBeforeKitKat</span><span class=\"params\">(Intent data)</span> &#123;</span><br><span class=\"line\">        Uri uri=data.getData();</span><br><span class=\"line\">        String imagePath=getImagePath(uri,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        displayImage(imagePath);<span class=\"comment\">//根据路径显示图片</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleImageOnKitKat</span><span class=\"params\">(Intent data)</span> &#123;</span><br><span class=\"line\">        String imagePath=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        Uri uri=data.getData();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (DocumentsContract.isDocumentUri(<span class=\"built_in\">this</span>,uri)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果是document类型的Uri，则通过document id处理</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">docId</span> <span class=\"operator\">=</span> DocumentsContract.getDocumentId(uri);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">&quot;com.android.providers.media.documents&quot;</span>.equals(uri.getAuthority())) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> docId.split(<span class=\"string\">&quot;:&quot;</span>)[<span class=\"number\">1</span>];<span class=\"comment\">//解析出数字格式的id</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">selection</span> <span class=\"operator\">=</span> MediaStore.Images.Media._ID + <span class=\"string\">&quot;=&quot;</span> + id;</span><br><span class=\"line\">                imagePath = getImagePath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, selection);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;com.android.providers.downloads.documents&quot;</span>.equals(uri.getAuthority())) &#123;</span><br><span class=\"line\">                <span class=\"type\">Uri</span> <span class=\"variable\">contentUri</span> <span class=\"operator\">=</span> ContentUris.withAppendedId(Uri.parse(<span class=\"string\">&quot;content://downloads/public_downloads&quot;</span>), Long.valueOf(docId));</span><br><span class=\"line\">                imagePath = getImagePath(contentUri, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;content&quot;</span>.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果是Content类型的uri则使用普通方法处理</span></span><br><span class=\"line\">                imagePath=getImagePath(uri,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;file&quot;</span>.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class=\"line\">                imagePath=uri.getPath();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            displayImage(imagePath);<span class=\"comment\">//根据路径显示图片</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;Range&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String <span class=\"title function_\">getImagePath</span><span class=\"params\">(Uri uri, String selection)</span>&#123;</span><br><span class=\"line\">        String path=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//通过Uri和selection来获取真实的图片路径</span></span><br><span class=\"line\">            Cursor cursor=getContentResolver().query(uri,<span class=\"literal\">null</span>,selection,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cursor!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cursor.moveToFirst())&#123;</span><br><span class=\"line\">                    path=cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                cursor.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> path;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">displayImage</span><span class=\"params\">(String imagePath)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(imagePath!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            Bitmap bitmap=BitmapFactory.decodeFile(imagePath);</span><br><span class=\"line\">            picture.setImageBitmap(bitmap);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;failed to get image&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"播放多媒体文件\"><a href=\"#播放多媒体文件\" class=\"headerlink\" title=\"播放多媒体文件\"></a>播放多媒体文件</h1><h3 id=\"播放音频\"><a href=\"#播放音频\" class=\"headerlink\" title=\"播放音频\"></a>播放音频</h3><p>MediaPlayer类的方法：</p>\n<p><img src=\"/../img/img46.jpg\"></p>\n<p>1.创建一个MediaPlayer类</p>\n<p>2.动态申请权限</p>\n<p>3.调用initMediaPlayer方法对其进行初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/play&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Play&quot;</span></span><br><span class=\"line\">         /&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/pause&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Pause&quot;</span></span><br><span class=\"line\">         /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/stop&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Stop&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> MediaPlayer mediaPlayer=<span class=\"keyword\">new</span> <span class=\"title class_\">MediaPlayer</span>();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Button play=(Button) findViewById(R.id.play);</span><br><span class=\"line\">        Button pause=(Button) findViewById(R.id.pause);</span><br><span class=\"line\">        Button stop=(Button) findViewById(R.id.stop);</span><br><span class=\"line\">        play.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!mediaPlayer.isPlaying())&#123;</span><br><span class=\"line\">                    mediaPlayer.start();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        pause.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mediaPlayer.isPlaying())&#123;</span><br><span class=\"line\">                    mediaPlayer.pause();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        stop.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mediaPlayer.isPlaying())&#123;</span><br><span class=\"line\">                    mediaPlayer.reset();<span class=\"comment\">//停止播放</span></span><br><span class=\"line\">                    initMediaPlayer();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class=\"built_in\">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">            ActivityCompat.requestPermissions(MainActivity.<span class=\"built_in\">this</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            initMediaPlayer();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"meta\">@NonNull</span> String[] permissions, <span class=\"meta\">@NonNull</span> <span class=\"type\">int</span>[] grantResults)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(requestCode==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(grantResults.length&gt;<span class=\"number\">0</span>&amp;&amp;grantResults[<span class=\"number\">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                initMediaPlayer();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;拒绝权限将无法使用程序&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mediaPlayer!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            mediaPlayer.stop();</span><br><span class=\"line\">            mediaPlayer.release();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initMediaPlayer</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            File file=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(Environment.getExternalStorageDirectory(),<span class=\"string\">&quot;music.mp3&quot;</span>);</span><br><span class=\"line\">            mediaPlayer.setDataSource(file.getPath());<span class=\"comment\">//指定音频文件的路径</span></span><br><span class=\"line\">            mediaPlayer.prepare();<span class=\"comment\">//让mediaPlayer进入到准备状态</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"播放视频\"><a href=\"#播放视频\" class=\"headerlink\" title=\"播放视频\"></a>播放视频</h3><p>VideoView类的方法：</p>\n<p><img src=\"/../img/img47.jpg\"></p>\n<p>1.创建VideoView实例</p>\n<p>2.动态申请权限</p>\n<p>3.利用initVideoView方法初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>&gt;</span><br><span class=\"line\">        &lt;Button</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/play&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_weight=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">            android:text=<span class=\"string\">&quot;Play&quot;</span>/&gt;</span><br><span class=\"line\">       &lt;Button</span><br><span class=\"line\">           android:id=<span class=\"string\">&quot;@+id/pause&quot;</span></span><br><span class=\"line\">           android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">           android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">           android:layout_weight=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">           android:text=<span class=\"string\">&quot;Pause&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;Button</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/replay&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_weight=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">            android:text=<span class=\"string\">&quot;Replay&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\">    &lt;VideoView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/video_view&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">View</span>.OnClickListener &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> VideoView videoView;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        videoView=(VideoView) findViewById(R.id.video_view);</span><br><span class=\"line\">        Button play=(Button) findViewById(R.id.play);</span><br><span class=\"line\">        Button pause=(Button) findViewById(R.id.pause);</span><br><span class=\"line\">        Button replay=(Button) findViewById(R.id.replay);</span><br><span class=\"line\">        play.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        pause.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        replay.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class=\"built_in\">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">            ActivityCompat.requestPermissions(MainActivity.<span class=\"built_in\">this</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            initVideoPath();<span class=\"comment\">//初始化MediaPlayer</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initVideoPath</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        File file=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(Environment.getExternalStorageDirectory(),<span class=\"string\">&quot;movie.mp4&quot;</span>);</span><br><span class=\"line\">        videoView.setVideoPath(file.getPath());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"meta\">@NonNull</span> String[] permissions, <span class=\"meta\">@NonNull</span> <span class=\"type\">int</span>[] grantResults)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(requestCode==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(grantResults.length&gt;<span class=\"number\">0</span>&amp;&amp;grantResults[<span class=\"number\">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                initVideoPath();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;拒绝权限将无法使用该程序&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(videoView!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            videoView.suspend();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(view.getId()==R.id.play)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(!videoView.isPlaying())&#123;</span><br><span class=\"line\">               videoView.start();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.getId()==R.id.pause) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(videoView.isPlaying())&#123;</span><br><span class=\"line\">               videoView.pause();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (videoView.isPlaying()) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//停止播放视频，并释放资源</span></span><br><span class=\"line\">           videoView.resume();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"探究ContentProvider(Kotlin)","date":"2025-05-11T14:08:37.000Z","_content":"\n# 运行时权限\n\n### 权限机制\n\n- **分类**\n\n  普通权限和危险权限（还包括一些特殊权限但使用不多，不参与讨论）\n\n- **危险权限**\n\n  ![](../img/img56.jpg)\n\n- **特点**\n\n  普通权限直接在AndroidManifest.xml中声明即可\n\n  危险权限需要进行运行时权限处理\n\n  原则上用户一旦同意某一个权限申请，同组的其它权限会自动授权，但不要基于此规则来实现任何逻辑功能\n\n### 运行时申请权限\n\n1.在AndroidManifest.xml中声明权限\n\n```kotlin\n<uses-permission android:name=\"android.permission.CALL_PHONE\"/>\n```\n\n2.检查权限是否授权\n\n```kotlin\n if (ContextCompat.checkSelfPermission(this, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {\n              // 修正权限请求的字符串格式\n                ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.CALL_PHONE), 1) \n            } else {\n                call()\n            }\n```\n\n3.调用onRequestPermissionsResult()方法申请授权\n\n```kotlin\noverride fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<out String>,\n        grantResults: IntArray\n    ) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        when(requestCode){\n            1->{\n                if(grantResults.isNotEmpty()&&grantResults[0]==PackageManager.PERMISSION_GRANTED){\n                    call()\n                }else{\n                   Toast.makeText(this, \"You denied the permission\", Toast.LENGTH_SHORT).show()\n                }\n            }\n        }\n    }\n```\n\n4.把权限授权后执行的逻辑封装\n\n```kotlin\n private fun call() {\n        try {\n            val intent=Intent(Intent.ACTION_CALL)\n            intent.data=Uri.parse(\"tel:10086\")\n            startActivity(intent)\n        }catch (e:SecurityException){\n            e.printStackTrace()\n        }\n    }\n```\n\n------\n\n# ContentProvider基本用法\n\n **1.获取 ContentResolver 实例**\n\n在 Android 中，通常通过上下文（Context）来获取 ContentResolver 实例：\n\n```kotlin\nval contentResolver = context.contentResolver\n```\n\n**2.添加数据**\n\n`insert()` 方法用于在 ContentProvider 中插入新数据，参数说明如下：\n\n- **uri**：目标数据的 URI\n\n- **ContentValues**：存储键值对数据\n\n  ```kotlin\n  val uri = Uri.parse(\"content://com.example.app.provider/city\")\n  val values = ContentValues().apply {\n      put(\"name\", \"Beijing\")\n      put(\"code\", \"BJ\")\n  }\n  val newUri = contentResolver.insert(uri, values)\n  println(\"插入成功，新记录URI：$newUri\")\n  ```\n\n**3.删除数据**\n\n`delete()` 方法用于删除 ContentProvider 中的数据，参数说明如下：\n\n- **uri**：目标数据的 URI\n\n- **selection**：删除条件\n\n- **selectionArgs**：条件参数数组\n\n  ```kotlin\n  val uri = Uri.parse(\"content://com.example.app.provider/city\")\n  val selection = \"id = ?\"\n  val selectionArgs = arrayOf(\"1\")\n  val deleteCount = contentResolver.delete(uri, selection, selectionArgs)\n  println(\"删除了 $deleteCount 条记录\")\n  ```\n\n**4.查询数据**\n\n`query()` 方法用于从 ContentProvider 查询数据，参数说明如下：\n\n- **uri**：需要访问的数据的 URI，例如：`content://com.example.app.provider/city`\n\n- **projection**：需要查询的列数组，如果传入 null，则返回所有列\n\n- **selection**：过滤条件（WHERE 子句），可使用 ? 占位符\n\n- **selectionArgs**：过滤条件对应的参数数组\n\n- **sortOrder**：排序规则\n\n  ```kotlin\n  val uri = Uri.parse(\"content://com.example.app.provider/city\")\n  val projection = arrayOf(\"id\", \"name\", \"code\")\n  val cursor = contentResolver.query(uri, projection, null, null, \"id ASC\")\n  cursor?.use {\n      while (it.moveToNext()) {\n          val id = it.getInt(it.getColumnIndexOrThrow(\"id\"))\n          val name = it.getString(it.getColumnIndexOrThrow(\"name\"))\n          val code = it.getString(it.getColumnIndexOrThrow(\"code\"))\n          println(\"City: id=$id, name=$name, code=$code\")\n      }\n  }\n  ```\n\n**5.更新数据**\n\n`update()` 方法用于更新 ContentProvider 中的数据，参数说明如下：\n\n- **uri**：目标数据的 URI\n\n- **ContentValues**：存储需要更新的字段和值\n\n- **selection**：指定更新条件\n\n- **selectionArgs**：条件参数数组\n\n  ```kotlin\n  val uri = Uri.parse(\"content://com.example.app.provider/city\")\n  val values = ContentValues().apply {\n      put(\"name\", \"Shanghai\")\n  }\n  val selection = \"id = ?\"\n  val selectionArgs = arrayOf(\"1\")\n  val updateCount = contentResolver.update(uri, values, selection, selectionArgs)\n  println(\"更新了 $updateCount 条记录\")\n  ```\n\n------\n\n# 创建ContentProvider\n\n- **新建一个类继承ContentProvider并重写6个方法(onCreate(),query(),insert(),update(),delete(),getType())**\n- **实现数据操作**\n  - **query()**：根据传入的 URI 查询数据，并返回一个 Cursor 对象。\n  - **insert()**：根据传入的 URI 插入数据，返回新插入数据的 URI。\n  - **update()**：根据 URI 更新数据，返回受影响的行数。\n  - **delete()**：根据 URI 删除数据，返回删除的行数。\n  - **getType()**：返回指定 URI 对应的数据 MIME 类型。\n\n- **配置 URI 匹配器 使用 `UriMatcher` 对传入的 URI 进行匹配，以便确定请求类型并执行相应操作。可以在静态代码块中添加匹配规则**\n\n```kotlin\nprivate static final UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\ninit {\n    uriMatcher.addURI(\"your.authority\", \"your_path\", CODE_CONSTANT);\n}\n```\n\n- **在 AndroidManifest.xml 中注册 ContentProvider** 在清单文件中注册你的 ContentProvider：\n\n```kotlin\n<provider\n    android:name=\".YourContentProvider\"\n    android:authorities=\"your.authority\"\n    android:exported=\"true\" />\n```\n\n**注意**：`android:exported` 的值根据你的需求设置为 `true` 或 `false`。\n\n- **通配符**\n\n  *表示匹配任意长度的任意字符\n\n  #表示匹配任意长度的数字\n\n- **MIME字符串组成**\n  1. vnd开头\n  2. 如果内容URI以路径结尾则接**android.cursor.dir/**，如果内容URI以id结尾则接**android.cursor.item/**\n  3. 最后接上vnd.<authority>.<path>\n\n```kotlin\n/**\n * 数据库内容提供器\n * 用于对外共享数据库中的数据，实现跨应用数据访问\n */\nclass DatabaseProvider : ContentProvider() {\n    // URI匹配码\n    private val bookDir = 0      // 访问图书表中的所有数据\n    private val bookItem = 1     // 访问图书表中的单条数据\n    private val categoryDir = 2  // 访问分类表中的所有数据\n    private val categoryItem = 3 // 访问分类表中的单条数据\n    \n    // 内容提供器的唯一标识\n    private val authority = \"com.example.databasetest.provider\"\n    // 数据库帮助类实例\n    private var dbHelper: MyDatabaseHelper? = null\n    \n    /**\n     * 懒加载初始化UriMatcher\n     * 用于匹配内容URI，分别添加四种URI匹配规则\n     */\n    private val uriMatcher by lazy {\n        val matcher = UriMatcher(UriMatcher.NO_MATCH)\n        matcher.addURI(authority, \"book\", bookDir)         // content://com.example.databasetest.provider/book\n        matcher.addURI(authority, \"book/#\", bookItem)      // content://com.example.databasetest.provider/book/1\n        matcher.addURI(authority, \"category\", categoryDir) // content://com.example.databasetest.provider/category\n        matcher.addURI(authority, \"category/#\", categoryItem) // content://com.example.databasetest.provider/category/1\n        matcher\n    }\n\n    /**\n     * 删除数据\n     * @param uri 待删除数据的URI\n     * @param selection WHERE约束条件\n     * @param selectionArgs WHERE约束条件的参数\n     * @return 删除的行数\n     */\n    override fun delete(uri: Uri, selection: String?, selectionArgs: Array<String>?) = dbHelper?.let {\n        val db = it.writableDatabase\n        val deletedRows = when (uriMatcher.match(uri)) {\n            bookDir -> db.delete(\"Book\", selection, selectionArgs)\n            bookItem -> {\n                val bookId = uri.pathSegments[1]  // 获取图书id\n                db.delete(\"Book\", \"id = ?\", arrayOf(bookId))\n            }\n            categoryDir -> db.delete(\"Category\", selection, selectionArgs)\n            categoryItem -> {\n                val categoryId = uri.pathSegments[1]  // 获取分类id\n                db.delete(\"Category\", \"id = ?\", arrayOf(categoryId))\n            }\n            else -> 0\n        }\n        deletedRows\n    } ?: 0\n\n    /**\n     * 根据URI返回MIME类型\n     * vnd.android.cursor.dir/表示返回多条数据\n     * vnd.android.cursor.item/表示返回单条数据\n     */\n    override fun getType(uri: Uri) = when (uriMatcher.match(uri)) {\n        bookDir -> \"vnd.android.cursor.dir/vnd.com.example.databasetest.provider.book\"\n        bookItem -> \"vnd.android.cursor.item/vnd.com.example.databasetest.provider.book\"\n        categoryDir -> \"vnd.android.cursor.dir/vnd.com.example.databasetest.provider.category\"\n        categoryItem -> \"vnd.android.cursor.item/vnd.com.example.databasetest.provider.category\"\n        else -> null\n    }\n\n    /**\n     * 插入数据\n     * @param uri 待插入的位置\n     * @param values 待插入的数据\n     * @return 新插入数据的URI\n     */\n    override fun insert(uri: Uri, values: ContentValues?) = dbHelper?.let {\n        val db = it.writableDatabase\n        val uriReturn = when(uriMatcher.match(uri)) {\n            bookDir, bookItem -> {\n                val newBookId = db.insert(\"Book\", null, values)\n                Uri.parse(\"content://$authority/book/$newBookId\")\n            }\n            categoryDir, categoryItem -> {\n                val newCategoryId = db.insert(\"Category\", null, values)\n                Uri.parse(\"content://$authority/category/$newCategoryId\")\n            }\n            else -> null\n        }\n        uriReturn\n    }\n\n    /**\n     * 初始化内容提供器\n     * @return 初始化是否成功\n     */\n    override fun onCreate() = context?.let {\n        dbHelper = MyDatabaseHelper(it, \"BookStore.db\", 2)\n        true\n    } ?: false\n\n    /**\n     * 查询数据\n     * @param uri 查询的URI\n     * @param projection 查询的列名\n     * @param selection WHERE约束条件\n     * @param selectionArgs WHERE约束条件的参数\n     * @param sortOrder 排序方式\n     * @return 查询的结果集\n     */\n    override fun query(\n        uri: Uri, projection: Array<String>?, selection: String?,\n        selectionArgs: Array<String>?, sortOrder: String?\n    ) = dbHelper?.let {\n        val db = it.readableDatabase\n        val cursor = when(uriMatcher.match(uri)) {\n            bookDir -> db.query(\"Book\", projection, selection, selectionArgs, null, null, sortOrder)\n            bookItem -> {\n                val bookId = uri.pathSegments[1]\n                db.query(\"Book\", projection, \"id=?\", arrayOf(bookId), null, null, sortOrder)\n            }\n            categoryDir -> db.query(\"Category\", projection, selection, selectionArgs, null, null, sortOrder)\n            categoryItem -> {\n                val categoryId = uri.pathSegments[1]\n                db.query(\"Category\", projection, \"id=?\", arrayOf(categoryId), null, null, sortOrder)\n            }\n            else -> null\n        }\n        cursor\n    }\n\n    /**\n     * 更新数据\n     * @param uri 更新的URI\n     * @param values 新的值\n     * @param selection WHERE约束条件\n     * @param selectionArgs WHERE约束条件的参数\n     * @return 更新的行数\n     */\n    override fun update(\n        uri: Uri, values: ContentValues?, selection: String?,\n        selectionArgs: Array<String>?\n    ) = dbHelper?.let {\n        val db = it.writableDatabase\n        val updatedRows = when(uriMatcher.match(uri)) {\n            bookDir -> db.update(\"Book\", values, selection, selectionArgs)\n            bookItem -> {\n                val bookId = uri.pathSegments[1]\n                db.update(\"Book\", values, \"id=?\", arrayOf(bookId))\n            }\n            categoryDir -> db.update(\"Category\", values, selection, selectionArgs)\n            categoryItem -> {\n                val categoryId = uri.pathSegments[1]\n                db.update(\"Category\", values, \"id=?\", arrayOf(categoryId))\n            }\n            else -> 0\n        }\n        updatedRows\n    } ?: 0\n}\n```\n\n------\n\n","source":"_posts/探究ContentProvider-Kotlin.md","raw":"---\ntitle: 探究ContentProvider(Kotlin)\ndate: 2025-05-11 22:08:37\ncategories:\n- Android(Kotlin版)\ntags:\n---\n\n# 运行时权限\n\n### 权限机制\n\n- **分类**\n\n  普通权限和危险权限（还包括一些特殊权限但使用不多，不参与讨论）\n\n- **危险权限**\n\n  ![](../img/img56.jpg)\n\n- **特点**\n\n  普通权限直接在AndroidManifest.xml中声明即可\n\n  危险权限需要进行运行时权限处理\n\n  原则上用户一旦同意某一个权限申请，同组的其它权限会自动授权，但不要基于此规则来实现任何逻辑功能\n\n### 运行时申请权限\n\n1.在AndroidManifest.xml中声明权限\n\n```kotlin\n<uses-permission android:name=\"android.permission.CALL_PHONE\"/>\n```\n\n2.检查权限是否授权\n\n```kotlin\n if (ContextCompat.checkSelfPermission(this, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {\n              // 修正权限请求的字符串格式\n                ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.CALL_PHONE), 1) \n            } else {\n                call()\n            }\n```\n\n3.调用onRequestPermissionsResult()方法申请授权\n\n```kotlin\noverride fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<out String>,\n        grantResults: IntArray\n    ) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        when(requestCode){\n            1->{\n                if(grantResults.isNotEmpty()&&grantResults[0]==PackageManager.PERMISSION_GRANTED){\n                    call()\n                }else{\n                   Toast.makeText(this, \"You denied the permission\", Toast.LENGTH_SHORT).show()\n                }\n            }\n        }\n    }\n```\n\n4.把权限授权后执行的逻辑封装\n\n```kotlin\n private fun call() {\n        try {\n            val intent=Intent(Intent.ACTION_CALL)\n            intent.data=Uri.parse(\"tel:10086\")\n            startActivity(intent)\n        }catch (e:SecurityException){\n            e.printStackTrace()\n        }\n    }\n```\n\n------\n\n# ContentProvider基本用法\n\n **1.获取 ContentResolver 实例**\n\n在 Android 中，通常通过上下文（Context）来获取 ContentResolver 实例：\n\n```kotlin\nval contentResolver = context.contentResolver\n```\n\n**2.添加数据**\n\n`insert()` 方法用于在 ContentProvider 中插入新数据，参数说明如下：\n\n- **uri**：目标数据的 URI\n\n- **ContentValues**：存储键值对数据\n\n  ```kotlin\n  val uri = Uri.parse(\"content://com.example.app.provider/city\")\n  val values = ContentValues().apply {\n      put(\"name\", \"Beijing\")\n      put(\"code\", \"BJ\")\n  }\n  val newUri = contentResolver.insert(uri, values)\n  println(\"插入成功，新记录URI：$newUri\")\n  ```\n\n**3.删除数据**\n\n`delete()` 方法用于删除 ContentProvider 中的数据，参数说明如下：\n\n- **uri**：目标数据的 URI\n\n- **selection**：删除条件\n\n- **selectionArgs**：条件参数数组\n\n  ```kotlin\n  val uri = Uri.parse(\"content://com.example.app.provider/city\")\n  val selection = \"id = ?\"\n  val selectionArgs = arrayOf(\"1\")\n  val deleteCount = contentResolver.delete(uri, selection, selectionArgs)\n  println(\"删除了 $deleteCount 条记录\")\n  ```\n\n**4.查询数据**\n\n`query()` 方法用于从 ContentProvider 查询数据，参数说明如下：\n\n- **uri**：需要访问的数据的 URI，例如：`content://com.example.app.provider/city`\n\n- **projection**：需要查询的列数组，如果传入 null，则返回所有列\n\n- **selection**：过滤条件（WHERE 子句），可使用 ? 占位符\n\n- **selectionArgs**：过滤条件对应的参数数组\n\n- **sortOrder**：排序规则\n\n  ```kotlin\n  val uri = Uri.parse(\"content://com.example.app.provider/city\")\n  val projection = arrayOf(\"id\", \"name\", \"code\")\n  val cursor = contentResolver.query(uri, projection, null, null, \"id ASC\")\n  cursor?.use {\n      while (it.moveToNext()) {\n          val id = it.getInt(it.getColumnIndexOrThrow(\"id\"))\n          val name = it.getString(it.getColumnIndexOrThrow(\"name\"))\n          val code = it.getString(it.getColumnIndexOrThrow(\"code\"))\n          println(\"City: id=$id, name=$name, code=$code\")\n      }\n  }\n  ```\n\n**5.更新数据**\n\n`update()` 方法用于更新 ContentProvider 中的数据，参数说明如下：\n\n- **uri**：目标数据的 URI\n\n- **ContentValues**：存储需要更新的字段和值\n\n- **selection**：指定更新条件\n\n- **selectionArgs**：条件参数数组\n\n  ```kotlin\n  val uri = Uri.parse(\"content://com.example.app.provider/city\")\n  val values = ContentValues().apply {\n      put(\"name\", \"Shanghai\")\n  }\n  val selection = \"id = ?\"\n  val selectionArgs = arrayOf(\"1\")\n  val updateCount = contentResolver.update(uri, values, selection, selectionArgs)\n  println(\"更新了 $updateCount 条记录\")\n  ```\n\n------\n\n# 创建ContentProvider\n\n- **新建一个类继承ContentProvider并重写6个方法(onCreate(),query(),insert(),update(),delete(),getType())**\n- **实现数据操作**\n  - **query()**：根据传入的 URI 查询数据，并返回一个 Cursor 对象。\n  - **insert()**：根据传入的 URI 插入数据，返回新插入数据的 URI。\n  - **update()**：根据 URI 更新数据，返回受影响的行数。\n  - **delete()**：根据 URI 删除数据，返回删除的行数。\n  - **getType()**：返回指定 URI 对应的数据 MIME 类型。\n\n- **配置 URI 匹配器 使用 `UriMatcher` 对传入的 URI 进行匹配，以便确定请求类型并执行相应操作。可以在静态代码块中添加匹配规则**\n\n```kotlin\nprivate static final UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\ninit {\n    uriMatcher.addURI(\"your.authority\", \"your_path\", CODE_CONSTANT);\n}\n```\n\n- **在 AndroidManifest.xml 中注册 ContentProvider** 在清单文件中注册你的 ContentProvider：\n\n```kotlin\n<provider\n    android:name=\".YourContentProvider\"\n    android:authorities=\"your.authority\"\n    android:exported=\"true\" />\n```\n\n**注意**：`android:exported` 的值根据你的需求设置为 `true` 或 `false`。\n\n- **通配符**\n\n  *表示匹配任意长度的任意字符\n\n  #表示匹配任意长度的数字\n\n- **MIME字符串组成**\n  1. vnd开头\n  2. 如果内容URI以路径结尾则接**android.cursor.dir/**，如果内容URI以id结尾则接**android.cursor.item/**\n  3. 最后接上vnd.<authority>.<path>\n\n```kotlin\n/**\n * 数据库内容提供器\n * 用于对外共享数据库中的数据，实现跨应用数据访问\n */\nclass DatabaseProvider : ContentProvider() {\n    // URI匹配码\n    private val bookDir = 0      // 访问图书表中的所有数据\n    private val bookItem = 1     // 访问图书表中的单条数据\n    private val categoryDir = 2  // 访问分类表中的所有数据\n    private val categoryItem = 3 // 访问分类表中的单条数据\n    \n    // 内容提供器的唯一标识\n    private val authority = \"com.example.databasetest.provider\"\n    // 数据库帮助类实例\n    private var dbHelper: MyDatabaseHelper? = null\n    \n    /**\n     * 懒加载初始化UriMatcher\n     * 用于匹配内容URI，分别添加四种URI匹配规则\n     */\n    private val uriMatcher by lazy {\n        val matcher = UriMatcher(UriMatcher.NO_MATCH)\n        matcher.addURI(authority, \"book\", bookDir)         // content://com.example.databasetest.provider/book\n        matcher.addURI(authority, \"book/#\", bookItem)      // content://com.example.databasetest.provider/book/1\n        matcher.addURI(authority, \"category\", categoryDir) // content://com.example.databasetest.provider/category\n        matcher.addURI(authority, \"category/#\", categoryItem) // content://com.example.databasetest.provider/category/1\n        matcher\n    }\n\n    /**\n     * 删除数据\n     * @param uri 待删除数据的URI\n     * @param selection WHERE约束条件\n     * @param selectionArgs WHERE约束条件的参数\n     * @return 删除的行数\n     */\n    override fun delete(uri: Uri, selection: String?, selectionArgs: Array<String>?) = dbHelper?.let {\n        val db = it.writableDatabase\n        val deletedRows = when (uriMatcher.match(uri)) {\n            bookDir -> db.delete(\"Book\", selection, selectionArgs)\n            bookItem -> {\n                val bookId = uri.pathSegments[1]  // 获取图书id\n                db.delete(\"Book\", \"id = ?\", arrayOf(bookId))\n            }\n            categoryDir -> db.delete(\"Category\", selection, selectionArgs)\n            categoryItem -> {\n                val categoryId = uri.pathSegments[1]  // 获取分类id\n                db.delete(\"Category\", \"id = ?\", arrayOf(categoryId))\n            }\n            else -> 0\n        }\n        deletedRows\n    } ?: 0\n\n    /**\n     * 根据URI返回MIME类型\n     * vnd.android.cursor.dir/表示返回多条数据\n     * vnd.android.cursor.item/表示返回单条数据\n     */\n    override fun getType(uri: Uri) = when (uriMatcher.match(uri)) {\n        bookDir -> \"vnd.android.cursor.dir/vnd.com.example.databasetest.provider.book\"\n        bookItem -> \"vnd.android.cursor.item/vnd.com.example.databasetest.provider.book\"\n        categoryDir -> \"vnd.android.cursor.dir/vnd.com.example.databasetest.provider.category\"\n        categoryItem -> \"vnd.android.cursor.item/vnd.com.example.databasetest.provider.category\"\n        else -> null\n    }\n\n    /**\n     * 插入数据\n     * @param uri 待插入的位置\n     * @param values 待插入的数据\n     * @return 新插入数据的URI\n     */\n    override fun insert(uri: Uri, values: ContentValues?) = dbHelper?.let {\n        val db = it.writableDatabase\n        val uriReturn = when(uriMatcher.match(uri)) {\n            bookDir, bookItem -> {\n                val newBookId = db.insert(\"Book\", null, values)\n                Uri.parse(\"content://$authority/book/$newBookId\")\n            }\n            categoryDir, categoryItem -> {\n                val newCategoryId = db.insert(\"Category\", null, values)\n                Uri.parse(\"content://$authority/category/$newCategoryId\")\n            }\n            else -> null\n        }\n        uriReturn\n    }\n\n    /**\n     * 初始化内容提供器\n     * @return 初始化是否成功\n     */\n    override fun onCreate() = context?.let {\n        dbHelper = MyDatabaseHelper(it, \"BookStore.db\", 2)\n        true\n    } ?: false\n\n    /**\n     * 查询数据\n     * @param uri 查询的URI\n     * @param projection 查询的列名\n     * @param selection WHERE约束条件\n     * @param selectionArgs WHERE约束条件的参数\n     * @param sortOrder 排序方式\n     * @return 查询的结果集\n     */\n    override fun query(\n        uri: Uri, projection: Array<String>?, selection: String?,\n        selectionArgs: Array<String>?, sortOrder: String?\n    ) = dbHelper?.let {\n        val db = it.readableDatabase\n        val cursor = when(uriMatcher.match(uri)) {\n            bookDir -> db.query(\"Book\", projection, selection, selectionArgs, null, null, sortOrder)\n            bookItem -> {\n                val bookId = uri.pathSegments[1]\n                db.query(\"Book\", projection, \"id=?\", arrayOf(bookId), null, null, sortOrder)\n            }\n            categoryDir -> db.query(\"Category\", projection, selection, selectionArgs, null, null, sortOrder)\n            categoryItem -> {\n                val categoryId = uri.pathSegments[1]\n                db.query(\"Category\", projection, \"id=?\", arrayOf(categoryId), null, null, sortOrder)\n            }\n            else -> null\n        }\n        cursor\n    }\n\n    /**\n     * 更新数据\n     * @param uri 更新的URI\n     * @param values 新的值\n     * @param selection WHERE约束条件\n     * @param selectionArgs WHERE约束条件的参数\n     * @return 更新的行数\n     */\n    override fun update(\n        uri: Uri, values: ContentValues?, selection: String?,\n        selectionArgs: Array<String>?\n    ) = dbHelper?.let {\n        val db = it.writableDatabase\n        val updatedRows = when(uriMatcher.match(uri)) {\n            bookDir -> db.update(\"Book\", values, selection, selectionArgs)\n            bookItem -> {\n                val bookId = uri.pathSegments[1]\n                db.update(\"Book\", values, \"id=?\", arrayOf(bookId))\n            }\n            categoryDir -> db.update(\"Category\", values, selection, selectionArgs)\n            categoryItem -> {\n                val categoryId = uri.pathSegments[1]\n                db.update(\"Category\", values, \"id=?\", arrayOf(categoryId))\n            }\n            else -> 0\n        }\n        updatedRows\n    } ?: 0\n}\n```\n\n------\n\n","slug":"探究ContentProvider-Kotlin","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcl002ds4s7aie2atk5","content":"<h1 id=\"运行时权限\"><a href=\"#运行时权限\" class=\"headerlink\" title=\"运行时权限\"></a>运行时权限</h1><h3 id=\"权限机制\"><a href=\"#权限机制\" class=\"headerlink\" title=\"权限机制\"></a>权限机制</h3><ul>\n<li><p><strong>分类</strong></p>\n<p>普通权限和危险权限（还包括一些特殊权限但使用不多，不参与讨论）</p>\n</li>\n<li><p><strong>危险权限</strong></p>\n<p><img src=\"/../img/img56.jpg\"></p>\n</li>\n<li><p><strong>特点</strong></p>\n<p>普通权限直接在AndroidManifest.xml中声明即可</p>\n<p>危险权限需要进行运行时权限处理</p>\n<p>原则上用户一旦同意某一个权限申请，同组的其它权限会自动授权，但不要基于此规则来实现任何逻辑功能</p>\n</li>\n</ul>\n<h3 id=\"运行时申请权限\"><a href=\"#运行时申请权限\" class=\"headerlink\" title=\"运行时申请权限\"></a>运行时申请权限</h3><p>1.在AndroidManifest.xml中声明权限</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.CALL_PHONE&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2.检查权限是否授权</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ContextCompat.checkSelfPermission(<span class=\"keyword\">this</span>, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">             <span class=\"comment\">// 修正权限请求的字符串格式</span></span><br><span class=\"line\">               ActivityCompat.requestPermissions(<span class=\"keyword\">this</span>, arrayOf(Manifest.permission.CALL_PHONE), <span class=\"number\">1</span>) </span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               call()</span><br><span class=\"line\">           &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.调用onRequestPermissionsResult()方法申请授权</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        requestCode: <span class=\"type\">Int</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        permissions: <span class=\"type\">Array</span>&lt;<span class=\"type\">out</span> <span class=\"type\">String</span>&gt;,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        grantResults: <span class=\"type\">IntArray</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults)</span><br><span class=\"line\">        <span class=\"keyword\">when</span>(requestCode)&#123;</span><br><span class=\"line\">            <span class=\"number\">1</span>-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grantResults.isNotEmpty()&amp;&amp;grantResults[<span class=\"number\">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                    call()</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                   Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;You denied the permission&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.把权限授权后执行的逻辑封装</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">val</span> intent=Intent(Intent.ACTION_CALL)</span><br><span class=\"line\">           intent.<span class=\"keyword\">data</span>=Uri.parse(<span class=\"string\">&quot;tel:10086&quot;</span>)</span><br><span class=\"line\">           startActivity(intent)</span><br><span class=\"line\">       &#125;<span class=\"keyword\">catch</span> (e:SecurityException)&#123;</span><br><span class=\"line\">           e.printStackTrace()</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ContentProvider基本用法\"><a href=\"#ContentProvider基本用法\" class=\"headerlink\" title=\"ContentProvider基本用法\"></a>ContentProvider基本用法</h1><p> <strong>1.获取 ContentResolver 实例</strong></p>\n<p>在 Android 中，通常通过上下文（Context）来获取 ContentResolver 实例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> contentResolver = context.contentResolver</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.添加数据</strong></p>\n<p><code>insert()</code> 方法用于在 ContentProvider 中插入新数据，参数说明如下：</p>\n<ul>\n<li><p><strong>uri</strong>：目标数据的 URI</p>\n</li>\n<li><p><strong>ContentValues</strong>：存储键值对数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> uri = Uri.parse(<span class=\"string\">&quot;content://com.example.app.provider/city&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> values = ContentValues().apply &#123;</span><br><span class=\"line\">    put(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Beijing&quot;</span>)</span><br><span class=\"line\">    put(<span class=\"string\">&quot;code&quot;</span>, <span class=\"string\">&quot;BJ&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">val</span> newUri = contentResolver.insert(uri, values)</span><br><span class=\"line\">println(<span class=\"string\">&quot;插入成功，新记录URI：<span class=\"variable\">$newUri</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>3.删除数据</strong></p>\n<p><code>delete()</code> 方法用于删除 ContentProvider 中的数据，参数说明如下：</p>\n<ul>\n<li><p><strong>uri</strong>：目标数据的 URI</p>\n</li>\n<li><p><strong>selection</strong>：删除条件</p>\n</li>\n<li><p><strong>selectionArgs</strong>：条件参数数组</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> uri = Uri.parse(<span class=\"string\">&quot;content://com.example.app.provider/city&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> selection = <span class=\"string\">&quot;id = ?&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> selectionArgs = arrayOf(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> deleteCount = contentResolver.delete(uri, selection, selectionArgs)</span><br><span class=\"line\">println(<span class=\"string\">&quot;删除了 <span class=\"variable\">$deleteCount</span> 条记录&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>4.查询数据</strong></p>\n<p><code>query()</code> 方法用于从 ContentProvider 查询数据，参数说明如下：</p>\n<ul>\n<li><p><strong>uri</strong>：需要访问的数据的 URI，例如：<code>content://com.example.app.provider/city</code></p>\n</li>\n<li><p><strong>projection</strong>：需要查询的列数组，如果传入 null，则返回所有列</p>\n</li>\n<li><p><strong>selection</strong>：过滤条件（WHERE 子句），可使用 ? 占位符</p>\n</li>\n<li><p><strong>selectionArgs</strong>：过滤条件对应的参数数组</p>\n</li>\n<li><p><strong>sortOrder</strong>：排序规则</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> uri = Uri.parse(<span class=\"string\">&quot;content://com.example.app.provider/city&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> projection = arrayOf(<span class=\"string\">&quot;id&quot;</span>, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;code&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> cursor = contentResolver.query(uri, projection, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">&quot;id ASC&quot;</span>)</span><br><span class=\"line\">cursor?.use &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (it.moveToNext()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> id = it.getInt(it.getColumnIndexOrThrow(<span class=\"string\">&quot;id&quot;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">val</span> name = it.getString(it.getColumnIndexOrThrow(<span class=\"string\">&quot;name&quot;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">val</span> code = it.getString(it.getColumnIndexOrThrow(<span class=\"string\">&quot;code&quot;</span>))</span><br><span class=\"line\">        println(<span class=\"string\">&quot;City: id=<span class=\"variable\">$id</span>, name=<span class=\"variable\">$name</span>, code=<span class=\"variable\">$code</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>5.更新数据</strong></p>\n<p><code>update()</code> 方法用于更新 ContentProvider 中的数据，参数说明如下：</p>\n<ul>\n<li><p><strong>uri</strong>：目标数据的 URI</p>\n</li>\n<li><p><strong>ContentValues</strong>：存储需要更新的字段和值</p>\n</li>\n<li><p><strong>selection</strong>：指定更新条件</p>\n</li>\n<li><p><strong>selectionArgs</strong>：条件参数数组</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> uri = Uri.parse(<span class=\"string\">&quot;content://com.example.app.provider/city&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> values = ContentValues().apply &#123;</span><br><span class=\"line\">    put(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Shanghai&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">val</span> selection = <span class=\"string\">&quot;id = ?&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> selectionArgs = arrayOf(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> updateCount = contentResolver.update(uri, values, selection, selectionArgs)</span><br><span class=\"line\">println(<span class=\"string\">&quot;更新了 <span class=\"variable\">$updateCount</span> 条记录&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"创建ContentProvider\"><a href=\"#创建ContentProvider\" class=\"headerlink\" title=\"创建ContentProvider\"></a>创建ContentProvider</h1><ul>\n<li><p><strong>新建一个类继承ContentProvider并重写6个方法(onCreate(),query(),insert(),update(),delete(),getType())</strong></p>\n</li>\n<li><p><strong>实现数据操作</strong></p>\n<ul>\n<li><strong>query()</strong>：根据传入的 URI 查询数据，并返回一个 Cursor 对象。</li>\n<li><strong>insert()</strong>：根据传入的 URI 插入数据，返回新插入数据的 URI。</li>\n<li><strong>update()</strong>：根据 URI 更新数据，返回受影响的行数。</li>\n<li><strong>delete()</strong>：根据 URI 删除数据，返回删除的行数。</li>\n<li><strong>getType()</strong>：返回指定 URI 对应的数据 MIME 类型。</li>\n</ul>\n</li>\n<li><p><strong>配置 URI 匹配器 使用 <code>UriMatcher</code> 对传入的 URI 进行匹配，以便确定请求类型并执行相应操作。可以在静态代码块中添加匹配规则</strong></p>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);</span><br><span class=\"line\"><span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">    uriMatcher.addURI(<span class=\"string\">&quot;your.authority&quot;</span>, <span class=\"string\">&quot;your_path&quot;</span>, CODE_CONSTANT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>在 AndroidManifest.xml 中注册 ContentProvider</strong> 在清单文件中注册你的 ContentProvider：</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;provider</span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;.YourContentProvider&quot;</span></span><br><span class=\"line\">    android:authorities=<span class=\"string\">&quot;your.authority&quot;</span></span><br><span class=\"line\">    android:exported=<span class=\"string\">&quot;true&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：<code>android:exported</code> 的值根据你的需求设置为 <code>true</code> 或 <code>false</code>。</p>\n<ul>\n<li><p><strong>通配符</strong></p>\n<p>*表示匹配任意长度的任意字符</p>\n<p>#表示匹配任意长度的数字</p>\n</li>\n<li><p><strong>MIME字符串组成</strong></p>\n<ol>\n<li>vnd开头</li>\n<li>如果内容URI以路径结尾则接<strong>android.cursor.dir&#x2F;</strong>，如果内容URI以id结尾则接<strong>android.cursor.item&#x2F;</strong></li>\n<li>最后接上vnd.<authority>.<path></li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据库内容提供器</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于对外共享数据库中的数据，实现跨应用数据访问</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DatabaseProvider</span> : <span class=\"type\">ContentProvider</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// URI匹配码</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> bookDir = <span class=\"number\">0</span>      <span class=\"comment\">// 访问图书表中的所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> bookItem = <span class=\"number\">1</span>     <span class=\"comment\">// 访问图书表中的单条数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> categoryDir = <span class=\"number\">2</span>  <span class=\"comment\">// 访问分类表中的所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> categoryItem = <span class=\"number\">3</span> <span class=\"comment\">// 访问分类表中的单条数据</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 内容提供器的唯一标识</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> authority = <span class=\"string\">&quot;com.example.databasetest.provider&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// 数据库帮助类实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> dbHelper: MyDatabaseHelper? = <span class=\"literal\">null</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 懒加载初始化UriMatcher</span></span><br><span class=\"line\"><span class=\"comment\">     * 用于匹配内容URI，分别添加四种URI匹配规则</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> uriMatcher <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> matcher = UriMatcher(UriMatcher.NO_MATCH)</span><br><span class=\"line\">        matcher.addURI(authority, <span class=\"string\">&quot;book&quot;</span>, bookDir)         <span class=\"comment\">// content://com.example.databasetest.provider/book</span></span><br><span class=\"line\">        matcher.addURI(authority, <span class=\"string\">&quot;book/#&quot;</span>, bookItem)      <span class=\"comment\">// content://com.example.databasetest.provider/book/1</span></span><br><span class=\"line\">        matcher.addURI(authority, <span class=\"string\">&quot;category&quot;</span>, categoryDir) <span class=\"comment\">// content://com.example.databasetest.provider/category</span></span><br><span class=\"line\">        matcher.addURI(authority, <span class=\"string\">&quot;category/#&quot;</span>, categoryItem) <span class=\"comment\">// content://com.example.databasetest.provider/category/1</span></span><br><span class=\"line\">        matcher</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> uri 待删除数据的URI</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> selection WHERE约束条件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> selectionArgs WHERE约束条件的参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 删除的行数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">delete</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>, selection: <span class=\"type\">String</span>?, selectionArgs: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?)</span></span> = dbHelper?.let &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> db = it.writableDatabase</span><br><span class=\"line\">        <span class=\"keyword\">val</span> deletedRows = <span class=\"keyword\">when</span> (uriMatcher.match(uri)) &#123;</span><br><span class=\"line\">            bookDir -&gt; db.delete(<span class=\"string\">&quot;Book&quot;</span>, selection, selectionArgs)</span><br><span class=\"line\">            bookItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> bookId = uri.pathSegments[<span class=\"number\">1</span>]  <span class=\"comment\">// 获取图书id</span></span><br><span class=\"line\">                db.delete(<span class=\"string\">&quot;Book&quot;</span>, <span class=\"string\">&quot;id = ?&quot;</span>, arrayOf(bookId))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            categoryDir -&gt; db.delete(<span class=\"string\">&quot;Category&quot;</span>, selection, selectionArgs)</span><br><span class=\"line\">            categoryItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> categoryId = uri.pathSegments[<span class=\"number\">1</span>]  <span class=\"comment\">// 获取分类id</span></span><br><span class=\"line\">                db.delete(<span class=\"string\">&quot;Category&quot;</span>, <span class=\"string\">&quot;id = ?&quot;</span>, arrayOf(categoryId))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        deletedRows</span><br><span class=\"line\">    &#125; ?: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据URI返回MIME类型</span></span><br><span class=\"line\"><span class=\"comment\">     * vnd.android.cursor.dir/表示返回多条数据</span></span><br><span class=\"line\"><span class=\"comment\">     * vnd.android.cursor.item/表示返回单条数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getType</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>)</span></span> = <span class=\"keyword\">when</span> (uriMatcher.match(uri)) &#123;</span><br><span class=\"line\">        bookDir -&gt; <span class=\"string\">&quot;vnd.android.cursor.dir/vnd.com.example.databasetest.provider.book&quot;</span></span><br><span class=\"line\">        bookItem -&gt; <span class=\"string\">&quot;vnd.android.cursor.item/vnd.com.example.databasetest.provider.book&quot;</span></span><br><span class=\"line\">        categoryDir -&gt; <span class=\"string\">&quot;vnd.android.cursor.dir/vnd.com.example.databasetest.provider.category&quot;</span></span><br><span class=\"line\">        categoryItem -&gt; <span class=\"string\">&quot;vnd.android.cursor.item/vnd.com.example.databasetest.provider.category&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> -&gt; <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> uri 待插入的位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values 待插入的数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 新插入数据的URI</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">insert</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>, values: <span class=\"type\">ContentValues</span>?)</span></span> = dbHelper?.let &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> db = it.writableDatabase</span><br><span class=\"line\">        <span class=\"keyword\">val</span> uriReturn = <span class=\"keyword\">when</span>(uriMatcher.match(uri)) &#123;</span><br><span class=\"line\">            bookDir, bookItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> newBookId = db.insert(<span class=\"string\">&quot;Book&quot;</span>, <span class=\"literal\">null</span>, values)</span><br><span class=\"line\">                Uri.parse(<span class=\"string\">&quot;content://<span class=\"variable\">$authority</span>/book/<span class=\"variable\">$newBookId</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            categoryDir, categoryItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> newCategoryId = db.insert(<span class=\"string\">&quot;Category&quot;</span>, <span class=\"literal\">null</span>, values)</span><br><span class=\"line\">                Uri.parse(<span class=\"string\">&quot;content://<span class=\"variable\">$authority</span>/category/<span class=\"variable\">$newCategoryId</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        uriReturn</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化内容提供器</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 初始化是否成功</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> = context?.let &#123;</span><br><span class=\"line\">        dbHelper = MyDatabaseHelper(it, <span class=\"string\">&quot;BookStore.db&quot;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; ?: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> uri 查询的URI</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> projection 查询的列名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> selection WHERE约束条件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> selectionArgs WHERE约束条件的参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sortOrder 排序方式</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 查询的结果集</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">query</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        uri: <span class=\"type\">Uri</span>, projection: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?, selection: <span class=\"type\">String</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        selectionArgs: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?, sortOrder: <span class=\"type\">String</span>?</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span> = dbHelper?.let &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> db = it.readableDatabase</span><br><span class=\"line\">        <span class=\"keyword\">val</span> cursor = <span class=\"keyword\">when</span>(uriMatcher.match(uri)) &#123;</span><br><span class=\"line\">            bookDir -&gt; db.query(<span class=\"string\">&quot;Book&quot;</span>, projection, selection, selectionArgs, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, sortOrder)</span><br><span class=\"line\">            bookItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> bookId = uri.pathSegments[<span class=\"number\">1</span>]</span><br><span class=\"line\">                db.query(<span class=\"string\">&quot;Book&quot;</span>, projection, <span class=\"string\">&quot;id=?&quot;</span>, arrayOf(bookId), <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, sortOrder)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            categoryDir -&gt; db.query(<span class=\"string\">&quot;Category&quot;</span>, projection, selection, selectionArgs, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, sortOrder)</span><br><span class=\"line\">            categoryItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> categoryId = uri.pathSegments[<span class=\"number\">1</span>]</span><br><span class=\"line\">                db.query(<span class=\"string\">&quot;Category&quot;</span>, projection, <span class=\"string\">&quot;id=?&quot;</span>, arrayOf(categoryId), <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, sortOrder)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cursor</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> uri 更新的URI</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values 新的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> selection WHERE约束条件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> selectionArgs WHERE约束条件的参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 更新的行数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">update</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        uri: <span class=\"type\">Uri</span>, values: <span class=\"type\">ContentValues</span>?, selection: <span class=\"type\">String</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        selectionArgs: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span> = dbHelper?.let &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> db = it.writableDatabase</span><br><span class=\"line\">        <span class=\"keyword\">val</span> updatedRows = <span class=\"keyword\">when</span>(uriMatcher.match(uri)) &#123;</span><br><span class=\"line\">            bookDir -&gt; db.update(<span class=\"string\">&quot;Book&quot;</span>, values, selection, selectionArgs)</span><br><span class=\"line\">            bookItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> bookId = uri.pathSegments[<span class=\"number\">1</span>]</span><br><span class=\"line\">                db.update(<span class=\"string\">&quot;Book&quot;</span>, values, <span class=\"string\">&quot;id=?&quot;</span>, arrayOf(bookId))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            categoryDir -&gt; db.update(<span class=\"string\">&quot;Category&quot;</span>, values, selection, selectionArgs)</span><br><span class=\"line\">            categoryItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> categoryId = uri.pathSegments[<span class=\"number\">1</span>]</span><br><span class=\"line\">                db.update(<span class=\"string\">&quot;Category&quot;</span>, values, <span class=\"string\">&quot;id=?&quot;</span>, arrayOf(categoryId))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        updatedRows</span><br><span class=\"line\">    &#125; ?: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"运行时权限\n权限机制\n * 分类\n   \n   普通权限和危险权限（还包括一些特殊权限但使用不多，不参与讨论）\n   \n   \n * 危险权限\n   \n   \n   \n   \n * 特点\n   \n   普通权限直接在AndroidManifest.xml中声明即可\n   \n   危险权限需要进行运行时权限处理\n   \n   原则上用户一旦同意某一个权限申请，同组的其它权限会自动授权，但不要基于此规则来实现任何逻辑功能\n   \n   \n\n运行时申请权限\n1.在AndroidManifest.xml中声明权限\n\n1\n\n\n<uses-permission android:name=\"android.","more":"<h1 id=\"运行时权限\"><a href=\"#运行时权限\" class=\"headerlink\" title=\"运行时权限\"></a>运行时权限</h1><h3 id=\"权限机制\"><a href=\"#权限机制\" class=\"headerlink\" title=\"权限机制\"></a>权限机制</h3><ul>\n<li><p><strong>分类</strong></p>\n<p>普通权限和危险权限（还包括一些特殊权限但使用不多，不参与讨论）</p>\n</li>\n<li><p><strong>危险权限</strong></p>\n<p><img src=\"/../img/img56.jpg\"></p>\n</li>\n<li><p><strong>特点</strong></p>\n<p>普通权限直接在AndroidManifest.xml中声明即可</p>\n<p>危险权限需要进行运行时权限处理</p>\n<p>原则上用户一旦同意某一个权限申请，同组的其它权限会自动授权，但不要基于此规则来实现任何逻辑功能</p>\n</li>\n</ul>\n<h3 id=\"运行时申请权限\"><a href=\"#运行时申请权限\" class=\"headerlink\" title=\"运行时申请权限\"></a>运行时申请权限</h3><p>1.在AndroidManifest.xml中声明权限</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.CALL_PHONE&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2.检查权限是否授权</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ContextCompat.checkSelfPermission(<span class=\"keyword\">this</span>, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">             <span class=\"comment\">// 修正权限请求的字符串格式</span></span><br><span class=\"line\">               ActivityCompat.requestPermissions(<span class=\"keyword\">this</span>, arrayOf(Manifest.permission.CALL_PHONE), <span class=\"number\">1</span>) </span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               call()</span><br><span class=\"line\">           &#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.调用onRequestPermissionsResult()方法申请授权</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        requestCode: <span class=\"type\">Int</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        permissions: <span class=\"type\">Array</span>&lt;<span class=\"type\">out</span> <span class=\"type\">String</span>&gt;,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        grantResults: <span class=\"type\">IntArray</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults)</span><br><span class=\"line\">        <span class=\"keyword\">when</span>(requestCode)&#123;</span><br><span class=\"line\">            <span class=\"number\">1</span>-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grantResults.isNotEmpty()&amp;&amp;grantResults[<span class=\"number\">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                    call()</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                   Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;You denied the permission&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.把权限授权后执行的逻辑封装</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">call</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">val</span> intent=Intent(Intent.ACTION_CALL)</span><br><span class=\"line\">           intent.<span class=\"keyword\">data</span>=Uri.parse(<span class=\"string\">&quot;tel:10086&quot;</span>)</span><br><span class=\"line\">           startActivity(intent)</span><br><span class=\"line\">       &#125;<span class=\"keyword\">catch</span> (e:SecurityException)&#123;</span><br><span class=\"line\">           e.printStackTrace()</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ContentProvider基本用法\"><a href=\"#ContentProvider基本用法\" class=\"headerlink\" title=\"ContentProvider基本用法\"></a>ContentProvider基本用法</h1><p> <strong>1.获取 ContentResolver 实例</strong></p>\n<p>在 Android 中，通常通过上下文（Context）来获取 ContentResolver 实例：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> contentResolver = context.contentResolver</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.添加数据</strong></p>\n<p><code>insert()</code> 方法用于在 ContentProvider 中插入新数据，参数说明如下：</p>\n<ul>\n<li><p><strong>uri</strong>：目标数据的 URI</p>\n</li>\n<li><p><strong>ContentValues</strong>：存储键值对数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> uri = Uri.parse(<span class=\"string\">&quot;content://com.example.app.provider/city&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> values = ContentValues().apply &#123;</span><br><span class=\"line\">    put(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Beijing&quot;</span>)</span><br><span class=\"line\">    put(<span class=\"string\">&quot;code&quot;</span>, <span class=\"string\">&quot;BJ&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">val</span> newUri = contentResolver.insert(uri, values)</span><br><span class=\"line\">println(<span class=\"string\">&quot;插入成功，新记录URI：<span class=\"variable\">$newUri</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>3.删除数据</strong></p>\n<p><code>delete()</code> 方法用于删除 ContentProvider 中的数据，参数说明如下：</p>\n<ul>\n<li><p><strong>uri</strong>：目标数据的 URI</p>\n</li>\n<li><p><strong>selection</strong>：删除条件</p>\n</li>\n<li><p><strong>selectionArgs</strong>：条件参数数组</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> uri = Uri.parse(<span class=\"string\">&quot;content://com.example.app.provider/city&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> selection = <span class=\"string\">&quot;id = ?&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> selectionArgs = arrayOf(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> deleteCount = contentResolver.delete(uri, selection, selectionArgs)</span><br><span class=\"line\">println(<span class=\"string\">&quot;删除了 <span class=\"variable\">$deleteCount</span> 条记录&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>4.查询数据</strong></p>\n<p><code>query()</code> 方法用于从 ContentProvider 查询数据，参数说明如下：</p>\n<ul>\n<li><p><strong>uri</strong>：需要访问的数据的 URI，例如：<code>content://com.example.app.provider/city</code></p>\n</li>\n<li><p><strong>projection</strong>：需要查询的列数组，如果传入 null，则返回所有列</p>\n</li>\n<li><p><strong>selection</strong>：过滤条件（WHERE 子句），可使用 ? 占位符</p>\n</li>\n<li><p><strong>selectionArgs</strong>：过滤条件对应的参数数组</p>\n</li>\n<li><p><strong>sortOrder</strong>：排序规则</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> uri = Uri.parse(<span class=\"string\">&quot;content://com.example.app.provider/city&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> projection = arrayOf(<span class=\"string\">&quot;id&quot;</span>, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;code&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> cursor = contentResolver.query(uri, projection, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">&quot;id ASC&quot;</span>)</span><br><span class=\"line\">cursor?.use &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (it.moveToNext()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> id = it.getInt(it.getColumnIndexOrThrow(<span class=\"string\">&quot;id&quot;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">val</span> name = it.getString(it.getColumnIndexOrThrow(<span class=\"string\">&quot;name&quot;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">val</span> code = it.getString(it.getColumnIndexOrThrow(<span class=\"string\">&quot;code&quot;</span>))</span><br><span class=\"line\">        println(<span class=\"string\">&quot;City: id=<span class=\"variable\">$id</span>, name=<span class=\"variable\">$name</span>, code=<span class=\"variable\">$code</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>5.更新数据</strong></p>\n<p><code>update()</code> 方法用于更新 ContentProvider 中的数据，参数说明如下：</p>\n<ul>\n<li><p><strong>uri</strong>：目标数据的 URI</p>\n</li>\n<li><p><strong>ContentValues</strong>：存储需要更新的字段和值</p>\n</li>\n<li><p><strong>selection</strong>：指定更新条件</p>\n</li>\n<li><p><strong>selectionArgs</strong>：条件参数数组</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> uri = Uri.parse(<span class=\"string\">&quot;content://com.example.app.provider/city&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> values = ContentValues().apply &#123;</span><br><span class=\"line\">    put(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Shanghai&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">val</span> selection = <span class=\"string\">&quot;id = ?&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> selectionArgs = arrayOf(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> updateCount = contentResolver.update(uri, values, selection, selectionArgs)</span><br><span class=\"line\">println(<span class=\"string\">&quot;更新了 <span class=\"variable\">$updateCount</span> 条记录&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"创建ContentProvider\"><a href=\"#创建ContentProvider\" class=\"headerlink\" title=\"创建ContentProvider\"></a>创建ContentProvider</h1><ul>\n<li><p><strong>新建一个类继承ContentProvider并重写6个方法(onCreate(),query(),insert(),update(),delete(),getType())</strong></p>\n</li>\n<li><p><strong>实现数据操作</strong></p>\n<ul>\n<li><strong>query()</strong>：根据传入的 URI 查询数据，并返回一个 Cursor 对象。</li>\n<li><strong>insert()</strong>：根据传入的 URI 插入数据，返回新插入数据的 URI。</li>\n<li><strong>update()</strong>：根据 URI 更新数据，返回受影响的行数。</li>\n<li><strong>delete()</strong>：根据 URI 删除数据，返回删除的行数。</li>\n<li><strong>getType()</strong>：返回指定 URI 对应的数据 MIME 类型。</li>\n</ul>\n</li>\n<li><p><strong>配置 URI 匹配器 使用 <code>UriMatcher</code> 对传入的 URI 进行匹配，以便确定请求类型并执行相应操作。可以在静态代码块中添加匹配规则</strong></p>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);</span><br><span class=\"line\"><span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">    uriMatcher.addURI(<span class=\"string\">&quot;your.authority&quot;</span>, <span class=\"string\">&quot;your_path&quot;</span>, CODE_CONSTANT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>在 AndroidManifest.xml 中注册 ContentProvider</strong> 在清单文件中注册你的 ContentProvider：</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;provider</span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;.YourContentProvider&quot;</span></span><br><span class=\"line\">    android:authorities=<span class=\"string\">&quot;your.authority&quot;</span></span><br><span class=\"line\">    android:exported=<span class=\"string\">&quot;true&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：<code>android:exported</code> 的值根据你的需求设置为 <code>true</code> 或 <code>false</code>。</p>\n<ul>\n<li><p><strong>通配符</strong></p>\n<p>*表示匹配任意长度的任意字符</p>\n<p>#表示匹配任意长度的数字</p>\n</li>\n<li><p><strong>MIME字符串组成</strong></p>\n<ol>\n<li>vnd开头</li>\n<li>如果内容URI以路径结尾则接<strong>android.cursor.dir&#x2F;</strong>，如果内容URI以id结尾则接<strong>android.cursor.item&#x2F;</strong></li>\n<li>最后接上vnd.<authority>.<path></li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据库内容提供器</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于对外共享数据库中的数据，实现跨应用数据访问</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DatabaseProvider</span> : <span class=\"type\">ContentProvider</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// URI匹配码</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> bookDir = <span class=\"number\">0</span>      <span class=\"comment\">// 访问图书表中的所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> bookItem = <span class=\"number\">1</span>     <span class=\"comment\">// 访问图书表中的单条数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> categoryDir = <span class=\"number\">2</span>  <span class=\"comment\">// 访问分类表中的所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> categoryItem = <span class=\"number\">3</span> <span class=\"comment\">// 访问分类表中的单条数据</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 内容提供器的唯一标识</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> authority = <span class=\"string\">&quot;com.example.databasetest.provider&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// 数据库帮助类实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> dbHelper: MyDatabaseHelper? = <span class=\"literal\">null</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 懒加载初始化UriMatcher</span></span><br><span class=\"line\"><span class=\"comment\">     * 用于匹配内容URI，分别添加四种URI匹配规则</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> uriMatcher <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> matcher = UriMatcher(UriMatcher.NO_MATCH)</span><br><span class=\"line\">        matcher.addURI(authority, <span class=\"string\">&quot;book&quot;</span>, bookDir)         <span class=\"comment\">// content://com.example.databasetest.provider/book</span></span><br><span class=\"line\">        matcher.addURI(authority, <span class=\"string\">&quot;book/#&quot;</span>, bookItem)      <span class=\"comment\">// content://com.example.databasetest.provider/book/1</span></span><br><span class=\"line\">        matcher.addURI(authority, <span class=\"string\">&quot;category&quot;</span>, categoryDir) <span class=\"comment\">// content://com.example.databasetest.provider/category</span></span><br><span class=\"line\">        matcher.addURI(authority, <span class=\"string\">&quot;category/#&quot;</span>, categoryItem) <span class=\"comment\">// content://com.example.databasetest.provider/category/1</span></span><br><span class=\"line\">        matcher</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> uri 待删除数据的URI</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> selection WHERE约束条件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> selectionArgs WHERE约束条件的参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 删除的行数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">delete</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>, selection: <span class=\"type\">String</span>?, selectionArgs: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?)</span></span> = dbHelper?.let &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> db = it.writableDatabase</span><br><span class=\"line\">        <span class=\"keyword\">val</span> deletedRows = <span class=\"keyword\">when</span> (uriMatcher.match(uri)) &#123;</span><br><span class=\"line\">            bookDir -&gt; db.delete(<span class=\"string\">&quot;Book&quot;</span>, selection, selectionArgs)</span><br><span class=\"line\">            bookItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> bookId = uri.pathSegments[<span class=\"number\">1</span>]  <span class=\"comment\">// 获取图书id</span></span><br><span class=\"line\">                db.delete(<span class=\"string\">&quot;Book&quot;</span>, <span class=\"string\">&quot;id = ?&quot;</span>, arrayOf(bookId))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            categoryDir -&gt; db.delete(<span class=\"string\">&quot;Category&quot;</span>, selection, selectionArgs)</span><br><span class=\"line\">            categoryItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> categoryId = uri.pathSegments[<span class=\"number\">1</span>]  <span class=\"comment\">// 获取分类id</span></span><br><span class=\"line\">                db.delete(<span class=\"string\">&quot;Category&quot;</span>, <span class=\"string\">&quot;id = ?&quot;</span>, arrayOf(categoryId))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        deletedRows</span><br><span class=\"line\">    &#125; ?: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据URI返回MIME类型</span></span><br><span class=\"line\"><span class=\"comment\">     * vnd.android.cursor.dir/表示返回多条数据</span></span><br><span class=\"line\"><span class=\"comment\">     * vnd.android.cursor.item/表示返回单条数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getType</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>)</span></span> = <span class=\"keyword\">when</span> (uriMatcher.match(uri)) &#123;</span><br><span class=\"line\">        bookDir -&gt; <span class=\"string\">&quot;vnd.android.cursor.dir/vnd.com.example.databasetest.provider.book&quot;</span></span><br><span class=\"line\">        bookItem -&gt; <span class=\"string\">&quot;vnd.android.cursor.item/vnd.com.example.databasetest.provider.book&quot;</span></span><br><span class=\"line\">        categoryDir -&gt; <span class=\"string\">&quot;vnd.android.cursor.dir/vnd.com.example.databasetest.provider.category&quot;</span></span><br><span class=\"line\">        categoryItem -&gt; <span class=\"string\">&quot;vnd.android.cursor.item/vnd.com.example.databasetest.provider.category&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> -&gt; <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> uri 待插入的位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values 待插入的数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 新插入数据的URI</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">insert</span><span class=\"params\">(uri: <span class=\"type\">Uri</span>, values: <span class=\"type\">ContentValues</span>?)</span></span> = dbHelper?.let &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> db = it.writableDatabase</span><br><span class=\"line\">        <span class=\"keyword\">val</span> uriReturn = <span class=\"keyword\">when</span>(uriMatcher.match(uri)) &#123;</span><br><span class=\"line\">            bookDir, bookItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> newBookId = db.insert(<span class=\"string\">&quot;Book&quot;</span>, <span class=\"literal\">null</span>, values)</span><br><span class=\"line\">                Uri.parse(<span class=\"string\">&quot;content://<span class=\"variable\">$authority</span>/book/<span class=\"variable\">$newBookId</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            categoryDir, categoryItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> newCategoryId = db.insert(<span class=\"string\">&quot;Category&quot;</span>, <span class=\"literal\">null</span>, values)</span><br><span class=\"line\">                Uri.parse(<span class=\"string\">&quot;content://<span class=\"variable\">$authority</span>/category/<span class=\"variable\">$newCategoryId</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        uriReturn</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化内容提供器</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 初始化是否成功</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> = context?.let &#123;</span><br><span class=\"line\">        dbHelper = MyDatabaseHelper(it, <span class=\"string\">&quot;BookStore.db&quot;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; ?: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> uri 查询的URI</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> projection 查询的列名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> selection WHERE约束条件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> selectionArgs WHERE约束条件的参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sortOrder 排序方式</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 查询的结果集</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">query</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        uri: <span class=\"type\">Uri</span>, projection: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?, selection: <span class=\"type\">String</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        selectionArgs: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?, sortOrder: <span class=\"type\">String</span>?</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span> = dbHelper?.let &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> db = it.readableDatabase</span><br><span class=\"line\">        <span class=\"keyword\">val</span> cursor = <span class=\"keyword\">when</span>(uriMatcher.match(uri)) &#123;</span><br><span class=\"line\">            bookDir -&gt; db.query(<span class=\"string\">&quot;Book&quot;</span>, projection, selection, selectionArgs, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, sortOrder)</span><br><span class=\"line\">            bookItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> bookId = uri.pathSegments[<span class=\"number\">1</span>]</span><br><span class=\"line\">                db.query(<span class=\"string\">&quot;Book&quot;</span>, projection, <span class=\"string\">&quot;id=?&quot;</span>, arrayOf(bookId), <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, sortOrder)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            categoryDir -&gt; db.query(<span class=\"string\">&quot;Category&quot;</span>, projection, selection, selectionArgs, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, sortOrder)</span><br><span class=\"line\">            categoryItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> categoryId = uri.pathSegments[<span class=\"number\">1</span>]</span><br><span class=\"line\">                db.query(<span class=\"string\">&quot;Category&quot;</span>, projection, <span class=\"string\">&quot;id=?&quot;</span>, arrayOf(categoryId), <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, sortOrder)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cursor</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> uri 更新的URI</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values 新的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> selection WHERE约束条件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> selectionArgs WHERE约束条件的参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 更新的行数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">update</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        uri: <span class=\"type\">Uri</span>, values: <span class=\"type\">ContentValues</span>?, selection: <span class=\"type\">String</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        selectionArgs: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;?</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span> = dbHelper?.let &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> db = it.writableDatabase</span><br><span class=\"line\">        <span class=\"keyword\">val</span> updatedRows = <span class=\"keyword\">when</span>(uriMatcher.match(uri)) &#123;</span><br><span class=\"line\">            bookDir -&gt; db.update(<span class=\"string\">&quot;Book&quot;</span>, values, selection, selectionArgs)</span><br><span class=\"line\">            bookItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> bookId = uri.pathSegments[<span class=\"number\">1</span>]</span><br><span class=\"line\">                db.update(<span class=\"string\">&quot;Book&quot;</span>, values, <span class=\"string\">&quot;id=?&quot;</span>, arrayOf(bookId))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            categoryDir -&gt; db.update(<span class=\"string\">&quot;Category&quot;</span>, values, selection, selectionArgs)</span><br><span class=\"line\">            categoryItem -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> categoryId = uri.pathSegments[<span class=\"number\">1</span>]</span><br><span class=\"line\">                db.update(<span class=\"string\">&quot;Category&quot;</span>, values, <span class=\"string\">&quot;id=?&quot;</span>, arrayOf(categoryId))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        updatedRows</span><br><span class=\"line\">    &#125; ?: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"数据存储(Kotlin)","date":"2025-05-07T16:01:07.000Z","_content":"\n# 文件存储\n\n### 存储数据\n\n- 通过openFileOutput()得到FileOutputStream对象\n\n- 借助它构建一个OutputStreamWriter对象在借助这个构建一个BufferedWriter对象\n\n- 利用BufferedWriter将内容写入文件\n\n  ```kotlin\n  private fun save(inputText: String) {\n          try {\n             val output=openFileOutput(\"data\",Context.MODE_PRIVATE)\n              val writer=BufferedWriter(OutputStreamWriter(output))\n              writer.use{\n                  it.write(inputText)\n              }\n          } catch (e: IOException) {\n              e.printStackTrace()\n          }\n      }\n  ```\n\n  \n\n### 读取数据\n\n- 通过openFileInput()方法获取了一个FileInputStream对象\n\n- 利用它构建InputStreamReader()对象再借助这个构建BufferedReader对象\n\n- 最后利用这个对象将文件一行行读取出来并拼接到StringBuilder对象中\n\n  ```kotlin\n   private fun load(): String {\n          val content = StringBuilder()\n          try {\n                  val input=openFileInput(\"data\")\n                  val reader=BufferedReader(InputStreamReader(input))\n                      reader.use{\n                          reader.forEachLine{\n                              content.append(it)\n                          }\n                      }\n          } catch (e: IOException) {\n              e.printStackTrace()       \n          }\n          return content.toString()\n      }\n  ```\n\n------\n\n# SharedPreferences\n\n### 存储数据\n\n- 得到SharedPreferences对象\n\n  (1)Context类中的getSharedPreferences()方法得到（第一个参数是文件名，第二个是模式）\n\n  (2)Activity类中的getPreferences()方法得到（只接收模式参数）\n\n- 调用其edit()方法得到SharedPreferences.Editor对象\n\n- 像这个对象中添加数据\n\n- 调用apply()提交数据\n\n  ```kotlin\n              val editor=getSharedPreferences(\"data\", Context.MODE_PRIVATE).edit()\n              editor.putString(\"name\",\"Tom\")\n              editor.putInt(\"age\",28)\n              editor.putBoolean(\"married\",false)\n              editor.apply()\n  ```\n\n  \n\n### 读取数据\n\n- 得到SharedPreferences对象\n\n- 调用get系列方法获取数据\n\n  ```kotlin\n  val prefs=getSharedPreferences(\"data\",Context.MODE_PRIVATE)\n              val name=prefs.getString(\"name\",\"\")\n              val age=prefs.getInt(\"age\",0)\n              val married=prefs.getBoolean(\"married\",false)\n  ```\n\n  \n\n\n\n------\n\n# SQLite数据库\n\n### 创建和升级\n\n- **创建**\n  1. 新建一个类继承自SQLiteOpenHelper\n  2. 建立表格\n  3. 在onCreate方法中使用execSQL()方法在数据库中创建表格\n  4. 在活动中使用writableDatabase方法创建数据库\n\n- **升级**\n  1. 在帮助类中建立新的表格或作出一些更改\n  2. 如果建立新的表格需要在oncreate方法中用execSQL()方法创建表格\n  3. 在onUpgrade()方法中使用execSQL()方法进行更新再调用onCreate()\n  4. 活动中数据库版本号改为比原来大的数字\n\n```kotlin\nclass MyDatabaseHelper(val context:Context,name:String,version: Int) :SQLiteOpenHelper(context,name,null,version){\n   private val createBook=\"create table Book(\"+\n           \"id integer primary key autoincrement,\"+\n           \"author text,\"+\n           \"price real,\"+\n           \"pages integer,\"+\n           \"name text)\"\n    private val createCategory=\"create table Category(\"+\n            \"id integer primary key autoincrement,\"+\n            \"category_name text,\"+\n            \"category_code integer)\"\n    override fun onCreate(db: SQLiteDatabase) {\n        db.execSQL(createBook)\n        db.execSQL(createCategory)\n        Toast.makeText(context,\"Create succeeded\",Toast.LENGTH_SHORT).show()\n    }\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n         db.execSQL(\"drop table if exists Book\")\n        db.execSQL(\"drop table if exists Category\")\n        onCreate(db)\n    }\n}\n```\n\n### 添加，更新，删除，查询\n\n- **添加**\n\n  1. 调用SQLiteOpenHelper的writableDatabase方法获取SQLiteDataBase对象\n\n  2. 利用ContentValues()对象组装数据\n\n  3. 利用insert方法插入数据\n\n     ```kotlin\n     binding.addData.setOnClickListener {\n                 //获取SQLiteDatabase对象\n                 val db=dbHelper.writableDatabase\n                 //组装第一条数据\n                 val values1=ContentValues().apply {\n                     put(\"name\",\"The Da Vinci Code\")\n                     put(\"author\",\"Dan Brown\")\n                     put(\"pages\",454)\n                     put(\"price\",16.96)\n                 }\n                 //插入第一条数据\n                 db.insert(\"Book\",null,values1)\n                 //组装第二条数据\n                 val values2=ContentValues().apply {\n                     put(\"name\",\"The Lost Symbol\")\n                     put(\"author\",\"Dan Brown\")\n                     put(\"pages\",510)\n                     put(\"price\",19.95)\n                 }\n                 //插入第二条数据\n                 db.insert(\"Book\",null,values2)\n             }\n     ```\n\n- **更新**\n\n  1. 获取SQLiteDataBase对象\n\n  2. 获取ContentValues对象\n\n  3. 指定更新的数据\n\n  4. 利用update更新数据\n\n     ```kotlin\n     binding.updateData.setOnClickListener {\n                 //获取SQLiteDatabase对象\n                 val db=dbHelper.writableDatabase\n                 val value=ContentValues()\n                 value.put(\"price\",10.99)\n                 db.update(\"Book\",value,\"name=?\",arrayOf(\"The Da Vinci Code\"))\n             Toast.makeText(this,\"更新成功\",Toast.LENGTH_SHORT).show()\n             }\n     ```\n\n     \n\n- **删除**\n\n  1. 获取SQLiteDataBase对象\n\n  2. 利用delete删除数据\n\n     ```kotlin\n     binding.deleteData.setOnClickListener {\n                 //获取SQLiteDatabase对象\n                 val db=dbHelper.writableDatabase\n                 db.delete(\"Book\",\"pages>?\",arrayOf(\"500\"))\n                 Toast.makeText(this,\"删除成功\",Toast.LENGTH_SHORT).show()\n             }\n     ```\n\n     \n\n  \n\n- **查询**\n\n  1. 获取SQLiteDataBase对象 \n  \n  2. 调用query方法查询数据\n  \n  3. 查询后得到Cursor对象,遍历查询每一行数据在循环中通过Cursor的getColumnIndex()方法索引\n  \n  4. 查询完成后关闭Cursor\n  \n     ```kotlin\n      binding.queryData.setOnClickListener {\n                 //获取SQLiteDatabase对象\n                 val db=dbHelper.writableDatabase\n                 //查询Book中所有数据\n                 val cursor=db.query(\"Book\",null,null,null,null,null,null)\n                 if(cursor.moveToFirst()){\n                     do{//遍历Cursor对象，取出数据并打印\n                         val name=cursor.getString(cursor.getColumnIndex(\"name\"))\n                         val author=cursor.getString(cursor.getColumnIndex(\"author\"))\n                         val pages=cursor.getInt(cursor.getColumnIndex(\"pages\"))\n                         val price=cursor.getDouble(cursor.getColumnIndex(\"price\"))\n                         Log.d(\"MainActivity\", \"book name is $name \")\n                         Log.d(\"MainActivity\", \"book author is $author \")\n                         Log.d(\"MainActivity\", \"book pages is $pages \")\n                         Log.d(\"MainActivity\", \"book price is $price \")\n                     }while (cursor.moveToNext())\n     \n                 }\n                 cursor.close()\n             }\n     ```\n\n### SQL操作数据库\n\n```kotlin\n//添加数据\ndb.execSQL(\"insert into Book(name,author,pages,price) values(?,?,?,?)\",\n          arrayOf(\"The Da Vinci Code\",\"Dan Brown\",\"454\",\"16.96\")\n          )\ndb.execSQL(\"insert into Book(name,author,pages,price) values(?,?,?,?)\",\n          arrayOf(\"The Lost Symbol\",\"Dan Brown\",\"510\",\"19.95\")\n          )\n//更新数据\ndb.execSQL(\"update Book set price=? where name=? \",arrayOf(\"10.99\",\"The Da Vinci Code\"))\n//删除数据\ndb.execSQL(\"delete from book where pages>?\",arrayOf(\"500\"))\n//查询数据\nval cursor=db.rawQuery(\"select * from Book\",null)\n```\n\n\n\n### 使用事务\n\n**特点**：操作要失败一起失败要成功一起成功\n\n```kotlin\n binding.replaceData.setOnClickListener {\n            //获取SQLiteDatabase对象\n            val db=dbHelper.writableDatabase\n            //开启事务\n            db.beginTransaction()\n            try {\n                db.delete(\"Book\",null,null)\n                /*if(true){\n                    //手动抛出异常，让事务失败\n                    throw NullPointerException()\n                }*/\n                val values=ContentValues().apply {\n                    put(\"name\",\"Game of Thrones\")\n                    put(\"author\",\"George Martin\")\n                    put(\"pages\",720)\n                    put(\"price\",20.85)\n                }\n                db.insert(\"Book\",null,values)\n                //事务已经执行成功\n                db.setTransactionSuccessful()\n            }catch (e:Exception){\n                e.printStackTrace()\n            }finally {\n                //结束事务\n                db.endTransaction()\n            }\n        }\n```\n\n\n\n### 升级数据库最佳写法\n\n每进行一次更新都在onUpgrade()方法中加入一个if判断语句\n\n这样就算跨版本升级也不会出现数据丢失\n\n```kotlin\nclass MyDatabaseHelper(val context:Context,name:String,version: Int) :SQLiteOpenHelper(context,name,null,version){\n   private val createBook=\"create table Book(\"+\n           \"id integer primary key autoincrement,\"+\n           \"author text,\"+\n           \"price real,\"+\n           \"pages integer,\"+\n           \"name text,\"+\n           \"category_id)\"\n    private val createCategory=\"create table Category(\"+\n            \"id integer primary key autoincrement,\"+\n            \"category_name text,\"+\n            \"category_code integer)\"\n    override fun onCreate(db: SQLiteDatabase) {\n        db.execSQL(createBook)\n        db.execSQL(createCategory)\n        Toast.makeText(context,\"Create succeeded\",Toast.LENGTH_SHORT).show()\n    }\n\n\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n        if(oldVersion<=1){\n            db.execSQL(createCategory)\n        }\n        if(oldVersion<=2){\n            db.execSQL(\"alter table Book add column category_id integer\")\n        }\n    }\n}\n```\n\n------\n\n","source":"_posts/数据存储-Kotlin.md","raw":"---\ntitle: 数据存储(Kotlin)\ndate: 2025-05-08 00:01:07\ncategories:\n- Android(Kotlin版)\ntags:\n---\n\n# 文件存储\n\n### 存储数据\n\n- 通过openFileOutput()得到FileOutputStream对象\n\n- 借助它构建一个OutputStreamWriter对象在借助这个构建一个BufferedWriter对象\n\n- 利用BufferedWriter将内容写入文件\n\n  ```kotlin\n  private fun save(inputText: String) {\n          try {\n             val output=openFileOutput(\"data\",Context.MODE_PRIVATE)\n              val writer=BufferedWriter(OutputStreamWriter(output))\n              writer.use{\n                  it.write(inputText)\n              }\n          } catch (e: IOException) {\n              e.printStackTrace()\n          }\n      }\n  ```\n\n  \n\n### 读取数据\n\n- 通过openFileInput()方法获取了一个FileInputStream对象\n\n- 利用它构建InputStreamReader()对象再借助这个构建BufferedReader对象\n\n- 最后利用这个对象将文件一行行读取出来并拼接到StringBuilder对象中\n\n  ```kotlin\n   private fun load(): String {\n          val content = StringBuilder()\n          try {\n                  val input=openFileInput(\"data\")\n                  val reader=BufferedReader(InputStreamReader(input))\n                      reader.use{\n                          reader.forEachLine{\n                              content.append(it)\n                          }\n                      }\n          } catch (e: IOException) {\n              e.printStackTrace()       \n          }\n          return content.toString()\n      }\n  ```\n\n------\n\n# SharedPreferences\n\n### 存储数据\n\n- 得到SharedPreferences对象\n\n  (1)Context类中的getSharedPreferences()方法得到（第一个参数是文件名，第二个是模式）\n\n  (2)Activity类中的getPreferences()方法得到（只接收模式参数）\n\n- 调用其edit()方法得到SharedPreferences.Editor对象\n\n- 像这个对象中添加数据\n\n- 调用apply()提交数据\n\n  ```kotlin\n              val editor=getSharedPreferences(\"data\", Context.MODE_PRIVATE).edit()\n              editor.putString(\"name\",\"Tom\")\n              editor.putInt(\"age\",28)\n              editor.putBoolean(\"married\",false)\n              editor.apply()\n  ```\n\n  \n\n### 读取数据\n\n- 得到SharedPreferences对象\n\n- 调用get系列方法获取数据\n\n  ```kotlin\n  val prefs=getSharedPreferences(\"data\",Context.MODE_PRIVATE)\n              val name=prefs.getString(\"name\",\"\")\n              val age=prefs.getInt(\"age\",0)\n              val married=prefs.getBoolean(\"married\",false)\n  ```\n\n  \n\n\n\n------\n\n# SQLite数据库\n\n### 创建和升级\n\n- **创建**\n  1. 新建一个类继承自SQLiteOpenHelper\n  2. 建立表格\n  3. 在onCreate方法中使用execSQL()方法在数据库中创建表格\n  4. 在活动中使用writableDatabase方法创建数据库\n\n- **升级**\n  1. 在帮助类中建立新的表格或作出一些更改\n  2. 如果建立新的表格需要在oncreate方法中用execSQL()方法创建表格\n  3. 在onUpgrade()方法中使用execSQL()方法进行更新再调用onCreate()\n  4. 活动中数据库版本号改为比原来大的数字\n\n```kotlin\nclass MyDatabaseHelper(val context:Context,name:String,version: Int) :SQLiteOpenHelper(context,name,null,version){\n   private val createBook=\"create table Book(\"+\n           \"id integer primary key autoincrement,\"+\n           \"author text,\"+\n           \"price real,\"+\n           \"pages integer,\"+\n           \"name text)\"\n    private val createCategory=\"create table Category(\"+\n            \"id integer primary key autoincrement,\"+\n            \"category_name text,\"+\n            \"category_code integer)\"\n    override fun onCreate(db: SQLiteDatabase) {\n        db.execSQL(createBook)\n        db.execSQL(createCategory)\n        Toast.makeText(context,\"Create succeeded\",Toast.LENGTH_SHORT).show()\n    }\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n         db.execSQL(\"drop table if exists Book\")\n        db.execSQL(\"drop table if exists Category\")\n        onCreate(db)\n    }\n}\n```\n\n### 添加，更新，删除，查询\n\n- **添加**\n\n  1. 调用SQLiteOpenHelper的writableDatabase方法获取SQLiteDataBase对象\n\n  2. 利用ContentValues()对象组装数据\n\n  3. 利用insert方法插入数据\n\n     ```kotlin\n     binding.addData.setOnClickListener {\n                 //获取SQLiteDatabase对象\n                 val db=dbHelper.writableDatabase\n                 //组装第一条数据\n                 val values1=ContentValues().apply {\n                     put(\"name\",\"The Da Vinci Code\")\n                     put(\"author\",\"Dan Brown\")\n                     put(\"pages\",454)\n                     put(\"price\",16.96)\n                 }\n                 //插入第一条数据\n                 db.insert(\"Book\",null,values1)\n                 //组装第二条数据\n                 val values2=ContentValues().apply {\n                     put(\"name\",\"The Lost Symbol\")\n                     put(\"author\",\"Dan Brown\")\n                     put(\"pages\",510)\n                     put(\"price\",19.95)\n                 }\n                 //插入第二条数据\n                 db.insert(\"Book\",null,values2)\n             }\n     ```\n\n- **更新**\n\n  1. 获取SQLiteDataBase对象\n\n  2. 获取ContentValues对象\n\n  3. 指定更新的数据\n\n  4. 利用update更新数据\n\n     ```kotlin\n     binding.updateData.setOnClickListener {\n                 //获取SQLiteDatabase对象\n                 val db=dbHelper.writableDatabase\n                 val value=ContentValues()\n                 value.put(\"price\",10.99)\n                 db.update(\"Book\",value,\"name=?\",arrayOf(\"The Da Vinci Code\"))\n             Toast.makeText(this,\"更新成功\",Toast.LENGTH_SHORT).show()\n             }\n     ```\n\n     \n\n- **删除**\n\n  1. 获取SQLiteDataBase对象\n\n  2. 利用delete删除数据\n\n     ```kotlin\n     binding.deleteData.setOnClickListener {\n                 //获取SQLiteDatabase对象\n                 val db=dbHelper.writableDatabase\n                 db.delete(\"Book\",\"pages>?\",arrayOf(\"500\"))\n                 Toast.makeText(this,\"删除成功\",Toast.LENGTH_SHORT).show()\n             }\n     ```\n\n     \n\n  \n\n- **查询**\n\n  1. 获取SQLiteDataBase对象 \n  \n  2. 调用query方法查询数据\n  \n  3. 查询后得到Cursor对象,遍历查询每一行数据在循环中通过Cursor的getColumnIndex()方法索引\n  \n  4. 查询完成后关闭Cursor\n  \n     ```kotlin\n      binding.queryData.setOnClickListener {\n                 //获取SQLiteDatabase对象\n                 val db=dbHelper.writableDatabase\n                 //查询Book中所有数据\n                 val cursor=db.query(\"Book\",null,null,null,null,null,null)\n                 if(cursor.moveToFirst()){\n                     do{//遍历Cursor对象，取出数据并打印\n                         val name=cursor.getString(cursor.getColumnIndex(\"name\"))\n                         val author=cursor.getString(cursor.getColumnIndex(\"author\"))\n                         val pages=cursor.getInt(cursor.getColumnIndex(\"pages\"))\n                         val price=cursor.getDouble(cursor.getColumnIndex(\"price\"))\n                         Log.d(\"MainActivity\", \"book name is $name \")\n                         Log.d(\"MainActivity\", \"book author is $author \")\n                         Log.d(\"MainActivity\", \"book pages is $pages \")\n                         Log.d(\"MainActivity\", \"book price is $price \")\n                     }while (cursor.moveToNext())\n     \n                 }\n                 cursor.close()\n             }\n     ```\n\n### SQL操作数据库\n\n```kotlin\n//添加数据\ndb.execSQL(\"insert into Book(name,author,pages,price) values(?,?,?,?)\",\n          arrayOf(\"The Da Vinci Code\",\"Dan Brown\",\"454\",\"16.96\")\n          )\ndb.execSQL(\"insert into Book(name,author,pages,price) values(?,?,?,?)\",\n          arrayOf(\"The Lost Symbol\",\"Dan Brown\",\"510\",\"19.95\")\n          )\n//更新数据\ndb.execSQL(\"update Book set price=? where name=? \",arrayOf(\"10.99\",\"The Da Vinci Code\"))\n//删除数据\ndb.execSQL(\"delete from book where pages>?\",arrayOf(\"500\"))\n//查询数据\nval cursor=db.rawQuery(\"select * from Book\",null)\n```\n\n\n\n### 使用事务\n\n**特点**：操作要失败一起失败要成功一起成功\n\n```kotlin\n binding.replaceData.setOnClickListener {\n            //获取SQLiteDatabase对象\n            val db=dbHelper.writableDatabase\n            //开启事务\n            db.beginTransaction()\n            try {\n                db.delete(\"Book\",null,null)\n                /*if(true){\n                    //手动抛出异常，让事务失败\n                    throw NullPointerException()\n                }*/\n                val values=ContentValues().apply {\n                    put(\"name\",\"Game of Thrones\")\n                    put(\"author\",\"George Martin\")\n                    put(\"pages\",720)\n                    put(\"price\",20.85)\n                }\n                db.insert(\"Book\",null,values)\n                //事务已经执行成功\n                db.setTransactionSuccessful()\n            }catch (e:Exception){\n                e.printStackTrace()\n            }finally {\n                //结束事务\n                db.endTransaction()\n            }\n        }\n```\n\n\n\n### 升级数据库最佳写法\n\n每进行一次更新都在onUpgrade()方法中加入一个if判断语句\n\n这样就算跨版本升级也不会出现数据丢失\n\n```kotlin\nclass MyDatabaseHelper(val context:Context,name:String,version: Int) :SQLiteOpenHelper(context,name,null,version){\n   private val createBook=\"create table Book(\"+\n           \"id integer primary key autoincrement,\"+\n           \"author text,\"+\n           \"price real,\"+\n           \"pages integer,\"+\n           \"name text,\"+\n           \"category_id)\"\n    private val createCategory=\"create table Category(\"+\n            \"id integer primary key autoincrement,\"+\n            \"category_name text,\"+\n            \"category_code integer)\"\n    override fun onCreate(db: SQLiteDatabase) {\n        db.execSQL(createBook)\n        db.execSQL(createCategory)\n        Toast.makeText(context,\"Create succeeded\",Toast.LENGTH_SHORT).show()\n    }\n\n\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n        if(oldVersion<=1){\n            db.execSQL(createCategory)\n        }\n        if(oldVersion<=2){\n            db.execSQL(\"alter table Book add column category_id integer\")\n        }\n    }\n}\n```\n\n------\n\n","slug":"数据存储-Kotlin","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcl002fs4s73cbtgy7o","content":"<h1 id=\"文件存储\"><a href=\"#文件存储\" class=\"headerlink\" title=\"文件存储\"></a>文件存储</h1><h3 id=\"存储数据\"><a href=\"#存储数据\" class=\"headerlink\" title=\"存储数据\"></a>存储数据</h3><ul>\n<li><p>通过openFileOutput()得到FileOutputStream对象</p>\n</li>\n<li><p>借助它构建一个OutputStreamWriter对象在借助这个构建一个BufferedWriter对象</p>\n</li>\n<li><p>利用BufferedWriter将内容写入文件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">save</span><span class=\"params\">(inputText: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">val</span> output=openFileOutput(<span class=\"string\">&quot;data&quot;</span>,Context.MODE_PRIVATE)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> writer=BufferedWriter(OutputStreamWriter(output))</span><br><span class=\"line\">            writer.use&#123;</span><br><span class=\"line\">                it.write(inputText)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: IOException) &#123;</span><br><span class=\"line\">            e.printStackTrace()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"读取数据\"><a href=\"#读取数据\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h3><ul>\n<li><p>通过openFileInput()方法获取了一个FileInputStream对象</p>\n</li>\n<li><p>利用它构建InputStreamReader()对象再借助这个构建BufferedReader对象</p>\n</li>\n<li><p>最后利用这个对象将文件一行行读取出来并拼接到StringBuilder对象中</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">load</span><span class=\"params\">()</span></span>: String &#123;</span><br><span class=\"line\">       <span class=\"keyword\">val</span> content = StringBuilder()</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">val</span> input=openFileInput(<span class=\"string\">&quot;data&quot;</span>)</span><br><span class=\"line\">               <span class=\"keyword\">val</span> reader=BufferedReader(InputStreamReader(input))</span><br><span class=\"line\">                   reader.use&#123;</span><br><span class=\"line\">                       reader.forEachLine&#123;</span><br><span class=\"line\">                           content.append(it)</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (e: IOException) &#123;</span><br><span class=\"line\">           e.printStackTrace()       </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> content.toString()</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"SharedPreferences\"><a href=\"#SharedPreferences\" class=\"headerlink\" title=\"SharedPreferences\"></a>SharedPreferences</h1><h3 id=\"存储数据-1\"><a href=\"#存储数据-1\" class=\"headerlink\" title=\"存储数据\"></a>存储数据</h3><ul>\n<li><p>得到SharedPreferences对象</p>\n<p>(1)Context类中的getSharedPreferences()方法得到（第一个参数是文件名，第二个是模式）</p>\n<p>(2)Activity类中的getPreferences()方法得到（只接收模式参数）</p>\n</li>\n<li><p>调用其edit()方法得到SharedPreferences.Editor对象</p>\n</li>\n<li><p>像这个对象中添加数据</p>\n</li>\n<li><p>调用apply()提交数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> editor=getSharedPreferences(<span class=\"string\">&quot;data&quot;</span>, Context.MODE_PRIVATE).edit()</span><br><span class=\"line\">editor.putString(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;Tom&quot;</span>)</span><br><span class=\"line\">editor.putInt(<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">28</span>)</span><br><span class=\"line\">editor.putBoolean(<span class=\"string\">&quot;married&quot;</span>,<span class=\"literal\">false</span>)</span><br><span class=\"line\">editor.apply()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"读取数据-1\"><a href=\"#读取数据-1\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h3><ul>\n<li><p>得到SharedPreferences对象</p>\n</li>\n<li><p>调用get系列方法获取数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> prefs=getSharedPreferences(<span class=\"string\">&quot;data&quot;</span>,Context.MODE_PRIVATE)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> name=prefs.getString(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> age=prefs.getInt(<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> married=prefs.getBoolean(<span class=\"string\">&quot;married&quot;</span>,<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"SQLite数据库\"><a href=\"#SQLite数据库\" class=\"headerlink\" title=\"SQLite数据库\"></a>SQLite数据库</h1><h3 id=\"创建和升级\"><a href=\"#创建和升级\" class=\"headerlink\" title=\"创建和升级\"></a>创建和升级</h3><ul>\n<li><p><strong>创建</strong></p>\n<ol>\n<li>新建一个类继承自SQLiteOpenHelper</li>\n<li>建立表格</li>\n<li>在onCreate方法中使用execSQL()方法在数据库中创建表格</li>\n<li>在活动中使用writableDatabase方法创建数据库</li>\n</ol>\n</li>\n<li><p><strong>升级</strong></p>\n<ol>\n<li>在帮助类中建立新的表格或作出一些更改</li>\n<li>如果建立新的表格需要在oncreate方法中用execSQL()方法创建表格</li>\n<li>在onUpgrade()方法中使用execSQL()方法进行更新再调用onCreate()</li>\n<li>活动中数据库版本号改为比原来大的数字</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyDatabaseHelper</span>(<span class=\"keyword\">val</span> context:Context,name:String,version: <span class=\"built_in\">Int</span>) :SQLiteOpenHelper(context,name,<span class=\"literal\">null</span>,version)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> createBook=<span class=\"string\">&quot;create table Book(&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;id integer primary key autoincrement,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;author text,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;price real,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;pages integer,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;name text)&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> createCategory=<span class=\"string\">&quot;create table Category(&quot;</span>+</span><br><span class=\"line\">            <span class=\"string\">&quot;id integer primary key autoincrement,&quot;</span>+</span><br><span class=\"line\">            <span class=\"string\">&quot;category_name text,&quot;</span>+</span><br><span class=\"line\">            <span class=\"string\">&quot;category_code integer)&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(db: <span class=\"type\">SQLiteDatabase</span>)</span></span> &#123;</span><br><span class=\"line\">        db.execSQL(createBook)</span><br><span class=\"line\">        db.execSQL(createCategory)</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">&quot;Create succeeded&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(db: <span class=\"type\">SQLiteDatabase</span>, oldVersion: <span class=\"type\">Int</span>, newVersion: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">         db.execSQL(<span class=\"string\">&quot;drop table if exists Book&quot;</span>)</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;drop table if exists Category&quot;</span>)</span><br><span class=\"line\">        onCreate(db)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加，更新，删除，查询\"><a href=\"#添加，更新，删除，查询\" class=\"headerlink\" title=\"添加，更新，删除，查询\"></a>添加，更新，删除，查询</h3><ul>\n<li><p><strong>添加</strong></p>\n<ol>\n<li><p>调用SQLiteOpenHelper的writableDatabase方法获取SQLiteDataBase对象</p>\n</li>\n<li><p>利用ContentValues()对象组装数据</p>\n</li>\n<li><p>利用insert方法插入数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.addData.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取SQLiteDatabase对象</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> db=dbHelper.writableDatabase</span><br><span class=\"line\">            <span class=\"comment\">//组装第一条数据</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> values1=ContentValues().apply &#123;</span><br><span class=\"line\">                put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;The Da Vinci Code&quot;</span>)</span><br><span class=\"line\">                put(<span class=\"string\">&quot;author&quot;</span>,<span class=\"string\">&quot;Dan Brown&quot;</span>)</span><br><span class=\"line\">                put(<span class=\"string\">&quot;pages&quot;</span>,<span class=\"number\">454</span>)</span><br><span class=\"line\">                put(<span class=\"string\">&quot;price&quot;</span>,<span class=\"number\">16.96</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//插入第一条数据</span></span><br><span class=\"line\">            db.insert(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,values1)</span><br><span class=\"line\">            <span class=\"comment\">//组装第二条数据</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> values2=ContentValues().apply &#123;</span><br><span class=\"line\">                put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;The Lost Symbol&quot;</span>)</span><br><span class=\"line\">                put(<span class=\"string\">&quot;author&quot;</span>,<span class=\"string\">&quot;Dan Brown&quot;</span>)</span><br><span class=\"line\">                put(<span class=\"string\">&quot;pages&quot;</span>,<span class=\"number\">510</span>)</span><br><span class=\"line\">                put(<span class=\"string\">&quot;price&quot;</span>,<span class=\"number\">19.95</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//插入第二条数据</span></span><br><span class=\"line\">            db.insert(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,values2)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p><strong>更新</strong></p>\n<ol>\n<li><p>获取SQLiteDataBase对象</p>\n</li>\n<li><p>获取ContentValues对象</p>\n</li>\n<li><p>指定更新的数据</p>\n</li>\n<li><p>利用update更新数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.updateData.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取SQLiteDatabase对象</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> db=dbHelper.writableDatabase</span><br><span class=\"line\">            <span class=\"keyword\">val</span> value=ContentValues()</span><br><span class=\"line\">            value.put(<span class=\"string\">&quot;price&quot;</span>,<span class=\"number\">10.99</span>)</span><br><span class=\"line\">            db.update(<span class=\"string\">&quot;Book&quot;</span>,value,<span class=\"string\">&quot;name=?&quot;</span>,arrayOf(<span class=\"string\">&quot;The Da Vinci Code&quot;</span>))</span><br><span class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;更新成功&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p><strong>删除</strong></p>\n<ol>\n<li><p>获取SQLiteDataBase对象</p>\n</li>\n<li><p>利用delete删除数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.deleteData.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取SQLiteDatabase对象</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> db=dbHelper.writableDatabase</span><br><span class=\"line\">            db.delete(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"string\">&quot;pages&gt;?&quot;</span>,arrayOf(<span class=\"string\">&quot;500&quot;</span>))</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;删除成功&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p><strong>查询</strong></p>\n<ol>\n<li><p>获取SQLiteDataBase对象 </p>\n</li>\n<li><p>调用query方法查询数据</p>\n</li>\n<li><p>查询后得到Cursor对象,遍历查询每一行数据在循环中通过Cursor的getColumnIndex()方法索引</p>\n</li>\n<li><p>查询完成后关闭Cursor</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.queryData.setOnClickListener &#123;</span><br><span class=\"line\">           <span class=\"comment\">//获取SQLiteDatabase对象</span></span><br><span class=\"line\">           <span class=\"keyword\">val</span> db=dbHelper.writableDatabase</span><br><span class=\"line\">           <span class=\"comment\">//查询Book中所有数据</span></span><br><span class=\"line\">           <span class=\"keyword\">val</span> cursor=db.query(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>)</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(cursor.moveToFirst())&#123;</span><br><span class=\"line\">               <span class=\"keyword\">do</span>&#123;<span class=\"comment\">//遍历Cursor对象，取出数据并打印</span></span><br><span class=\"line\">                   <span class=\"keyword\">val</span> name=cursor.getString(cursor.getColumnIndex(<span class=\"string\">&quot;name&quot;</span>))</span><br><span class=\"line\">                   <span class=\"keyword\">val</span> author=cursor.getString(cursor.getColumnIndex(<span class=\"string\">&quot;author&quot;</span>))</span><br><span class=\"line\">                   <span class=\"keyword\">val</span> pages=cursor.getInt(cursor.getColumnIndex(<span class=\"string\">&quot;pages&quot;</span>))</span><br><span class=\"line\">                   <span class=\"keyword\">val</span> price=cursor.getDouble(cursor.getColumnIndex(<span class=\"string\">&quot;price&quot;</span>))</span><br><span class=\"line\">                   Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book name is <span class=\"variable\">$name</span> &quot;</span>)</span><br><span class=\"line\">                   Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book author is <span class=\"variable\">$author</span> &quot;</span>)</span><br><span class=\"line\">                   Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book pages is <span class=\"variable\">$pages</span> &quot;</span>)</span><br><span class=\"line\">                   Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book price is <span class=\"variable\">$price</span> &quot;</span>)</span><br><span class=\"line\">               &#125;<span class=\"keyword\">while</span> (cursor.moveToNext())</span><br><span class=\"line\">     </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           cursor.close()</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"SQL操作数据库\"><a href=\"#SQL操作数据库\" class=\"headerlink\" title=\"SQL操作数据库\"></a>SQL操作数据库</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加数据</span></span><br><span class=\"line\">db.execSQL(<span class=\"string\">&quot;insert into Book(name,author,pages,price) values(?,?,?,?)&quot;</span>,</span><br><span class=\"line\">          arrayOf(<span class=\"string\">&quot;The Da Vinci Code&quot;</span>,<span class=\"string\">&quot;Dan Brown&quot;</span>,<span class=\"string\">&quot;454&quot;</span>,<span class=\"string\">&quot;16.96&quot;</span>)</span><br><span class=\"line\">          )</span><br><span class=\"line\">db.execSQL(<span class=\"string\">&quot;insert into Book(name,author,pages,price) values(?,?,?,?)&quot;</span>,</span><br><span class=\"line\">          arrayOf(<span class=\"string\">&quot;The Lost Symbol&quot;</span>,<span class=\"string\">&quot;Dan Brown&quot;</span>,<span class=\"string\">&quot;510&quot;</span>,<span class=\"string\">&quot;19.95&quot;</span>)</span><br><span class=\"line\">          )</span><br><span class=\"line\"><span class=\"comment\">//更新数据</span></span><br><span class=\"line\">db.execSQL(<span class=\"string\">&quot;update Book set price=? where name=? &quot;</span>,arrayOf(<span class=\"string\">&quot;10.99&quot;</span>,<span class=\"string\">&quot;The Da Vinci Code&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\">//删除数据</span></span><br><span class=\"line\">db.execSQL(<span class=\"string\">&quot;delete from book where pages&gt;?&quot;</span>,arrayOf(<span class=\"string\">&quot;500&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\">//查询数据</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> cursor=db.rawQuery(<span class=\"string\">&quot;select * from Book&quot;</span>,<span class=\"literal\">null</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用事务\"><a href=\"#使用事务\" class=\"headerlink\" title=\"使用事务\"></a>使用事务</h3><p><strong>特点</strong>：操作要失败一起失败要成功一起成功</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.replaceData.setOnClickListener &#123;</span><br><span class=\"line\">           <span class=\"comment\">//获取SQLiteDatabase对象</span></span><br><span class=\"line\">           <span class=\"keyword\">val</span> db=dbHelper.writableDatabase</span><br><span class=\"line\">           <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">           db.beginTransaction()</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               db.delete(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>)</span><br><span class=\"line\">               <span class=\"comment\">/*if(true)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">                   //手动抛出异常，让事务失败</span></span><br><span class=\"line\"><span class=\"comment\">                   throw NullPointerException()</span></span><br><span class=\"line\"><span class=\"comment\">               &#125;*/</span></span><br><span class=\"line\">               <span class=\"keyword\">val</span> values=ContentValues().apply &#123;</span><br><span class=\"line\">                   put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;Game of Thrones&quot;</span>)</span><br><span class=\"line\">                   put(<span class=\"string\">&quot;author&quot;</span>,<span class=\"string\">&quot;George Martin&quot;</span>)</span><br><span class=\"line\">                   put(<span class=\"string\">&quot;pages&quot;</span>,<span class=\"number\">720</span>)</span><br><span class=\"line\">                   put(<span class=\"string\">&quot;price&quot;</span>,<span class=\"number\">20.85</span>)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               db.insert(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,values)</span><br><span class=\"line\">               <span class=\"comment\">//事务已经执行成功</span></span><br><span class=\"line\">               db.setTransactionSuccessful()</span><br><span class=\"line\">           &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">               e.printStackTrace()</span><br><span class=\"line\">           &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">//结束事务</span></span><br><span class=\"line\">               db.endTransaction()</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"升级数据库最佳写法\"><a href=\"#升级数据库最佳写法\" class=\"headerlink\" title=\"升级数据库最佳写法\"></a>升级数据库最佳写法</h3><p>每进行一次更新都在onUpgrade()方法中加入一个if判断语句</p>\n<p>这样就算跨版本升级也不会出现数据丢失</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyDatabaseHelper</span>(<span class=\"keyword\">val</span> context:Context,name:String,version: <span class=\"built_in\">Int</span>) :SQLiteOpenHelper(context,name,<span class=\"literal\">null</span>,version)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> createBook=<span class=\"string\">&quot;create table Book(&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;id integer primary key autoincrement,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;author text,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;price real,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;pages integer,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;name text,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;category_id)&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> createCategory=<span class=\"string\">&quot;create table Category(&quot;</span>+</span><br><span class=\"line\">            <span class=\"string\">&quot;id integer primary key autoincrement,&quot;</span>+</span><br><span class=\"line\">            <span class=\"string\">&quot;category_name text,&quot;</span>+</span><br><span class=\"line\">            <span class=\"string\">&quot;category_code integer)&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(db: <span class=\"type\">SQLiteDatabase</span>)</span></span> &#123;</span><br><span class=\"line\">        db.execSQL(createBook)</span><br><span class=\"line\">        db.execSQL(createCategory)</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">&quot;Create succeeded&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(db: <span class=\"type\">SQLiteDatabase</span>, oldVersion: <span class=\"type\">Int</span>, newVersion: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oldVersion&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            db.execSQL(createCategory)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oldVersion&lt;=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            db.execSQL(<span class=\"string\">&quot;alter table Book add column category_id integer&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"文件存储\n存储数据\n * 通过openFileOutput()得到FileOutputStream对象\n   \n   \n * 借助它构建一个OutputStreamWriter对象在借助这个构建一个BufferedWriter对象\n   \n   \n * 利用BufferedWriter将内容写入文件\n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   \n   \n   private fun save(inputText: String) {\n           try {\n              val outp","more":"<h1 id=\"文件存储\"><a href=\"#文件存储\" class=\"headerlink\" title=\"文件存储\"></a>文件存储</h1><h3 id=\"存储数据\"><a href=\"#存储数据\" class=\"headerlink\" title=\"存储数据\"></a>存储数据</h3><ul>\n<li><p>通过openFileOutput()得到FileOutputStream对象</p>\n</li>\n<li><p>借助它构建一个OutputStreamWriter对象在借助这个构建一个BufferedWriter对象</p>\n</li>\n<li><p>利用BufferedWriter将内容写入文件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">save</span><span class=\"params\">(inputText: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">val</span> output=openFileOutput(<span class=\"string\">&quot;data&quot;</span>,Context.MODE_PRIVATE)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> writer=BufferedWriter(OutputStreamWriter(output))</span><br><span class=\"line\">            writer.use&#123;</span><br><span class=\"line\">                it.write(inputText)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: IOException) &#123;</span><br><span class=\"line\">            e.printStackTrace()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"读取数据\"><a href=\"#读取数据\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h3><ul>\n<li><p>通过openFileInput()方法获取了一个FileInputStream对象</p>\n</li>\n<li><p>利用它构建InputStreamReader()对象再借助这个构建BufferedReader对象</p>\n</li>\n<li><p>最后利用这个对象将文件一行行读取出来并拼接到StringBuilder对象中</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">load</span><span class=\"params\">()</span></span>: String &#123;</span><br><span class=\"line\">       <span class=\"keyword\">val</span> content = StringBuilder()</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">val</span> input=openFileInput(<span class=\"string\">&quot;data&quot;</span>)</span><br><span class=\"line\">               <span class=\"keyword\">val</span> reader=BufferedReader(InputStreamReader(input))</span><br><span class=\"line\">                   reader.use&#123;</span><br><span class=\"line\">                       reader.forEachLine&#123;</span><br><span class=\"line\">                           content.append(it)</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (e: IOException) &#123;</span><br><span class=\"line\">           e.printStackTrace()       </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> content.toString()</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"SharedPreferences\"><a href=\"#SharedPreferences\" class=\"headerlink\" title=\"SharedPreferences\"></a>SharedPreferences</h1><h3 id=\"存储数据-1\"><a href=\"#存储数据-1\" class=\"headerlink\" title=\"存储数据\"></a>存储数据</h3><ul>\n<li><p>得到SharedPreferences对象</p>\n<p>(1)Context类中的getSharedPreferences()方法得到（第一个参数是文件名，第二个是模式）</p>\n<p>(2)Activity类中的getPreferences()方法得到（只接收模式参数）</p>\n</li>\n<li><p>调用其edit()方法得到SharedPreferences.Editor对象</p>\n</li>\n<li><p>像这个对象中添加数据</p>\n</li>\n<li><p>调用apply()提交数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> editor=getSharedPreferences(<span class=\"string\">&quot;data&quot;</span>, Context.MODE_PRIVATE).edit()</span><br><span class=\"line\">editor.putString(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;Tom&quot;</span>)</span><br><span class=\"line\">editor.putInt(<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">28</span>)</span><br><span class=\"line\">editor.putBoolean(<span class=\"string\">&quot;married&quot;</span>,<span class=\"literal\">false</span>)</span><br><span class=\"line\">editor.apply()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"读取数据-1\"><a href=\"#读取数据-1\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h3><ul>\n<li><p>得到SharedPreferences对象</p>\n</li>\n<li><p>调用get系列方法获取数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> prefs=getSharedPreferences(<span class=\"string\">&quot;data&quot;</span>,Context.MODE_PRIVATE)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> name=prefs.getString(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> age=prefs.getInt(<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> married=prefs.getBoolean(<span class=\"string\">&quot;married&quot;</span>,<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"SQLite数据库\"><a href=\"#SQLite数据库\" class=\"headerlink\" title=\"SQLite数据库\"></a>SQLite数据库</h1><h3 id=\"创建和升级\"><a href=\"#创建和升级\" class=\"headerlink\" title=\"创建和升级\"></a>创建和升级</h3><ul>\n<li><p><strong>创建</strong></p>\n<ol>\n<li>新建一个类继承自SQLiteOpenHelper</li>\n<li>建立表格</li>\n<li>在onCreate方法中使用execSQL()方法在数据库中创建表格</li>\n<li>在活动中使用writableDatabase方法创建数据库</li>\n</ol>\n</li>\n<li><p><strong>升级</strong></p>\n<ol>\n<li>在帮助类中建立新的表格或作出一些更改</li>\n<li>如果建立新的表格需要在oncreate方法中用execSQL()方法创建表格</li>\n<li>在onUpgrade()方法中使用execSQL()方法进行更新再调用onCreate()</li>\n<li>活动中数据库版本号改为比原来大的数字</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyDatabaseHelper</span>(<span class=\"keyword\">val</span> context:Context,name:String,version: <span class=\"built_in\">Int</span>) :SQLiteOpenHelper(context,name,<span class=\"literal\">null</span>,version)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> createBook=<span class=\"string\">&quot;create table Book(&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;id integer primary key autoincrement,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;author text,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;price real,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;pages integer,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;name text)&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> createCategory=<span class=\"string\">&quot;create table Category(&quot;</span>+</span><br><span class=\"line\">            <span class=\"string\">&quot;id integer primary key autoincrement,&quot;</span>+</span><br><span class=\"line\">            <span class=\"string\">&quot;category_name text,&quot;</span>+</span><br><span class=\"line\">            <span class=\"string\">&quot;category_code integer)&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(db: <span class=\"type\">SQLiteDatabase</span>)</span></span> &#123;</span><br><span class=\"line\">        db.execSQL(createBook)</span><br><span class=\"line\">        db.execSQL(createCategory)</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">&quot;Create succeeded&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(db: <span class=\"type\">SQLiteDatabase</span>, oldVersion: <span class=\"type\">Int</span>, newVersion: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">         db.execSQL(<span class=\"string\">&quot;drop table if exists Book&quot;</span>)</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;drop table if exists Category&quot;</span>)</span><br><span class=\"line\">        onCreate(db)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加，更新，删除，查询\"><a href=\"#添加，更新，删除，查询\" class=\"headerlink\" title=\"添加，更新，删除，查询\"></a>添加，更新，删除，查询</h3><ul>\n<li><p><strong>添加</strong></p>\n<ol>\n<li><p>调用SQLiteOpenHelper的writableDatabase方法获取SQLiteDataBase对象</p>\n</li>\n<li><p>利用ContentValues()对象组装数据</p>\n</li>\n<li><p>利用insert方法插入数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.addData.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取SQLiteDatabase对象</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> db=dbHelper.writableDatabase</span><br><span class=\"line\">            <span class=\"comment\">//组装第一条数据</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> values1=ContentValues().apply &#123;</span><br><span class=\"line\">                put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;The Da Vinci Code&quot;</span>)</span><br><span class=\"line\">                put(<span class=\"string\">&quot;author&quot;</span>,<span class=\"string\">&quot;Dan Brown&quot;</span>)</span><br><span class=\"line\">                put(<span class=\"string\">&quot;pages&quot;</span>,<span class=\"number\">454</span>)</span><br><span class=\"line\">                put(<span class=\"string\">&quot;price&quot;</span>,<span class=\"number\">16.96</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//插入第一条数据</span></span><br><span class=\"line\">            db.insert(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,values1)</span><br><span class=\"line\">            <span class=\"comment\">//组装第二条数据</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> values2=ContentValues().apply &#123;</span><br><span class=\"line\">                put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;The Lost Symbol&quot;</span>)</span><br><span class=\"line\">                put(<span class=\"string\">&quot;author&quot;</span>,<span class=\"string\">&quot;Dan Brown&quot;</span>)</span><br><span class=\"line\">                put(<span class=\"string\">&quot;pages&quot;</span>,<span class=\"number\">510</span>)</span><br><span class=\"line\">                put(<span class=\"string\">&quot;price&quot;</span>,<span class=\"number\">19.95</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//插入第二条数据</span></span><br><span class=\"line\">            db.insert(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,values2)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p><strong>更新</strong></p>\n<ol>\n<li><p>获取SQLiteDataBase对象</p>\n</li>\n<li><p>获取ContentValues对象</p>\n</li>\n<li><p>指定更新的数据</p>\n</li>\n<li><p>利用update更新数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.updateData.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取SQLiteDatabase对象</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> db=dbHelper.writableDatabase</span><br><span class=\"line\">            <span class=\"keyword\">val</span> value=ContentValues()</span><br><span class=\"line\">            value.put(<span class=\"string\">&quot;price&quot;</span>,<span class=\"number\">10.99</span>)</span><br><span class=\"line\">            db.update(<span class=\"string\">&quot;Book&quot;</span>,value,<span class=\"string\">&quot;name=?&quot;</span>,arrayOf(<span class=\"string\">&quot;The Da Vinci Code&quot;</span>))</span><br><span class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;更新成功&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p><strong>删除</strong></p>\n<ol>\n<li><p>获取SQLiteDataBase对象</p>\n</li>\n<li><p>利用delete删除数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.deleteData.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取SQLiteDatabase对象</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> db=dbHelper.writableDatabase</span><br><span class=\"line\">            db.delete(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"string\">&quot;pages&gt;?&quot;</span>,arrayOf(<span class=\"string\">&quot;500&quot;</span>))</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;删除成功&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p><strong>查询</strong></p>\n<ol>\n<li><p>获取SQLiteDataBase对象 </p>\n</li>\n<li><p>调用query方法查询数据</p>\n</li>\n<li><p>查询后得到Cursor对象,遍历查询每一行数据在循环中通过Cursor的getColumnIndex()方法索引</p>\n</li>\n<li><p>查询完成后关闭Cursor</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.queryData.setOnClickListener &#123;</span><br><span class=\"line\">           <span class=\"comment\">//获取SQLiteDatabase对象</span></span><br><span class=\"line\">           <span class=\"keyword\">val</span> db=dbHelper.writableDatabase</span><br><span class=\"line\">           <span class=\"comment\">//查询Book中所有数据</span></span><br><span class=\"line\">           <span class=\"keyword\">val</span> cursor=db.query(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>)</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(cursor.moveToFirst())&#123;</span><br><span class=\"line\">               <span class=\"keyword\">do</span>&#123;<span class=\"comment\">//遍历Cursor对象，取出数据并打印</span></span><br><span class=\"line\">                   <span class=\"keyword\">val</span> name=cursor.getString(cursor.getColumnIndex(<span class=\"string\">&quot;name&quot;</span>))</span><br><span class=\"line\">                   <span class=\"keyword\">val</span> author=cursor.getString(cursor.getColumnIndex(<span class=\"string\">&quot;author&quot;</span>))</span><br><span class=\"line\">                   <span class=\"keyword\">val</span> pages=cursor.getInt(cursor.getColumnIndex(<span class=\"string\">&quot;pages&quot;</span>))</span><br><span class=\"line\">                   <span class=\"keyword\">val</span> price=cursor.getDouble(cursor.getColumnIndex(<span class=\"string\">&quot;price&quot;</span>))</span><br><span class=\"line\">                   Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book name is <span class=\"variable\">$name</span> &quot;</span>)</span><br><span class=\"line\">                   Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book author is <span class=\"variable\">$author</span> &quot;</span>)</span><br><span class=\"line\">                   Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book pages is <span class=\"variable\">$pages</span> &quot;</span>)</span><br><span class=\"line\">                   Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book price is <span class=\"variable\">$price</span> &quot;</span>)</span><br><span class=\"line\">               &#125;<span class=\"keyword\">while</span> (cursor.moveToNext())</span><br><span class=\"line\">     </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           cursor.close()</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"SQL操作数据库\"><a href=\"#SQL操作数据库\" class=\"headerlink\" title=\"SQL操作数据库\"></a>SQL操作数据库</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加数据</span></span><br><span class=\"line\">db.execSQL(<span class=\"string\">&quot;insert into Book(name,author,pages,price) values(?,?,?,?)&quot;</span>,</span><br><span class=\"line\">          arrayOf(<span class=\"string\">&quot;The Da Vinci Code&quot;</span>,<span class=\"string\">&quot;Dan Brown&quot;</span>,<span class=\"string\">&quot;454&quot;</span>,<span class=\"string\">&quot;16.96&quot;</span>)</span><br><span class=\"line\">          )</span><br><span class=\"line\">db.execSQL(<span class=\"string\">&quot;insert into Book(name,author,pages,price) values(?,?,?,?)&quot;</span>,</span><br><span class=\"line\">          arrayOf(<span class=\"string\">&quot;The Lost Symbol&quot;</span>,<span class=\"string\">&quot;Dan Brown&quot;</span>,<span class=\"string\">&quot;510&quot;</span>,<span class=\"string\">&quot;19.95&quot;</span>)</span><br><span class=\"line\">          )</span><br><span class=\"line\"><span class=\"comment\">//更新数据</span></span><br><span class=\"line\">db.execSQL(<span class=\"string\">&quot;update Book set price=? where name=? &quot;</span>,arrayOf(<span class=\"string\">&quot;10.99&quot;</span>,<span class=\"string\">&quot;The Da Vinci Code&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\">//删除数据</span></span><br><span class=\"line\">db.execSQL(<span class=\"string\">&quot;delete from book where pages&gt;?&quot;</span>,arrayOf(<span class=\"string\">&quot;500&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\">//查询数据</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> cursor=db.rawQuery(<span class=\"string\">&quot;select * from Book&quot;</span>,<span class=\"literal\">null</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用事务\"><a href=\"#使用事务\" class=\"headerlink\" title=\"使用事务\"></a>使用事务</h3><p><strong>特点</strong>：操作要失败一起失败要成功一起成功</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.replaceData.setOnClickListener &#123;</span><br><span class=\"line\">           <span class=\"comment\">//获取SQLiteDatabase对象</span></span><br><span class=\"line\">           <span class=\"keyword\">val</span> db=dbHelper.writableDatabase</span><br><span class=\"line\">           <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">           db.beginTransaction()</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               db.delete(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>)</span><br><span class=\"line\">               <span class=\"comment\">/*if(true)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">                   //手动抛出异常，让事务失败</span></span><br><span class=\"line\"><span class=\"comment\">                   throw NullPointerException()</span></span><br><span class=\"line\"><span class=\"comment\">               &#125;*/</span></span><br><span class=\"line\">               <span class=\"keyword\">val</span> values=ContentValues().apply &#123;</span><br><span class=\"line\">                   put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;Game of Thrones&quot;</span>)</span><br><span class=\"line\">                   put(<span class=\"string\">&quot;author&quot;</span>,<span class=\"string\">&quot;George Martin&quot;</span>)</span><br><span class=\"line\">                   put(<span class=\"string\">&quot;pages&quot;</span>,<span class=\"number\">720</span>)</span><br><span class=\"line\">                   put(<span class=\"string\">&quot;price&quot;</span>,<span class=\"number\">20.85</span>)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               db.insert(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,values)</span><br><span class=\"line\">               <span class=\"comment\">//事务已经执行成功</span></span><br><span class=\"line\">               db.setTransactionSuccessful()</span><br><span class=\"line\">           &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">               e.printStackTrace()</span><br><span class=\"line\">           &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">//结束事务</span></span><br><span class=\"line\">               db.endTransaction()</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"升级数据库最佳写法\"><a href=\"#升级数据库最佳写法\" class=\"headerlink\" title=\"升级数据库最佳写法\"></a>升级数据库最佳写法</h3><p>每进行一次更新都在onUpgrade()方法中加入一个if判断语句</p>\n<p>这样就算跨版本升级也不会出现数据丢失</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyDatabaseHelper</span>(<span class=\"keyword\">val</span> context:Context,name:String,version: <span class=\"built_in\">Int</span>) :SQLiteOpenHelper(context,name,<span class=\"literal\">null</span>,version)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> createBook=<span class=\"string\">&quot;create table Book(&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;id integer primary key autoincrement,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;author text,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;price real,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;pages integer,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;name text,&quot;</span>+</span><br><span class=\"line\">           <span class=\"string\">&quot;category_id)&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> createCategory=<span class=\"string\">&quot;create table Category(&quot;</span>+</span><br><span class=\"line\">            <span class=\"string\">&quot;id integer primary key autoincrement,&quot;</span>+</span><br><span class=\"line\">            <span class=\"string\">&quot;category_name text,&quot;</span>+</span><br><span class=\"line\">            <span class=\"string\">&quot;category_code integer)&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(db: <span class=\"type\">SQLiteDatabase</span>)</span></span> &#123;</span><br><span class=\"line\">        db.execSQL(createBook)</span><br><span class=\"line\">        db.execSQL(createCategory)</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">&quot;Create succeeded&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(db: <span class=\"type\">SQLiteDatabase</span>, oldVersion: <span class=\"type\">Int</span>, newVersion: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oldVersion&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            db.execSQL(createCategory)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oldVersion&lt;=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            db.execSQL(<span class=\"string\">&quot;alter table Book add column category_id integer&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"数据存储(Java)","date":"2025-03-06T11:32:12.000Z","_content":"\n# 文件存储\n\n### 数据存储\n\n1.新建save方法，运用openFileOutput接收(“文件名”，保存模式（强制覆盖：MODE_PRIVATE,增添追加：MODE_APPEND）)，openFileOutput方法返回的是FileOutputStream对象，通过BufferedWriter将其写入到文件中。\n\n2.重写onDestroy()方法，确保销毁前一定会调用save方法。\n\n```java\npublic class MainActivity extends AppCompatActivity {\nprivate EditText edit;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        edit=(EditText) findViewById(R.id.edit_text);\n    }\n//确保销毁时能够调用save方法\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        String inputText=edit.getText().toString();\n        save(inputText);\n    }\n    //保存输入文本到文件中去\n    public void save(String inputText){\n        FileOutputStream out=null;//声明文件输出流\n        BufferedWriter writer=null;//声明缓冲写入流\n        try{\n            //打开文件输出流，MODE_PRIVATE表示私有模式，文件只能被该应用访问\n            out=openFileOutput(\"data\", Context.MODE_PRIVATE);\n            //将输出流包装成缓冲写入流，使用UTF-8编码\n            writer=new BufferedWriter(new OutputStreamWriter(out));\n            //将文本写入文件\n            writer.write(inputText);\n        }catch (IOException e){\n            e.printStackTrace();//捕获并打印异常\n        }finally {\n            try {\n                //关闭writer流\n                if (writer!=null){\n                    writer.close();\n                }\n\n            }catch (IOException e){\n                e.printStackTrace();//捕获并打印关闭流时的异常\n            }\n        }\n    }\n}\n```\n\n\n\n### 读取数据\n\n新建load()方法，运用openFileInput接收(\"文件名\"),通过BufferedReader一行行读取对象\n\n```java\npublic String load(){\n        FileInputStream in=null;//声明文件输入流\n        BufferedReader reader=null;//声明缓冲读取流\n        StringBuilder content=new StringBuilder();//来存储读取的内容\n        try{\n            //打开文件输入流，读取名为“data”的文件\n            in=openFileInput(\"data\");\n            //将文件输入流包装成缓冲读取流\n            reader=new BufferedReader(new InputStreamReader(in));\n            String line=\"\";//用于存储每次读取的一行内容\n            while((line=reader.readLine())!=null){\n                content.append(line);//将读取的每一行都追加到content中\n            }\n        }catch (IOException e){\n            e.printStackTrace();//捕获并打印异常\n        }finally{\n            //确保reader流被关闭\n            if(reader!=null){\n                try{\n                    reader.close();//关闭缓冲读取流\n                }catch (IOException e){\n                    e.printStackTrace();//捕获并打印关闭流时的异常\n                }\n            }\n        }\n        return content.toString();//返回读取到的所有内容\n    }\n```\n\n完整代码：\n\n```java\npublic class MainActivity extends AppCompatActivity {\nprivate EditText edit;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        edit=(EditText) findViewById(R.id.edit_text);\n        String inputText=load();\n        if(!TextUtils.isEmpty(inputText)){\n            edit.setText(inputText);\n            edit.setSelection(inputText.length());\n            Toast.makeText(this, \"Restoring succeeded\", Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        String inputText=edit.getText().toString();\n        save(inputText);\n    }\n    public void save(String inputText){\n        FileOutputStream out=null;\n        BufferedWriter writer=null;\n        try{\n            out=openFileOutput(\"data\", Context.MODE_APPEND);\n            writer=new BufferedWriter(new OutputStreamWriter(out));\n            writer.write(inputText);\n        }catch (IOException e){\n            e.printStackTrace();\n        }finally {\n            try {\n                if (writer!=null){\n                    writer.close();\n                }\n\n            }catch (IOException e){\n                e.printStackTrace();\n            }\n        }\n    }\n    public String load(){\n        FileInputStream in=null;\n        BufferedReader reader=null;\n        StringBuilder content=new StringBuilder();\n        try{\n            in=openFileInput(\"data\");\n            reader=new BufferedReader(new InputStreamReader(in));\n            String line=\"\";\n            while((line=reader.readLine())!=null){\n                content.append(line);\n            }\n        }catch (IOException e){\n            e.printStackTrace();\n        }finally{\n            if(reader!=null){\n                try{\n                    reader.close();\n                }catch (IOException e){\n                    e.printStackTrace();\n                }\n            }\n        }\n        return content.toString();\n    }\n}\n```\n\n\n\n------\n\n# SharedPreferences存储\n\n### 数据存储\n\n1.用getSharedPreferences设置存放的文件名与模式（唯一）\n\n2.调用edit()方法\n\n3.存入数据并调用apply()方法提交\n\n```java\n @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button saveData=(Button) findViewById(R.id.save_data);\n        saveData.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                //获取SharedPreferences对象，存储在“data”文件中，MODE_PRIVATE表示私有模式\n                SharedPreferences.Editor editor=getSharedPreferences(\"data\",MODE_PRIVATE).edit();\n                //使用SharedPreferences.Editor存储数据\n                editor.putString(\"name\",\"Tom\");//存储字符串\n                editor.putInt(\"age\",28);//存储整型数据\n                editor.putBoolean(\"married\",false);//存储布尔值数据\n                //提交数据（apply()为异步提交不返回结果）\n                editor.apply();\n            }\n        });\n    }\n```\n\n\n\n### 读取数据\n\n```java\n Button restoreData=(Button) findViewById(R.id.restore_data);\n        restoreData.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                 //获取SharedPreferences对象，用于读取“data”文件中的数据\n                SharedPreferences pref=getSharedPreferences(\"data\",MODE_PRIVATE);\n                //从SharedPreferences中读取数据，如果没找到则使用默认值\n               String name= pref.getString(\"name\",\"\");\n               int age= pref.getInt(\"age\",0);\n               boolean married=pref.getBoolean(\"married\",false);\n                //输出日志，打印恢复的数据\n                Log.d(\"MainActivity\", \"name is \"+name);\n                Log.d(\"MainActivity\", \"age is \"+age);\n                Log.d(\"MainActivity\", \"married is \"+married);\n            }\n        });\n```\n\n[^注意]: get(键，默认值)：键找不到对应值时会返回默认值\n\n![](../img/img44.png)\n\n------\n\n# SQLite数据库存储\n\n### SQL语句\n\n整型：integer\n\n浮点型：real\n\n文本型：text\n\n二进制型：blob\n\n创建一个表格：\n\n```java\n 1.public static final String CREATE_BOOK=\"create table Book(\"//创建一个名为Book的表\n            +\"id integer primary key autoincrement, \"//定义id字段，设为主键，并设为自增\n            +\"author text, \"\n            +\"price real, \"\n            +\"pages integer, \"\n            +\"name text)\";\n2.private static final String CREATE_TABLE_SQL=\"create table\"+TABLE_NAME_NOTE+\"(id integer primary key autoincrement,title text,content,text,create_time text)\";\n//两种方法都可以使用\n```\n\n\n\n### 创建数据库\n\n1.新建帮助类MyDatabaseHelper继承自SQLiteOpenHelper\n\n2.重写构造方法\n\n3.重写onCreate调用execSQL执行建表语句\n\n4.重写onUpgrade\n\n5.之后可以调用getWritableDatabase（）或getReadableDatabase（）获取数据库\n\n```java\n//构造方法，初始化数据库\npublic MyDatabaseHelper(@Nullable Context context, @Nullable String name, @Nullable SQLiteDatabase.CursorFactory factory, int version) {\n        super(context, name, factory, version);\n    }\n//创建数据库表\n    @Override\n    public void onCreate(SQLiteDatabase db){\n        db.execSQL(CREATE_BOOK);\n    }\n//更新数据库，暂时不操作\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int i, int i1) {\n    }\n```\n\n\n\n### 升级数据库\n\n如果需要在已经创建好的数据库的基础上还想添加几类数据就需要升级数据库\n\n```java\npublic class MyDatabaseHelper extends SQLiteOpenHelper {\n    public static final String CREATE_BOOK=\"create table Book(\"\n            +\"id integer primary key autoincrement, \"\n            +\"author text, \"\n            +\"price real, \"\n            +\"pages integer, \"\n            +\"name text)\";\n    public static final String CREATE_CATEGORY=\"create table Category(\"\n            +\"id integer primary key autoincrement, \"\n            +\"category_name text, \"\n            +\"category_code integer)\";\n\n    private Context mContext;\n\n    public MyDatabaseHelper(@Nullable Context context, @Nullable String name, @Nullable SQLiteDatabase.CursorFactory factory, int version) {\n        super(context, name, factory, version);\n                mContext=context;\n    }\n    @Override\n    public void onCreate(SQLiteDatabase db){\n        db.execSQL(CREATE_BOOK);\n        db.execSQL(CREATE_CATEGORY);\n        Toast.makeText(mContext, \"Create succeeded\", Toast.LENGTH_SHORT).show();\n    }\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int i, int i1) {\n        db.execSQL(\"drop table if exists Book\");//如果存在Book表则删除\n        db.execSQL(\"drop table if exists Category\");//如果存在Category表则删除\n        onCreate(db);//重新创建表格\n    }\n}\n\n```\n\n**CRUD：Create添加Read查询Update更新Delete删除**\n\n### 添加数据\n\n可以使用insert()方法插入数据\n\n```java\n  public long insertData(Note note){             \n               SQLiteDatabase db=getWritableDatabase();//获取数据库\n                ContentValues values=new ContentValues();//创建ContentValues存储插入数据\n                //开始组装第一条数据\n                values.put(\"title\",note.getTitle());\n                values.put(\"content\",note.getContent());\n                values.put(\"create_time\",note.getCreatTime());\n              return  db.insert(\"Note\",null,values);//插入数据，返回插入的行号\n  }\n```\n\n\n\n### 更新数据\n\n利用updata()方法更新\n\n```java\npublic int updateData(Note note){\n                SQLiteDatabase db=getWritableDatabase();\n                ContentValues values=new ContentValues();\n                values.put(\"title\",note.getTitle());\n                values.put(\"content\",note.getContent());\n                values.put(\"create_time\",note.getCreatTime());\n                return db.update(\"Note\",values,\"id=?\",new String[]{note.getId()});\n}\n```\n\n\n\n### 删除数据\n\n用delete()方法删除\n\n```java\npublic int deleteData(String id){\n                SQLiteDatabase db=getWritableDatabase();\n               return db.delete(\"Note\",\"id=?\",new String[]{id});\n}\n```\n\n\n\n### 查询数据\n\n1**.方法：**通过query()方法\n\n2.**基本语法：**public Cursor query(String table, String[] columns, String selection,String[] selectionArgs, String groupBy, String having, String orderBy)\n\n3.**参数说明：**table：要查询的表名。\ncolumns：要返回的列名数组。可以指定要查询的具体列，若为 null，表示查询所有列。\nselection：查询条件，相当于 SQL 中的 WHERE 子句。可以为 null，表示没有条件（即返回所有记录）。\nselectionArgs：selection 中占位符（?）的实际值，必须与 selection 中的 ? 占位符一一对应。如果没有占位符，传入 null。\ngroupBy：对查询结果进行分组的列名数组，通常与 GROUP BY 子句结合使用。如果不需要分组，可以传入 null。\nhaving：分组后筛选的条件，相当于 SQL 中的 HAVING 子句。如果不需要筛选分组后的数据，可以传入 null。\norderBy：排序方式，相当于 SQL 中的 ORDER BY 子句。如果为 null，则不进行排序。\n\n4.**返回值：**\nquery() 方法返回一个 Cursor 对象，它包含了查询的结果。通过 Cursor，你可以逐行遍历查询结果并获取每一行的数据。\n\n```java\n               SQLiteDatabase db=dbHelper.getWritableDatabase();\n               //查询表中所有数据\n                Cursor cursor=db.query(\"Book\",null,null,null,null,null,null);\n                if(cursor.moveToFirst()){\n                    do{\n                        //遍历表中所有数据，并打印\n                        @SuppressLint(\"Range\") String name=cursor.getString(cursor.getColumnIndex(\"name\"));\n                        @SuppressLint(\"Range\") String author=cursor.getString(cursor.getColumnIndex(\"author\"));\n                        @SuppressLint(\"Range\") int pages=cursor.getInt(cursor.getColumnIndex(\"pages\"));\n                        @SuppressLint(\"Range\") double price=cursor.getDouble(cursor.getColumnIndex(\"price\"));\n                        Log.d(\"MainActivity\", \"book name is: \"+name);\n                        Log.d(\"MainActivity\", \"book author is: \"+author);\n                        Log.d(\"MainActivity\", \"book pages is: \"+pages);\n                        Log.d(\"MainActivity\", \"book price is: \"+price);\n                    }while(cursor.moveToNext());\n                }\n                cursor.close();;\n            }\n```\n\n\n\n### 使用SQL操作数据库\n\n添加数据：\n\n```java\ndb.execSQL(\"insert into Book(name,author,pages,price) values(? ,?, ?, ?)\",new String[]{\"The Da Vinci Code\",\"Dan Brown\",\"454\",\"16.96\"});\n```\n\n插入数据：\n\n`db.execSQL(\"update Book set price=? where name=?\",new String[]{\"10.99\",\"The Da Vinci Code\"});`\n\n删除数据：\n\n`db.execSQL(\"delete from Book where pages>?\",new String[]{\"500\"});`\n\n查询数据：\n\n`db.rawQuery(\"select * from Book\",null);`\n\n------\n\n","source":"_posts/数据存储.md","raw":"---\ntitle: 数据存储(Java)\ndate: 2025-03-06 19:32:12\ncategories:\n- Android(Java版)\ntags:\n---\n\n# 文件存储\n\n### 数据存储\n\n1.新建save方法，运用openFileOutput接收(“文件名”，保存模式（强制覆盖：MODE_PRIVATE,增添追加：MODE_APPEND）)，openFileOutput方法返回的是FileOutputStream对象，通过BufferedWriter将其写入到文件中。\n\n2.重写onDestroy()方法，确保销毁前一定会调用save方法。\n\n```java\npublic class MainActivity extends AppCompatActivity {\nprivate EditText edit;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        edit=(EditText) findViewById(R.id.edit_text);\n    }\n//确保销毁时能够调用save方法\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        String inputText=edit.getText().toString();\n        save(inputText);\n    }\n    //保存输入文本到文件中去\n    public void save(String inputText){\n        FileOutputStream out=null;//声明文件输出流\n        BufferedWriter writer=null;//声明缓冲写入流\n        try{\n            //打开文件输出流，MODE_PRIVATE表示私有模式，文件只能被该应用访问\n            out=openFileOutput(\"data\", Context.MODE_PRIVATE);\n            //将输出流包装成缓冲写入流，使用UTF-8编码\n            writer=new BufferedWriter(new OutputStreamWriter(out));\n            //将文本写入文件\n            writer.write(inputText);\n        }catch (IOException e){\n            e.printStackTrace();//捕获并打印异常\n        }finally {\n            try {\n                //关闭writer流\n                if (writer!=null){\n                    writer.close();\n                }\n\n            }catch (IOException e){\n                e.printStackTrace();//捕获并打印关闭流时的异常\n            }\n        }\n    }\n}\n```\n\n\n\n### 读取数据\n\n新建load()方法，运用openFileInput接收(\"文件名\"),通过BufferedReader一行行读取对象\n\n```java\npublic String load(){\n        FileInputStream in=null;//声明文件输入流\n        BufferedReader reader=null;//声明缓冲读取流\n        StringBuilder content=new StringBuilder();//来存储读取的内容\n        try{\n            //打开文件输入流，读取名为“data”的文件\n            in=openFileInput(\"data\");\n            //将文件输入流包装成缓冲读取流\n            reader=new BufferedReader(new InputStreamReader(in));\n            String line=\"\";//用于存储每次读取的一行内容\n            while((line=reader.readLine())!=null){\n                content.append(line);//将读取的每一行都追加到content中\n            }\n        }catch (IOException e){\n            e.printStackTrace();//捕获并打印异常\n        }finally{\n            //确保reader流被关闭\n            if(reader!=null){\n                try{\n                    reader.close();//关闭缓冲读取流\n                }catch (IOException e){\n                    e.printStackTrace();//捕获并打印关闭流时的异常\n                }\n            }\n        }\n        return content.toString();//返回读取到的所有内容\n    }\n```\n\n完整代码：\n\n```java\npublic class MainActivity extends AppCompatActivity {\nprivate EditText edit;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        edit=(EditText) findViewById(R.id.edit_text);\n        String inputText=load();\n        if(!TextUtils.isEmpty(inputText)){\n            edit.setText(inputText);\n            edit.setSelection(inputText.length());\n            Toast.makeText(this, \"Restoring succeeded\", Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        String inputText=edit.getText().toString();\n        save(inputText);\n    }\n    public void save(String inputText){\n        FileOutputStream out=null;\n        BufferedWriter writer=null;\n        try{\n            out=openFileOutput(\"data\", Context.MODE_APPEND);\n            writer=new BufferedWriter(new OutputStreamWriter(out));\n            writer.write(inputText);\n        }catch (IOException e){\n            e.printStackTrace();\n        }finally {\n            try {\n                if (writer!=null){\n                    writer.close();\n                }\n\n            }catch (IOException e){\n                e.printStackTrace();\n            }\n        }\n    }\n    public String load(){\n        FileInputStream in=null;\n        BufferedReader reader=null;\n        StringBuilder content=new StringBuilder();\n        try{\n            in=openFileInput(\"data\");\n            reader=new BufferedReader(new InputStreamReader(in));\n            String line=\"\";\n            while((line=reader.readLine())!=null){\n                content.append(line);\n            }\n        }catch (IOException e){\n            e.printStackTrace();\n        }finally{\n            if(reader!=null){\n                try{\n                    reader.close();\n                }catch (IOException e){\n                    e.printStackTrace();\n                }\n            }\n        }\n        return content.toString();\n    }\n}\n```\n\n\n\n------\n\n# SharedPreferences存储\n\n### 数据存储\n\n1.用getSharedPreferences设置存放的文件名与模式（唯一）\n\n2.调用edit()方法\n\n3.存入数据并调用apply()方法提交\n\n```java\n @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button saveData=(Button) findViewById(R.id.save_data);\n        saveData.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                //获取SharedPreferences对象，存储在“data”文件中，MODE_PRIVATE表示私有模式\n                SharedPreferences.Editor editor=getSharedPreferences(\"data\",MODE_PRIVATE).edit();\n                //使用SharedPreferences.Editor存储数据\n                editor.putString(\"name\",\"Tom\");//存储字符串\n                editor.putInt(\"age\",28);//存储整型数据\n                editor.putBoolean(\"married\",false);//存储布尔值数据\n                //提交数据（apply()为异步提交不返回结果）\n                editor.apply();\n            }\n        });\n    }\n```\n\n\n\n### 读取数据\n\n```java\n Button restoreData=(Button) findViewById(R.id.restore_data);\n        restoreData.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                 //获取SharedPreferences对象，用于读取“data”文件中的数据\n                SharedPreferences pref=getSharedPreferences(\"data\",MODE_PRIVATE);\n                //从SharedPreferences中读取数据，如果没找到则使用默认值\n               String name= pref.getString(\"name\",\"\");\n               int age= pref.getInt(\"age\",0);\n               boolean married=pref.getBoolean(\"married\",false);\n                //输出日志，打印恢复的数据\n                Log.d(\"MainActivity\", \"name is \"+name);\n                Log.d(\"MainActivity\", \"age is \"+age);\n                Log.d(\"MainActivity\", \"married is \"+married);\n            }\n        });\n```\n\n[^注意]: get(键，默认值)：键找不到对应值时会返回默认值\n\n![](../img/img44.png)\n\n------\n\n# SQLite数据库存储\n\n### SQL语句\n\n整型：integer\n\n浮点型：real\n\n文本型：text\n\n二进制型：blob\n\n创建一个表格：\n\n```java\n 1.public static final String CREATE_BOOK=\"create table Book(\"//创建一个名为Book的表\n            +\"id integer primary key autoincrement, \"//定义id字段，设为主键，并设为自增\n            +\"author text, \"\n            +\"price real, \"\n            +\"pages integer, \"\n            +\"name text)\";\n2.private static final String CREATE_TABLE_SQL=\"create table\"+TABLE_NAME_NOTE+\"(id integer primary key autoincrement,title text,content,text,create_time text)\";\n//两种方法都可以使用\n```\n\n\n\n### 创建数据库\n\n1.新建帮助类MyDatabaseHelper继承自SQLiteOpenHelper\n\n2.重写构造方法\n\n3.重写onCreate调用execSQL执行建表语句\n\n4.重写onUpgrade\n\n5.之后可以调用getWritableDatabase（）或getReadableDatabase（）获取数据库\n\n```java\n//构造方法，初始化数据库\npublic MyDatabaseHelper(@Nullable Context context, @Nullable String name, @Nullable SQLiteDatabase.CursorFactory factory, int version) {\n        super(context, name, factory, version);\n    }\n//创建数据库表\n    @Override\n    public void onCreate(SQLiteDatabase db){\n        db.execSQL(CREATE_BOOK);\n    }\n//更新数据库，暂时不操作\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int i, int i1) {\n    }\n```\n\n\n\n### 升级数据库\n\n如果需要在已经创建好的数据库的基础上还想添加几类数据就需要升级数据库\n\n```java\npublic class MyDatabaseHelper extends SQLiteOpenHelper {\n    public static final String CREATE_BOOK=\"create table Book(\"\n            +\"id integer primary key autoincrement, \"\n            +\"author text, \"\n            +\"price real, \"\n            +\"pages integer, \"\n            +\"name text)\";\n    public static final String CREATE_CATEGORY=\"create table Category(\"\n            +\"id integer primary key autoincrement, \"\n            +\"category_name text, \"\n            +\"category_code integer)\";\n\n    private Context mContext;\n\n    public MyDatabaseHelper(@Nullable Context context, @Nullable String name, @Nullable SQLiteDatabase.CursorFactory factory, int version) {\n        super(context, name, factory, version);\n                mContext=context;\n    }\n    @Override\n    public void onCreate(SQLiteDatabase db){\n        db.execSQL(CREATE_BOOK);\n        db.execSQL(CREATE_CATEGORY);\n        Toast.makeText(mContext, \"Create succeeded\", Toast.LENGTH_SHORT).show();\n    }\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int i, int i1) {\n        db.execSQL(\"drop table if exists Book\");//如果存在Book表则删除\n        db.execSQL(\"drop table if exists Category\");//如果存在Category表则删除\n        onCreate(db);//重新创建表格\n    }\n}\n\n```\n\n**CRUD：Create添加Read查询Update更新Delete删除**\n\n### 添加数据\n\n可以使用insert()方法插入数据\n\n```java\n  public long insertData(Note note){             \n               SQLiteDatabase db=getWritableDatabase();//获取数据库\n                ContentValues values=new ContentValues();//创建ContentValues存储插入数据\n                //开始组装第一条数据\n                values.put(\"title\",note.getTitle());\n                values.put(\"content\",note.getContent());\n                values.put(\"create_time\",note.getCreatTime());\n              return  db.insert(\"Note\",null,values);//插入数据，返回插入的行号\n  }\n```\n\n\n\n### 更新数据\n\n利用updata()方法更新\n\n```java\npublic int updateData(Note note){\n                SQLiteDatabase db=getWritableDatabase();\n                ContentValues values=new ContentValues();\n                values.put(\"title\",note.getTitle());\n                values.put(\"content\",note.getContent());\n                values.put(\"create_time\",note.getCreatTime());\n                return db.update(\"Note\",values,\"id=?\",new String[]{note.getId()});\n}\n```\n\n\n\n### 删除数据\n\n用delete()方法删除\n\n```java\npublic int deleteData(String id){\n                SQLiteDatabase db=getWritableDatabase();\n               return db.delete(\"Note\",\"id=?\",new String[]{id});\n}\n```\n\n\n\n### 查询数据\n\n1**.方法：**通过query()方法\n\n2.**基本语法：**public Cursor query(String table, String[] columns, String selection,String[] selectionArgs, String groupBy, String having, String orderBy)\n\n3.**参数说明：**table：要查询的表名。\ncolumns：要返回的列名数组。可以指定要查询的具体列，若为 null，表示查询所有列。\nselection：查询条件，相当于 SQL 中的 WHERE 子句。可以为 null，表示没有条件（即返回所有记录）。\nselectionArgs：selection 中占位符（?）的实际值，必须与 selection 中的 ? 占位符一一对应。如果没有占位符，传入 null。\ngroupBy：对查询结果进行分组的列名数组，通常与 GROUP BY 子句结合使用。如果不需要分组，可以传入 null。\nhaving：分组后筛选的条件，相当于 SQL 中的 HAVING 子句。如果不需要筛选分组后的数据，可以传入 null。\norderBy：排序方式，相当于 SQL 中的 ORDER BY 子句。如果为 null，则不进行排序。\n\n4.**返回值：**\nquery() 方法返回一个 Cursor 对象，它包含了查询的结果。通过 Cursor，你可以逐行遍历查询结果并获取每一行的数据。\n\n```java\n               SQLiteDatabase db=dbHelper.getWritableDatabase();\n               //查询表中所有数据\n                Cursor cursor=db.query(\"Book\",null,null,null,null,null,null);\n                if(cursor.moveToFirst()){\n                    do{\n                        //遍历表中所有数据，并打印\n                        @SuppressLint(\"Range\") String name=cursor.getString(cursor.getColumnIndex(\"name\"));\n                        @SuppressLint(\"Range\") String author=cursor.getString(cursor.getColumnIndex(\"author\"));\n                        @SuppressLint(\"Range\") int pages=cursor.getInt(cursor.getColumnIndex(\"pages\"));\n                        @SuppressLint(\"Range\") double price=cursor.getDouble(cursor.getColumnIndex(\"price\"));\n                        Log.d(\"MainActivity\", \"book name is: \"+name);\n                        Log.d(\"MainActivity\", \"book author is: \"+author);\n                        Log.d(\"MainActivity\", \"book pages is: \"+pages);\n                        Log.d(\"MainActivity\", \"book price is: \"+price);\n                    }while(cursor.moveToNext());\n                }\n                cursor.close();;\n            }\n```\n\n\n\n### 使用SQL操作数据库\n\n添加数据：\n\n```java\ndb.execSQL(\"insert into Book(name,author,pages,price) values(? ,?, ?, ?)\",new String[]{\"The Da Vinci Code\",\"Dan Brown\",\"454\",\"16.96\"});\n```\n\n插入数据：\n\n`db.execSQL(\"update Book set price=? where name=?\",new String[]{\"10.99\",\"The Da Vinci Code\"});`\n\n删除数据：\n\n`db.execSQL(\"delete from Book where pages>?\",new String[]{\"500\"});`\n\n查询数据：\n\n`db.rawQuery(\"select * from Book\",null);`\n\n------\n\n","slug":"数据存储","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcm002is4s79cbafh8p","content":"<h1 id=\"文件存储\"><a href=\"#文件存储\" class=\"headerlink\" title=\"文件存储\"></a>文件存储</h1><h3 id=\"数据存储\"><a href=\"#数据存储\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h3><p>1.新建save方法，运用openFileOutput接收(“文件名”，保存模式（强制覆盖：MODE_PRIVATE,增添追加：MODE_APPEND）)，openFileOutput方法返回的是FileOutputStream对象，通过BufferedWriter将其写入到文件中。</p>\n<p>2.重写onDestroy()方法，确保销毁前一定会调用save方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> EditText edit;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        edit=(EditText) findViewById(R.id.edit_text);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//确保销毁时能够调用save方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        String inputText=edit.getText().toString();</span><br><span class=\"line\">        save(inputText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//保存输入文本到文件中去</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(String inputText)</span>&#123;</span><br><span class=\"line\">        FileOutputStream out=<span class=\"literal\">null</span>;<span class=\"comment\">//声明文件输出流</span></span><br><span class=\"line\">        BufferedWriter writer=<span class=\"literal\">null</span>;<span class=\"comment\">//声明缓冲写入流</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//打开文件输出流，MODE_PRIVATE表示私有模式，文件只能被该应用访问</span></span><br><span class=\"line\">            out=openFileOutput(<span class=\"string\">&quot;data&quot;</span>, Context.MODE_PRIVATE);</span><br><span class=\"line\">            <span class=\"comment\">//将输出流包装成缓冲写入流，使用UTF-8编码</span></span><br><span class=\"line\">            writer=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(out));</span><br><span class=\"line\">            <span class=\"comment\">//将文本写入文件</span></span><br><span class=\"line\">            writer.write(inputText);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();<span class=\"comment\">//捕获并打印异常</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//关闭writer流</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (writer!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    writer.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();<span class=\"comment\">//捕获并打印关闭流时的异常</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"读取数据\"><a href=\"#读取数据\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h3><p>新建load()方法，运用openFileInput接收(“文件名”),通过BufferedReader一行行读取对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">load</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        FileInputStream in=<span class=\"literal\">null</span>;<span class=\"comment\">//声明文件输入流</span></span><br><span class=\"line\">        BufferedReader reader=<span class=\"literal\">null</span>;<span class=\"comment\">//声明缓冲读取流</span></span><br><span class=\"line\">        StringBuilder content=<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();<span class=\"comment\">//来存储读取的内容</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//打开文件输入流，读取名为“data”的文件</span></span><br><span class=\"line\">            in=openFileInput(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//将文件输入流包装成缓冲读取流</span></span><br><span class=\"line\">            reader=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(in));</span><br><span class=\"line\">            String line=<span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//用于存储每次读取的一行内容</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>((line=reader.readLine())!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                content.append(line);<span class=\"comment\">//将读取的每一行都追加到content中</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();<span class=\"comment\">//捕获并打印异常</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//确保reader流被关闭</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(reader!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    reader.close();<span class=\"comment\">//关闭缓冲读取流</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();<span class=\"comment\">//捕获并打印关闭流时的异常</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content.toString();<span class=\"comment\">//返回读取到的所有内容</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>完整代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> EditText edit;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        edit=(EditText) findViewById(R.id.edit_text);</span><br><span class=\"line\">        String inputText=load();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!TextUtils.isEmpty(inputText))&#123;</span><br><span class=\"line\">            edit.setText(inputText);</span><br><span class=\"line\">            edit.setSelection(inputText.length());</span><br><span class=\"line\">            Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Restoring succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        String inputText=edit.getText().toString();</span><br><span class=\"line\">        save(inputText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(String inputText)</span>&#123;</span><br><span class=\"line\">        FileOutputStream out=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        BufferedWriter writer=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            out=openFileOutput(<span class=\"string\">&quot;data&quot;</span>, Context.MODE_APPEND);</span><br><span class=\"line\">            writer=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(out));</span><br><span class=\"line\">            writer.write(inputText);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (writer!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    writer.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">load</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        FileInputStream in=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        BufferedReader reader=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        StringBuilder content=<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            in=openFileInput(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">            reader=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(in));</span><br><span class=\"line\">            String line=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>((line=reader.readLine())!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                content.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(reader!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    reader.close();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"SharedPreferences存储\"><a href=\"#SharedPreferences存储\" class=\"headerlink\" title=\"SharedPreferences存储\"></a>SharedPreferences存储</h1><h3 id=\"数据存储-1\"><a href=\"#数据存储-1\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h3><p>1.用getSharedPreferences设置存放的文件名与模式（唯一）</p>\n<p>2.调用edit()方法</p>\n<p>3.存入数据并调用apply()方法提交</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">       setContentView(R.layout.activity_main);</span><br><span class=\"line\">       Button saveData=(Button) findViewById(R.id.save_data);</span><br><span class=\"line\">       saveData.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">//获取SharedPreferences对象，存储在“data”文件中，MODE_PRIVATE表示私有模式</span></span><br><span class=\"line\">               SharedPreferences.Editor editor=getSharedPreferences(<span class=\"string\">&quot;data&quot;</span>,MODE_PRIVATE).edit();</span><br><span class=\"line\">               <span class=\"comment\">//使用SharedPreferences.Editor存储数据</span></span><br><span class=\"line\">               editor.putString(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;Tom&quot;</span>);<span class=\"comment\">//存储字符串</span></span><br><span class=\"line\">               editor.putInt(<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">28</span>);<span class=\"comment\">//存储整型数据</span></span><br><span class=\"line\">               editor.putBoolean(<span class=\"string\">&quot;married&quot;</span>,<span class=\"literal\">false</span>);<span class=\"comment\">//存储布尔值数据</span></span><br><span class=\"line\">               <span class=\"comment\">//提交数据（apply()为异步提交不返回结果）</span></span><br><span class=\"line\">               editor.apply();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"读取数据-1\"><a href=\"#读取数据-1\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button restoreData=(Button) findViewById(R.id.restore_data);</span><br><span class=\"line\">       restoreData.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取SharedPreferences对象，用于读取“data”文件中的数据</span></span><br><span class=\"line\">               SharedPreferences pref=getSharedPreferences(<span class=\"string\">&quot;data&quot;</span>,MODE_PRIVATE);</span><br><span class=\"line\">               <span class=\"comment\">//从SharedPreferences中读取数据，如果没找到则使用默认值</span></span><br><span class=\"line\">              String name= pref.getString(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">              <span class=\"type\">int</span> age= pref.getInt(<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">              <span class=\"type\">boolean</span> married=pref.getBoolean(<span class=\"string\">&quot;married&quot;</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">               <span class=\"comment\">//输出日志，打印恢复的数据</span></span><br><span class=\"line\">               Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;name is &quot;</span>+name);</span><br><span class=\"line\">               Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;age is &quot;</span>+age);</span><br><span class=\"line\">               Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;married is &quot;</span>+married);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../img/img44.png\"></p>\n<hr>\n<h1 id=\"SQLite数据库存储\"><a href=\"#SQLite数据库存储\" class=\"headerlink\" title=\"SQLite数据库存储\"></a>SQLite数据库存储</h1><h3 id=\"SQL语句\"><a href=\"#SQL语句\" class=\"headerlink\" title=\"SQL语句\"></a>SQL语句</h3><p>整型：integer</p>\n<p>浮点型：real</p>\n<p>文本型：text</p>\n<p>二进制型：blob</p>\n<p>创建一个表格：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1.</span><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_BOOK=<span class=\"string\">&quot;create table Book(&quot;</span><span class=\"comment\">//创建一个名为Book的表</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;id integer primary key autoincrement, &quot;</span><span class=\"comment\">//定义id字段，设为主键，并设为自增</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;author text, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;price real, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;pages integer, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;name text)&quot;</span>;</span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_TABLE_SQL=<span class=\"string\">&quot;create table&quot;</span>+TABLE_NAME_NOTE+<span class=\"string\">&quot;(id integer primary key autoincrement,title text,content,text,create_time text)&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//两种方法都可以使用</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>1.新建帮助类MyDatabaseHelper继承自SQLiteOpenHelper</p>\n<p>2.重写构造方法</p>\n<p>3.重写onCreate调用execSQL执行建表语句</p>\n<p>4.重写onUpgrade</p>\n<p>5.之后可以调用getWritableDatabase（）或getReadableDatabase（）获取数据库</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构造方法，初始化数据库</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">MyDatabaseHelper</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Context context, <span class=\"meta\">@Nullable</span> String name, <span class=\"meta\">@Nullable</span> SQLiteDatabase.CursorFactory factory, <span class=\"type\">int</span> version)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(context, name, factory, version);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//创建数据库表</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span>&#123;</span><br><span class=\"line\">        db.execSQL(CREATE_BOOK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//更新数据库，暂时不操作</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"type\">int</span> i, <span class=\"type\">int</span> i1)</span> &#123;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"升级数据库\"><a href=\"#升级数据库\" class=\"headerlink\" title=\"升级数据库\"></a>升级数据库</h3><p>如果需要在已经创建好的数据库的基础上还想添加几类数据就需要升级数据库</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyDatabaseHelper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SQLiteOpenHelper</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_BOOK=<span class=\"string\">&quot;create table Book(&quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;id integer primary key autoincrement, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;author text, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;price real, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;pages integer, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;name text)&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_CATEGORY=<span class=\"string\">&quot;create table Category(&quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;id integer primary key autoincrement, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;category_name text, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;category_code integer)&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyDatabaseHelper</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Context context, <span class=\"meta\">@Nullable</span> String name, <span class=\"meta\">@Nullable</span> SQLiteDatabase.CursorFactory factory, <span class=\"type\">int</span> version)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(context, name, factory, version);</span><br><span class=\"line\">                mContext=context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span>&#123;</span><br><span class=\"line\">        db.execSQL(CREATE_BOOK);</span><br><span class=\"line\">        db.execSQL(CREATE_CATEGORY);</span><br><span class=\"line\">        Toast.makeText(mContext, <span class=\"string\">&quot;Create succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"type\">int</span> i, <span class=\"type\">int</span> i1)</span> &#123;</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;drop table if exists Book&quot;</span>);<span class=\"comment\">//如果存在Book表则删除</span></span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;drop table if exists Category&quot;</span>);<span class=\"comment\">//如果存在Category表则删除</span></span><br><span class=\"line\">        onCreate(db);<span class=\"comment\">//重新创建表格</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>CRUD：Create添加Read查询Update更新Delete删除</strong></p>\n<h3 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h3><p>可以使用insert()方法插入数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">insertData</span><span class=\"params\">(Note note)</span>&#123;             </span><br><span class=\"line\">             SQLiteDatabase db=getWritableDatabase();<span class=\"comment\">//获取数据库</span></span><br><span class=\"line\">              ContentValues values=<span class=\"keyword\">new</span> <span class=\"title class_\">ContentValues</span>();<span class=\"comment\">//创建ContentValues存储插入数据</span></span><br><span class=\"line\">              <span class=\"comment\">//开始组装第一条数据</span></span><br><span class=\"line\">              values.put(<span class=\"string\">&quot;title&quot;</span>,note.getTitle());</span><br><span class=\"line\">              values.put(<span class=\"string\">&quot;content&quot;</span>,note.getContent());</span><br><span class=\"line\">              values.put(<span class=\"string\">&quot;create_time&quot;</span>,note.getCreatTime());</span><br><span class=\"line\">            <span class=\"keyword\">return</span>  db.insert(<span class=\"string\">&quot;Note&quot;</span>,<span class=\"literal\">null</span>,values);<span class=\"comment\">//插入数据，返回插入的行号</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><p>利用updata()方法更新</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">updateData</span><span class=\"params\">(Note note)</span>&#123;</span><br><span class=\"line\">                SQLiteDatabase db=getWritableDatabase();</span><br><span class=\"line\">                ContentValues values=<span class=\"keyword\">new</span> <span class=\"title class_\">ContentValues</span>();</span><br><span class=\"line\">                values.put(<span class=\"string\">&quot;title&quot;</span>,note.getTitle());</span><br><span class=\"line\">                values.put(<span class=\"string\">&quot;content&quot;</span>,note.getContent());</span><br><span class=\"line\">                values.put(<span class=\"string\">&quot;create_time&quot;</span>,note.getCreatTime());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> db.update(<span class=\"string\">&quot;Note&quot;</span>,values,<span class=\"string\">&quot;id=?&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;note.getId()&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p>用delete()方法删除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">deleteData</span><span class=\"params\">(String id)</span>&#123;</span><br><span class=\"line\">                SQLiteDatabase db=getWritableDatabase();</span><br><span class=\"line\">               <span class=\"keyword\">return</span> db.delete(<span class=\"string\">&quot;Note&quot;</span>,<span class=\"string\">&quot;id=?&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;id&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><p>1**.方法：**通过query()方法</p>\n<p>2.**基本语法：**public Cursor query(String table, String[] columns, String selection,String[] selectionArgs, String groupBy, String having, String orderBy)</p>\n<p>3.**参数说明：**table：要查询的表名。<br>columns：要返回的列名数组。可以指定要查询的具体列，若为 null，表示查询所有列。<br>selection：查询条件，相当于 SQL 中的 WHERE 子句。可以为 null，表示没有条件（即返回所有记录）。<br>selectionArgs：selection 中占位符（?）的实际值，必须与 selection 中的 ? 占位符一一对应。如果没有占位符，传入 null。<br>groupBy：对查询结果进行分组的列名数组，通常与 GROUP BY 子句结合使用。如果不需要分组，可以传入 null。<br>having：分组后筛选的条件，相当于 SQL 中的 HAVING 子句。如果不需要筛选分组后的数据，可以传入 null。<br>orderBy：排序方式，相当于 SQL 中的 ORDER BY 子句。如果为 null，则不进行排序。</p>\n<p>4.<strong>返回值：</strong><br>query() 方法返回一个 Cursor 对象，它包含了查询的结果。通过 Cursor，你可以逐行遍历查询结果并获取每一行的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   SQLiteDatabase db=dbHelper.getWritableDatabase();</span><br><span class=\"line\">   <span class=\"comment\">//查询表中所有数据</span></span><br><span class=\"line\">    Cursor cursor=db.query(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cursor.moveToFirst())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//遍历表中所有数据，并打印</span></span><br><span class=\"line\">            <span class=\"meta\">@SuppressLint(&quot;Range&quot;)</span> String name=cursor.getString(cursor.getColumnIndex(<span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\">            <span class=\"meta\">@SuppressLint(&quot;Range&quot;)</span> String author=cursor.getString(cursor.getColumnIndex(<span class=\"string\">&quot;author&quot;</span>));</span><br><span class=\"line\">            <span class=\"meta\">@SuppressLint(&quot;Range&quot;)</span> <span class=\"type\">int</span> pages=cursor.getInt(cursor.getColumnIndex(<span class=\"string\">&quot;pages&quot;</span>));</span><br><span class=\"line\">            <span class=\"meta\">@SuppressLint(&quot;Range&quot;)</span> <span class=\"type\">double</span> price=cursor.getDouble(cursor.getColumnIndex(<span class=\"string\">&quot;price&quot;</span>));</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book name is: &quot;</span>+name);</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book author is: &quot;</span>+author);</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book pages is: &quot;</span>+pages);</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book price is: &quot;</span>+price);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span>(cursor.moveToNext());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cursor.close();;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用SQL操作数据库\"><a href=\"#使用SQL操作数据库\" class=\"headerlink\" title=\"使用SQL操作数据库\"></a>使用SQL操作数据库</h3><p>添加数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.execSQL(<span class=\"string\">&quot;insert into Book(name,author,pages,price) values(? ,?, ?, ?)&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;The Da Vinci Code&quot;</span>,<span class=\"string\">&quot;Dan Brown&quot;</span>,<span class=\"string\">&quot;454&quot;</span>,<span class=\"string\">&quot;16.96&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>插入数据：</p>\n<p><code>db.execSQL(&quot;update Book set price=? where name=?&quot;,new String[]&#123;&quot;10.99&quot;,&quot;The Da Vinci Code&quot;&#125;);</code></p>\n<p>删除数据：</p>\n<p><code>db.execSQL(&quot;delete from Book where pages&gt;?&quot;,new String[]&#123;&quot;500&quot;&#125;);</code></p>\n<p>查询数据：</p>\n<p><code>db.rawQuery(&quot;select * from Book&quot;,null);</code></p>\n<hr>\n","excerpt":"文件存储\n数据存储\n1.新建save方法，运用openFileOutput接收(“文件名”，保存模式（强制覆盖：MODE_PRIVATE,增添追加：MODE_APPEND）)，openFileOutput方法返回的是FileOutputStream对象，通过BufferedWriter将其写入到文件中。\n\n2.重写onDestroy()方法，确保销毁前一定会调用save方法。\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n4","more":"<h1 id=\"文件存储\"><a href=\"#文件存储\" class=\"headerlink\" title=\"文件存储\"></a>文件存储</h1><h3 id=\"数据存储\"><a href=\"#数据存储\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h3><p>1.新建save方法，运用openFileOutput接收(“文件名”，保存模式（强制覆盖：MODE_PRIVATE,增添追加：MODE_APPEND）)，openFileOutput方法返回的是FileOutputStream对象，通过BufferedWriter将其写入到文件中。</p>\n<p>2.重写onDestroy()方法，确保销毁前一定会调用save方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> EditText edit;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        edit=(EditText) findViewById(R.id.edit_text);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//确保销毁时能够调用save方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        String inputText=edit.getText().toString();</span><br><span class=\"line\">        save(inputText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//保存输入文本到文件中去</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(String inputText)</span>&#123;</span><br><span class=\"line\">        FileOutputStream out=<span class=\"literal\">null</span>;<span class=\"comment\">//声明文件输出流</span></span><br><span class=\"line\">        BufferedWriter writer=<span class=\"literal\">null</span>;<span class=\"comment\">//声明缓冲写入流</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//打开文件输出流，MODE_PRIVATE表示私有模式，文件只能被该应用访问</span></span><br><span class=\"line\">            out=openFileOutput(<span class=\"string\">&quot;data&quot;</span>, Context.MODE_PRIVATE);</span><br><span class=\"line\">            <span class=\"comment\">//将输出流包装成缓冲写入流，使用UTF-8编码</span></span><br><span class=\"line\">            writer=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(out));</span><br><span class=\"line\">            <span class=\"comment\">//将文本写入文件</span></span><br><span class=\"line\">            writer.write(inputText);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();<span class=\"comment\">//捕获并打印异常</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//关闭writer流</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (writer!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    writer.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();<span class=\"comment\">//捕获并打印关闭流时的异常</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"读取数据\"><a href=\"#读取数据\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h3><p>新建load()方法，运用openFileInput接收(“文件名”),通过BufferedReader一行行读取对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">load</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        FileInputStream in=<span class=\"literal\">null</span>;<span class=\"comment\">//声明文件输入流</span></span><br><span class=\"line\">        BufferedReader reader=<span class=\"literal\">null</span>;<span class=\"comment\">//声明缓冲读取流</span></span><br><span class=\"line\">        StringBuilder content=<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();<span class=\"comment\">//来存储读取的内容</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//打开文件输入流，读取名为“data”的文件</span></span><br><span class=\"line\">            in=openFileInput(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//将文件输入流包装成缓冲读取流</span></span><br><span class=\"line\">            reader=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(in));</span><br><span class=\"line\">            String line=<span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//用于存储每次读取的一行内容</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>((line=reader.readLine())!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                content.append(line);<span class=\"comment\">//将读取的每一行都追加到content中</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();<span class=\"comment\">//捕获并打印异常</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//确保reader流被关闭</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(reader!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    reader.close();<span class=\"comment\">//关闭缓冲读取流</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();<span class=\"comment\">//捕获并打印关闭流时的异常</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content.toString();<span class=\"comment\">//返回读取到的所有内容</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>完整代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> EditText edit;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        edit=(EditText) findViewById(R.id.edit_text);</span><br><span class=\"line\">        String inputText=load();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!TextUtils.isEmpty(inputText))&#123;</span><br><span class=\"line\">            edit.setText(inputText);</span><br><span class=\"line\">            edit.setSelection(inputText.length());</span><br><span class=\"line\">            Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Restoring succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        String inputText=edit.getText().toString();</span><br><span class=\"line\">        save(inputText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(String inputText)</span>&#123;</span><br><span class=\"line\">        FileOutputStream out=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        BufferedWriter writer=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            out=openFileOutput(<span class=\"string\">&quot;data&quot;</span>, Context.MODE_APPEND);</span><br><span class=\"line\">            writer=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(out));</span><br><span class=\"line\">            writer.write(inputText);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (writer!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    writer.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">load</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        FileInputStream in=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        BufferedReader reader=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        StringBuilder content=<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            in=openFileInput(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">            reader=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(in));</span><br><span class=\"line\">            String line=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>((line=reader.readLine())!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                content.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(reader!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    reader.close();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"SharedPreferences存储\"><a href=\"#SharedPreferences存储\" class=\"headerlink\" title=\"SharedPreferences存储\"></a>SharedPreferences存储</h1><h3 id=\"数据存储-1\"><a href=\"#数据存储-1\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h3><p>1.用getSharedPreferences设置存放的文件名与模式（唯一）</p>\n<p>2.调用edit()方法</p>\n<p>3.存入数据并调用apply()方法提交</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">       setContentView(R.layout.activity_main);</span><br><span class=\"line\">       Button saveData=(Button) findViewById(R.id.save_data);</span><br><span class=\"line\">       saveData.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">//获取SharedPreferences对象，存储在“data”文件中，MODE_PRIVATE表示私有模式</span></span><br><span class=\"line\">               SharedPreferences.Editor editor=getSharedPreferences(<span class=\"string\">&quot;data&quot;</span>,MODE_PRIVATE).edit();</span><br><span class=\"line\">               <span class=\"comment\">//使用SharedPreferences.Editor存储数据</span></span><br><span class=\"line\">               editor.putString(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;Tom&quot;</span>);<span class=\"comment\">//存储字符串</span></span><br><span class=\"line\">               editor.putInt(<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">28</span>);<span class=\"comment\">//存储整型数据</span></span><br><span class=\"line\">               editor.putBoolean(<span class=\"string\">&quot;married&quot;</span>,<span class=\"literal\">false</span>);<span class=\"comment\">//存储布尔值数据</span></span><br><span class=\"line\">               <span class=\"comment\">//提交数据（apply()为异步提交不返回结果）</span></span><br><span class=\"line\">               editor.apply();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"读取数据-1\"><a href=\"#读取数据-1\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button restoreData=(Button) findViewById(R.id.restore_data);</span><br><span class=\"line\">       restoreData.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取SharedPreferences对象，用于读取“data”文件中的数据</span></span><br><span class=\"line\">               SharedPreferences pref=getSharedPreferences(<span class=\"string\">&quot;data&quot;</span>,MODE_PRIVATE);</span><br><span class=\"line\">               <span class=\"comment\">//从SharedPreferences中读取数据，如果没找到则使用默认值</span></span><br><span class=\"line\">              String name= pref.getString(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">              <span class=\"type\">int</span> age= pref.getInt(<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">              <span class=\"type\">boolean</span> married=pref.getBoolean(<span class=\"string\">&quot;married&quot;</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">               <span class=\"comment\">//输出日志，打印恢复的数据</span></span><br><span class=\"line\">               Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;name is &quot;</span>+name);</span><br><span class=\"line\">               Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;age is &quot;</span>+age);</span><br><span class=\"line\">               Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;married is &quot;</span>+married);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../img/img44.png\"></p>\n<hr>\n<h1 id=\"SQLite数据库存储\"><a href=\"#SQLite数据库存储\" class=\"headerlink\" title=\"SQLite数据库存储\"></a>SQLite数据库存储</h1><h3 id=\"SQL语句\"><a href=\"#SQL语句\" class=\"headerlink\" title=\"SQL语句\"></a>SQL语句</h3><p>整型：integer</p>\n<p>浮点型：real</p>\n<p>文本型：text</p>\n<p>二进制型：blob</p>\n<p>创建一个表格：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1.</span><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_BOOK=<span class=\"string\">&quot;create table Book(&quot;</span><span class=\"comment\">//创建一个名为Book的表</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;id integer primary key autoincrement, &quot;</span><span class=\"comment\">//定义id字段，设为主键，并设为自增</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;author text, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;price real, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;pages integer, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;name text)&quot;</span>;</span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_TABLE_SQL=<span class=\"string\">&quot;create table&quot;</span>+TABLE_NAME_NOTE+<span class=\"string\">&quot;(id integer primary key autoincrement,title text,content,text,create_time text)&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//两种方法都可以使用</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>1.新建帮助类MyDatabaseHelper继承自SQLiteOpenHelper</p>\n<p>2.重写构造方法</p>\n<p>3.重写onCreate调用execSQL执行建表语句</p>\n<p>4.重写onUpgrade</p>\n<p>5.之后可以调用getWritableDatabase（）或getReadableDatabase（）获取数据库</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构造方法，初始化数据库</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">MyDatabaseHelper</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Context context, <span class=\"meta\">@Nullable</span> String name, <span class=\"meta\">@Nullable</span> SQLiteDatabase.CursorFactory factory, <span class=\"type\">int</span> version)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(context, name, factory, version);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//创建数据库表</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span>&#123;</span><br><span class=\"line\">        db.execSQL(CREATE_BOOK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//更新数据库，暂时不操作</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"type\">int</span> i, <span class=\"type\">int</span> i1)</span> &#123;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"升级数据库\"><a href=\"#升级数据库\" class=\"headerlink\" title=\"升级数据库\"></a>升级数据库</h3><p>如果需要在已经创建好的数据库的基础上还想添加几类数据就需要升级数据库</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyDatabaseHelper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SQLiteOpenHelper</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_BOOK=<span class=\"string\">&quot;create table Book(&quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;id integer primary key autoincrement, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;author text, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;price real, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;pages integer, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;name text)&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_CATEGORY=<span class=\"string\">&quot;create table Category(&quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;id integer primary key autoincrement, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;category_name text, &quot;</span></span><br><span class=\"line\">            +<span class=\"string\">&quot;category_code integer)&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyDatabaseHelper</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Context context, <span class=\"meta\">@Nullable</span> String name, <span class=\"meta\">@Nullable</span> SQLiteDatabase.CursorFactory factory, <span class=\"type\">int</span> version)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(context, name, factory, version);</span><br><span class=\"line\">                mContext=context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span>&#123;</span><br><span class=\"line\">        db.execSQL(CREATE_BOOK);</span><br><span class=\"line\">        db.execSQL(CREATE_CATEGORY);</span><br><span class=\"line\">        Toast.makeText(mContext, <span class=\"string\">&quot;Create succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"type\">int</span> i, <span class=\"type\">int</span> i1)</span> &#123;</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;drop table if exists Book&quot;</span>);<span class=\"comment\">//如果存在Book表则删除</span></span><br><span class=\"line\">        db.execSQL(<span class=\"string\">&quot;drop table if exists Category&quot;</span>);<span class=\"comment\">//如果存在Category表则删除</span></span><br><span class=\"line\">        onCreate(db);<span class=\"comment\">//重新创建表格</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>CRUD：Create添加Read查询Update更新Delete删除</strong></p>\n<h3 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h3><p>可以使用insert()方法插入数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">insertData</span><span class=\"params\">(Note note)</span>&#123;             </span><br><span class=\"line\">             SQLiteDatabase db=getWritableDatabase();<span class=\"comment\">//获取数据库</span></span><br><span class=\"line\">              ContentValues values=<span class=\"keyword\">new</span> <span class=\"title class_\">ContentValues</span>();<span class=\"comment\">//创建ContentValues存储插入数据</span></span><br><span class=\"line\">              <span class=\"comment\">//开始组装第一条数据</span></span><br><span class=\"line\">              values.put(<span class=\"string\">&quot;title&quot;</span>,note.getTitle());</span><br><span class=\"line\">              values.put(<span class=\"string\">&quot;content&quot;</span>,note.getContent());</span><br><span class=\"line\">              values.put(<span class=\"string\">&quot;create_time&quot;</span>,note.getCreatTime());</span><br><span class=\"line\">            <span class=\"keyword\">return</span>  db.insert(<span class=\"string\">&quot;Note&quot;</span>,<span class=\"literal\">null</span>,values);<span class=\"comment\">//插入数据，返回插入的行号</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><p>利用updata()方法更新</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">updateData</span><span class=\"params\">(Note note)</span>&#123;</span><br><span class=\"line\">                SQLiteDatabase db=getWritableDatabase();</span><br><span class=\"line\">                ContentValues values=<span class=\"keyword\">new</span> <span class=\"title class_\">ContentValues</span>();</span><br><span class=\"line\">                values.put(<span class=\"string\">&quot;title&quot;</span>,note.getTitle());</span><br><span class=\"line\">                values.put(<span class=\"string\">&quot;content&quot;</span>,note.getContent());</span><br><span class=\"line\">                values.put(<span class=\"string\">&quot;create_time&quot;</span>,note.getCreatTime());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> db.update(<span class=\"string\">&quot;Note&quot;</span>,values,<span class=\"string\">&quot;id=?&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;note.getId()&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p>用delete()方法删除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">deleteData</span><span class=\"params\">(String id)</span>&#123;</span><br><span class=\"line\">                SQLiteDatabase db=getWritableDatabase();</span><br><span class=\"line\">               <span class=\"keyword\">return</span> db.delete(<span class=\"string\">&quot;Note&quot;</span>,<span class=\"string\">&quot;id=?&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;id&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><p>1**.方法：**通过query()方法</p>\n<p>2.**基本语法：**public Cursor query(String table, String[] columns, String selection,String[] selectionArgs, String groupBy, String having, String orderBy)</p>\n<p>3.**参数说明：**table：要查询的表名。<br>columns：要返回的列名数组。可以指定要查询的具体列，若为 null，表示查询所有列。<br>selection：查询条件，相当于 SQL 中的 WHERE 子句。可以为 null，表示没有条件（即返回所有记录）。<br>selectionArgs：selection 中占位符（?）的实际值，必须与 selection 中的 ? 占位符一一对应。如果没有占位符，传入 null。<br>groupBy：对查询结果进行分组的列名数组，通常与 GROUP BY 子句结合使用。如果不需要分组，可以传入 null。<br>having：分组后筛选的条件，相当于 SQL 中的 HAVING 子句。如果不需要筛选分组后的数据，可以传入 null。<br>orderBy：排序方式，相当于 SQL 中的 ORDER BY 子句。如果为 null，则不进行排序。</p>\n<p>4.<strong>返回值：</strong><br>query() 方法返回一个 Cursor 对象，它包含了查询的结果。通过 Cursor，你可以逐行遍历查询结果并获取每一行的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   SQLiteDatabase db=dbHelper.getWritableDatabase();</span><br><span class=\"line\">   <span class=\"comment\">//查询表中所有数据</span></span><br><span class=\"line\">    Cursor cursor=db.query(<span class=\"string\">&quot;Book&quot;</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cursor.moveToFirst())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//遍历表中所有数据，并打印</span></span><br><span class=\"line\">            <span class=\"meta\">@SuppressLint(&quot;Range&quot;)</span> String name=cursor.getString(cursor.getColumnIndex(<span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\">            <span class=\"meta\">@SuppressLint(&quot;Range&quot;)</span> String author=cursor.getString(cursor.getColumnIndex(<span class=\"string\">&quot;author&quot;</span>));</span><br><span class=\"line\">            <span class=\"meta\">@SuppressLint(&quot;Range&quot;)</span> <span class=\"type\">int</span> pages=cursor.getInt(cursor.getColumnIndex(<span class=\"string\">&quot;pages&quot;</span>));</span><br><span class=\"line\">            <span class=\"meta\">@SuppressLint(&quot;Range&quot;)</span> <span class=\"type\">double</span> price=cursor.getDouble(cursor.getColumnIndex(<span class=\"string\">&quot;price&quot;</span>));</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book name is: &quot;</span>+name);</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book author is: &quot;</span>+author);</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book pages is: &quot;</span>+pages);</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;book price is: &quot;</span>+price);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span>(cursor.moveToNext());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cursor.close();;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用SQL操作数据库\"><a href=\"#使用SQL操作数据库\" class=\"headerlink\" title=\"使用SQL操作数据库\"></a>使用SQL操作数据库</h3><p>添加数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.execSQL(<span class=\"string\">&quot;insert into Book(name,author,pages,price) values(? ,?, ?, ?)&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;The Da Vinci Code&quot;</span>,<span class=\"string\">&quot;Dan Brown&quot;</span>,<span class=\"string\">&quot;454&quot;</span>,<span class=\"string\">&quot;16.96&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>插入数据：</p>\n<p><code>db.execSQL(&quot;update Book set price=? where name=?&quot;,new String[]&#123;&quot;10.99&quot;,&quot;The Da Vinci Code&quot;&#125;);</code></p>\n<p>删除数据：</p>\n<p><code>db.execSQL(&quot;delete from Book where pages&gt;?&quot;,new String[]&#123;&quot;500&quot;&#125;);</code></p>\n<p>查询数据：</p>\n<p><code>db.rawQuery(&quot;select * from Book&quot;,null);</code></p>\n<hr>\n"},{"title":"最美UI体验,Material Design(Kotlin)","date":"2025-06-15T13:34:20.000Z","_content":"\n# 各版块颜色的代表标识\n\n![](../img/img59.jpg)\n\n------\n\n# Toolbar\n\n- 在布局文件中使用\n- 在活动中设置\n\n```kotlin\n            <androidx.appcompat.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"?attr/colorPrimary\"\n                android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"//为弹出的菜单项设置主题\n                app:layout_scrollFlags=\"scroll|enterAlways|snap\"/>//用于控制Toolbar或其他顶部栏的滚动行为\n```\n\n```kotlin\nsetSupportActionBar(binding.toolbar)\n```\n\n------\n\n# DrawerLayout\n\n这是一个布局，允许放入两个直接子控件，第一个是主屏幕显示的内容，第二个是滑动菜单中显示的内容\n\n```kotlin\n<androidx.drawerlayout.widget.DrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/drawerLayout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <FrameLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" >\n\t    <androidx.appcompat.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"@color/colorPrimary\"\n                android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                app:layout_scrollFlags=\"scroll|enterAlways|snap\"/>\n    </FrameLayout>\n\t<TextView\n \t\tandroid:layout_width=\"match_parent\"\n     \tandroid:layout_height=\"match_parent\"\n\t\tandroid:text=\"This is menu\"/>  \t\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\n```kotlin\n//调用getSupportActionBar方法获取ActionBar实例\n        supportActionBar?.let {\n            //让导航按钮显示\n            it.setDisplayHomeAsUpEnabled(true)\n            //设置导航图标\n            it.setHomeAsUpIndicator(R.drawable.ic_menu)\n        }\n```\n\n```kotlin\n//设置按钮点击事件\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        when(item.itemId){\n            //openDrawer将滑动菜单显示出来\n            android.R.id.home->binding.drawerLayout.openDrawer(GravityCompat.START)\n            ...\n        }\n        return true\n    }\n```\n\n------\n\n# NavigationView\n\n**作用：** NavigationView 用于在侧滑菜单中显示导航菜单项，可方便地配置菜单资源、头部布局等。\n\n- 依赖库\n- menu\n- headerLayout\n- 点击事件\n\n```kotlin\nimplementation(\"com.google.android.material:material:1.12.0\")\nimplementation(\"de.hdodenhof:circleimageview:3.1.0\")\n```\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <group android:checkableBehavior=\"single\">\n        <item\n            android:id=\"@+id/navCall\"\n            android:icon=\"@drawable/nav_call\"\n            android:title=\"Call\"/>\n        <item\n            android:id=\"@+id/navFriends\"\n            android:icon=\"@drawable/nav_friends\"\n            android:title=\"Friends\"/>\n        <item\n            android:id=\"@+id/navLocation\"\n            android:icon=\"@drawable/nav_location\"\n            android:title=\"Location\"/>\n        <item\n            android:id=\"@+id/navMail\"\n            android:icon=\"@drawable/nav_mail\"\n            android:title=\"Mail\"/>\n        <item\n            android:id=\"@+id/navTask\"\n            android:icon=\"@drawable/nav_task\"\n            android:title=\"Task\"/>\n\n    </group>\n</menu>\n```\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"180dp\"\n    android:padding=\"10dp\"\n    android:background=\"@color/colorPrimary\">\n    <de.hdodenhof.circleimageview.CircleImageView\n        android:id=\"@+id/iconImage\"\n        android:layout_width=\"70dp\"\n        android:layout_height=\"70dp\"\n        android:src=\"@drawable/nav_icon\"\n        android:layout_centerInParent=\"true\"/>\n    <TextView\n        android:id=\"@+id/mailText\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentBottom=\"true\"\n        android:text=\"buyu@qq.com\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"14sp\"/>\n    <TextView\n        android:id=\"@+id/userText\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_above=\"@id/mailText\"\n        android:text=\"Buyu\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"14sp\"/>\n\n\n</RelativeLayout>\n```\n\n```kotlin\n<com.google.android.material.navigation.NavigationView\n        android:id=\"@+id/navView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        app:menu=\"@menu/nav_menu\"\n        app:headerLayout=\"@layout/nav_header\"/>\n```\n\n```kotlin\n //设置默认选中项\n        binding.navView.setCheckedItem(R.id.navCall)\n        //设置菜单项选中事件的监听器\n        binding.navView.setNavigationItemSelectedListener {\n            //将滑动菜单关闭\n            binding.main.closeDrawers()\n            //true表示事件已处理\n            true\n        }\n```\n\n------\n\n# FloatingActionButton\n\n```kotlin\n<com.google.android.material.floatingactionbutton.FloatingActionButton\n            android:id=\"@+id/fab\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_margin=\"16dp\"\n            android:src=\"@drawable/ic_done\"\n            app:elevation=\"8dp\"/>//指定高度值\n```\n\n------\n\n# Snackbar\n\n**作用：** Snackbar 用于短暂地在屏幕底部显示信息反馈。虽然 Snackbar 主要在代码中调用显示，但其依赖于包含在布局中的 `CoordinatorLayout` 来获得自动动画和交互。\n\n```kotlin\nSnackbar.make(findViewById(R.id.coordinator_layout), \"这是一个Snackbar\", Snackbar.LENGTH_LONG)\n    .setAction(\"Undo\") {\n        // 处理点击事件\n    }\n    .show()\n```\n\n------\n\n# CoordinatorLayout\n\n加强版的FrameLayout\n\n**作用：** CoordinatorLayout 是一个高级布局容器可以监听内部的所有控件，可以协调其内部子控件的交互,控件自动调整合适的位置\n\n```kotlin\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/coordinator_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <!-- 这里可以嵌入 AppBarLayout、FloatingActionButton 等 -->\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\n------\n\n# MaterialCardView\n\n额外提供了圆角阴影等效果的FrameLayout\n\n```kotlin\n<com.google.android.material.card.MaterialCardView\n    android:id=\"@+id/material_card\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_margin=\"16dp\"\n    app:cardCornerRadius=\"8dp\"//指定卡片圆角的弧度\n    app:elevation=\"4dp\">//指定卡片高度\n\n    <!-- 卡片内部内容 -->\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:padding=\"16dp\"\n        android:text=\"这是一个MaterialCardView\" />\n        \n</com.google.android.material.card.MaterialCardView>\n```\n\n------\n\n# AppBarLayout\n\n**作用：** AppBarLayout 是用于实现应用栏（如 Toolbar、Tabs）的容器，它通常配合 CollapsingToolbarLayout 实现折叠效果。例如解决RecyclerView遮挡Toolbar问题\n\n```kotlin\n<com.google.android.material.appbar.AppBarLayout\n    android:id=\"@+id/appbar_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:theme=\"@style/AppTheme.AppBarOverlay\">\n\n     <androidx.appcompat.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"@color/colorPrimary\"\n                android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                app:layout_scrollFlags=\"scroll|enterAlways|snap\"/>\n        \n</com.google.android.material.appbar.AppBarLayout>\n```\n\n------\n\n# SwipeRefreshLayout\n\n**作用：** SwipeRefreshLayout 用于实现下拉刷新效果，当用户下拉时可以触发刷新操作。\n\n```kotlin\nimplementation(\"androidx.swiperefreshlayout:swiperefreshlayout:1.1.0\")\n```\n\n```kotlin\n<androidx.swiperefreshlayout.widget.SwipeRefreshLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/swipe_refresh\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <!-- 包含可刷新的内容区域，例如 RecyclerView -->\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/recycler_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n</androidx.swiperefreshlayout.widget.SwipeRefreshLayout>\n```\n\n------\n\n# 可折叠式标题栏\n\n### CollapsingToolbarLayout\n\n不能独立存在必须是AppBarLayout子布局，AppBarLayout又必须是CoordinatorLayout子布局\n\n这个高级标题栏就是普通标题栏加上背景图片\n\n```kotlin\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\">\n\n    <com.google.android.material.appbar.AppBarLayout\n        android:id=\"@+id/appBar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"250dp\"\n        android:fitsSystemWindows=\"true\">\n\n        <com.google.android.material.appbar.CollapsingToolbarLayout\n            android:id=\"@+id/collapsingToolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n            android:fitsSystemWindows=\"true\"\n            app:contentScrim=\"?attr/colorPrimary\"\n            app:layout_scrollFlags=\"scroll|exitUntilCollapsed\">\n\n            <ImageView\n                android:id=\"@+id/fruitImageView\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                android:scaleType=\"centerCrop\"\n                android:fitsSystemWindows=\"true\"\n                app:layout_collapseMode=\"parallax\" />\n\n            <androidx.appcompat.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                app:layout_collapseMode=\"pin\" />\n\n        </com.google.android.material.appbar.CollapsingToolbarLayout>\n\n    </com.google.android.material.appbar.AppBarLayout>\n\n    <androidx.core.widget.NestedScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n\n        <LinearLayout\n            android:orientation=\"vertical\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n\n            <com.google.android.material.card.MaterialCardView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginBottom=\"15dp\"\n                android:layout_marginLeft=\"15dp\"\n                android:layout_marginRight=\"15dp\"\n                android:layout_marginTop=\"35dp\"\n                app:cardCornerRadius=\"4dp\">\n\n                <TextView\n                    android:id=\"@+id/fruitContentText\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_margin=\"10dp\" />\n\n            </com.google.android.material.card.MaterialCardView>\n\n        </LinearLayout>\n\n    </androidx.core.widget.NestedScrollView>\n\n    <com.google.android.material.floatingactionbutton.FloatingActionButton\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"16dp\"\n        android:src=\"@drawable/ic_comment\"\n        app:layout_anchor=\"@id/appBar\"\n        app:layout_anchorGravity=\"bottom|end\" />\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\n### 充分利用系统状态栏空间\n\n- **方案一**\n\n1. 将ImageView及其所有父布局使用android:fitsSystemWindows=”true”\n\n2. 使用android:statusBarColor属性将主题状态栏颜色设为透明\n\n3. 在Manifest.xml中对活动主题进行修改\n\n   ```kotlin\n   <style name=\"FruitActivityTheme\" parent=\"AppTheme\" >\n           <item name=\"android:statusBarColor\">@android:color/transparent</item>\n       </style>\n   ```\n\n   ```kotlin\n   <activity\n               android:name=\".FruitActivity\"\n               android:theme=\"@style/FruitActivityTheme\"></activity>\n   ```\n\n- **方案二**\n\n  ```kotlin\n  val decorView=window.decorView\n  decorView.systemUiVisibility=View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN or View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n  window.statusBarColor=Color.TRANSPARENT\n  ```\n\n------\n","source":"_posts/最美UI体验-Material-Design-Kotlin.md","raw":"---\ntitle: 最美UI体验,Material Design(Kotlin)\ndate: 2025-06-15 21:34:20\ncategories:\n- Android(Kotlin版)\ntags:\n---\n\n# 各版块颜色的代表标识\n\n![](../img/img59.jpg)\n\n------\n\n# Toolbar\n\n- 在布局文件中使用\n- 在活动中设置\n\n```kotlin\n            <androidx.appcompat.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"?attr/colorPrimary\"\n                android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"//为弹出的菜单项设置主题\n                app:layout_scrollFlags=\"scroll|enterAlways|snap\"/>//用于控制Toolbar或其他顶部栏的滚动行为\n```\n\n```kotlin\nsetSupportActionBar(binding.toolbar)\n```\n\n------\n\n# DrawerLayout\n\n这是一个布局，允许放入两个直接子控件，第一个是主屏幕显示的内容，第二个是滑动菜单中显示的内容\n\n```kotlin\n<androidx.drawerlayout.widget.DrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/drawerLayout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <FrameLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" >\n\t    <androidx.appcompat.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"@color/colorPrimary\"\n                android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                app:layout_scrollFlags=\"scroll|enterAlways|snap\"/>\n    </FrameLayout>\n\t<TextView\n \t\tandroid:layout_width=\"match_parent\"\n     \tandroid:layout_height=\"match_parent\"\n\t\tandroid:text=\"This is menu\"/>  \t\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\n```kotlin\n//调用getSupportActionBar方法获取ActionBar实例\n        supportActionBar?.let {\n            //让导航按钮显示\n            it.setDisplayHomeAsUpEnabled(true)\n            //设置导航图标\n            it.setHomeAsUpIndicator(R.drawable.ic_menu)\n        }\n```\n\n```kotlin\n//设置按钮点击事件\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        when(item.itemId){\n            //openDrawer将滑动菜单显示出来\n            android.R.id.home->binding.drawerLayout.openDrawer(GravityCompat.START)\n            ...\n        }\n        return true\n    }\n```\n\n------\n\n# NavigationView\n\n**作用：** NavigationView 用于在侧滑菜单中显示导航菜单项，可方便地配置菜单资源、头部布局等。\n\n- 依赖库\n- menu\n- headerLayout\n- 点击事件\n\n```kotlin\nimplementation(\"com.google.android.material:material:1.12.0\")\nimplementation(\"de.hdodenhof:circleimageview:3.1.0\")\n```\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <group android:checkableBehavior=\"single\">\n        <item\n            android:id=\"@+id/navCall\"\n            android:icon=\"@drawable/nav_call\"\n            android:title=\"Call\"/>\n        <item\n            android:id=\"@+id/navFriends\"\n            android:icon=\"@drawable/nav_friends\"\n            android:title=\"Friends\"/>\n        <item\n            android:id=\"@+id/navLocation\"\n            android:icon=\"@drawable/nav_location\"\n            android:title=\"Location\"/>\n        <item\n            android:id=\"@+id/navMail\"\n            android:icon=\"@drawable/nav_mail\"\n            android:title=\"Mail\"/>\n        <item\n            android:id=\"@+id/navTask\"\n            android:icon=\"@drawable/nav_task\"\n            android:title=\"Task\"/>\n\n    </group>\n</menu>\n```\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"180dp\"\n    android:padding=\"10dp\"\n    android:background=\"@color/colorPrimary\">\n    <de.hdodenhof.circleimageview.CircleImageView\n        android:id=\"@+id/iconImage\"\n        android:layout_width=\"70dp\"\n        android:layout_height=\"70dp\"\n        android:src=\"@drawable/nav_icon\"\n        android:layout_centerInParent=\"true\"/>\n    <TextView\n        android:id=\"@+id/mailText\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentBottom=\"true\"\n        android:text=\"buyu@qq.com\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"14sp\"/>\n    <TextView\n        android:id=\"@+id/userText\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_above=\"@id/mailText\"\n        android:text=\"Buyu\"\n        android:textColor=\"#FFF\"\n        android:textSize=\"14sp\"/>\n\n\n</RelativeLayout>\n```\n\n```kotlin\n<com.google.android.material.navigation.NavigationView\n        android:id=\"@+id/navView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        app:menu=\"@menu/nav_menu\"\n        app:headerLayout=\"@layout/nav_header\"/>\n```\n\n```kotlin\n //设置默认选中项\n        binding.navView.setCheckedItem(R.id.navCall)\n        //设置菜单项选中事件的监听器\n        binding.navView.setNavigationItemSelectedListener {\n            //将滑动菜单关闭\n            binding.main.closeDrawers()\n            //true表示事件已处理\n            true\n        }\n```\n\n------\n\n# FloatingActionButton\n\n```kotlin\n<com.google.android.material.floatingactionbutton.FloatingActionButton\n            android:id=\"@+id/fab\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_margin=\"16dp\"\n            android:src=\"@drawable/ic_done\"\n            app:elevation=\"8dp\"/>//指定高度值\n```\n\n------\n\n# Snackbar\n\n**作用：** Snackbar 用于短暂地在屏幕底部显示信息反馈。虽然 Snackbar 主要在代码中调用显示，但其依赖于包含在布局中的 `CoordinatorLayout` 来获得自动动画和交互。\n\n```kotlin\nSnackbar.make(findViewById(R.id.coordinator_layout), \"这是一个Snackbar\", Snackbar.LENGTH_LONG)\n    .setAction(\"Undo\") {\n        // 处理点击事件\n    }\n    .show()\n```\n\n------\n\n# CoordinatorLayout\n\n加强版的FrameLayout\n\n**作用：** CoordinatorLayout 是一个高级布局容器可以监听内部的所有控件，可以协调其内部子控件的交互,控件自动调整合适的位置\n\n```kotlin\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/coordinator_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <!-- 这里可以嵌入 AppBarLayout、FloatingActionButton 等 -->\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\n------\n\n# MaterialCardView\n\n额外提供了圆角阴影等效果的FrameLayout\n\n```kotlin\n<com.google.android.material.card.MaterialCardView\n    android:id=\"@+id/material_card\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_margin=\"16dp\"\n    app:cardCornerRadius=\"8dp\"//指定卡片圆角的弧度\n    app:elevation=\"4dp\">//指定卡片高度\n\n    <!-- 卡片内部内容 -->\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:padding=\"16dp\"\n        android:text=\"这是一个MaterialCardView\" />\n        \n</com.google.android.material.card.MaterialCardView>\n```\n\n------\n\n# AppBarLayout\n\n**作用：** AppBarLayout 是用于实现应用栏（如 Toolbar、Tabs）的容器，它通常配合 CollapsingToolbarLayout 实现折叠效果。例如解决RecyclerView遮挡Toolbar问题\n\n```kotlin\n<com.google.android.material.appbar.AppBarLayout\n    android:id=\"@+id/appbar_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:theme=\"@style/AppTheme.AppBarOverlay\">\n\n     <androidx.appcompat.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"@color/colorPrimary\"\n                android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                app:layout_scrollFlags=\"scroll|enterAlways|snap\"/>\n        \n</com.google.android.material.appbar.AppBarLayout>\n```\n\n------\n\n# SwipeRefreshLayout\n\n**作用：** SwipeRefreshLayout 用于实现下拉刷新效果，当用户下拉时可以触发刷新操作。\n\n```kotlin\nimplementation(\"androidx.swiperefreshlayout:swiperefreshlayout:1.1.0\")\n```\n\n```kotlin\n<androidx.swiperefreshlayout.widget.SwipeRefreshLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/swipe_refresh\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <!-- 包含可刷新的内容区域，例如 RecyclerView -->\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/recycler_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n</androidx.swiperefreshlayout.widget.SwipeRefreshLayout>\n```\n\n------\n\n# 可折叠式标题栏\n\n### CollapsingToolbarLayout\n\n不能独立存在必须是AppBarLayout子布局，AppBarLayout又必须是CoordinatorLayout子布局\n\n这个高级标题栏就是普通标题栏加上背景图片\n\n```kotlin\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\">\n\n    <com.google.android.material.appbar.AppBarLayout\n        android:id=\"@+id/appBar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"250dp\"\n        android:fitsSystemWindows=\"true\">\n\n        <com.google.android.material.appbar.CollapsingToolbarLayout\n            android:id=\"@+id/collapsingToolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n            android:fitsSystemWindows=\"true\"\n            app:contentScrim=\"?attr/colorPrimary\"\n            app:layout_scrollFlags=\"scroll|exitUntilCollapsed\">\n\n            <ImageView\n                android:id=\"@+id/fruitImageView\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                android:scaleType=\"centerCrop\"\n                android:fitsSystemWindows=\"true\"\n                app:layout_collapseMode=\"parallax\" />\n\n            <androidx.appcompat.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                app:layout_collapseMode=\"pin\" />\n\n        </com.google.android.material.appbar.CollapsingToolbarLayout>\n\n    </com.google.android.material.appbar.AppBarLayout>\n\n    <androidx.core.widget.NestedScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n\n        <LinearLayout\n            android:orientation=\"vertical\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n\n            <com.google.android.material.card.MaterialCardView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginBottom=\"15dp\"\n                android:layout_marginLeft=\"15dp\"\n                android:layout_marginRight=\"15dp\"\n                android:layout_marginTop=\"35dp\"\n                app:cardCornerRadius=\"4dp\">\n\n                <TextView\n                    android:id=\"@+id/fruitContentText\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_margin=\"10dp\" />\n\n            </com.google.android.material.card.MaterialCardView>\n\n        </LinearLayout>\n\n    </androidx.core.widget.NestedScrollView>\n\n    <com.google.android.material.floatingactionbutton.FloatingActionButton\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"16dp\"\n        android:src=\"@drawable/ic_comment\"\n        app:layout_anchor=\"@id/appBar\"\n        app:layout_anchorGravity=\"bottom|end\" />\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\n### 充分利用系统状态栏空间\n\n- **方案一**\n\n1. 将ImageView及其所有父布局使用android:fitsSystemWindows=”true”\n\n2. 使用android:statusBarColor属性将主题状态栏颜色设为透明\n\n3. 在Manifest.xml中对活动主题进行修改\n\n   ```kotlin\n   <style name=\"FruitActivityTheme\" parent=\"AppTheme\" >\n           <item name=\"android:statusBarColor\">@android:color/transparent</item>\n       </style>\n   ```\n\n   ```kotlin\n   <activity\n               android:name=\".FruitActivity\"\n               android:theme=\"@style/FruitActivityTheme\"></activity>\n   ```\n\n- **方案二**\n\n  ```kotlin\n  val decorView=window.decorView\n  decorView.systemUiVisibility=View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN or View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n  window.statusBarColor=Color.TRANSPARENT\n  ```\n\n------\n","slug":"最美UI体验-Material-Design-Kotlin","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcn002ks4s7farcceo2","content":"<h1 id=\"各版块颜色的代表标识\"><a href=\"#各版块颜色的代表标识\" class=\"headerlink\" title=\"各版块颜色的代表标识\"></a>各版块颜色的代表标识</h1><p><img src=\"/../img/img59.jpg\"></p>\n<hr>\n<h1 id=\"Toolbar\"><a href=\"#Toolbar\" class=\"headerlink\" title=\"Toolbar\"></a>Toolbar</h1><ul>\n<li>在布局文件中使用</li>\n<li>在活动中设置</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">    android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">    app:popupTheme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span><span class=\"comment\">//为弹出的菜单项设置主题</span></span><br><span class=\"line\">    app:layout_scrollFlags=<span class=\"string\">&quot;scroll|enterAlways|snap&quot;</span>/&gt;<span class=\"comment\">//用于控制Toolbar或其他顶部栏的滚动行为</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setSupportActionBar(binding.toolbar)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"DrawerLayout\"><a href=\"#DrawerLayout\" class=\"headerlink\" title=\"DrawerLayout\"></a>DrawerLayout</h1><p>这是一个布局，允许放入两个直接子控件，第一个是主屏幕显示的内容，第二个是滑动菜单中显示的内容</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/drawerLayout&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;FrameLayout</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span> &gt;</span><br><span class=\"line\">\t    &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">                android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">                android:background=<span class=\"string\">&quot;@color/colorPrimary&quot;</span></span><br><span class=\"line\">                android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">                app:popupTheme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span><br><span class=\"line\">                app:layout_scrollFlags=<span class=\"string\">&quot;scroll|enterAlways|snap&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/FrameLayout&gt;</span><br><span class=\"line\">\t&lt;TextView</span><br><span class=\"line\"> \t\tandroid:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">     \tandroid:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">\t\tandroid:text=<span class=\"string\">&quot;This is menu&quot;</span>/&gt;  \t</span><br><span class=\"line\">&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用getSupportActionBar方法获取ActionBar实例</span></span><br><span class=\"line\">        supportActionBar?.let &#123;</span><br><span class=\"line\">            <span class=\"comment\">//让导航按钮显示</span></span><br><span class=\"line\">            it.setDisplayHomeAsUpEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">            <span class=\"comment\">//设置导航图标</span></span><br><span class=\"line\">            it.setHomeAsUpIndicator(R.drawable.ic_menu)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置按钮点击事件</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(item: <span class=\"type\">MenuItem</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">when</span>(item.itemId)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//openDrawer将滑动菜单显示出来</span></span><br><span class=\"line\">            android.R.id.home-&gt;binding.drawerLayout.openDrawer(GravityCompat.START)</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"NavigationView\"><a href=\"#NavigationView\" class=\"headerlink\" title=\"NavigationView\"></a>NavigationView</h1><p><strong>作用：</strong> NavigationView 用于在侧滑菜单中显示导航菜单项，可方便地配置菜单资源、头部布局等。</p>\n<ul>\n<li>依赖库</li>\n<li>menu</li>\n<li>headerLayout</li>\n<li>点击事件</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;com.google.android.material:material:1.12.0&quot;</span>)</span><br><span class=\"line\">implementation(<span class=\"string\">&quot;de.hdodenhof:circleimageview:3.1.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;menu xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class=\"line\">    &lt;group android:checkableBehavior=<span class=\"string\">&quot;single&quot;</span>&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/navCall&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/nav_call&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Call&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/navFriends&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/nav_friends&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Friends&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/navLocation&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/nav_location&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Location&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/navMail&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/nav_mail&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Mail&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/navTask&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/nav_task&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Task&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/group&gt;</span><br><span class=\"line\">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;RelativeLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;180dp&quot;</span></span><br><span class=\"line\">    android:padding=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;@color/colorPrimary&quot;</span>&gt;</span><br><span class=\"line\">    &lt;de.hdodenhof.circleimageview.CircleImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/iconImage&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;70dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;70dp&quot;</span></span><br><span class=\"line\">        android:src=<span class=\"string\">&quot;@drawable/nav_icon&quot;</span></span><br><span class=\"line\">        android:layout_centerInParent=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/mailText&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_alignParentBottom=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;buyu@qq.com&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;14sp&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/userText&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_above=<span class=\"string\">&quot;@id/mailText&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Buyu&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;14sp&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/navView&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;start&quot;</span></span><br><span class=\"line\">        app:menu=<span class=\"string\">&quot;@menu/nav_menu&quot;</span></span><br><span class=\"line\">        app:headerLayout=<span class=\"string\">&quot;@layout/nav_header&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置默认选中项</span></span><br><span class=\"line\">       binding.navView.setCheckedItem(R.id.navCall)</span><br><span class=\"line\">       <span class=\"comment\">//设置菜单项选中事件的监听器</span></span><br><span class=\"line\">       binding.navView.setNavigationItemSelectedListener &#123;</span><br><span class=\"line\">           <span class=\"comment\">//将滑动菜单关闭</span></span><br><span class=\"line\">           binding.main.closeDrawers()</span><br><span class=\"line\">           <span class=\"comment\">//true表示事件已处理</span></span><br><span class=\"line\">           <span class=\"literal\">true</span></span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"FloatingActionButton\"><a href=\"#FloatingActionButton\" class=\"headerlink\" title=\"FloatingActionButton\"></a>FloatingActionButton</h1><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.google.android.material.floatingactionbutton.FloatingActionButton</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/fab&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_gravity=<span class=\"string\">&quot;bottom|end&quot;</span></span><br><span class=\"line\">            android:layout_margin=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">            android:src=<span class=\"string\">&quot;@drawable/ic_done&quot;</span></span><br><span class=\"line\">            app:elevation=<span class=\"string\">&quot;8dp&quot;</span>/&gt;<span class=\"comment\">//指定高度值</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Snackbar\"><a href=\"#Snackbar\" class=\"headerlink\" title=\"Snackbar\"></a>Snackbar</h1><p><strong>作用：</strong> Snackbar 用于短暂地在屏幕底部显示信息反馈。虽然 Snackbar 主要在代码中调用显示，但其依赖于包含在布局中的 <code>CoordinatorLayout</code> 来获得自动动画和交互。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Snackbar.make(findViewById(R.id.coordinator_layout), <span class=\"string\">&quot;这是一个Snackbar&quot;</span>, Snackbar.LENGTH_LONG)</span><br><span class=\"line\">    .setAction(<span class=\"string\">&quot;Undo&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理点击事件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .show()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"CoordinatorLayout\"><a href=\"#CoordinatorLayout\" class=\"headerlink\" title=\"CoordinatorLayout\"></a>CoordinatorLayout</h1><p>加强版的FrameLayout</p>\n<p><strong>作用：</strong> CoordinatorLayout 是一个高级布局容器可以监听内部的所有控件，可以协调其内部子控件的交互,控件自动调整合适的位置</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/coordinator_layout&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;!-- 这里可以嵌入 AppBarLayout、FloatingActionButton 等 --&gt;</span><br><span class=\"line\">&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"MaterialCardView\"><a href=\"#MaterialCardView\" class=\"headerlink\" title=\"MaterialCardView\"></a>MaterialCardView</h1><p>额外提供了圆角阴影等效果的FrameLayout</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.google.android.material.card.MaterialCardView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/material_card&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_margin=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">    app:cardCornerRadius=<span class=\"string\">&quot;8dp&quot;</span><span class=\"comment\">//指定卡片圆角的弧度</span></span><br><span class=\"line\">    app:elevation=<span class=\"string\">&quot;4dp&quot;</span>&gt;<span class=\"comment\">//指定卡片高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 卡片内部内容 --&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:padding=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;这是一个MaterialCardView&quot;</span> /&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">&lt;/com.google.android.material.card.MaterialCardView&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"AppBarLayout\"><a href=\"#AppBarLayout\" class=\"headerlink\" title=\"AppBarLayout\"></a>AppBarLayout</h1><p><strong>作用：</strong> AppBarLayout 是用于实现应用栏（如 Toolbar、Tabs）的容器，它通常配合 CollapsingToolbarLayout 实现折叠效果。例如解决RecyclerView遮挡Toolbar问题</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.google.android.material.appbar.AppBarLayout</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/appbar_layout&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:theme=<span class=\"string\">&quot;@style/AppTheme.AppBarOverlay&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">                android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">                android:background=<span class=\"string\">&quot;@color/colorPrimary&quot;</span></span><br><span class=\"line\">                android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">                app:popupTheme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span><br><span class=\"line\">                app:layout_scrollFlags=<span class=\"string\">&quot;scroll|enterAlways|snap&quot;</span>/&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">&lt;/com.google.android.material.appbar.AppBarLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"SwipeRefreshLayout\"><a href=\"#SwipeRefreshLayout\" class=\"headerlink\" title=\"SwipeRefreshLayout\"></a>SwipeRefreshLayout</h1><p><strong>作用：</strong> SwipeRefreshLayout 用于实现下拉刷新效果，当用户下拉时可以触发刷新操作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;androidx.swiperefreshlayout:swiperefreshlayout:1.1.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.swiperefreshlayout.widget.SwipeRefreshLayout</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/swipe_refresh&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 包含可刷新的内容区域，例如 RecyclerView --&gt;</span><br><span class=\"line\">    &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/recycler_view&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/androidx.swiperefreshlayout.widget.SwipeRefreshLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"可折叠式标题栏\"><a href=\"#可折叠式标题栏\" class=\"headerlink\" title=\"可折叠式标题栏\"></a>可折叠式标题栏</h1><h3 id=\"CollapsingToolbarLayout\"><a href=\"#CollapsingToolbarLayout\" class=\"headerlink\" title=\"CollapsingToolbarLayout\"></a>CollapsingToolbarLayout</h3><p>不能独立存在必须是AppBarLayout子布局，AppBarLayout又必须是CoordinatorLayout子布局</p>\n<p>这个高级标题栏就是普通标题栏加上背景图片</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.google.android.material.appbar.AppBarLayout</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/appBar&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;250dp&quot;</span></span><br><span class=\"line\">        android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;com.google.android.material.appbar.CollapsingToolbarLayout</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/collapsingToolbar&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">            android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">            app:contentScrim=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">            app:layout_scrollFlags=<span class=\"string\">&quot;scroll|exitUntilCollapsed&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;ImageView</span><br><span class=\"line\">                android:id=<span class=\"string\">&quot;@+id/fruitImageView&quot;</span></span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:scaleType=<span class=\"string\">&quot;centerCrop&quot;</span></span><br><span class=\"line\">                android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">                app:layout_collapseMode=<span class=\"string\">&quot;parallax&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">                android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">                app:layout_collapseMode=<span class=\"string\">&quot;pin&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/com.google.android.material.appbar.CollapsingToolbarLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/com.google.android.material.appbar.AppBarLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;androidx.core.widget.NestedScrollView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        app:layout_behavior=<span class=\"string\">&quot;@string/appbar_scrolling_view_behavior&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;LinearLayout</span><br><span class=\"line\">            android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;com.google.android.material.card.MaterialCardView</span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">                android:layout_marginBottom=<span class=\"string\">&quot;15dp&quot;</span></span><br><span class=\"line\">                android:layout_marginLeft=<span class=\"string\">&quot;15dp&quot;</span></span><br><span class=\"line\">                android:layout_marginRight=<span class=\"string\">&quot;15dp&quot;</span></span><br><span class=\"line\">                android:layout_marginTop=<span class=\"string\">&quot;35dp&quot;</span></span><br><span class=\"line\">                app:cardCornerRadius=<span class=\"string\">&quot;4dp&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;TextView</span><br><span class=\"line\">                    android:id=<span class=\"string\">&quot;@+id/fruitContentText&quot;</span></span><br><span class=\"line\">                    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">                    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">                    android:layout_margin=<span class=\"string\">&quot;10dp&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;/com.google.android.material.card.MaterialCardView&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/androidx.core.widget.NestedScrollView&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_margin=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">        android:src=<span class=\"string\">&quot;@drawable/ic_comment&quot;</span></span><br><span class=\"line\">        app:layout_anchor=<span class=\"string\">&quot;@id/appBar&quot;</span></span><br><span class=\"line\">        app:layout_anchorGravity=<span class=\"string\">&quot;bottom|end&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"充分利用系统状态栏空间\"><a href=\"#充分利用系统状态栏空间\" class=\"headerlink\" title=\"充分利用系统状态栏空间\"></a>充分利用系统状态栏空间</h3><ul>\n<li><strong>方案一</strong></li>\n</ul>\n<ol>\n<li><p>将ImageView及其所有父布局使用android:fitsSystemWindows&#x3D;”true”</p>\n</li>\n<li><p>使用android:statusBarColor属性将主题状态栏颜色设为透明</p>\n</li>\n<li><p>在Manifest.xml中对活动主题进行修改</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style name=<span class=\"string\">&quot;FruitActivityTheme&quot;</span> parent=<span class=\"string\">&quot;AppTheme&quot;</span> &gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;android:statusBarColor&quot;</span>&gt;<span class=\"meta\">@android</span>:color/transparent&lt;/item&gt;</span><br><span class=\"line\">    &lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity</span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;.FruitActivity&quot;</span></span><br><span class=\"line\">            android:theme=<span class=\"string\">&quot;@style/FruitActivityTheme&quot;</span>&gt;&lt;/activity&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><p><strong>方案二</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> decorView=window.decorView</span><br><span class=\"line\">decorView.systemUiVisibility=View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN or View.SYSTEM_UI_FLAG_LAYOUT_STABLE</span><br><span class=\"line\">window.statusBarColor=Color.TRANSPARENT</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n","excerpt":"各版块颜色的代表标识\n\n\n\n\n\nToolbar\n * 在布局文件中使用\n * 在活动中设置\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n<androidx.appcompat.widget.Toolbar\n    android:id=\"@+id/toolbar\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"?attr/actionBarSize\"\n    android:background=\"?attr/colorPrimary\"\n    android:theme=\"@style/ThemeOverlay","more":"<h1 id=\"各版块颜色的代表标识\"><a href=\"#各版块颜色的代表标识\" class=\"headerlink\" title=\"各版块颜色的代表标识\"></a>各版块颜色的代表标识</h1><p><img src=\"/../img/img59.jpg\"></p>\n<hr>\n<h1 id=\"Toolbar\"><a href=\"#Toolbar\" class=\"headerlink\" title=\"Toolbar\"></a>Toolbar</h1><ul>\n<li>在布局文件中使用</li>\n<li>在活动中设置</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">    android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">    app:popupTheme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span><span class=\"comment\">//为弹出的菜单项设置主题</span></span><br><span class=\"line\">    app:layout_scrollFlags=<span class=\"string\">&quot;scroll|enterAlways|snap&quot;</span>/&gt;<span class=\"comment\">//用于控制Toolbar或其他顶部栏的滚动行为</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setSupportActionBar(binding.toolbar)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"DrawerLayout\"><a href=\"#DrawerLayout\" class=\"headerlink\" title=\"DrawerLayout\"></a>DrawerLayout</h1><p>这是一个布局，允许放入两个直接子控件，第一个是主屏幕显示的内容，第二个是滑动菜单中显示的内容</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/drawerLayout&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;FrameLayout</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span> &gt;</span><br><span class=\"line\">\t    &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">                android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">                android:background=<span class=\"string\">&quot;@color/colorPrimary&quot;</span></span><br><span class=\"line\">                android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">                app:popupTheme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span><br><span class=\"line\">                app:layout_scrollFlags=<span class=\"string\">&quot;scroll|enterAlways|snap&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/FrameLayout&gt;</span><br><span class=\"line\">\t&lt;TextView</span><br><span class=\"line\"> \t\tandroid:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">     \tandroid:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">\t\tandroid:text=<span class=\"string\">&quot;This is menu&quot;</span>/&gt;  \t</span><br><span class=\"line\">&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用getSupportActionBar方法获取ActionBar实例</span></span><br><span class=\"line\">        supportActionBar?.let &#123;</span><br><span class=\"line\">            <span class=\"comment\">//让导航按钮显示</span></span><br><span class=\"line\">            it.setDisplayHomeAsUpEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">            <span class=\"comment\">//设置导航图标</span></span><br><span class=\"line\">            it.setHomeAsUpIndicator(R.drawable.ic_menu)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置按钮点击事件</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(item: <span class=\"type\">MenuItem</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">when</span>(item.itemId)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//openDrawer将滑动菜单显示出来</span></span><br><span class=\"line\">            android.R.id.home-&gt;binding.drawerLayout.openDrawer(GravityCompat.START)</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"NavigationView\"><a href=\"#NavigationView\" class=\"headerlink\" title=\"NavigationView\"></a>NavigationView</h1><p><strong>作用：</strong> NavigationView 用于在侧滑菜单中显示导航菜单项，可方便地配置菜单资源、头部布局等。</p>\n<ul>\n<li>依赖库</li>\n<li>menu</li>\n<li>headerLayout</li>\n<li>点击事件</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;com.google.android.material:material:1.12.0&quot;</span>)</span><br><span class=\"line\">implementation(<span class=\"string\">&quot;de.hdodenhof:circleimageview:3.1.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;menu xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class=\"line\">    &lt;group android:checkableBehavior=<span class=\"string\">&quot;single&quot;</span>&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/navCall&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/nav_call&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Call&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/navFriends&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/nav_friends&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Friends&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/navLocation&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/nav_location&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Location&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/navMail&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/nav_mail&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Mail&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;item</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/navTask&quot;</span></span><br><span class=\"line\">            android:icon=<span class=\"string\">&quot;@drawable/nav_task&quot;</span></span><br><span class=\"line\">            android:title=<span class=\"string\">&quot;Task&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/group&gt;</span><br><span class=\"line\">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;RelativeLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;180dp&quot;</span></span><br><span class=\"line\">    android:padding=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;@color/colorPrimary&quot;</span>&gt;</span><br><span class=\"line\">    &lt;de.hdodenhof.circleimageview.CircleImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/iconImage&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;70dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;70dp&quot;</span></span><br><span class=\"line\">        android:src=<span class=\"string\">&quot;@drawable/nav_icon&quot;</span></span><br><span class=\"line\">        android:layout_centerInParent=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/mailText&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_alignParentBottom=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;buyu@qq.com&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;14sp&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/userText&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_above=<span class=\"string\">&quot;@id/mailText&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Buyu&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;14sp&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/navView&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;start&quot;</span></span><br><span class=\"line\">        app:menu=<span class=\"string\">&quot;@menu/nav_menu&quot;</span></span><br><span class=\"line\">        app:headerLayout=<span class=\"string\">&quot;@layout/nav_header&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置默认选中项</span></span><br><span class=\"line\">       binding.navView.setCheckedItem(R.id.navCall)</span><br><span class=\"line\">       <span class=\"comment\">//设置菜单项选中事件的监听器</span></span><br><span class=\"line\">       binding.navView.setNavigationItemSelectedListener &#123;</span><br><span class=\"line\">           <span class=\"comment\">//将滑动菜单关闭</span></span><br><span class=\"line\">           binding.main.closeDrawers()</span><br><span class=\"line\">           <span class=\"comment\">//true表示事件已处理</span></span><br><span class=\"line\">           <span class=\"literal\">true</span></span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"FloatingActionButton\"><a href=\"#FloatingActionButton\" class=\"headerlink\" title=\"FloatingActionButton\"></a>FloatingActionButton</h1><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.google.android.material.floatingactionbutton.FloatingActionButton</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/fab&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">            android:layout_gravity=<span class=\"string\">&quot;bottom|end&quot;</span></span><br><span class=\"line\">            android:layout_margin=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">            android:src=<span class=\"string\">&quot;@drawable/ic_done&quot;</span></span><br><span class=\"line\">            app:elevation=<span class=\"string\">&quot;8dp&quot;</span>/&gt;<span class=\"comment\">//指定高度值</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Snackbar\"><a href=\"#Snackbar\" class=\"headerlink\" title=\"Snackbar\"></a>Snackbar</h1><p><strong>作用：</strong> Snackbar 用于短暂地在屏幕底部显示信息反馈。虽然 Snackbar 主要在代码中调用显示，但其依赖于包含在布局中的 <code>CoordinatorLayout</code> 来获得自动动画和交互。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Snackbar.make(findViewById(R.id.coordinator_layout), <span class=\"string\">&quot;这是一个Snackbar&quot;</span>, Snackbar.LENGTH_LONG)</span><br><span class=\"line\">    .setAction(<span class=\"string\">&quot;Undo&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理点击事件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .show()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"CoordinatorLayout\"><a href=\"#CoordinatorLayout\" class=\"headerlink\" title=\"CoordinatorLayout\"></a>CoordinatorLayout</h1><p>加强版的FrameLayout</p>\n<p><strong>作用：</strong> CoordinatorLayout 是一个高级布局容器可以监听内部的所有控件，可以协调其内部子控件的交互,控件自动调整合适的位置</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/coordinator_layout&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;!-- 这里可以嵌入 AppBarLayout、FloatingActionButton 等 --&gt;</span><br><span class=\"line\">&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"MaterialCardView\"><a href=\"#MaterialCardView\" class=\"headerlink\" title=\"MaterialCardView\"></a>MaterialCardView</h1><p>额外提供了圆角阴影等效果的FrameLayout</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.google.android.material.card.MaterialCardView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/material_card&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_margin=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">    app:cardCornerRadius=<span class=\"string\">&quot;8dp&quot;</span><span class=\"comment\">//指定卡片圆角的弧度</span></span><br><span class=\"line\">    app:elevation=<span class=\"string\">&quot;4dp&quot;</span>&gt;<span class=\"comment\">//指定卡片高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 卡片内部内容 --&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:padding=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;这是一个MaterialCardView&quot;</span> /&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">&lt;/com.google.android.material.card.MaterialCardView&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"AppBarLayout\"><a href=\"#AppBarLayout\" class=\"headerlink\" title=\"AppBarLayout\"></a>AppBarLayout</h1><p><strong>作用：</strong> AppBarLayout 是用于实现应用栏（如 Toolbar、Tabs）的容器，它通常配合 CollapsingToolbarLayout 实现折叠效果。例如解决RecyclerView遮挡Toolbar问题</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.google.android.material.appbar.AppBarLayout</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/appbar_layout&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:theme=<span class=\"string\">&quot;@style/AppTheme.AppBarOverlay&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">                android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">                android:background=<span class=\"string\">&quot;@color/colorPrimary&quot;</span></span><br><span class=\"line\">                android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">                app:popupTheme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span><br><span class=\"line\">                app:layout_scrollFlags=<span class=\"string\">&quot;scroll|enterAlways|snap&quot;</span>/&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">&lt;/com.google.android.material.appbar.AppBarLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"SwipeRefreshLayout\"><a href=\"#SwipeRefreshLayout\" class=\"headerlink\" title=\"SwipeRefreshLayout\"></a>SwipeRefreshLayout</h1><p><strong>作用：</strong> SwipeRefreshLayout 用于实现下拉刷新效果，当用户下拉时可以触发刷新操作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;androidx.swiperefreshlayout:swiperefreshlayout:1.1.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.swiperefreshlayout.widget.SwipeRefreshLayout</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/swipe_refresh&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 包含可刷新的内容区域，例如 RecyclerView --&gt;</span><br><span class=\"line\">    &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/recycler_view&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/androidx.swiperefreshlayout.widget.SwipeRefreshLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"可折叠式标题栏\"><a href=\"#可折叠式标题栏\" class=\"headerlink\" title=\"可折叠式标题栏\"></a>可折叠式标题栏</h1><h3 id=\"CollapsingToolbarLayout\"><a href=\"#CollapsingToolbarLayout\" class=\"headerlink\" title=\"CollapsingToolbarLayout\"></a>CollapsingToolbarLayout</h3><p>不能独立存在必须是AppBarLayout子布局，AppBarLayout又必须是CoordinatorLayout子布局</p>\n<p>这个高级标题栏就是普通标题栏加上背景图片</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.google.android.material.appbar.AppBarLayout</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/appBar&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;250dp&quot;</span></span><br><span class=\"line\">        android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;com.google.android.material.appbar.CollapsingToolbarLayout</span><br><span class=\"line\">            android:id=<span class=\"string\">&quot;@+id/collapsingToolbar&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:theme=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class=\"line\">            android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">            app:contentScrim=<span class=\"string\">&quot;?attr/colorPrimary&quot;</span></span><br><span class=\"line\">            app:layout_scrollFlags=<span class=\"string\">&quot;scroll|exitUntilCollapsed&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;ImageView</span><br><span class=\"line\">                android:id=<span class=\"string\">&quot;@+id/fruitImageView&quot;</span></span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:scaleType=<span class=\"string\">&quot;centerCrop&quot;</span></span><br><span class=\"line\">                android:fitsSystemWindows=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">                app:layout_collapseMode=<span class=\"string\">&quot;parallax&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">                android:id=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span><br><span class=\"line\">                app:layout_collapseMode=<span class=\"string\">&quot;pin&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/com.google.android.material.appbar.CollapsingToolbarLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/com.google.android.material.appbar.AppBarLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;androidx.core.widget.NestedScrollView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        app:layout_behavior=<span class=\"string\">&quot;@string/appbar_scrolling_view_behavior&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;LinearLayout</span><br><span class=\"line\">            android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">            android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">            android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;com.google.android.material.card.MaterialCardView</span><br><span class=\"line\">                android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">                android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">                android:layout_marginBottom=<span class=\"string\">&quot;15dp&quot;</span></span><br><span class=\"line\">                android:layout_marginLeft=<span class=\"string\">&quot;15dp&quot;</span></span><br><span class=\"line\">                android:layout_marginRight=<span class=\"string\">&quot;15dp&quot;</span></span><br><span class=\"line\">                android:layout_marginTop=<span class=\"string\">&quot;35dp&quot;</span></span><br><span class=\"line\">                app:cardCornerRadius=<span class=\"string\">&quot;4dp&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;TextView</span><br><span class=\"line\">                    android:id=<span class=\"string\">&quot;@+id/fruitContentText&quot;</span></span><br><span class=\"line\">                    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">                    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">                    android:layout_margin=<span class=\"string\">&quot;10dp&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;/com.google.android.material.card.MaterialCardView&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/androidx.core.widget.NestedScrollView&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_margin=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">        android:src=<span class=\"string\">&quot;@drawable/ic_comment&quot;</span></span><br><span class=\"line\">        app:layout_anchor=<span class=\"string\">&quot;@id/appBar&quot;</span></span><br><span class=\"line\">        app:layout_anchorGravity=<span class=\"string\">&quot;bottom|end&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"充分利用系统状态栏空间\"><a href=\"#充分利用系统状态栏空间\" class=\"headerlink\" title=\"充分利用系统状态栏空间\"></a>充分利用系统状态栏空间</h3><ul>\n<li><strong>方案一</strong></li>\n</ul>\n<ol>\n<li><p>将ImageView及其所有父布局使用android:fitsSystemWindows&#x3D;”true”</p>\n</li>\n<li><p>使用android:statusBarColor属性将主题状态栏颜色设为透明</p>\n</li>\n<li><p>在Manifest.xml中对活动主题进行修改</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style name=<span class=\"string\">&quot;FruitActivityTheme&quot;</span> parent=<span class=\"string\">&quot;AppTheme&quot;</span> &gt;</span><br><span class=\"line\">        &lt;item name=<span class=\"string\">&quot;android:statusBarColor&quot;</span>&gt;<span class=\"meta\">@android</span>:color/transparent&lt;/item&gt;</span><br><span class=\"line\">    &lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity</span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;.FruitActivity&quot;</span></span><br><span class=\"line\">            android:theme=<span class=\"string\">&quot;@style/FruitActivityTheme&quot;</span>&gt;&lt;/activity&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><p><strong>方案二</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> decorView=window.decorView</span><br><span class=\"line\">decorView.systemUiVisibility=View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN or View.SYSTEM_UI_FLAG_LAYOUT_STABLE</span><br><span class=\"line\">window.statusBarColor=Color.TRANSPARENT</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n"},{"title":"服务(Java)","date":"2025-03-24T11:36:08.000Z","_content":"\n# Android多线程编程\n\n### 线程的基本用法\n\n（1）1.新建一个类继承自Thread，并重写run方法\n\n​          2.启动线程\n\n```java\nclass MyThread extends Thread{\n    @Override\n    public void run(){\n        //处理具体逻辑\n    }\n}\nnew MyThread().start();\n```\n\n(2) 使用Runnable接口的方式来定义一个线程\n\n```java\nclass MyThread implements Runnable{\n    @Override\n    public void run(){\n        //处理具体逻辑\n    }\n}\nMyYhread myThread=new MyYhread();\nnew Thread(myThread).start();\n```\n\n(3)匿名类的方法\n\n```java\nnew Thread(new Runnable(){\n     @Override\n    public void run(){\n        //处理具体逻辑\n    }\n}).start();\n```\n\n### 在子线程中更新UI\n\n1.新建一个Handler对象，并重写了父类的方法，在这里对Message进行具体处理，这里是主线程\n\n2.在子线程中创建Message对象，并发送\n\n```java\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n    public static  final int UPDATE_TEXT=1;\n    private TextView textView;\n    @SuppressLint(\"HandlerLeak\")\n    private Handler handler=new Handler(){\n        @SuppressLint(\"SetTextI18n\")\n        public void handleMessage(Message msg){\n            if (msg.what == UPDATE_TEXT) {\n                //在这里进行UI操作\n                textView.setText(\"Nice to meet you\");\n            }\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        textView=(TextView) findViewById(R.id.text);\n        Button changeText=(Button) findViewById(R.id.change_text);\n        changeText.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View view) {\n        if(view.getId()==R.id.change_text){\n            new Thread(new Runnable() {\n                @Override\n                public void run() {\n                   Message msg=new Message();\n                   msg.what=UPDATE_TEXT;\n                   handler.sendMessage(msg);\n                }\n            }).start();\n        }\n    }\n}\n```\n\n### 异步消息处理机制\n\n![](../img/img48.jpg)\n\n![](../img/img49.jpg)\n\n### AsyncTask\n\n1.创建一个子类去继承它，需要传入三个参数如下\n\nParams：在后台任务中使用\n\nProgress：可以作为进度单位\n\nResult：返回值类型\n\n2.重写父类方法如下：\n\nonPreExecute():界面上的初始化操作\n\ndoInBackground(Params...):所有代码都在子线程中运行，在这里处理耗时任务\n\nonProgressUpdate(Progress...):对UI进行操作\n\nonPostExecute(Result):后台任务执行完毕并通过return语句返回时，这个方法被调用\n\n3.启动任务\n\n`new DownloadTask().execute();`\n\n------\n\n# 服务\n\n1.定义一个服务(已经自动注册了),并重写onCreate,onStartCommand,onDestroy方法\n\n2.启动和停止服务\n\n3.将活动与服务进行联系\n\n```java\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\nprivate MyService.DownloadBinder downloadBinder;\nprivate ServiceConnection connection=new ServiceConnection() {\n    @Override\n    public void onServiceConnected(ComponentName componentName, IBinder service) {\n        downloadBinder=(MyService.DownloadBinder) service;\n        downloadBinder.startDownloads();\n        downloadBinder.getProgress();\n    }\n\n    @Override\n    public void onServiceDisconnected(ComponentName componentName) {\n\n    }\n};\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button start=(Button) findViewById(R.id.start_service);\n        Button stop=(Button) findViewById(R.id.stop_service);\n        Button bind=(Button) findViewById(R.id.bind_service);\n        Button unbind=(Button) findViewById(R.id.unbind_service);\n        Button startMyIntent=(Button)findViewById(R.id.start_intent_service);\n        start.setOnClickListener(this);\n        stop.setOnClickListener(this);\n        bind.setOnClickListener(this);\n        unbind.setOnClickListener(this);\n        startMyIntent.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View view) {\n        if(view.getId()==R.id.start_service){\n            Intent startIntent=new Intent(this,MyService.class);\n            startService(startIntent);//启动服务\n        }\n        if(view.getId()==R.id.stop_service){\n            Intent stopIntent=new Intent(this,MyService.class);\n            stopService(stopIntent);//停止服务\n        }\n        if(view.getId()==R.id.bind_service){\n            Intent bindIntent=new Intent(this,MyService.class);\n            //绑定服务\n            bindService(bindIntent,connection,BIND_AUTO_CREATE);\n\n        }\n        if(view.getId()==R.id.unbind_service){\n            //解绑服务\n            unbindService(connection);\n        }\n    }\n}\n```\n\n\n\n```java\npublic class MyService extends Service {\n    //建立联系\n    private DownloadBinder mBinder=new DownloadBinder();\n    class DownloadBinder extends Binder{\n        public void startDownloads(){\n            Log.d(\"MyService\", \"startDownloads: \");\n        }\n        public int getProgress(){\n            Log.d(\"MyService\", \"getProgress: \");\n            return 0;\n        }\n    }\n public MyService() {\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n       return mBinder;\n    }\n\n    @SuppressLint(\"ForegroundServiceType\")\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.d(\"MyService\", \"onCreate: \");\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        Log.d(\"MyService\", \"onStartCommand: \");\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                //处理具体逻辑\n                stopSelf();\n            }\n        }).start();\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.d(\"MyService\", \"onDestroy:\");\n    }\n}\n```\n\n------\n\n# 服务更多的技巧\n\n### 使用前台服务\n\n使用startForeground方法\n\n```java\n @SuppressLint(\"ForegroundServiceType\")\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.d(\"MyService\", \"onCreate: \");\n        startForegroundService();\n    }\n@SuppressLint(\"ForegroundServiceType\")\n    private void startForegroundService() {\n        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n        String channelId = \"my_channel_id\";\n\n        // 创建通知渠道（仅适用于 Android 8.0 及以上）\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            NotificationChannel channel = new NotificationChannel(\n                    channelId,\n                    \"My Channel\",\n                    NotificationManager.IMPORTANCE_DEFAULT\n            );\n            notificationManager.createNotificationChannel(channel);\n        }\n\n        // 创建 Notification\n        Notification notification = new NotificationCompat.Builder(this, channelId)\n                .setContentTitle(\"Service Running\")\n                .setContentText(\"Foreground service is running\")\n                .setSmallIcon(R.mipmap.ic_launcher)\n                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                .build();\n\n        // 启动前台服务\n        startForeground(1, notification);\n    }\n```\n\n### 使用IntentService\n\n1.新建一个类继承自IntentService\n\n2.在Manifest.xml中注册\n\n```java\npublic class MyIntentService extends IntentService {\n    public MyIntentService() {\n        super(\"MyIntentService\");//调用父类的有参构造函数\n    }\n\n    @Override\n    protected void onHandleIntent(@Nullable Intent intent) {\n        //该方法已经在子线程中运行\n        //打印当前线程的id\n        Log.d(\"MyIntentService\", \"Thread id is \"+Thread.currentThread().getId());\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.d(\"MyIntentService\", \"onDestroy executed\");\n    }\n}\n\n```\n\n------\n\n# 服务最佳实例\n\n1.添加依赖\n\n2.定义一个回调接口\n\n3.编写下载功能\n\n4.创建一个下载的服务，保证可以一直在后台运行\n\n5.将服务与活动建立联系并编写运行逻辑和授予权限\n\n```java\n implementation (\"com.squareup.okhttp3:okhttp:4.12.0\")\n```\n\n```java\npublic interface DownloadListener {\n    void onProgress(int progress);\n    void onSuccess();\n    void onFailed();\n    void onPaused();\n    void onCanceled();\n}\n\n```\n\n```java\npublic class DownloadTask extends AsyncTask<String,Integer,Integer> {\n    public static final int TYPE_SUCCESS=0;\n    public static final int TYPE_FAILED=1;\n    public static final int TYPE_PAUSED=2;\n    public static final int TYPE_CANCELED=3;\n    private DownloadListener listener;\n    private boolean isCanceled=false;\n    private boolean isPaused=false;\n    private int lastProgress;\n    public DownloadTask(DownloadListener listener){\n        this.listener=listener;\n    }\n\n    @Override\n    protected Integer doInBackground(String... strings) {\n        //用于从网络读取数据\n        InputStream is=null;\n        //用于写入下载的文件\n        RandomAccessFile savedFile=null;\n        //表示下载文件的存储位置\n        File file=null;\n        try{\n            //记录已下载的文件长度\n            long downloadLength=0;\n            //获取URL地址\n            String downloadUrl=strings[0];\n            //解析下载的文件名\n            String fileName=downloadUrl.substring(downloadUrl.lastIndexOf(\"/\"));\n            //指定将文件下载到Environment.DIRECTORY_DOWNLOADS目录下\n            String directory= Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath();\n            file=new File(directory+fileName);\n            //判断该目录是否已经存在要下载的文件\n            if(file.exists()){\n                //读取已下载的字节数\n                downloadLength=file.length();\n            }\n            //获取下载文件的总长度\n            long contentLength=getContentLength(downloadUrl);\n            if(contentLength==0){\n                return TYPE_FAILED;\n            } else if (contentLength==downloadLength) {\n                //已下载字节和文件总字节相等，说明已经下载完成了\n                return TYPE_SUCCESS;\n            }\n            //利用OkHttp发送一条网络请求\n            OkHttpClient client=new OkHttpClient();\n            Request request=new Request.Builder()\n                    //断点下载，指定从哪个字节开始下载\n                    .addHeader(\"RANGE\",\"bytes=\"+downloadLength+\"-\")\n                    .url(downloadUrl)\n                    .build();\n            Response response=client.newCall(request).execute();\n            if(response!=null){\n                //获取字节流\n                is=response.body().byteStream();\n                //用于读写文件，“rw”模式表示读写模式\n                savedFile=new RandomAccessFile(file,\"rw\");\n                //跳过已下载的字节\n                savedFile.seek(downloadLength);\n                //创建一个字节数组，用于存储从网络读取的数据\n                byte[] b=new byte[1024];\n                //用于记录总共下载的字节数\n                int total=0;\n                //用于存储每次从网络读取的字节数\n                int len;\n                while((len=is.read(b))!=-1){\n                    if(isCanceled){\n                        return TYPE_CANCELED;\n                    } else if (isPaused) {\n                        return TYPE_PAUSED;\n                    }else{\n                        total+=len;\n                        //将从网络上读取的数据写入到文件中\n                        savedFile.write(b,0,len);\n                        //计算已下载的百分比\n                        int progress=(int) ((total+downloadLength)*100/contentLength);\n                        //发布下载进度\n                        publishProgress(progress);\n                    }\n                }\n                //关闭字节流\n                response.body().close();\n                return TYPE_SUCCESS;\n            }\n\n        }catch (Exception e){\n            e.printStackTrace();\n        }finally {\n                try{\n                    if(is!=null){\n                        is.close();\n                    }\n                    if(savedFile!=null){\n                        savedFile.close();\n                    }\n                    if(isCanceled&&file!=null){\n                        file.delete();\n                    }\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n        }\n        return TYPE_FAILED;\n    }\n\n    @Override\n    protected void onProgressUpdate(Integer... values) {\n        super.onProgressUpdate(values);\n        int progress=values[0];\n        if(progress>lastProgress){\n            listener.onProgress(progress);\n            lastProgress=progress;\n        }\n    }\n\n    @Override\n    protected void onPostExecute(Integer integer) {\n        super.onPostExecute(integer);\n        if(integer==TYPE_SUCCESS){\n            listener.onSuccess();\n        } else if (integer==TYPE_FAILED) {\n            listener.onFailed();\n        } else if (integer==TYPE_PAUSED) {\n            listener.onPaused();\n        } else if (integer==TYPE_CANCELED) {\n            listener.onCanceled();\n        }\n    }\n    public void pauseDownload(){\n        isPaused=true;\n    }\n    public void cancelDownload(){\n        isCanceled=true;\n    }\n    private long getContentLength(String downloadUrl) throws IOException {\n        OkHttpClient client=new OkHttpClient();\n        Request request=new Request.Builder()\n                .url(downloadUrl)\n                .build();\n        Response response=client.newCall(request).execute();\n        if(response!=null&&response.isSuccessful()){\n            long contentLendth=response.body().contentLength();\n            response.close();\n            return contentLendth;\n        }\n        return 0;\n    }\n}\n\n```\n\n```java\npublic class DownloadService extends Service {\n    private DownloadTask downloadTask;\n    private String downloadUrl;\n    public DownloadService() {\n    }\n    private DownloadListener listener=new DownloadListener() {\n        @SuppressLint(\"NotificationPermission\")\n        @Override\n        public void onProgress(int progress) {\n            getNotificationManager().notify(1,getNotification(\"Downloading...\",progress));\n        }\n\n        @SuppressLint(\"NotificationPermission\")\n        @Override\n        public void onSuccess() {\n            downloadTask=null;\n            //关闭前台通知\n            stopForeground(true);\n            //创建通知告知用户下载成功\n            getNotificationManager().notify(1,getNotification(\"Download Success\",-1));\n            Toast.makeText(DownloadService.this, \"Download Success\", Toast.LENGTH_SHORT).show();\n        }\n\n        @SuppressLint(\"NotificationPermission\")\n        @Override\n        public void onFailed() {\n            downloadTask=null;\n            stopForeground(true);\n            getNotificationManager().notify(1,getNotification(\"Download Failed\",-1));\n            Toast.makeText(DownloadService.this, \"Download Failed\", Toast.LENGTH_SHORT).show();\n        }\n\n        @Override\n        public void onPaused() {\n                downloadTask=null;\n            Toast.makeText(DownloadService.this, \"Paused\", Toast.LENGTH_SHORT).show();\n        }\n\n        @Override\n        public void onCanceled() {\n            downloadTask=null;\n            stopForeground(true);\n            Toast.makeText(DownloadService.this, \"Canceled\", Toast.LENGTH_SHORT).show();\n        }\n    };\n    private DownloadBinder mBinder=new DownloadBinder();\n    @Override\n    public IBinder onBind(Intent intent) {\n       return mBinder;\n    }\n    class DownloadBinder extends Binder{\n        @SuppressLint(\"ForegroundServiceType\")\n        public void startDownload(String url){\n            if(downloadTask==null){\n                downloadUrl=url;\n                //创建DownloadTask对象\n                downloadTask=new DownloadTask(listener);\n                //开启下载\n                downloadTask.execute(downloadUrl);\n                startForeground(1,getNotification(\"Downloading...\",0));\n                Toast.makeText(DownloadService.this, \"Downloading...\", Toast.LENGTH_SHORT).show();\n            }\n        }\n        public void pauseDownload(){\n            if(downloadTask!=null){\n                downloadTask.pauseDownload();\n            }\n        }\n        public void cancelDownload(){\n            if(downloadTask!=null){\n                downloadTask.cancelDownload();\n            }\n            else{\n                if(downloadUrl!=null){\n                    //取消下载时需将文件删除，并将通知关闭\n                    String fileName=downloadUrl.substring(downloadUrl.lastIndexOf(\"/\"));\n                    String directory= Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath();\n                    File file=new File(directory+fileName);\n                    if(file.exists()){\n                        file.delete();\n                    }\n                    getNotificationManager().cancel(1);\n                    stopForeground(true);\n                    Toast.makeText(DownloadService.this, \"Canceled\", Toast.LENGTH_SHORT).show();\n                }\n            }\n        }\n    }\n    private NotificationManager getNotificationManager(){\n        return (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n    }\n    private Notification getNotification(String title,int progress){\n        Intent intent=new Intent(this,MainActivity.class);\n        @SuppressLint(\"UnspecifiedImmutableFlag\") PendingIntent pi=PendingIntent.getActivities(this,0, new Intent[]{intent},0);\n        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n        String channelId = \"my_channel_id\";\n\n        // 创建通知渠道（仅适用于 Android 8.0 及以上）\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            NotificationChannel channel = new NotificationChannel(channelId, \"My Channel\", NotificationManager.IMPORTANCE_DEFAULT);\n            notificationManager.createNotificationChannel(channel);\n        }\n        NotificationCompat.Builder builder=new NotificationCompat.Builder(this, channelId);\n        // 创建 Notification\n\n        builder.setContentTitle(title);\n        builder.setSmallIcon(R.mipmap.ic_launcher);\n        builder.setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher));\n        builder.setContentIntent(pi);\n\n        if(progress>0){\n            builder.setContentText(progress+\"%\");\n            builder.setProgress(100,progress,false);\n        }\nreturn builder.build();\n    }\n}\n```\n\n```java\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n    private DownloadService.DownloadBinder downloadBinder;\n    //使活动与服务建立联系\n    private ServiceConnection connection=new ServiceConnection() {\n        @Override\n        public void onServiceConnected(ComponentName componentName, IBinder iBinder) {\n            downloadBinder=(DownloadService.DownloadBinder) iBinder;\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName componentName) {\n\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button start=(Button) findViewById(R.id.start_download);\n        Button pause=(Button) findViewById(R.id.pause_download);\n        Button cancel=(Button) findViewById(R.id.cancel_download);\n        start.setOnClickListener(this);\n        pause.setOnClickListener(this);\n        cancel.setOnClickListener(this);\n        //启动服务\n        Intent intent=new Intent(this,DownloadService.class);\n        startService(intent);\n        //绑定服务\n        bindService(intent,connection,BIND_AUTO_CREATE);\n        //申请权限\n        if(ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED){\n            ActivityCompat.requestPermissions(MainActivity.this,new String[]{ Manifest.permission.WRITE_EXTERNAL_STORAGE},1);\n        }\n    }\n\n    @Override\n    public void onClick(View view) {\n        if(downloadBinder==null){\n            return;\n        }\n        if(view.getId()==R.id.start_download){\n            String url=\"https://raw.githubusercontent.com/guolindev/eclipse/master/eclipse-inst-win64.exe\";\n            downloadBinder.startDownload(url);\n        } else if (view.getId()==R.id.pause_download) {\n            downloadBinder.pauseDownload();\n        } else if (view.getId()==R.id.cancel_download) {\n            downloadBinder.cancelDownload();\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if(requestCode==1){\n            if(grantResults.length>0&&grantResults[0]!=PackageManager.PERMISSION_GRANTED){\n                Toast.makeText(this, \"拒绝授权程序无法使用\", Toast.LENGTH_SHORT).show();\n                finish();\n            }\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        unbindService(connection);\n    }\n}\n```\n\n------\n\n","source":"_posts/服务.md","raw":"---\ntitle: 服务(Java)\ndate: 2025-03-24 19:36:08\ncategories:\n- Android(Java版)\ntags:\n---\n\n# Android多线程编程\n\n### 线程的基本用法\n\n（1）1.新建一个类继承自Thread，并重写run方法\n\n​          2.启动线程\n\n```java\nclass MyThread extends Thread{\n    @Override\n    public void run(){\n        //处理具体逻辑\n    }\n}\nnew MyThread().start();\n```\n\n(2) 使用Runnable接口的方式来定义一个线程\n\n```java\nclass MyThread implements Runnable{\n    @Override\n    public void run(){\n        //处理具体逻辑\n    }\n}\nMyYhread myThread=new MyYhread();\nnew Thread(myThread).start();\n```\n\n(3)匿名类的方法\n\n```java\nnew Thread(new Runnable(){\n     @Override\n    public void run(){\n        //处理具体逻辑\n    }\n}).start();\n```\n\n### 在子线程中更新UI\n\n1.新建一个Handler对象，并重写了父类的方法，在这里对Message进行具体处理，这里是主线程\n\n2.在子线程中创建Message对象，并发送\n\n```java\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n    public static  final int UPDATE_TEXT=1;\n    private TextView textView;\n    @SuppressLint(\"HandlerLeak\")\n    private Handler handler=new Handler(){\n        @SuppressLint(\"SetTextI18n\")\n        public void handleMessage(Message msg){\n            if (msg.what == UPDATE_TEXT) {\n                //在这里进行UI操作\n                textView.setText(\"Nice to meet you\");\n            }\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        textView=(TextView) findViewById(R.id.text);\n        Button changeText=(Button) findViewById(R.id.change_text);\n        changeText.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View view) {\n        if(view.getId()==R.id.change_text){\n            new Thread(new Runnable() {\n                @Override\n                public void run() {\n                   Message msg=new Message();\n                   msg.what=UPDATE_TEXT;\n                   handler.sendMessage(msg);\n                }\n            }).start();\n        }\n    }\n}\n```\n\n### 异步消息处理机制\n\n![](../img/img48.jpg)\n\n![](../img/img49.jpg)\n\n### AsyncTask\n\n1.创建一个子类去继承它，需要传入三个参数如下\n\nParams：在后台任务中使用\n\nProgress：可以作为进度单位\n\nResult：返回值类型\n\n2.重写父类方法如下：\n\nonPreExecute():界面上的初始化操作\n\ndoInBackground(Params...):所有代码都在子线程中运行，在这里处理耗时任务\n\nonProgressUpdate(Progress...):对UI进行操作\n\nonPostExecute(Result):后台任务执行完毕并通过return语句返回时，这个方法被调用\n\n3.启动任务\n\n`new DownloadTask().execute();`\n\n------\n\n# 服务\n\n1.定义一个服务(已经自动注册了),并重写onCreate,onStartCommand,onDestroy方法\n\n2.启动和停止服务\n\n3.将活动与服务进行联系\n\n```java\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\nprivate MyService.DownloadBinder downloadBinder;\nprivate ServiceConnection connection=new ServiceConnection() {\n    @Override\n    public void onServiceConnected(ComponentName componentName, IBinder service) {\n        downloadBinder=(MyService.DownloadBinder) service;\n        downloadBinder.startDownloads();\n        downloadBinder.getProgress();\n    }\n\n    @Override\n    public void onServiceDisconnected(ComponentName componentName) {\n\n    }\n};\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button start=(Button) findViewById(R.id.start_service);\n        Button stop=(Button) findViewById(R.id.stop_service);\n        Button bind=(Button) findViewById(R.id.bind_service);\n        Button unbind=(Button) findViewById(R.id.unbind_service);\n        Button startMyIntent=(Button)findViewById(R.id.start_intent_service);\n        start.setOnClickListener(this);\n        stop.setOnClickListener(this);\n        bind.setOnClickListener(this);\n        unbind.setOnClickListener(this);\n        startMyIntent.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View view) {\n        if(view.getId()==R.id.start_service){\n            Intent startIntent=new Intent(this,MyService.class);\n            startService(startIntent);//启动服务\n        }\n        if(view.getId()==R.id.stop_service){\n            Intent stopIntent=new Intent(this,MyService.class);\n            stopService(stopIntent);//停止服务\n        }\n        if(view.getId()==R.id.bind_service){\n            Intent bindIntent=new Intent(this,MyService.class);\n            //绑定服务\n            bindService(bindIntent,connection,BIND_AUTO_CREATE);\n\n        }\n        if(view.getId()==R.id.unbind_service){\n            //解绑服务\n            unbindService(connection);\n        }\n    }\n}\n```\n\n\n\n```java\npublic class MyService extends Service {\n    //建立联系\n    private DownloadBinder mBinder=new DownloadBinder();\n    class DownloadBinder extends Binder{\n        public void startDownloads(){\n            Log.d(\"MyService\", \"startDownloads: \");\n        }\n        public int getProgress(){\n            Log.d(\"MyService\", \"getProgress: \");\n            return 0;\n        }\n    }\n public MyService() {\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n       return mBinder;\n    }\n\n    @SuppressLint(\"ForegroundServiceType\")\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.d(\"MyService\", \"onCreate: \");\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        Log.d(\"MyService\", \"onStartCommand: \");\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                //处理具体逻辑\n                stopSelf();\n            }\n        }).start();\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.d(\"MyService\", \"onDestroy:\");\n    }\n}\n```\n\n------\n\n# 服务更多的技巧\n\n### 使用前台服务\n\n使用startForeground方法\n\n```java\n @SuppressLint(\"ForegroundServiceType\")\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.d(\"MyService\", \"onCreate: \");\n        startForegroundService();\n    }\n@SuppressLint(\"ForegroundServiceType\")\n    private void startForegroundService() {\n        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n        String channelId = \"my_channel_id\";\n\n        // 创建通知渠道（仅适用于 Android 8.0 及以上）\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            NotificationChannel channel = new NotificationChannel(\n                    channelId,\n                    \"My Channel\",\n                    NotificationManager.IMPORTANCE_DEFAULT\n            );\n            notificationManager.createNotificationChannel(channel);\n        }\n\n        // 创建 Notification\n        Notification notification = new NotificationCompat.Builder(this, channelId)\n                .setContentTitle(\"Service Running\")\n                .setContentText(\"Foreground service is running\")\n                .setSmallIcon(R.mipmap.ic_launcher)\n                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                .build();\n\n        // 启动前台服务\n        startForeground(1, notification);\n    }\n```\n\n### 使用IntentService\n\n1.新建一个类继承自IntentService\n\n2.在Manifest.xml中注册\n\n```java\npublic class MyIntentService extends IntentService {\n    public MyIntentService() {\n        super(\"MyIntentService\");//调用父类的有参构造函数\n    }\n\n    @Override\n    protected void onHandleIntent(@Nullable Intent intent) {\n        //该方法已经在子线程中运行\n        //打印当前线程的id\n        Log.d(\"MyIntentService\", \"Thread id is \"+Thread.currentThread().getId());\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.d(\"MyIntentService\", \"onDestroy executed\");\n    }\n}\n\n```\n\n------\n\n# 服务最佳实例\n\n1.添加依赖\n\n2.定义一个回调接口\n\n3.编写下载功能\n\n4.创建一个下载的服务，保证可以一直在后台运行\n\n5.将服务与活动建立联系并编写运行逻辑和授予权限\n\n```java\n implementation (\"com.squareup.okhttp3:okhttp:4.12.0\")\n```\n\n```java\npublic interface DownloadListener {\n    void onProgress(int progress);\n    void onSuccess();\n    void onFailed();\n    void onPaused();\n    void onCanceled();\n}\n\n```\n\n```java\npublic class DownloadTask extends AsyncTask<String,Integer,Integer> {\n    public static final int TYPE_SUCCESS=0;\n    public static final int TYPE_FAILED=1;\n    public static final int TYPE_PAUSED=2;\n    public static final int TYPE_CANCELED=3;\n    private DownloadListener listener;\n    private boolean isCanceled=false;\n    private boolean isPaused=false;\n    private int lastProgress;\n    public DownloadTask(DownloadListener listener){\n        this.listener=listener;\n    }\n\n    @Override\n    protected Integer doInBackground(String... strings) {\n        //用于从网络读取数据\n        InputStream is=null;\n        //用于写入下载的文件\n        RandomAccessFile savedFile=null;\n        //表示下载文件的存储位置\n        File file=null;\n        try{\n            //记录已下载的文件长度\n            long downloadLength=0;\n            //获取URL地址\n            String downloadUrl=strings[0];\n            //解析下载的文件名\n            String fileName=downloadUrl.substring(downloadUrl.lastIndexOf(\"/\"));\n            //指定将文件下载到Environment.DIRECTORY_DOWNLOADS目录下\n            String directory= Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath();\n            file=new File(directory+fileName);\n            //判断该目录是否已经存在要下载的文件\n            if(file.exists()){\n                //读取已下载的字节数\n                downloadLength=file.length();\n            }\n            //获取下载文件的总长度\n            long contentLength=getContentLength(downloadUrl);\n            if(contentLength==0){\n                return TYPE_FAILED;\n            } else if (contentLength==downloadLength) {\n                //已下载字节和文件总字节相等，说明已经下载完成了\n                return TYPE_SUCCESS;\n            }\n            //利用OkHttp发送一条网络请求\n            OkHttpClient client=new OkHttpClient();\n            Request request=new Request.Builder()\n                    //断点下载，指定从哪个字节开始下载\n                    .addHeader(\"RANGE\",\"bytes=\"+downloadLength+\"-\")\n                    .url(downloadUrl)\n                    .build();\n            Response response=client.newCall(request).execute();\n            if(response!=null){\n                //获取字节流\n                is=response.body().byteStream();\n                //用于读写文件，“rw”模式表示读写模式\n                savedFile=new RandomAccessFile(file,\"rw\");\n                //跳过已下载的字节\n                savedFile.seek(downloadLength);\n                //创建一个字节数组，用于存储从网络读取的数据\n                byte[] b=new byte[1024];\n                //用于记录总共下载的字节数\n                int total=0;\n                //用于存储每次从网络读取的字节数\n                int len;\n                while((len=is.read(b))!=-1){\n                    if(isCanceled){\n                        return TYPE_CANCELED;\n                    } else if (isPaused) {\n                        return TYPE_PAUSED;\n                    }else{\n                        total+=len;\n                        //将从网络上读取的数据写入到文件中\n                        savedFile.write(b,0,len);\n                        //计算已下载的百分比\n                        int progress=(int) ((total+downloadLength)*100/contentLength);\n                        //发布下载进度\n                        publishProgress(progress);\n                    }\n                }\n                //关闭字节流\n                response.body().close();\n                return TYPE_SUCCESS;\n            }\n\n        }catch (Exception e){\n            e.printStackTrace();\n        }finally {\n                try{\n                    if(is!=null){\n                        is.close();\n                    }\n                    if(savedFile!=null){\n                        savedFile.close();\n                    }\n                    if(isCanceled&&file!=null){\n                        file.delete();\n                    }\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n        }\n        return TYPE_FAILED;\n    }\n\n    @Override\n    protected void onProgressUpdate(Integer... values) {\n        super.onProgressUpdate(values);\n        int progress=values[0];\n        if(progress>lastProgress){\n            listener.onProgress(progress);\n            lastProgress=progress;\n        }\n    }\n\n    @Override\n    protected void onPostExecute(Integer integer) {\n        super.onPostExecute(integer);\n        if(integer==TYPE_SUCCESS){\n            listener.onSuccess();\n        } else if (integer==TYPE_FAILED) {\n            listener.onFailed();\n        } else if (integer==TYPE_PAUSED) {\n            listener.onPaused();\n        } else if (integer==TYPE_CANCELED) {\n            listener.onCanceled();\n        }\n    }\n    public void pauseDownload(){\n        isPaused=true;\n    }\n    public void cancelDownload(){\n        isCanceled=true;\n    }\n    private long getContentLength(String downloadUrl) throws IOException {\n        OkHttpClient client=new OkHttpClient();\n        Request request=new Request.Builder()\n                .url(downloadUrl)\n                .build();\n        Response response=client.newCall(request).execute();\n        if(response!=null&&response.isSuccessful()){\n            long contentLendth=response.body().contentLength();\n            response.close();\n            return contentLendth;\n        }\n        return 0;\n    }\n}\n\n```\n\n```java\npublic class DownloadService extends Service {\n    private DownloadTask downloadTask;\n    private String downloadUrl;\n    public DownloadService() {\n    }\n    private DownloadListener listener=new DownloadListener() {\n        @SuppressLint(\"NotificationPermission\")\n        @Override\n        public void onProgress(int progress) {\n            getNotificationManager().notify(1,getNotification(\"Downloading...\",progress));\n        }\n\n        @SuppressLint(\"NotificationPermission\")\n        @Override\n        public void onSuccess() {\n            downloadTask=null;\n            //关闭前台通知\n            stopForeground(true);\n            //创建通知告知用户下载成功\n            getNotificationManager().notify(1,getNotification(\"Download Success\",-1));\n            Toast.makeText(DownloadService.this, \"Download Success\", Toast.LENGTH_SHORT).show();\n        }\n\n        @SuppressLint(\"NotificationPermission\")\n        @Override\n        public void onFailed() {\n            downloadTask=null;\n            stopForeground(true);\n            getNotificationManager().notify(1,getNotification(\"Download Failed\",-1));\n            Toast.makeText(DownloadService.this, \"Download Failed\", Toast.LENGTH_SHORT).show();\n        }\n\n        @Override\n        public void onPaused() {\n                downloadTask=null;\n            Toast.makeText(DownloadService.this, \"Paused\", Toast.LENGTH_SHORT).show();\n        }\n\n        @Override\n        public void onCanceled() {\n            downloadTask=null;\n            stopForeground(true);\n            Toast.makeText(DownloadService.this, \"Canceled\", Toast.LENGTH_SHORT).show();\n        }\n    };\n    private DownloadBinder mBinder=new DownloadBinder();\n    @Override\n    public IBinder onBind(Intent intent) {\n       return mBinder;\n    }\n    class DownloadBinder extends Binder{\n        @SuppressLint(\"ForegroundServiceType\")\n        public void startDownload(String url){\n            if(downloadTask==null){\n                downloadUrl=url;\n                //创建DownloadTask对象\n                downloadTask=new DownloadTask(listener);\n                //开启下载\n                downloadTask.execute(downloadUrl);\n                startForeground(1,getNotification(\"Downloading...\",0));\n                Toast.makeText(DownloadService.this, \"Downloading...\", Toast.LENGTH_SHORT).show();\n            }\n        }\n        public void pauseDownload(){\n            if(downloadTask!=null){\n                downloadTask.pauseDownload();\n            }\n        }\n        public void cancelDownload(){\n            if(downloadTask!=null){\n                downloadTask.cancelDownload();\n            }\n            else{\n                if(downloadUrl!=null){\n                    //取消下载时需将文件删除，并将通知关闭\n                    String fileName=downloadUrl.substring(downloadUrl.lastIndexOf(\"/\"));\n                    String directory= Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath();\n                    File file=new File(directory+fileName);\n                    if(file.exists()){\n                        file.delete();\n                    }\n                    getNotificationManager().cancel(1);\n                    stopForeground(true);\n                    Toast.makeText(DownloadService.this, \"Canceled\", Toast.LENGTH_SHORT).show();\n                }\n            }\n        }\n    }\n    private NotificationManager getNotificationManager(){\n        return (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n    }\n    private Notification getNotification(String title,int progress){\n        Intent intent=new Intent(this,MainActivity.class);\n        @SuppressLint(\"UnspecifiedImmutableFlag\") PendingIntent pi=PendingIntent.getActivities(this,0, new Intent[]{intent},0);\n        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n        String channelId = \"my_channel_id\";\n\n        // 创建通知渠道（仅适用于 Android 8.0 及以上）\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            NotificationChannel channel = new NotificationChannel(channelId, \"My Channel\", NotificationManager.IMPORTANCE_DEFAULT);\n            notificationManager.createNotificationChannel(channel);\n        }\n        NotificationCompat.Builder builder=new NotificationCompat.Builder(this, channelId);\n        // 创建 Notification\n\n        builder.setContentTitle(title);\n        builder.setSmallIcon(R.mipmap.ic_launcher);\n        builder.setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher));\n        builder.setContentIntent(pi);\n\n        if(progress>0){\n            builder.setContentText(progress+\"%\");\n            builder.setProgress(100,progress,false);\n        }\nreturn builder.build();\n    }\n}\n```\n\n```java\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n    private DownloadService.DownloadBinder downloadBinder;\n    //使活动与服务建立联系\n    private ServiceConnection connection=new ServiceConnection() {\n        @Override\n        public void onServiceConnected(ComponentName componentName, IBinder iBinder) {\n            downloadBinder=(DownloadService.DownloadBinder) iBinder;\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName componentName) {\n\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button start=(Button) findViewById(R.id.start_download);\n        Button pause=(Button) findViewById(R.id.pause_download);\n        Button cancel=(Button) findViewById(R.id.cancel_download);\n        start.setOnClickListener(this);\n        pause.setOnClickListener(this);\n        cancel.setOnClickListener(this);\n        //启动服务\n        Intent intent=new Intent(this,DownloadService.class);\n        startService(intent);\n        //绑定服务\n        bindService(intent,connection,BIND_AUTO_CREATE);\n        //申请权限\n        if(ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED){\n            ActivityCompat.requestPermissions(MainActivity.this,new String[]{ Manifest.permission.WRITE_EXTERNAL_STORAGE},1);\n        }\n    }\n\n    @Override\n    public void onClick(View view) {\n        if(downloadBinder==null){\n            return;\n        }\n        if(view.getId()==R.id.start_download){\n            String url=\"https://raw.githubusercontent.com/guolindev/eclipse/master/eclipse-inst-win64.exe\";\n            downloadBinder.startDownload(url);\n        } else if (view.getId()==R.id.pause_download) {\n            downloadBinder.pauseDownload();\n        } else if (view.getId()==R.id.cancel_download) {\n            downloadBinder.cancelDownload();\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if(requestCode==1){\n            if(grantResults.length>0&&grantResults[0]!=PackageManager.PERMISSION_GRANTED){\n                Toast.makeText(this, \"拒绝授权程序无法使用\", Toast.LENGTH_SHORT).show();\n                finish();\n            }\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        unbindService(connection);\n    }\n}\n```\n\n------\n\n","slug":"服务","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gco002ns4s7140ic35w","content":"<h1 id=\"Android多线程编程\"><a href=\"#Android多线程编程\" class=\"headerlink\" title=\"Android多线程编程\"></a>Android多线程编程</h1><h3 id=\"线程的基本用法\"><a href=\"#线程的基本用法\" class=\"headerlink\" title=\"线程的基本用法\"></a>线程的基本用法</h3><p>（1）1.新建一个类继承自Thread，并重写run方法</p>\n<p>​          2.启动线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理具体逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>().start();</span><br></pre></td></tr></table></figure>\n\n<p>(2) 使用Runnable接口的方式来定义一个线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理具体逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">MyYhread myThread=<span class=\"keyword\">new</span> <span class=\"title class_\">MyYhread</span>();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(myThread).start();</span><br></pre></td></tr></table></figure>\n\n<p>(3)匿名类的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>()&#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理具体逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).start();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在子线程中更新UI\"><a href=\"#在子线程中更新UI\" class=\"headerlink\" title=\"在子线程中更新UI\"></a>在子线程中更新UI</h3><p>1.新建一个Handler对象，并重写了父类的方法，在这里对Message进行具体处理，这里是主线程</p>\n<p>2.在子线程中创建Message对象，并发送</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">View</span>.OnClickListener &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  <span class=\"keyword\">final</span> <span class=\"type\">int</span> UPDATE_TEXT=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView textView;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(&quot;HandlerLeak&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler=<span class=\"keyword\">new</span> <span class=\"title class_\">Handler</span>()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;SetTextI18n&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleMessage</span><span class=\"params\">(Message msg)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (msg.what == UPDATE_TEXT) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//在这里进行UI操作</span></span><br><span class=\"line\">                textView.setText(<span class=\"string\">&quot;Nice to meet you&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        textView=(TextView) findViewById(R.id.text);</span><br><span class=\"line\">        Button changeText=(Button) findViewById(R.id.change_text);</span><br><span class=\"line\">        changeText.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view.getId()==R.id.change_text)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                   Message msg=<span class=\"keyword\">new</span> <span class=\"title class_\">Message</span>();</span><br><span class=\"line\">                   msg.what=UPDATE_TEXT;</span><br><span class=\"line\">                   handler.sendMessage(msg);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异步消息处理机制\"><a href=\"#异步消息处理机制\" class=\"headerlink\" title=\"异步消息处理机制\"></a>异步消息处理机制</h3><p><img src=\"/../img/img48.jpg\"></p>\n<p><img src=\"/../img/img49.jpg\"></p>\n<h3 id=\"AsyncTask\"><a href=\"#AsyncTask\" class=\"headerlink\" title=\"AsyncTask\"></a>AsyncTask</h3><p>1.创建一个子类去继承它，需要传入三个参数如下</p>\n<p>Params：在后台任务中使用</p>\n<p>Progress：可以作为进度单位</p>\n<p>Result：返回值类型</p>\n<p>2.重写父类方法如下：</p>\n<p>onPreExecute():界面上的初始化操作</p>\n<p>doInBackground(Params…):所有代码都在子线程中运行，在这里处理耗时任务</p>\n<p>onProgressUpdate(Progress…):对UI进行操作</p>\n<p>onPostExecute(Result):后台任务执行完毕并通过return语句返回时，这个方法被调用</p>\n<p>3.启动任务</p>\n<p><code>new DownloadTask().execute();</code></p>\n<hr>\n<h1 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h1><p>1.定义一个服务(已经自动注册了),并重写onCreate,onStartCommand,onDestroy方法</p>\n<p>2.启动和停止服务</p>\n<p>3.将活动与服务进行联系</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">View</span>.OnClickListener &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> MyService.DownloadBinder downloadBinder;</span><br><span class=\"line\"><span class=\"keyword\">private</span> ServiceConnection connection=<span class=\"keyword\">new</span> <span class=\"title class_\">ServiceConnection</span>() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onServiceConnected</span><span class=\"params\">(ComponentName componentName, IBinder service)</span> &#123;</span><br><span class=\"line\">        downloadBinder=(MyService.DownloadBinder) service;</span><br><span class=\"line\">        downloadBinder.startDownloads();</span><br><span class=\"line\">        downloadBinder.getProgress();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onServiceDisconnected</span><span class=\"params\">(ComponentName componentName)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Button start=(Button) findViewById(R.id.start_service);</span><br><span class=\"line\">        Button stop=(Button) findViewById(R.id.stop_service);</span><br><span class=\"line\">        Button bind=(Button) findViewById(R.id.bind_service);</span><br><span class=\"line\">        Button unbind=(Button) findViewById(R.id.unbind_service);</span><br><span class=\"line\">        Button startMyIntent=(Button)findViewById(R.id.start_intent_service);</span><br><span class=\"line\">        start.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        stop.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        bind.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        unbind.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        startMyIntent.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view.getId()==R.id.start_service)&#123;</span><br><span class=\"line\">            Intent startIntent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>,MyService.class);</span><br><span class=\"line\">            startService(startIntent);<span class=\"comment\">//启动服务</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view.getId()==R.id.stop_service)&#123;</span><br><span class=\"line\">            Intent stopIntent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>,MyService.class);</span><br><span class=\"line\">            stopService(stopIntent);<span class=\"comment\">//停止服务</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view.getId()==R.id.bind_service)&#123;</span><br><span class=\"line\">            Intent bindIntent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>,MyService.class);</span><br><span class=\"line\">            <span class=\"comment\">//绑定服务</span></span><br><span class=\"line\">            bindService(bindIntent,connection,BIND_AUTO_CREATE);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view.getId()==R.id.unbind_service)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//解绑服务</span></span><br><span class=\"line\">            unbindService(connection);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Service</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//建立联系</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DownloadBinder mBinder=<span class=\"keyword\">new</span> <span class=\"title class_\">DownloadBinder</span>();</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">DownloadBinder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Binder</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startDownloads</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;startDownloads: &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getProgress</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;getProgress: &quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"title function_\">MyService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IBinder <span class=\"title function_\">onBind</span><span class=\"params\">(Intent intent)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> mBinder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(&quot;ForegroundServiceType&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onCreate: &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"type\">int</span> flags, <span class=\"type\">int</span> startId)</span> &#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onStartCommand: &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//处理具体逻辑</span></span><br><span class=\"line\">                stopSelf();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.onStartCommand(intent, flags, startId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onDestroy:&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"服务更多的技巧\"><a href=\"#服务更多的技巧\" class=\"headerlink\" title=\"服务更多的技巧\"></a>服务更多的技巧</h1><h3 id=\"使用前台服务\"><a href=\"#使用前台服务\" class=\"headerlink\" title=\"使用前台服务\"></a>使用前台服务</h3><p>使用startForeground方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@SuppressLint(&quot;ForegroundServiceType&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onCreate: &quot;</span>);</span><br><span class=\"line\">        startForegroundService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">@SuppressLint(&quot;ForegroundServiceType&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startForegroundService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NotificationManager</span> <span class=\"variable\">notificationManager</span> <span class=\"operator\">=</span> (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">channelId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;my_channel_id&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建通知渠道（仅适用于 Android 8.0 及以上）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class=\"line\">            <span class=\"type\">NotificationChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationChannel</span>(</span><br><span class=\"line\">                    channelId,</span><br><span class=\"line\">                    <span class=\"string\">&quot;My Channel&quot;</span>,</span><br><span class=\"line\">                    NotificationManager.IMPORTANCE_DEFAULT</span><br><span class=\"line\">            );</span><br><span class=\"line\">            notificationManager.createNotificationChannel(channel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建 Notification</span></span><br><span class=\"line\">        <span class=\"type\">Notification</span> <span class=\"variable\">notification</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.Builder(<span class=\"built_in\">this</span>, channelId)</span><br><span class=\"line\">                .setContentTitle(<span class=\"string\">&quot;Service Running&quot;</span>)</span><br><span class=\"line\">                .setContentText(<span class=\"string\">&quot;Foreground service is running&quot;</span>)</span><br><span class=\"line\">                .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class=\"line\">                .setPriority(NotificationCompat.PRIORITY_DEFAULT)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动前台服务</span></span><br><span class=\"line\">        startForeground(<span class=\"number\">1</span>, notification);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用IntentService\"><a href=\"#使用IntentService\" class=\"headerlink\" title=\"使用IntentService\"></a>使用IntentService</h3><p>1.新建一个类继承自IntentService</p>\n<p>2.在Manifest.xml中注册</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyIntentService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">IntentService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyIntentService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(<span class=\"string\">&quot;MyIntentService&quot;</span>);<span class=\"comment\">//调用父类的有参构造函数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onHandleIntent</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Intent intent)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//该方法已经在子线程中运行</span></span><br><span class=\"line\">        <span class=\"comment\">//打印当前线程的id</span></span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyIntentService&quot;</span>, <span class=\"string\">&quot;Thread id is &quot;</span>+Thread.currentThread().getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyIntentService&quot;</span>, <span class=\"string\">&quot;onDestroy executed&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"服务最佳实例\"><a href=\"#服务最佳实例\" class=\"headerlink\" title=\"服务最佳实例\"></a>服务最佳实例</h1><p>1.添加依赖</p>\n<p>2.定义一个回调接口</p>\n<p>3.编写下载功能</p>\n<p>4.创建一个下载的服务，保证可以一直在后台运行</p>\n<p>5.将服务与活动建立联系并编写运行逻辑和授予权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;com.squareup.okhttp3:okhttp:4.12.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DownloadListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onProgress</span><span class=\"params\">(<span class=\"type\">int</span> progress)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onSuccess</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onFailed</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onPaused</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onCanceled</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTask</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AsyncTask</span>&lt;String,Integer,Integer&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TYPE_SUCCESS=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TYPE_FAILED=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TYPE_PAUSED=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TYPE_CANCELED=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DownloadListener listener;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> isCanceled=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> isPaused=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> lastProgress;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DownloadTask</span><span class=\"params\">(DownloadListener listener)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.listener=listener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Integer <span class=\"title function_\">doInBackground</span><span class=\"params\">(String... strings)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//用于从网络读取数据</span></span><br><span class=\"line\">        InputStream is=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//用于写入下载的文件</span></span><br><span class=\"line\">        RandomAccessFile savedFile=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//表示下载文件的存储位置</span></span><br><span class=\"line\">        File file=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//记录已下载的文件长度</span></span><br><span class=\"line\">            <span class=\"type\">long</span> downloadLength=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">//获取URL地址</span></span><br><span class=\"line\">            String downloadUrl=strings[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"comment\">//解析下载的文件名</span></span><br><span class=\"line\">            String fileName=downloadUrl.substring(downloadUrl.lastIndexOf(<span class=\"string\">&quot;/&quot;</span>));</span><br><span class=\"line\">            <span class=\"comment\">//指定将文件下载到Environment.DIRECTORY_DOWNLOADS目录下</span></span><br><span class=\"line\">            String directory= Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath();</span><br><span class=\"line\">            file=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(directory+fileName);</span><br><span class=\"line\">            <span class=\"comment\">//判断该目录是否已经存在要下载的文件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(file.exists())&#123;</span><br><span class=\"line\">                <span class=\"comment\">//读取已下载的字节数</span></span><br><span class=\"line\">                downloadLength=file.length();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//获取下载文件的总长度</span></span><br><span class=\"line\">            <span class=\"type\">long</span> contentLength=getContentLength(downloadUrl);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(contentLength==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> TYPE_FAILED;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (contentLength==downloadLength) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//已下载字节和文件总字节相等，说明已经下载完成了</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> TYPE_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//利用OkHttp发送一条网络请求</span></span><br><span class=\"line\">            OkHttpClient client=<span class=\"keyword\">new</span> <span class=\"title class_\">OkHttpClient</span>();</span><br><span class=\"line\">            Request request=<span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>.Builder()</span><br><span class=\"line\">                    <span class=\"comment\">//断点下载，指定从哪个字节开始下载</span></span><br><span class=\"line\">                    .addHeader(<span class=\"string\">&quot;RANGE&quot;</span>,<span class=\"string\">&quot;bytes=&quot;</span>+downloadLength+<span class=\"string\">&quot;-&quot;</span>)</span><br><span class=\"line\">                    .url(downloadUrl)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">            Response response=client.newCall(request).execute();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(response!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取字节流</span></span><br><span class=\"line\">                is=response.body().byteStream();</span><br><span class=\"line\">                <span class=\"comment\">//用于读写文件，“rw”模式表示读写模式</span></span><br><span class=\"line\">                savedFile=<span class=\"keyword\">new</span> <span class=\"title class_\">RandomAccessFile</span>(file,<span class=\"string\">&quot;rw&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//跳过已下载的字节</span></span><br><span class=\"line\">                savedFile.seek(downloadLength);</span><br><span class=\"line\">                <span class=\"comment\">//创建一个字节数组，用于存储从网络读取的数据</span></span><br><span class=\"line\">                <span class=\"type\">byte</span>[] b=<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">                <span class=\"comment\">//用于记录总共下载的字节数</span></span><br><span class=\"line\">                <span class=\"type\">int</span> total=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"comment\">//用于存储每次从网络读取的字节数</span></span><br><span class=\"line\">                <span class=\"type\">int</span> len;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>((len=is.read(b))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(isCanceled)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> TYPE_CANCELED;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isPaused) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> TYPE_PAUSED;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        total+=len;</span><br><span class=\"line\">                        <span class=\"comment\">//将从网络上读取的数据写入到文件中</span></span><br><span class=\"line\">                        savedFile.write(b,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">                        <span class=\"comment\">//计算已下载的百分比</span></span><br><span class=\"line\">                        <span class=\"type\">int</span> progress=(<span class=\"type\">int</span>) ((total+downloadLength)*<span class=\"number\">100</span>/contentLength);</span><br><span class=\"line\">                        <span class=\"comment\">//发布下载进度</span></span><br><span class=\"line\">                        publishProgress(progress);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//关闭字节流</span></span><br><span class=\"line\">                response.body().close();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> TYPE_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(is!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                        is.close();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(savedFile!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                        savedFile.close();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(isCanceled&amp;&amp;file!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                        file.delete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TYPE_FAILED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onProgressUpdate</span><span class=\"params\">(Integer... values)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onProgressUpdate(values);</span><br><span class=\"line\">        <span class=\"type\">int</span> progress=values[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(progress&gt;lastProgress)&#123;</span><br><span class=\"line\">            listener.onProgress(progress);</span><br><span class=\"line\">            lastProgress=progress;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPostExecute</span><span class=\"params\">(Integer integer)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onPostExecute(integer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(integer==TYPE_SUCCESS)&#123;</span><br><span class=\"line\">            listener.onSuccess();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (integer==TYPE_FAILED) &#123;</span><br><span class=\"line\">            listener.onFailed();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (integer==TYPE_PAUSED) &#123;</span><br><span class=\"line\">            listener.onPaused();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (integer==TYPE_CANCELED) &#123;</span><br><span class=\"line\">            listener.onCanceled();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pauseDownload</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        isPaused=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cancelDownload</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        isCanceled=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"title function_\">getContentLength</span><span class=\"params\">(String downloadUrl)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        OkHttpClient client=<span class=\"keyword\">new</span> <span class=\"title class_\">OkHttpClient</span>();</span><br><span class=\"line\">        Request request=<span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>.Builder()</span><br><span class=\"line\">                .url(downloadUrl)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        Response response=client.newCall(request).execute();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(response!=<span class=\"literal\">null</span>&amp;&amp;response.isSuccessful())&#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> contentLendth=response.body().contentLength();</span><br><span class=\"line\">            response.close();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> contentLendth;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DownloadService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Service</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DownloadTask downloadTask;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String downloadUrl;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DownloadService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DownloadListener listener=<span class=\"keyword\">new</span> <span class=\"title class_\">DownloadListener</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;NotificationPermission&quot;)</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onProgress</span><span class=\"params\">(<span class=\"type\">int</span> progress)</span> &#123;</span><br><span class=\"line\">            getNotificationManager().notify(<span class=\"number\">1</span>,getNotification(<span class=\"string\">&quot;Downloading...&quot;</span>,progress));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;NotificationPermission&quot;)</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSuccess</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            downloadTask=<span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">//关闭前台通知</span></span><br><span class=\"line\">            stopForeground(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">//创建通知告知用户下载成功</span></span><br><span class=\"line\">            getNotificationManager().notify(<span class=\"number\">1</span>,getNotification(<span class=\"string\">&quot;Download Success&quot;</span>,-<span class=\"number\">1</span>));</span><br><span class=\"line\">            Toast.makeText(DownloadService.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Download Success&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;NotificationPermission&quot;)</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onFailed</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            downloadTask=<span class=\"literal\">null</span>;</span><br><span class=\"line\">            stopForeground(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            getNotificationManager().notify(<span class=\"number\">1</span>,getNotification(<span class=\"string\">&quot;Download Failed&quot;</span>,-<span class=\"number\">1</span>));</span><br><span class=\"line\">            Toast.makeText(DownloadService.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Download Failed&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPaused</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                downloadTask=<span class=\"literal\">null</span>;</span><br><span class=\"line\">            Toast.makeText(DownloadService.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Paused&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCanceled</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            downloadTask=<span class=\"literal\">null</span>;</span><br><span class=\"line\">            stopForeground(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            Toast.makeText(DownloadService.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Canceled&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DownloadBinder mBinder=<span class=\"keyword\">new</span> <span class=\"title class_\">DownloadBinder</span>();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IBinder <span class=\"title function_\">onBind</span><span class=\"params\">(Intent intent)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> mBinder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">DownloadBinder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Binder</span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;ForegroundServiceType&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startDownload</span><span class=\"params\">(String url)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(downloadTask==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                downloadUrl=url;</span><br><span class=\"line\">                <span class=\"comment\">//创建DownloadTask对象</span></span><br><span class=\"line\">                downloadTask=<span class=\"keyword\">new</span> <span class=\"title class_\">DownloadTask</span>(listener);</span><br><span class=\"line\">                <span class=\"comment\">//开启下载</span></span><br><span class=\"line\">                downloadTask.execute(downloadUrl);</span><br><span class=\"line\">                startForeground(<span class=\"number\">1</span>,getNotification(<span class=\"string\">&quot;Downloading...&quot;</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">                Toast.makeText(DownloadService.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Downloading...&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pauseDownload</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(downloadTask!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                downloadTask.pauseDownload();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cancelDownload</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(downloadTask!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                downloadTask.cancelDownload();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(downloadUrl!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//取消下载时需将文件删除，并将通知关闭</span></span><br><span class=\"line\">                    String fileName=downloadUrl.substring(downloadUrl.lastIndexOf(<span class=\"string\">&quot;/&quot;</span>));</span><br><span class=\"line\">                    String directory= Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath();</span><br><span class=\"line\">                    File file=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(directory+fileName);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(file.exists())&#123;</span><br><span class=\"line\">                        file.delete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    getNotificationManager().cancel(<span class=\"number\">1</span>);</span><br><span class=\"line\">                    stopForeground(<span class=\"literal\">true</span>);</span><br><span class=\"line\">                    Toast.makeText(DownloadService.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Canceled&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> NotificationManager <span class=\"title function_\">getNotificationManager</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Notification <span class=\"title function_\">getNotification</span><span class=\"params\">(String title,<span class=\"type\">int</span> progress)</span>&#123;</span><br><span class=\"line\">        Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>,MainActivity.class);</span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;UnspecifiedImmutableFlag&quot;)</span> PendingIntent pi=PendingIntent.getActivities(<span class=\"built_in\">this</span>,<span class=\"number\">0</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>[]&#123;intent&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"type\">NotificationManager</span> <span class=\"variable\">notificationManager</span> <span class=\"operator\">=</span> (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">channelId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;my_channel_id&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建通知渠道（仅适用于 Android 8.0 及以上）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class=\"line\">            <span class=\"type\">NotificationChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationChannel</span>(channelId, <span class=\"string\">&quot;My Channel&quot;</span>, NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class=\"line\">            notificationManager.createNotificationChannel(channel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        NotificationCompat.Builder builder=<span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.Builder(<span class=\"built_in\">this</span>, channelId);</span><br><span class=\"line\">        <span class=\"comment\">// 创建 Notification</span></span><br><span class=\"line\"></span><br><span class=\"line\">        builder.setContentTitle(title);</span><br><span class=\"line\">        builder.setSmallIcon(R.mipmap.ic_launcher);</span><br><span class=\"line\">        builder.setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher));</span><br><span class=\"line\">        builder.setContentIntent(pi);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(progress&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            builder.setContentText(progress+<span class=\"string\">&quot;%&quot;</span>);</span><br><span class=\"line\">            builder.setProgress(<span class=\"number\">100</span>,progress,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">View</span>.OnClickListener &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DownloadService.DownloadBinder downloadBinder;</span><br><span class=\"line\">    <span class=\"comment\">//使活动与服务建立联系</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection connection=<span class=\"keyword\">new</span> <span class=\"title class_\">ServiceConnection</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onServiceConnected</span><span class=\"params\">(ComponentName componentName, IBinder iBinder)</span> &#123;</span><br><span class=\"line\">            downloadBinder=(DownloadService.DownloadBinder) iBinder;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onServiceDisconnected</span><span class=\"params\">(ComponentName componentName)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Button start=(Button) findViewById(R.id.start_download);</span><br><span class=\"line\">        Button pause=(Button) findViewById(R.id.pause_download);</span><br><span class=\"line\">        Button cancel=(Button) findViewById(R.id.cancel_download);</span><br><span class=\"line\">        start.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        pause.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        cancel.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//启动服务</span></span><br><span class=\"line\">        Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>,DownloadService.class);</span><br><span class=\"line\">        startService(intent);</span><br><span class=\"line\">        <span class=\"comment\">//绑定服务</span></span><br><span class=\"line\">        bindService(intent,connection,BIND_AUTO_CREATE);</span><br><span class=\"line\">        <span class=\"comment\">//申请权限</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class=\"built_in\">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">            ActivityCompat.requestPermissions(MainActivity.<span class=\"built_in\">this</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123; Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(downloadBinder==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view.getId()==R.id.start_download)&#123;</span><br><span class=\"line\">            String url=<span class=\"string\">&quot;https://raw.githubusercontent.com/guolindev/eclipse/master/eclipse-inst-win64.exe&quot;</span>;</span><br><span class=\"line\">            downloadBinder.startDownload(url);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.getId()==R.id.pause_download) &#123;</span><br><span class=\"line\">            downloadBinder.pauseDownload();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.getId()==R.id.cancel_download) &#123;</span><br><span class=\"line\">            downloadBinder.cancelDownload();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"meta\">@NonNull</span> String[] permissions, <span class=\"meta\">@NonNull</span> <span class=\"type\">int</span>[] grantResults)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(requestCode==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(grantResults.length&gt;<span class=\"number\">0</span>&amp;&amp;grantResults[<span class=\"number\">0</span>]!=PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;拒绝授权程序无法使用&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        unbindService(connection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"Android多线程编程\n线程的基本用法\n（1）1.新建一个类继承自Thread，并重写run方法\n\n​ 2.启动线程\n\n1\n2\n3\n4\n5\n6\n7\n\n\nclass MyThread extends Thread{\n    @Override\n    public void run(){\n        //处理具体逻辑\n    }\n}\nnew MyThread().start();\n\n\n(2) 使用Runnable接口的方式来定义一个线程\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nclass MyThread implements Runnable{\n    @Override\n    publ","more":"<h1 id=\"Android多线程编程\"><a href=\"#Android多线程编程\" class=\"headerlink\" title=\"Android多线程编程\"></a>Android多线程编程</h1><h3 id=\"线程的基本用法\"><a href=\"#线程的基本用法\" class=\"headerlink\" title=\"线程的基本用法\"></a>线程的基本用法</h3><p>（1）1.新建一个类继承自Thread，并重写run方法</p>\n<p>​          2.启动线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理具体逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>().start();</span><br></pre></td></tr></table></figure>\n\n<p>(2) 使用Runnable接口的方式来定义一个线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理具体逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">MyYhread myThread=<span class=\"keyword\">new</span> <span class=\"title class_\">MyYhread</span>();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(myThread).start();</span><br></pre></td></tr></table></figure>\n\n<p>(3)匿名类的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>()&#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理具体逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).start();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在子线程中更新UI\"><a href=\"#在子线程中更新UI\" class=\"headerlink\" title=\"在子线程中更新UI\"></a>在子线程中更新UI</h3><p>1.新建一个Handler对象，并重写了父类的方法，在这里对Message进行具体处理，这里是主线程</p>\n<p>2.在子线程中创建Message对象，并发送</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">View</span>.OnClickListener &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  <span class=\"keyword\">final</span> <span class=\"type\">int</span> UPDATE_TEXT=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView textView;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(&quot;HandlerLeak&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler=<span class=\"keyword\">new</span> <span class=\"title class_\">Handler</span>()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;SetTextI18n&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleMessage</span><span class=\"params\">(Message msg)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (msg.what == UPDATE_TEXT) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//在这里进行UI操作</span></span><br><span class=\"line\">                textView.setText(<span class=\"string\">&quot;Nice to meet you&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        textView=(TextView) findViewById(R.id.text);</span><br><span class=\"line\">        Button changeText=(Button) findViewById(R.id.change_text);</span><br><span class=\"line\">        changeText.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view.getId()==R.id.change_text)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                   Message msg=<span class=\"keyword\">new</span> <span class=\"title class_\">Message</span>();</span><br><span class=\"line\">                   msg.what=UPDATE_TEXT;</span><br><span class=\"line\">                   handler.sendMessage(msg);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异步消息处理机制\"><a href=\"#异步消息处理机制\" class=\"headerlink\" title=\"异步消息处理机制\"></a>异步消息处理机制</h3><p><img src=\"/../img/img48.jpg\"></p>\n<p><img src=\"/../img/img49.jpg\"></p>\n<h3 id=\"AsyncTask\"><a href=\"#AsyncTask\" class=\"headerlink\" title=\"AsyncTask\"></a>AsyncTask</h3><p>1.创建一个子类去继承它，需要传入三个参数如下</p>\n<p>Params：在后台任务中使用</p>\n<p>Progress：可以作为进度单位</p>\n<p>Result：返回值类型</p>\n<p>2.重写父类方法如下：</p>\n<p>onPreExecute():界面上的初始化操作</p>\n<p>doInBackground(Params…):所有代码都在子线程中运行，在这里处理耗时任务</p>\n<p>onProgressUpdate(Progress…):对UI进行操作</p>\n<p>onPostExecute(Result):后台任务执行完毕并通过return语句返回时，这个方法被调用</p>\n<p>3.启动任务</p>\n<p><code>new DownloadTask().execute();</code></p>\n<hr>\n<h1 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h1><p>1.定义一个服务(已经自动注册了),并重写onCreate,onStartCommand,onDestroy方法</p>\n<p>2.启动和停止服务</p>\n<p>3.将活动与服务进行联系</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">View</span>.OnClickListener &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> MyService.DownloadBinder downloadBinder;</span><br><span class=\"line\"><span class=\"keyword\">private</span> ServiceConnection connection=<span class=\"keyword\">new</span> <span class=\"title class_\">ServiceConnection</span>() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onServiceConnected</span><span class=\"params\">(ComponentName componentName, IBinder service)</span> &#123;</span><br><span class=\"line\">        downloadBinder=(MyService.DownloadBinder) service;</span><br><span class=\"line\">        downloadBinder.startDownloads();</span><br><span class=\"line\">        downloadBinder.getProgress();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onServiceDisconnected</span><span class=\"params\">(ComponentName componentName)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Button start=(Button) findViewById(R.id.start_service);</span><br><span class=\"line\">        Button stop=(Button) findViewById(R.id.stop_service);</span><br><span class=\"line\">        Button bind=(Button) findViewById(R.id.bind_service);</span><br><span class=\"line\">        Button unbind=(Button) findViewById(R.id.unbind_service);</span><br><span class=\"line\">        Button startMyIntent=(Button)findViewById(R.id.start_intent_service);</span><br><span class=\"line\">        start.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        stop.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        bind.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        unbind.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        startMyIntent.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view.getId()==R.id.start_service)&#123;</span><br><span class=\"line\">            Intent startIntent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>,MyService.class);</span><br><span class=\"line\">            startService(startIntent);<span class=\"comment\">//启动服务</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view.getId()==R.id.stop_service)&#123;</span><br><span class=\"line\">            Intent stopIntent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>,MyService.class);</span><br><span class=\"line\">            stopService(stopIntent);<span class=\"comment\">//停止服务</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view.getId()==R.id.bind_service)&#123;</span><br><span class=\"line\">            Intent bindIntent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>,MyService.class);</span><br><span class=\"line\">            <span class=\"comment\">//绑定服务</span></span><br><span class=\"line\">            bindService(bindIntent,connection,BIND_AUTO_CREATE);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view.getId()==R.id.unbind_service)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//解绑服务</span></span><br><span class=\"line\">            unbindService(connection);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Service</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//建立联系</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DownloadBinder mBinder=<span class=\"keyword\">new</span> <span class=\"title class_\">DownloadBinder</span>();</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">DownloadBinder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Binder</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startDownloads</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;startDownloads: &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getProgress</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;getProgress: &quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"title function_\">MyService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IBinder <span class=\"title function_\">onBind</span><span class=\"params\">(Intent intent)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> mBinder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(&quot;ForegroundServiceType&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onCreate: &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"type\">int</span> flags, <span class=\"type\">int</span> startId)</span> &#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onStartCommand: &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//处理具体逻辑</span></span><br><span class=\"line\">                stopSelf();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.onStartCommand(intent, flags, startId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onDestroy:&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"服务更多的技巧\"><a href=\"#服务更多的技巧\" class=\"headerlink\" title=\"服务更多的技巧\"></a>服务更多的技巧</h1><h3 id=\"使用前台服务\"><a href=\"#使用前台服务\" class=\"headerlink\" title=\"使用前台服务\"></a>使用前台服务</h3><p>使用startForeground方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@SuppressLint(&quot;ForegroundServiceType&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate();</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyService&quot;</span>, <span class=\"string\">&quot;onCreate: &quot;</span>);</span><br><span class=\"line\">        startForegroundService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">@SuppressLint(&quot;ForegroundServiceType&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startForegroundService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NotificationManager</span> <span class=\"variable\">notificationManager</span> <span class=\"operator\">=</span> (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">channelId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;my_channel_id&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建通知渠道（仅适用于 Android 8.0 及以上）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class=\"line\">            <span class=\"type\">NotificationChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationChannel</span>(</span><br><span class=\"line\">                    channelId,</span><br><span class=\"line\">                    <span class=\"string\">&quot;My Channel&quot;</span>,</span><br><span class=\"line\">                    NotificationManager.IMPORTANCE_DEFAULT</span><br><span class=\"line\">            );</span><br><span class=\"line\">            notificationManager.createNotificationChannel(channel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建 Notification</span></span><br><span class=\"line\">        <span class=\"type\">Notification</span> <span class=\"variable\">notification</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.Builder(<span class=\"built_in\">this</span>, channelId)</span><br><span class=\"line\">                .setContentTitle(<span class=\"string\">&quot;Service Running&quot;</span>)</span><br><span class=\"line\">                .setContentText(<span class=\"string\">&quot;Foreground service is running&quot;</span>)</span><br><span class=\"line\">                .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class=\"line\">                .setPriority(NotificationCompat.PRIORITY_DEFAULT)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动前台服务</span></span><br><span class=\"line\">        startForeground(<span class=\"number\">1</span>, notification);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用IntentService\"><a href=\"#使用IntentService\" class=\"headerlink\" title=\"使用IntentService\"></a>使用IntentService</h3><p>1.新建一个类继承自IntentService</p>\n<p>2.在Manifest.xml中注册</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyIntentService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">IntentService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyIntentService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(<span class=\"string\">&quot;MyIntentService&quot;</span>);<span class=\"comment\">//调用父类的有参构造函数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onHandleIntent</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Intent intent)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//该方法已经在子线程中运行</span></span><br><span class=\"line\">        <span class=\"comment\">//打印当前线程的id</span></span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyIntentService&quot;</span>, <span class=\"string\">&quot;Thread id is &quot;</span>+Thread.currentThread().getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyIntentService&quot;</span>, <span class=\"string\">&quot;onDestroy executed&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"服务最佳实例\"><a href=\"#服务最佳实例\" class=\"headerlink\" title=\"服务最佳实例\"></a>服务最佳实例</h1><p>1.添加依赖</p>\n<p>2.定义一个回调接口</p>\n<p>3.编写下载功能</p>\n<p>4.创建一个下载的服务，保证可以一直在后台运行</p>\n<p>5.将服务与活动建立联系并编写运行逻辑和授予权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;com.squareup.okhttp3:okhttp:4.12.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DownloadListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onProgress</span><span class=\"params\">(<span class=\"type\">int</span> progress)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onSuccess</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onFailed</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onPaused</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onCanceled</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTask</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AsyncTask</span>&lt;String,Integer,Integer&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TYPE_SUCCESS=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TYPE_FAILED=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TYPE_PAUSED=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> TYPE_CANCELED=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DownloadListener listener;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> isCanceled=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> isPaused=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> lastProgress;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DownloadTask</span><span class=\"params\">(DownloadListener listener)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.listener=listener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Integer <span class=\"title function_\">doInBackground</span><span class=\"params\">(String... strings)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//用于从网络读取数据</span></span><br><span class=\"line\">        InputStream is=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//用于写入下载的文件</span></span><br><span class=\"line\">        RandomAccessFile savedFile=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//表示下载文件的存储位置</span></span><br><span class=\"line\">        File file=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//记录已下载的文件长度</span></span><br><span class=\"line\">            <span class=\"type\">long</span> downloadLength=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">//获取URL地址</span></span><br><span class=\"line\">            String downloadUrl=strings[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"comment\">//解析下载的文件名</span></span><br><span class=\"line\">            String fileName=downloadUrl.substring(downloadUrl.lastIndexOf(<span class=\"string\">&quot;/&quot;</span>));</span><br><span class=\"line\">            <span class=\"comment\">//指定将文件下载到Environment.DIRECTORY_DOWNLOADS目录下</span></span><br><span class=\"line\">            String directory= Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath();</span><br><span class=\"line\">            file=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(directory+fileName);</span><br><span class=\"line\">            <span class=\"comment\">//判断该目录是否已经存在要下载的文件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(file.exists())&#123;</span><br><span class=\"line\">                <span class=\"comment\">//读取已下载的字节数</span></span><br><span class=\"line\">                downloadLength=file.length();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//获取下载文件的总长度</span></span><br><span class=\"line\">            <span class=\"type\">long</span> contentLength=getContentLength(downloadUrl);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(contentLength==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> TYPE_FAILED;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (contentLength==downloadLength) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//已下载字节和文件总字节相等，说明已经下载完成了</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> TYPE_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//利用OkHttp发送一条网络请求</span></span><br><span class=\"line\">            OkHttpClient client=<span class=\"keyword\">new</span> <span class=\"title class_\">OkHttpClient</span>();</span><br><span class=\"line\">            Request request=<span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>.Builder()</span><br><span class=\"line\">                    <span class=\"comment\">//断点下载，指定从哪个字节开始下载</span></span><br><span class=\"line\">                    .addHeader(<span class=\"string\">&quot;RANGE&quot;</span>,<span class=\"string\">&quot;bytes=&quot;</span>+downloadLength+<span class=\"string\">&quot;-&quot;</span>)</span><br><span class=\"line\">                    .url(downloadUrl)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">            Response response=client.newCall(request).execute();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(response!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取字节流</span></span><br><span class=\"line\">                is=response.body().byteStream();</span><br><span class=\"line\">                <span class=\"comment\">//用于读写文件，“rw”模式表示读写模式</span></span><br><span class=\"line\">                savedFile=<span class=\"keyword\">new</span> <span class=\"title class_\">RandomAccessFile</span>(file,<span class=\"string\">&quot;rw&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//跳过已下载的字节</span></span><br><span class=\"line\">                savedFile.seek(downloadLength);</span><br><span class=\"line\">                <span class=\"comment\">//创建一个字节数组，用于存储从网络读取的数据</span></span><br><span class=\"line\">                <span class=\"type\">byte</span>[] b=<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">                <span class=\"comment\">//用于记录总共下载的字节数</span></span><br><span class=\"line\">                <span class=\"type\">int</span> total=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"comment\">//用于存储每次从网络读取的字节数</span></span><br><span class=\"line\">                <span class=\"type\">int</span> len;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>((len=is.read(b))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(isCanceled)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> TYPE_CANCELED;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isPaused) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> TYPE_PAUSED;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        total+=len;</span><br><span class=\"line\">                        <span class=\"comment\">//将从网络上读取的数据写入到文件中</span></span><br><span class=\"line\">                        savedFile.write(b,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">                        <span class=\"comment\">//计算已下载的百分比</span></span><br><span class=\"line\">                        <span class=\"type\">int</span> progress=(<span class=\"type\">int</span>) ((total+downloadLength)*<span class=\"number\">100</span>/contentLength);</span><br><span class=\"line\">                        <span class=\"comment\">//发布下载进度</span></span><br><span class=\"line\">                        publishProgress(progress);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//关闭字节流</span></span><br><span class=\"line\">                response.body().close();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> TYPE_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(is!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                        is.close();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(savedFile!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                        savedFile.close();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(isCanceled&amp;&amp;file!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                        file.delete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TYPE_FAILED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onProgressUpdate</span><span class=\"params\">(Integer... values)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onProgressUpdate(values);</span><br><span class=\"line\">        <span class=\"type\">int</span> progress=values[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(progress&gt;lastProgress)&#123;</span><br><span class=\"line\">            listener.onProgress(progress);</span><br><span class=\"line\">            lastProgress=progress;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPostExecute</span><span class=\"params\">(Integer integer)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onPostExecute(integer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(integer==TYPE_SUCCESS)&#123;</span><br><span class=\"line\">            listener.onSuccess();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (integer==TYPE_FAILED) &#123;</span><br><span class=\"line\">            listener.onFailed();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (integer==TYPE_PAUSED) &#123;</span><br><span class=\"line\">            listener.onPaused();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (integer==TYPE_CANCELED) &#123;</span><br><span class=\"line\">            listener.onCanceled();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pauseDownload</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        isPaused=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cancelDownload</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        isCanceled=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"title function_\">getContentLength</span><span class=\"params\">(String downloadUrl)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        OkHttpClient client=<span class=\"keyword\">new</span> <span class=\"title class_\">OkHttpClient</span>();</span><br><span class=\"line\">        Request request=<span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>.Builder()</span><br><span class=\"line\">                .url(downloadUrl)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        Response response=client.newCall(request).execute();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(response!=<span class=\"literal\">null</span>&amp;&amp;response.isSuccessful())&#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> contentLendth=response.body().contentLength();</span><br><span class=\"line\">            response.close();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> contentLendth;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DownloadService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Service</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DownloadTask downloadTask;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String downloadUrl;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DownloadService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DownloadListener listener=<span class=\"keyword\">new</span> <span class=\"title class_\">DownloadListener</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;NotificationPermission&quot;)</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onProgress</span><span class=\"params\">(<span class=\"type\">int</span> progress)</span> &#123;</span><br><span class=\"line\">            getNotificationManager().notify(<span class=\"number\">1</span>,getNotification(<span class=\"string\">&quot;Downloading...&quot;</span>,progress));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;NotificationPermission&quot;)</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSuccess</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            downloadTask=<span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">//关闭前台通知</span></span><br><span class=\"line\">            stopForeground(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">//创建通知告知用户下载成功</span></span><br><span class=\"line\">            getNotificationManager().notify(<span class=\"number\">1</span>,getNotification(<span class=\"string\">&quot;Download Success&quot;</span>,-<span class=\"number\">1</span>));</span><br><span class=\"line\">            Toast.makeText(DownloadService.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Download Success&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;NotificationPermission&quot;)</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onFailed</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            downloadTask=<span class=\"literal\">null</span>;</span><br><span class=\"line\">            stopForeground(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            getNotificationManager().notify(<span class=\"number\">1</span>,getNotification(<span class=\"string\">&quot;Download Failed&quot;</span>,-<span class=\"number\">1</span>));</span><br><span class=\"line\">            Toast.makeText(DownloadService.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Download Failed&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPaused</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                downloadTask=<span class=\"literal\">null</span>;</span><br><span class=\"line\">            Toast.makeText(DownloadService.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Paused&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCanceled</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            downloadTask=<span class=\"literal\">null</span>;</span><br><span class=\"line\">            stopForeground(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            Toast.makeText(DownloadService.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Canceled&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DownloadBinder mBinder=<span class=\"keyword\">new</span> <span class=\"title class_\">DownloadBinder</span>();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IBinder <span class=\"title function_\">onBind</span><span class=\"params\">(Intent intent)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> mBinder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">DownloadBinder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Binder</span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;ForegroundServiceType&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startDownload</span><span class=\"params\">(String url)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(downloadTask==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                downloadUrl=url;</span><br><span class=\"line\">                <span class=\"comment\">//创建DownloadTask对象</span></span><br><span class=\"line\">                downloadTask=<span class=\"keyword\">new</span> <span class=\"title class_\">DownloadTask</span>(listener);</span><br><span class=\"line\">                <span class=\"comment\">//开启下载</span></span><br><span class=\"line\">                downloadTask.execute(downloadUrl);</span><br><span class=\"line\">                startForeground(<span class=\"number\">1</span>,getNotification(<span class=\"string\">&quot;Downloading...&quot;</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">                Toast.makeText(DownloadService.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Downloading...&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pauseDownload</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(downloadTask!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                downloadTask.pauseDownload();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cancelDownload</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(downloadTask!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                downloadTask.cancelDownload();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(downloadUrl!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//取消下载时需将文件删除，并将通知关闭</span></span><br><span class=\"line\">                    String fileName=downloadUrl.substring(downloadUrl.lastIndexOf(<span class=\"string\">&quot;/&quot;</span>));</span><br><span class=\"line\">                    String directory= Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath();</span><br><span class=\"line\">                    File file=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(directory+fileName);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(file.exists())&#123;</span><br><span class=\"line\">                        file.delete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    getNotificationManager().cancel(<span class=\"number\">1</span>);</span><br><span class=\"line\">                    stopForeground(<span class=\"literal\">true</span>);</span><br><span class=\"line\">                    Toast.makeText(DownloadService.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;Canceled&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> NotificationManager <span class=\"title function_\">getNotificationManager</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Notification <span class=\"title function_\">getNotification</span><span class=\"params\">(String title,<span class=\"type\">int</span> progress)</span>&#123;</span><br><span class=\"line\">        Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>,MainActivity.class);</span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;UnspecifiedImmutableFlag&quot;)</span> PendingIntent pi=PendingIntent.getActivities(<span class=\"built_in\">this</span>,<span class=\"number\">0</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>[]&#123;intent&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"type\">NotificationManager</span> <span class=\"variable\">notificationManager</span> <span class=\"operator\">=</span> (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">channelId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;my_channel_id&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建通知渠道（仅适用于 Android 8.0 及以上）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class=\"line\">            <span class=\"type\">NotificationChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NotificationChannel</span>(channelId, <span class=\"string\">&quot;My Channel&quot;</span>, NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class=\"line\">            notificationManager.createNotificationChannel(channel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        NotificationCompat.Builder builder=<span class=\"keyword\">new</span> <span class=\"title class_\">NotificationCompat</span>.Builder(<span class=\"built_in\">this</span>, channelId);</span><br><span class=\"line\">        <span class=\"comment\">// 创建 Notification</span></span><br><span class=\"line\"></span><br><span class=\"line\">        builder.setContentTitle(title);</span><br><span class=\"line\">        builder.setSmallIcon(R.mipmap.ic_launcher);</span><br><span class=\"line\">        builder.setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher));</span><br><span class=\"line\">        builder.setContentIntent(pi);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(progress&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            builder.setContentText(progress+<span class=\"string\">&quot;%&quot;</span>);</span><br><span class=\"line\">            builder.setProgress(<span class=\"number\">100</span>,progress,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">View</span>.OnClickListener &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DownloadService.DownloadBinder downloadBinder;</span><br><span class=\"line\">    <span class=\"comment\">//使活动与服务建立联系</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection connection=<span class=\"keyword\">new</span> <span class=\"title class_\">ServiceConnection</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onServiceConnected</span><span class=\"params\">(ComponentName componentName, IBinder iBinder)</span> &#123;</span><br><span class=\"line\">            downloadBinder=(DownloadService.DownloadBinder) iBinder;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onServiceDisconnected</span><span class=\"params\">(ComponentName componentName)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Button start=(Button) findViewById(R.id.start_download);</span><br><span class=\"line\">        Button pause=(Button) findViewById(R.id.pause_download);</span><br><span class=\"line\">        Button cancel=(Button) findViewById(R.id.cancel_download);</span><br><span class=\"line\">        start.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        pause.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        cancel.setOnClickListener(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//启动服务</span></span><br><span class=\"line\">        Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>,DownloadService.class);</span><br><span class=\"line\">        startService(intent);</span><br><span class=\"line\">        <span class=\"comment\">//绑定服务</span></span><br><span class=\"line\">        bindService(intent,connection,BIND_AUTO_CREATE);</span><br><span class=\"line\">        <span class=\"comment\">//申请权限</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class=\"built_in\">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">            ActivityCompat.requestPermissions(MainActivity.<span class=\"built_in\">this</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123; Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(downloadBinder==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(view.getId()==R.id.start_download)&#123;</span><br><span class=\"line\">            String url=<span class=\"string\">&quot;https://raw.githubusercontent.com/guolindev/eclipse/master/eclipse-inst-win64.exe&quot;</span>;</span><br><span class=\"line\">            downloadBinder.startDownload(url);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.getId()==R.id.pause_download) &#123;</span><br><span class=\"line\">            downloadBinder.pauseDownload();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.getId()==R.id.cancel_download) &#123;</span><br><span class=\"line\">            downloadBinder.cancelDownload();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"meta\">@NonNull</span> String[] permissions, <span class=\"meta\">@NonNull</span> <span class=\"type\">int</span>[] grantResults)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(requestCode==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(grantResults.length&gt;<span class=\"number\">0</span>&amp;&amp;grantResults[<span class=\"number\">0</span>]!=PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;拒绝授权程序无法使用&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        unbindService(connection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"正则表达式","date":"2025-09-18T13:28:52.000Z","_content":"\n### 作用\n\n- 检验字符串是否满足规则\n- 在一段文本中查找满足要求的内容\n\n### 规则\n\n![](../img/img120.png)\n\n![](../img/img121.png)\n\n![](../img/img122.png)\n\n","source":"_posts/正则表达式.md","raw":"---\ntitle: 正则表达式\ndate: 2025-09-18 21:28:52\ncategories:\n- Java\ntags:\n---\n\n### 作用\n\n- 检验字符串是否满足规则\n- 在一段文本中查找满足要求的内容\n\n### 规则\n\n![](../img/img120.png)\n\n![](../img/img121.png)\n\n![](../img/img122.png)\n\n","slug":"正则表达式","published":1,"updated":"2025-09-18T13:58:14.942Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gco002ps4s7007egiqt","content":"<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li>检验字符串是否满足规则</li>\n<li>在一段文本中查找满足要求的内容</li>\n</ul>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p><img src=\"/../img/img120.png\"></p>\n<p><img src=\"/../img/img121.png\"></p>\n<p><img src=\"/../img/img122.png\"></p>\n","excerpt":"作用\n * 检验字符串是否满足规则\n * 在一段文本中查找满足要求的内容\n\n规则","more":"<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li>检验字符串是否满足规则</li>\n<li>在一段文本中查找满足要求的内容</li>\n</ul>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p><img src=\"/../img/img120.png\"></p>\n<p><img src=\"/../img/img121.png\"></p>\n<p><img src=\"/../img/img122.png\"></p>\n"},{"title":"泛型和委托","date":"2025-05-11T15:47:29.000Z","_content":"\n# 泛型\n\n### 定义泛型类\n\n- **语法结构**\n\n  ```kotlin\n  //T代指泛型是一种约定俗成\n  class MyClass<T> {\n      fun method(param:T):T{\n          return param\n      }\n  }\n  ```\n\n- **调用**\n\n  ```kotlin\n   val myClass=MyClass<Int>()\n      val result=myClass.method(123)\n      println(result)\n  ```\n\n### 定义泛型方法\n\n- **语法结构**\n\n  ```kotlin\n  class MyClass{\n      fun<T>method(param:T):T{\n          return param\n      }\n  }\n  ```\n\n- **调用**\n\n  ```kotlin\n  val myClass=MyClass()\n      val result=myClass.method<Int>(123)\n      println(result)\n  ```\n\n### 泛型上界\n\n对泛型类型进行限制\n\n- **语法结构**\n\n  ```kotlin\n  class MyClass{\n      fun<T:Number>method(param:T):T{\n          return param\n      }\n  }\n  ```\n\n- **调用**\n\n  ```kotlin\n  val myClass=MyClass()\n  val result=myClass.method(123)\n  println(result)\n  ```\n\n------\n\n# 类委托和委托属性\n\n### 类委托\n\n- **原理**\n\n  将一个类的具体实现委托给另一个类去完成\n\n- **意义**\n\n  大部分方法实现调用辅助对象的方法，少部分方法实现自己重写，甚至加入自己独有的方法\n\n- **实例**\n\n  MySet构造函数中接收了一个HashSet参数这就相当于一个辅助对象，Set接口中所有方法的实现都是调用了辅助对象中相应的方法实现的，这就是类委托\n\n  ```kotlin\n  class MySet<T>(val helperSet: HashSet<T>) : Set<T>  {\n      override val size: Int\n          get() = helperSet.size\n      override fun isEmpty()=helperSet.isEmpty()\n  \n      override fun iterator()=helperSet.iterator()\n  \n      override fun containsAll(elements: Collection<T>)=helperSet.containsAll(elements)\n  \n      override fun contains(element: T)=helperSet.contains(element)\n  }\n  ```\n\n  使用**by**类委托关键字简化\n\n  哪个方法需要重新实现只需要写那一个方法即可，不需要把所有继承方法都写下来\n\n  ```kotlin\n  class MySet<T>(val helperSet: HashSet<T>) : Set<T> by helperSet {\n  \n      fun helloWorld() = println(\"Hello World\")\n  \n      override fun isEmpty() = false\n  \n  }\n  ```\n\n### 委托属性\n\n- **原理**\n\n  将一个属性(字段)的具体实现委托给另一个类去完成\n\n- **语法结构**\n\n  将p属性具体实现委托给Delegate类完成，当调用p时会自动调用Delegate的getValue()方法，当给其赋值会调用Delegate的setValue()方法\n\n  ```kotlin\n  class MyClass{\n      var p by Delegate()\n  }\n  ```\n\n  Delegate()的实现\n\n  ```kotlin\n  class Delegate {\n  \n      var propValue: Any? = null\n  \n      /**\n       * 第一个参数声明该委托功能可以在哪个类中使用\n       第二个参数是一个属性操作类，当前情景用不着但必须声明\n       */\n      operator fun getValue(myClass: MyClass, prop: KProperty<*>): Any? {\n          return propValue\n      }\n     /**\n       * 第一个参数声明该委托功能可以在哪个类中使用\n       第二个参数是一个属性操作类，当前情景用不着但必须声明\n       第三个参数表示具体赋给委托属性的值，必须与getValue方法返回值类型一致\n       */\n      operator fun setValue(myClass: MyClass, prop: KProperty<*>, value: Any?) {\n         propValue = value\n   }\n  \n  }\n  ```\n\n  **注意：**当p属性用val修饰时不需要再去实现setValue方法\n\n  ------\n\n  \n\n# 实现一个自己的lazy函数\n\n\n\n- **高阶函数**\n\n  ```kotlin\n  class Later<T>(val block:()->T){\n      var value:Any?=null\n      operator fun getValue(any:Any?,prop:KProperty<*>):T{\n          if(value==null){\n              value=block()\n          }\n          return value as T\n      }\n  }\n  ```\n\n- **创建Later类实例并将接收的函数类型参数传给Later类的构造函数**\n\n  ```kotlin\n  fun <T>later(block:()->T)=Later(block)\n  ```\n\n- **实现**\n\n  ```kotlin\n  val uriMatcher by later{\n      val matcher=UriMatcher(UriMatcher.NO_MATCH)\n      matcher.addURI(authority,path,CODE_CREATE)\n      ......\n      matcher\n  }\n  ```\n\n- **验证**\n\n  ```kotlin\n  val p by later{\n      Log.d(\"TAG\",\"run codes inside later block\")\n      \"test later\"\n  }\n  ```\n\n  注意：一般还是更常用Kotlin内置的**lazy**函数\n\n------\n\n\n\n\n\n\n\n\n\n","source":"_posts/泛型和委托.md","raw":"---\ntitle: 泛型和委托\ndate: 2025-05-11 23:47:29\ncategories:\n- Kotlin\ntags:\n---\n\n# 泛型\n\n### 定义泛型类\n\n- **语法结构**\n\n  ```kotlin\n  //T代指泛型是一种约定俗成\n  class MyClass<T> {\n      fun method(param:T):T{\n          return param\n      }\n  }\n  ```\n\n- **调用**\n\n  ```kotlin\n   val myClass=MyClass<Int>()\n      val result=myClass.method(123)\n      println(result)\n  ```\n\n### 定义泛型方法\n\n- **语法结构**\n\n  ```kotlin\n  class MyClass{\n      fun<T>method(param:T):T{\n          return param\n      }\n  }\n  ```\n\n- **调用**\n\n  ```kotlin\n  val myClass=MyClass()\n      val result=myClass.method<Int>(123)\n      println(result)\n  ```\n\n### 泛型上界\n\n对泛型类型进行限制\n\n- **语法结构**\n\n  ```kotlin\n  class MyClass{\n      fun<T:Number>method(param:T):T{\n          return param\n      }\n  }\n  ```\n\n- **调用**\n\n  ```kotlin\n  val myClass=MyClass()\n  val result=myClass.method(123)\n  println(result)\n  ```\n\n------\n\n# 类委托和委托属性\n\n### 类委托\n\n- **原理**\n\n  将一个类的具体实现委托给另一个类去完成\n\n- **意义**\n\n  大部分方法实现调用辅助对象的方法，少部分方法实现自己重写，甚至加入自己独有的方法\n\n- **实例**\n\n  MySet构造函数中接收了一个HashSet参数这就相当于一个辅助对象，Set接口中所有方法的实现都是调用了辅助对象中相应的方法实现的，这就是类委托\n\n  ```kotlin\n  class MySet<T>(val helperSet: HashSet<T>) : Set<T>  {\n      override val size: Int\n          get() = helperSet.size\n      override fun isEmpty()=helperSet.isEmpty()\n  \n      override fun iterator()=helperSet.iterator()\n  \n      override fun containsAll(elements: Collection<T>)=helperSet.containsAll(elements)\n  \n      override fun contains(element: T)=helperSet.contains(element)\n  }\n  ```\n\n  使用**by**类委托关键字简化\n\n  哪个方法需要重新实现只需要写那一个方法即可，不需要把所有继承方法都写下来\n\n  ```kotlin\n  class MySet<T>(val helperSet: HashSet<T>) : Set<T> by helperSet {\n  \n      fun helloWorld() = println(\"Hello World\")\n  \n      override fun isEmpty() = false\n  \n  }\n  ```\n\n### 委托属性\n\n- **原理**\n\n  将一个属性(字段)的具体实现委托给另一个类去完成\n\n- **语法结构**\n\n  将p属性具体实现委托给Delegate类完成，当调用p时会自动调用Delegate的getValue()方法，当给其赋值会调用Delegate的setValue()方法\n\n  ```kotlin\n  class MyClass{\n      var p by Delegate()\n  }\n  ```\n\n  Delegate()的实现\n\n  ```kotlin\n  class Delegate {\n  \n      var propValue: Any? = null\n  \n      /**\n       * 第一个参数声明该委托功能可以在哪个类中使用\n       第二个参数是一个属性操作类，当前情景用不着但必须声明\n       */\n      operator fun getValue(myClass: MyClass, prop: KProperty<*>): Any? {\n          return propValue\n      }\n     /**\n       * 第一个参数声明该委托功能可以在哪个类中使用\n       第二个参数是一个属性操作类，当前情景用不着但必须声明\n       第三个参数表示具体赋给委托属性的值，必须与getValue方法返回值类型一致\n       */\n      operator fun setValue(myClass: MyClass, prop: KProperty<*>, value: Any?) {\n         propValue = value\n   }\n  \n  }\n  ```\n\n  **注意：**当p属性用val修饰时不需要再去实现setValue方法\n\n  ------\n\n  \n\n# 实现一个自己的lazy函数\n\n\n\n- **高阶函数**\n\n  ```kotlin\n  class Later<T>(val block:()->T){\n      var value:Any?=null\n      operator fun getValue(any:Any?,prop:KProperty<*>):T{\n          if(value==null){\n              value=block()\n          }\n          return value as T\n      }\n  }\n  ```\n\n- **创建Later类实例并将接收的函数类型参数传给Later类的构造函数**\n\n  ```kotlin\n  fun <T>later(block:()->T)=Later(block)\n  ```\n\n- **实现**\n\n  ```kotlin\n  val uriMatcher by later{\n      val matcher=UriMatcher(UriMatcher.NO_MATCH)\n      matcher.addURI(authority,path,CODE_CREATE)\n      ......\n      matcher\n  }\n  ```\n\n- **验证**\n\n  ```kotlin\n  val p by later{\n      Log.d(\"TAG\",\"run codes inside later block\")\n      \"test later\"\n  }\n  ```\n\n  注意：一般还是更常用Kotlin内置的**lazy**函数\n\n------\n\n\n\n\n\n\n\n\n\n","slug":"泛型和委托","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcp002ss4s7fl6oaw1m","content":"<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><h3 id=\"定义泛型类\"><a href=\"#定义泛型类\" class=\"headerlink\" title=\"定义泛型类\"></a>定义泛型类</h3><ul>\n<li><p><strong>语法结构</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//T代指泛型是一种约定俗成</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>&lt;<span class=\"type\">T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">method</span><span class=\"params\">(param:<span class=\"type\">T</span>)</span></span>:T&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>调用</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> myClass=MyClass&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">   <span class=\"keyword\">val</span> result=myClass.method(<span class=\"number\">123</span>)</span><br><span class=\"line\">   println(result)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"定义泛型方法\"><a href=\"#定义泛型方法\" class=\"headerlink\" title=\"定义泛型方法\"></a>定义泛型方法</h3><ul>\n<li><p><strong>语法结构</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span><span class=\"type\">&lt;T&gt;</span><span class=\"title\">method</span><span class=\"params\">(param:<span class=\"type\">T</span>)</span></span>:T&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>调用</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> myClass=MyClass()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result=myClass.method&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">123</span>)</span><br><span class=\"line\">    println(result)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"泛型上界\"><a href=\"#泛型上界\" class=\"headerlink\" title=\"泛型上界\"></a>泛型上界</h3><p>对泛型类型进行限制</p>\n<ul>\n<li><p><strong>语法结构</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span><span class=\"type\">&lt;T:Number&gt;</span><span class=\"title\">method</span><span class=\"params\">(param:<span class=\"type\">T</span>)</span></span>:T&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>调用</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> myClass=MyClass()</span><br><span class=\"line\"><span class=\"keyword\">val</span> result=myClass.method(<span class=\"number\">123</span>)</span><br><span class=\"line\">println(result)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"类委托和委托属性\"><a href=\"#类委托和委托属性\" class=\"headerlink\" title=\"类委托和委托属性\"></a>类委托和委托属性</h1><h3 id=\"类委托\"><a href=\"#类委托\" class=\"headerlink\" title=\"类委托\"></a>类委托</h3><ul>\n<li><p><strong>原理</strong></p>\n<p>将一个类的具体实现委托给另一个类去完成</p>\n</li>\n<li><p><strong>意义</strong></p>\n<p>大部分方法实现调用辅助对象的方法，少部分方法实现自己重写，甚至加入自己独有的方法</p>\n</li>\n<li><p><strong>实例</strong></p>\n<p>MySet构造函数中接收了一个HashSet参数这就相当于一个辅助对象，Set接口中所有方法的实现都是调用了辅助对象中相应的方法实现的，这就是类委托</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MySet</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">val</span> helperSet: HashSet&lt;T&gt;) : Set&lt;T&gt;  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> size: <span class=\"built_in\">Int</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = helperSet.size</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>=helperSet.isEmpty()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">iterator</span><span class=\"params\">()</span></span>=helperSet.iterator()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">containsAll</span><span class=\"params\">(elements: <span class=\"type\">Collection</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>=helperSet.containsAll(elements)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">contains</span><span class=\"params\">(element: <span class=\"type\">T</span>)</span></span>=helperSet.contains(element)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<strong>by</strong>类委托关键字简化</p>\n<p>哪个方法需要重新实现只需要写那一个方法即可，不需要把所有继承方法都写下来</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MySet</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">val</span> helperSet: HashSet&lt;T&gt;) : Set&lt;T&gt; <span class=\"keyword\">by</span> helperSet &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">helloWorld</span><span class=\"params\">()</span></span> = println(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span> = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"委托属性\"><a href=\"#委托属性\" class=\"headerlink\" title=\"委托属性\"></a>委托属性</h3><ul>\n<li><p><strong>原理</strong></p>\n<p>将一个属性(字段)的具体实现委托给另一个类去完成</p>\n</li>\n<li><p><strong>语法结构</strong></p>\n<p>将p属性具体实现委托给Delegate类完成，当调用p时会自动调用Delegate的getValue()方法，当给其赋值会调用Delegate的setValue()方法</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p <span class=\"keyword\">by</span> Delegate()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Delegate()的实现</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Delegate</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> propValue: Any? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 第一个参数声明该委托功能可以在哪个类中使用</span></span><br><span class=\"line\"><span class=\"comment\">     第二个参数是一个属性操作类，当前情景用不着但必须声明</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(myClass: <span class=\"type\">MyClass</span>, prop: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: Any? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> propValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 第一个参数声明该委托功能可以在哪个类中使用</span></span><br><span class=\"line\"><span class=\"comment\">     第二个参数是一个属性操作类，当前情景用不着但必须声明</span></span><br><span class=\"line\"><span class=\"comment\">     第三个参数表示具体赋给委托属性的值，必须与getValue方法返回值类型一致</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(myClass: <span class=\"type\">MyClass</span>, prop: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">Any</span>?)</span></span> &#123;</span><br><span class=\"line\">       propValue = value</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**当p属性用val修饰时不需要再去实现setValue方法</p>\n<hr>\n</li>\n</ul>\n<h1 id=\"实现一个自己的lazy函数\"><a href=\"#实现一个自己的lazy函数\" class=\"headerlink\" title=\"实现一个自己的lazy函数\"></a>实现一个自己的lazy函数</h1><ul>\n<li><p><strong>高阶函数</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Later</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">val</span> block:()-&gt;T)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value:Any?=<span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(any:<span class=\"type\">Any</span>?,prop:<span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>:T&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            value=block()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value <span class=\"keyword\">as</span> T</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>创建Later类实例并将接收的函数类型参数传给Later类的构造函数</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span><span class=\"title\">later</span><span class=\"params\">(block:()-&gt;<span class=\"type\">T</span>)</span></span>=Later(block)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>实现</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> uriMatcher <span class=\"keyword\">by</span> later&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> matcher=UriMatcher(UriMatcher.NO_MATCH)</span><br><span class=\"line\">    matcher.addURI(authority,path,CODE_CREATE)</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    matcher</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>验证</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> p <span class=\"keyword\">by</span> later&#123;</span><br><span class=\"line\">    Log.d(<span class=\"string\">&quot;TAG&quot;</span>,<span class=\"string\">&quot;run codes inside later block&quot;</span>)</span><br><span class=\"line\">    <span class=\"string\">&quot;test later&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：一般还是更常用Kotlin内置的<strong>lazy</strong>函数</p>\n</li>\n</ul>\n<hr>\n","excerpt":"泛型\n定义泛型类\n * 语法结构\n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n   \n   //T代指泛型是一种约定俗成\n   class MyClass<T> {\n       fun method(param:T):T{\n           return param\n       }\n   }\n   \n   \n   \n * 调用\n   \n   1\n   2\n   3\n   \n   \n   val myClass=MyClass<Int>()\n      val result=myClass.method(123)\n      println(result)","more":"<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><h3 id=\"定义泛型类\"><a href=\"#定义泛型类\" class=\"headerlink\" title=\"定义泛型类\"></a>定义泛型类</h3><ul>\n<li><p><strong>语法结构</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//T代指泛型是一种约定俗成</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>&lt;<span class=\"type\">T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">method</span><span class=\"params\">(param:<span class=\"type\">T</span>)</span></span>:T&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>调用</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> myClass=MyClass&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\">   <span class=\"keyword\">val</span> result=myClass.method(<span class=\"number\">123</span>)</span><br><span class=\"line\">   println(result)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"定义泛型方法\"><a href=\"#定义泛型方法\" class=\"headerlink\" title=\"定义泛型方法\"></a>定义泛型方法</h3><ul>\n<li><p><strong>语法结构</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span><span class=\"type\">&lt;T&gt;</span><span class=\"title\">method</span><span class=\"params\">(param:<span class=\"type\">T</span>)</span></span>:T&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>调用</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> myClass=MyClass()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result=myClass.method&lt;<span class=\"built_in\">Int</span>&gt;(<span class=\"number\">123</span>)</span><br><span class=\"line\">    println(result)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"泛型上界\"><a href=\"#泛型上界\" class=\"headerlink\" title=\"泛型上界\"></a>泛型上界</h3><p>对泛型类型进行限制</p>\n<ul>\n<li><p><strong>语法结构</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span><span class=\"type\">&lt;T:Number&gt;</span><span class=\"title\">method</span><span class=\"params\">(param:<span class=\"type\">T</span>)</span></span>:T&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>调用</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> myClass=MyClass()</span><br><span class=\"line\"><span class=\"keyword\">val</span> result=myClass.method(<span class=\"number\">123</span>)</span><br><span class=\"line\">println(result)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"类委托和委托属性\"><a href=\"#类委托和委托属性\" class=\"headerlink\" title=\"类委托和委托属性\"></a>类委托和委托属性</h1><h3 id=\"类委托\"><a href=\"#类委托\" class=\"headerlink\" title=\"类委托\"></a>类委托</h3><ul>\n<li><p><strong>原理</strong></p>\n<p>将一个类的具体实现委托给另一个类去完成</p>\n</li>\n<li><p><strong>意义</strong></p>\n<p>大部分方法实现调用辅助对象的方法，少部分方法实现自己重写，甚至加入自己独有的方法</p>\n</li>\n<li><p><strong>实例</strong></p>\n<p>MySet构造函数中接收了一个HashSet参数这就相当于一个辅助对象，Set接口中所有方法的实现都是调用了辅助对象中相应的方法实现的，这就是类委托</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MySet</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">val</span> helperSet: HashSet&lt;T&gt;) : Set&lt;T&gt;  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> size: <span class=\"built_in\">Int</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = helperSet.size</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>=helperSet.isEmpty()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">iterator</span><span class=\"params\">()</span></span>=helperSet.iterator()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">containsAll</span><span class=\"params\">(elements: <span class=\"type\">Collection</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>=helperSet.containsAll(elements)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">contains</span><span class=\"params\">(element: <span class=\"type\">T</span>)</span></span>=helperSet.contains(element)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<strong>by</strong>类委托关键字简化</p>\n<p>哪个方法需要重新实现只需要写那一个方法即可，不需要把所有继承方法都写下来</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MySet</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">val</span> helperSet: HashSet&lt;T&gt;) : Set&lt;T&gt; <span class=\"keyword\">by</span> helperSet &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">helloWorld</span><span class=\"params\">()</span></span> = println(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span> = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"委托属性\"><a href=\"#委托属性\" class=\"headerlink\" title=\"委托属性\"></a>委托属性</h3><ul>\n<li><p><strong>原理</strong></p>\n<p>将一个属性(字段)的具体实现委托给另一个类去完成</p>\n</li>\n<li><p><strong>语法结构</strong></p>\n<p>将p属性具体实现委托给Delegate类完成，当调用p时会自动调用Delegate的getValue()方法，当给其赋值会调用Delegate的setValue()方法</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p <span class=\"keyword\">by</span> Delegate()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Delegate()的实现</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Delegate</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> propValue: Any? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 第一个参数声明该委托功能可以在哪个类中使用</span></span><br><span class=\"line\"><span class=\"comment\">     第二个参数是一个属性操作类，当前情景用不着但必须声明</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(myClass: <span class=\"type\">MyClass</span>, prop: <span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>: Any? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> propValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 第一个参数声明该委托功能可以在哪个类中使用</span></span><br><span class=\"line\"><span class=\"comment\">     第二个参数是一个属性操作类，当前情景用不着但必须声明</span></span><br><span class=\"line\"><span class=\"comment\">     第三个参数表示具体赋给委托属性的值，必须与getValue方法返回值类型一致</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setValue</span><span class=\"params\">(myClass: <span class=\"type\">MyClass</span>, prop: <span class=\"type\">KProperty</span>&lt;*&gt;, value: <span class=\"type\">Any</span>?)</span></span> &#123;</span><br><span class=\"line\">       propValue = value</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**当p属性用val修饰时不需要再去实现setValue方法</p>\n<hr>\n</li>\n</ul>\n<h1 id=\"实现一个自己的lazy函数\"><a href=\"#实现一个自己的lazy函数\" class=\"headerlink\" title=\"实现一个自己的lazy函数\"></a>实现一个自己的lazy函数</h1><ul>\n<li><p><strong>高阶函数</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Later</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">val</span> block:()-&gt;T)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value:Any?=<span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getValue</span><span class=\"params\">(any:<span class=\"type\">Any</span>?,prop:<span class=\"type\">KProperty</span>&lt;*&gt;)</span></span>:T&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            value=block()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value <span class=\"keyword\">as</span> T</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>创建Later类实例并将接收的函数类型参数传给Later类的构造函数</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span><span class=\"title\">later</span><span class=\"params\">(block:()-&gt;<span class=\"type\">T</span>)</span></span>=Later(block)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>实现</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> uriMatcher <span class=\"keyword\">by</span> later&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> matcher=UriMatcher(UriMatcher.NO_MATCH)</span><br><span class=\"line\">    matcher.addURI(authority,path,CODE_CREATE)</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    matcher</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>验证</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> p <span class=\"keyword\">by</span> later&#123;</span><br><span class=\"line\">    Log.d(<span class=\"string\">&quot;TAG&quot;</span>,<span class=\"string\">&quot;run codes inside later block&quot;</span>)</span><br><span class=\"line\">    <span class=\"string\">&quot;test later&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：一般还是更常用Kotlin内置的<strong>lazy</strong>函数</p>\n</li>\n</ul>\n<hr>\n"},{"title":"活动(Kotlin)","date":"2025-04-20T01:55:22.000Z","_content":"\n# Toast\n\n1.一种提醒方式\n\n2.用法\n\n```kotlin\n val button1: Button = findViewById(R.id.button1)\n            button1.setOnClickListener {\n                Toast.makeText(this,\"You clicked out\",Toast.LENGTH_SHORT).show()\n            }\n```\n\n------\n\n# ViewBinding\n\n1.先在build.gradle.kts(app)中导入ViewBinding\n\n2.声明该类型\n\n3.绑定布局\n\n```kotlin\nandroid {\n    // 启用 ViewBinding\n    viewBinding {\n        enable = true\n    }\n}\n```\n\n```kotlin\nclass FirstActivity : BaseActivity() {\n          //声明变量\n        private lateinit var myBinding:FirstActivityBinding\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            //绑定布局\n            myBinding=FirstActivityBinding.inflate(layoutInflater)\n            setContentView(myBinding.root)\n            //使用\n            myBinding.button1.setOnClickListener {\n\n            }\n        }\n    }\n```\n\n------\n\n# Menu\n\n1.创建**menu**文件夹并创建**Menu resource file**\n\n2.重写**onCreateOptionsMenu()**方法对菜单完成创建\n\n3.重写**onOptionsItemSelected()**方法设计点击事件\n\n```kotlin\noverride fun onCreateOptionsMenu(menu: Menu?): Boolean {\n            menuInflater.inflate(R.menu.main, menu)\n            return true\n        }\n\n        override fun onOptionsItemSelected(item: MenuItem): Boolean {\n            when (item.itemId) {\n                R.id.add_item -> Toast.makeText(this, \"you clicked add\", Toast.LENGTH_SHORT).show()\n                R.id.remove_item -> Toast.makeText(this, \"you clicked remove\", Toast.LENGTH_SHORT)\n                    .show()\n            }\n            return true\n        }\n```\n\n------\n\n# Intent\n\n### 显式Intent\n\n```kotlin\n   val intent=Intent(this,SecondActivity::class.java)//SecondActivity::class.java相当于Java中的SecondActivity.class \n   startActivity(intent)\n```\n\n### 隐式Intent\n\n1.在<intent-filter>标签下配置<action>和<category>\n\n2.直接将action传入Intent构造函数中\n\n3只有<action>和<category>同时匹配才能响应\n\n```kotlin\n        <activity\n            android:name=\".SecondActivity\"\n            android:exported=\"false\">\n            <intent-filter>\n                <action android:name=\"com.example.activitytest.ACTION_START\" />\n                <category android:name=\"android.intent.category.DEFAULT\" />\n                <category android:name=\"com.example.activitytest.MY_CATEGORY\" />\n            </intent-filter>\n        </activity>\n```\n\n\n\n```kotlin\nval intent=Intent(\"com.example.activitytest.ACTION_START\")\n//添加category(action只有一个category可以有多个)\nintent.addCategory(\"com.example.activitytest.MY_CATEGORY\")\nstartActivity(intent)\n```\n\n### 隐式Intent用法\n\n1.调用系统浏览器\n\n```kotlin\n            val intent=Intent(Intent.ACTION_VIEW)\n            intent.data= Uri.parse(\"https://www.baidu.com\")\n            startActivity(intent)\n```\n\n2.调用电话\n\n```kotlin\n            val intent=Intent(Intent.ACTION_DIAL)\n            intent.data= Uri.parse(\"tel:10086\")\n            startActivity(intent)\n```\n\n### 向下一个活动传递数据\n\n利用putExtra传入一个键值对\n\n```kotlin\n            val data=\"Hello SecondActivity\"\n            val intent=Intent(this,SecondActivity::class.java)\n            intent.putExtra(\"extra_data\",data)\n            startActivity(intent)\n```\n\n利用getStringExtra接收数据传入“键”\n\n```kotlin\nval extraData=intent.getStringExtra(\"extra_data\")\n```\n\n### 向上一活动返回数据\n\n1.第一个活动中通过startActivityForResult启动活动\n\n2.第二个活动构建要传输的数据\n\n3.在第一个活动中重onActivityResult方法得到返回数据\n\n```kotlin\nmyBinding.button1.setOnClickListener {\n    val intent=Intent(this,SecondActivity::class.java)\n            startActivityForResult(intent,1)\n}\n```\n\n```kotlin\n           button2.setOnClickListener {\n           val intent= Intent()\n            intent.putExtra(\"data_return\",\"Hello FirstActivity!!!\")\n            setResult(RESULT_OK,intent)\n            finish()\n           }\n```\n\n```kotlin\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n            super.onActivityResult(requestCode, resultCode, data)\n            when (requestCode) {\n                1 -> if (resultCode == RESULT_OK) {\n                    val returnData = data?.getStringExtra(\"data_return\")\n                    Log.d(\"FirstActivity\", \"returned data is $returnData \")\n                }\n            }\n        }\n```\n\n如果通过back键返回：\n\n```kotlin\noverride fun onBackPressed() {\n        val intent= Intent()\n        intent.putExtra(\"data_return\",\"Hello FirstActivity\")\n        setResult(RESULT_OK,intent)\n        finish()\n    }\n```\n\n------\n\n# Activity生命周期\n\n### 生存期\n\n**1. onCreate()**\n\n作用：\n\n当 Activity 第一次被创建时调用。在这个方法中，你通常会完成以下工作：\n\n- 设置布局文件（例如调用 `setContentView()`）\n- 初始化控件、变量和数据\n- 配置基本组件（如 Toolbar、Fragment 等）\n\n**2.onStart()**\n\n作用：\n\n在 `onCreate()` 之后调用，此时 Activity 已经对用户可见，但还未获得焦点，也就是还不能进行用户交互。通常在这里启动一些即将进入前台的操作。\n\n**3.onResume()**\n\n作用：\n\n在 `onStart()` 之后调用，此时 Activity 已经位于前台，并且可以接收用户的输入和交互。这也是应用处于“运行”状态的主要阶段。\n\n**4.onPause()**\n\n作用：\n\n当系统准备启动或恢复另一个 Activity 时调用，此时当前 Activity 仍然部分可见，但失去了用户焦点。通常在这里进行轻量级的保存工作，比如暂停动画、保存数据或释放一些占用较多资源的操作。\n\n**5.onStop()**\n\n作用：\n\n当 Activity 完全对用户不可见时调用，可能是因为新的 Activity 覆盖在上面或 Activity 被销毁。通常在这里释放不再需要的资源，并执行较重的保存工作。\n\n**6.onDestroy()**\n\n作用：\n\n在 Activity 被完全销毁之前调用。这可能是因为用户主动关闭 Activity 或系统由于资源不足而销毁 Activity。在此方法中需要清理所有占用的资源，确保内存没有泄漏。\n\n**7.onRestart()**\n\n作用：\n\n当一个已停止的 Activity 将要重新启动时调用，此方法紧接在 `onStop()` 之后调用，然后进入 `onStart()`。常用于重新初始化在 `onStop()` 中释放的资源或状态恢复。\n\n### 生存期类别\n\n**1.完整生存期： **\n\n onCreate()，onStart()，onResume()，onPause()，onStop()，onDestroy()\n\n**2.可见生存期：**\n\nonStart()，onResume()，onPause()，onStop()\n\n**3.前台生存期：**\n\nonResume()，onPause()\n\n![](../img/img53.jpg)\n\n### Activity被回收了咋办\n\n1.重写onSaveInstanceState()方法保存数据\n\n2.利用onCreate()方法中的Bundle类型读取数据\n\n```kotlin\n override fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)\n        val tempData=\"Something you just typed\"\n        outState.putString(\"data_key\",tempData)\n    }\n\n```\n\n```kotlin\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        if(savedInstanceState!=null){\n            val tempData=savedInstanceState.getString(\"data_key\")\n            Log.d(TAG, \"tempData is $tempData\")\n        }\n    }\n```\n\n------\n\n# Activity启动模式\n\n### standard\n\n默认设置，每点击一次按钮均会生成一个新的活动，不管这个活动是否存在\n\n### singleTop\n\n1.在<activity>标签中添加android:launchMode属性更改\n\n2.作用：\n\n创建活动时会先检查栈顶的是否是该活动，如果栈顶的活动是该活动则直接调用如果不是创建新活动\n\n3.原理图\n\n![](../img/img13.jpg)\n\n### singleTask\n\n1.在<activity>标签中添加android:launchMode属性更改\n\n2.作用：\n\n每次启动该活动时会先检查栈中是否有该活动如果有会直接调用并将该活动上方其他活动直接出栈，如果没有则创建新活动\n\n3.原理图：\n\n![](../img/img11.jpg)\n\n### singleInstance\n\n1.在<activity>标签中添加android:launchMode属性更改\n\n2.作用：\n\n会启用一个新的返回栈来管理该活动，可以实现不同程序之间共享Activity实例\n\n3.原理图：\n\n![](../img/img12.jpg)\n\n------\n\n# Activity最佳实践\n\n### 知晓当前是哪个活动\n\n1.建立BaseActivity类\n\n2.在该类onCreate方法中打印一行日志打印当前类名\n\n3.其余所以活动继承该类\n\n```kotlin\nopen class BaseActivity:AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        Log.d(\"BaseActivity\", javaClass.simpleName)\n    }\n}\n```\n\n### 随时随地退出程序\n\n1.新建一个单例类管理所有活动\n\n2.修改BaseActivity类中方法实现添加删除\n\n3.调用方法退出程序\n\n```kotlin\nobject ActivityCollector {\n    private val activities=ArrayList<Activity>()\n    fun addActivity(activity:Activity){\n        activities.add(activity)\n    }\n    fun removeActivity(activity: Activity){\n        activities.remove(activity)\n    }\n    fun finishAll(){\n        for(activity in activities){\n            if(!activity.isFinishing) {\n                activity.finish()\n            }\n        }\n        activities.clear()\n    }\n}\n```\n\n```kotlin\nopen class BaseActivity:AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        Log.d(\"BaseActivity\", javaClass.simpleName)\n        ActivityCollector.addActivity(this)\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        ActivityCollector.removeActivity(this)\n    }\n\n}\n```\n\n```kotlin\nActivityCollector.finishAll()\n```\n\n也可以在最后加一个杀掉当前进程的代码，来保证完全退出程序\n\n```kotlin\nandroid.os.Process.killProcess(android.os.Process.myPid())\n```\n\n\n\n### 启动Activity最佳写法\n\n```kotlin\n// 在要启动的活动内添加该静态方法\ncompanion object {\n    // 封装启动 SecondActivity 的静态方法\n    fun actionStart(context: Context, data: String) {\n        // 创建一个 Intent 对象，指定从当前上下文启动 SecondActivity\n        val intent = Intent(context, SecondActivity::class.java)\n        // 将传入的字符串数据作为额外参数存入 Intent，\n        // \"extra_data\" 为键，用于在 SecondActivity 中提取该数据\n        intent.putExtra(\"extra_data\", data)\n        // 通过上下文启动 SecondActivity\n        context.startActivity(intent)\n    }\n}\n```\n\n```kotlin\n   button1.setOnClickListener {\n         SecondActivity.actionStart(this, \"data\")\n }\n```\n\n------\n\n\n\n","source":"_posts/活动-1.md","raw":"---\ntitle: 活动(Kotlin)\ndate: 2025-04-20 09:55:22\ncategories:\n- Android(Kotlin版)\ntags:\n---\n\n# Toast\n\n1.一种提醒方式\n\n2.用法\n\n```kotlin\n val button1: Button = findViewById(R.id.button1)\n            button1.setOnClickListener {\n                Toast.makeText(this,\"You clicked out\",Toast.LENGTH_SHORT).show()\n            }\n```\n\n------\n\n# ViewBinding\n\n1.先在build.gradle.kts(app)中导入ViewBinding\n\n2.声明该类型\n\n3.绑定布局\n\n```kotlin\nandroid {\n    // 启用 ViewBinding\n    viewBinding {\n        enable = true\n    }\n}\n```\n\n```kotlin\nclass FirstActivity : BaseActivity() {\n          //声明变量\n        private lateinit var myBinding:FirstActivityBinding\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            //绑定布局\n            myBinding=FirstActivityBinding.inflate(layoutInflater)\n            setContentView(myBinding.root)\n            //使用\n            myBinding.button1.setOnClickListener {\n\n            }\n        }\n    }\n```\n\n------\n\n# Menu\n\n1.创建**menu**文件夹并创建**Menu resource file**\n\n2.重写**onCreateOptionsMenu()**方法对菜单完成创建\n\n3.重写**onOptionsItemSelected()**方法设计点击事件\n\n```kotlin\noverride fun onCreateOptionsMenu(menu: Menu?): Boolean {\n            menuInflater.inflate(R.menu.main, menu)\n            return true\n        }\n\n        override fun onOptionsItemSelected(item: MenuItem): Boolean {\n            when (item.itemId) {\n                R.id.add_item -> Toast.makeText(this, \"you clicked add\", Toast.LENGTH_SHORT).show()\n                R.id.remove_item -> Toast.makeText(this, \"you clicked remove\", Toast.LENGTH_SHORT)\n                    .show()\n            }\n            return true\n        }\n```\n\n------\n\n# Intent\n\n### 显式Intent\n\n```kotlin\n   val intent=Intent(this,SecondActivity::class.java)//SecondActivity::class.java相当于Java中的SecondActivity.class \n   startActivity(intent)\n```\n\n### 隐式Intent\n\n1.在<intent-filter>标签下配置<action>和<category>\n\n2.直接将action传入Intent构造函数中\n\n3只有<action>和<category>同时匹配才能响应\n\n```kotlin\n        <activity\n            android:name=\".SecondActivity\"\n            android:exported=\"false\">\n            <intent-filter>\n                <action android:name=\"com.example.activitytest.ACTION_START\" />\n                <category android:name=\"android.intent.category.DEFAULT\" />\n                <category android:name=\"com.example.activitytest.MY_CATEGORY\" />\n            </intent-filter>\n        </activity>\n```\n\n\n\n```kotlin\nval intent=Intent(\"com.example.activitytest.ACTION_START\")\n//添加category(action只有一个category可以有多个)\nintent.addCategory(\"com.example.activitytest.MY_CATEGORY\")\nstartActivity(intent)\n```\n\n### 隐式Intent用法\n\n1.调用系统浏览器\n\n```kotlin\n            val intent=Intent(Intent.ACTION_VIEW)\n            intent.data= Uri.parse(\"https://www.baidu.com\")\n            startActivity(intent)\n```\n\n2.调用电话\n\n```kotlin\n            val intent=Intent(Intent.ACTION_DIAL)\n            intent.data= Uri.parse(\"tel:10086\")\n            startActivity(intent)\n```\n\n### 向下一个活动传递数据\n\n利用putExtra传入一个键值对\n\n```kotlin\n            val data=\"Hello SecondActivity\"\n            val intent=Intent(this,SecondActivity::class.java)\n            intent.putExtra(\"extra_data\",data)\n            startActivity(intent)\n```\n\n利用getStringExtra接收数据传入“键”\n\n```kotlin\nval extraData=intent.getStringExtra(\"extra_data\")\n```\n\n### 向上一活动返回数据\n\n1.第一个活动中通过startActivityForResult启动活动\n\n2.第二个活动构建要传输的数据\n\n3.在第一个活动中重onActivityResult方法得到返回数据\n\n```kotlin\nmyBinding.button1.setOnClickListener {\n    val intent=Intent(this,SecondActivity::class.java)\n            startActivityForResult(intent,1)\n}\n```\n\n```kotlin\n           button2.setOnClickListener {\n           val intent= Intent()\n            intent.putExtra(\"data_return\",\"Hello FirstActivity!!!\")\n            setResult(RESULT_OK,intent)\n            finish()\n           }\n```\n\n```kotlin\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n            super.onActivityResult(requestCode, resultCode, data)\n            when (requestCode) {\n                1 -> if (resultCode == RESULT_OK) {\n                    val returnData = data?.getStringExtra(\"data_return\")\n                    Log.d(\"FirstActivity\", \"returned data is $returnData \")\n                }\n            }\n        }\n```\n\n如果通过back键返回：\n\n```kotlin\noverride fun onBackPressed() {\n        val intent= Intent()\n        intent.putExtra(\"data_return\",\"Hello FirstActivity\")\n        setResult(RESULT_OK,intent)\n        finish()\n    }\n```\n\n------\n\n# Activity生命周期\n\n### 生存期\n\n**1. onCreate()**\n\n作用：\n\n当 Activity 第一次被创建时调用。在这个方法中，你通常会完成以下工作：\n\n- 设置布局文件（例如调用 `setContentView()`）\n- 初始化控件、变量和数据\n- 配置基本组件（如 Toolbar、Fragment 等）\n\n**2.onStart()**\n\n作用：\n\n在 `onCreate()` 之后调用，此时 Activity 已经对用户可见，但还未获得焦点，也就是还不能进行用户交互。通常在这里启动一些即将进入前台的操作。\n\n**3.onResume()**\n\n作用：\n\n在 `onStart()` 之后调用，此时 Activity 已经位于前台，并且可以接收用户的输入和交互。这也是应用处于“运行”状态的主要阶段。\n\n**4.onPause()**\n\n作用：\n\n当系统准备启动或恢复另一个 Activity 时调用，此时当前 Activity 仍然部分可见，但失去了用户焦点。通常在这里进行轻量级的保存工作，比如暂停动画、保存数据或释放一些占用较多资源的操作。\n\n**5.onStop()**\n\n作用：\n\n当 Activity 完全对用户不可见时调用，可能是因为新的 Activity 覆盖在上面或 Activity 被销毁。通常在这里释放不再需要的资源，并执行较重的保存工作。\n\n**6.onDestroy()**\n\n作用：\n\n在 Activity 被完全销毁之前调用。这可能是因为用户主动关闭 Activity 或系统由于资源不足而销毁 Activity。在此方法中需要清理所有占用的资源，确保内存没有泄漏。\n\n**7.onRestart()**\n\n作用：\n\n当一个已停止的 Activity 将要重新启动时调用，此方法紧接在 `onStop()` 之后调用，然后进入 `onStart()`。常用于重新初始化在 `onStop()` 中释放的资源或状态恢复。\n\n### 生存期类别\n\n**1.完整生存期： **\n\n onCreate()，onStart()，onResume()，onPause()，onStop()，onDestroy()\n\n**2.可见生存期：**\n\nonStart()，onResume()，onPause()，onStop()\n\n**3.前台生存期：**\n\nonResume()，onPause()\n\n![](../img/img53.jpg)\n\n### Activity被回收了咋办\n\n1.重写onSaveInstanceState()方法保存数据\n\n2.利用onCreate()方法中的Bundle类型读取数据\n\n```kotlin\n override fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)\n        val tempData=\"Something you just typed\"\n        outState.putString(\"data_key\",tempData)\n    }\n\n```\n\n```kotlin\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        if(savedInstanceState!=null){\n            val tempData=savedInstanceState.getString(\"data_key\")\n            Log.d(TAG, \"tempData is $tempData\")\n        }\n    }\n```\n\n------\n\n# Activity启动模式\n\n### standard\n\n默认设置，每点击一次按钮均会生成一个新的活动，不管这个活动是否存在\n\n### singleTop\n\n1.在<activity>标签中添加android:launchMode属性更改\n\n2.作用：\n\n创建活动时会先检查栈顶的是否是该活动，如果栈顶的活动是该活动则直接调用如果不是创建新活动\n\n3.原理图\n\n![](../img/img13.jpg)\n\n### singleTask\n\n1.在<activity>标签中添加android:launchMode属性更改\n\n2.作用：\n\n每次启动该活动时会先检查栈中是否有该活动如果有会直接调用并将该活动上方其他活动直接出栈，如果没有则创建新活动\n\n3.原理图：\n\n![](../img/img11.jpg)\n\n### singleInstance\n\n1.在<activity>标签中添加android:launchMode属性更改\n\n2.作用：\n\n会启用一个新的返回栈来管理该活动，可以实现不同程序之间共享Activity实例\n\n3.原理图：\n\n![](../img/img12.jpg)\n\n------\n\n# Activity最佳实践\n\n### 知晓当前是哪个活动\n\n1.建立BaseActivity类\n\n2.在该类onCreate方法中打印一行日志打印当前类名\n\n3.其余所以活动继承该类\n\n```kotlin\nopen class BaseActivity:AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        Log.d(\"BaseActivity\", javaClass.simpleName)\n    }\n}\n```\n\n### 随时随地退出程序\n\n1.新建一个单例类管理所有活动\n\n2.修改BaseActivity类中方法实现添加删除\n\n3.调用方法退出程序\n\n```kotlin\nobject ActivityCollector {\n    private val activities=ArrayList<Activity>()\n    fun addActivity(activity:Activity){\n        activities.add(activity)\n    }\n    fun removeActivity(activity: Activity){\n        activities.remove(activity)\n    }\n    fun finishAll(){\n        for(activity in activities){\n            if(!activity.isFinishing) {\n                activity.finish()\n            }\n        }\n        activities.clear()\n    }\n}\n```\n\n```kotlin\nopen class BaseActivity:AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        Log.d(\"BaseActivity\", javaClass.simpleName)\n        ActivityCollector.addActivity(this)\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        ActivityCollector.removeActivity(this)\n    }\n\n}\n```\n\n```kotlin\nActivityCollector.finishAll()\n```\n\n也可以在最后加一个杀掉当前进程的代码，来保证完全退出程序\n\n```kotlin\nandroid.os.Process.killProcess(android.os.Process.myPid())\n```\n\n\n\n### 启动Activity最佳写法\n\n```kotlin\n// 在要启动的活动内添加该静态方法\ncompanion object {\n    // 封装启动 SecondActivity 的静态方法\n    fun actionStart(context: Context, data: String) {\n        // 创建一个 Intent 对象，指定从当前上下文启动 SecondActivity\n        val intent = Intent(context, SecondActivity::class.java)\n        // 将传入的字符串数据作为额外参数存入 Intent，\n        // \"extra_data\" 为键，用于在 SecondActivity 中提取该数据\n        intent.putExtra(\"extra_data\", data)\n        // 通过上下文启动 SecondActivity\n        context.startActivity(intent)\n    }\n}\n```\n\n```kotlin\n   button1.setOnClickListener {\n         SecondActivity.actionStart(this, \"data\")\n }\n```\n\n------\n\n\n\n","slug":"活动-1","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcq002us4s7bjish60p","content":"<h1 id=\"Toast\"><a href=\"#Toast\" class=\"headerlink\" title=\"Toast\"></a>Toast</h1><p>1.一种提醒方式</p>\n<p>2.用法</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> button1: Button = findViewById(R.id.button1)</span><br><span class=\"line\">           button1.setOnClickListener &#123;</span><br><span class=\"line\">               Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;You clicked out&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">           &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ViewBinding\"><a href=\"#ViewBinding\" class=\"headerlink\" title=\"ViewBinding\"></a>ViewBinding</h1><p>1.先在build.gradle.kts(app)中导入ViewBinding</p>\n<p>2.声明该类型</p>\n<p>3.绑定布局</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 启用 ViewBinding</span></span><br><span class=\"line\">    viewBinding &#123;</span><br><span class=\"line\">        enable = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FirstActivity</span> : <span class=\"type\">BaseActivity</span>() &#123;</span><br><span class=\"line\">          <span class=\"comment\">//声明变量</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> myBinding:FirstActivityBinding</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">            <span class=\"comment\">//绑定布局</span></span><br><span class=\"line\">            myBinding=FirstActivityBinding.inflate(layoutInflater)</span><br><span class=\"line\">            setContentView(myBinding.root)</span><br><span class=\"line\">            <span class=\"comment\">//使用</span></span><br><span class=\"line\">            myBinding.button1.setOnClickListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Menu\"><a href=\"#Menu\" class=\"headerlink\" title=\"Menu\"></a>Menu</h1><p>1.创建<strong>menu</strong>文件夹并创建<strong>Menu resource file</strong></p>\n<p>2.重写**onCreateOptionsMenu()**方法对菜单完成创建</p>\n<p>3.重写**onOptionsItemSelected()**方法设计点击事件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(menu: <span class=\"type\">Menu</span>?)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">            menuInflater.inflate(R.menu.main, menu)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(item: <span class=\"type\">MenuItem</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">when</span> (item.itemId) &#123;</span><br><span class=\"line\">                R.id.add_item -&gt; Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;you clicked add&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">                R.id.remove_item -&gt; Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;you clicked remove&quot;</span>, Toast.LENGTH_SHORT)</span><br><span class=\"line\">                    .show()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h1><h3 id=\"显式Intent\"><a href=\"#显式Intent\" class=\"headerlink\" title=\"显式Intent\"></a>显式Intent</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,SecondActivity::<span class=\"keyword\">class</span>.java)<span class=\"comment\">//SecondActivity::class.java相当于Java中的SecondActivity.class </span></span><br><span class=\"line\">startActivity(intent)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式Intent\"><a href=\"#隐式Intent\" class=\"headerlink\" title=\"隐式Intent\"></a>隐式Intent</h3><p>1.在<intent-filter>标签下配置<action>和<category></p>\n<p>2.直接将action传入Intent构造函数中</p>\n<p>3只有<action>和<category>同时匹配才能响应</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity</span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;.SecondActivity&quot;</span></span><br><span class=\"line\">    android:exported=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">    &lt;intent-filter&gt;</span><br><span class=\"line\">        &lt;action android:name=<span class=\"string\">&quot;com.example.activitytest.ACTION_START&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;category android:name=<span class=\"string\">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;category android:name=<span class=\"string\">&quot;com.example.activitytest.MY_CATEGORY&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/activity&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> intent=Intent(<span class=\"string\">&quot;com.example.activitytest.ACTION_START&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//添加category(action只有一个category可以有多个)</span></span><br><span class=\"line\">intent.addCategory(<span class=\"string\">&quot;com.example.activitytest.MY_CATEGORY&quot;</span>)</span><br><span class=\"line\">startActivity(intent)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式Intent用法\"><a href=\"#隐式Intent用法\" class=\"headerlink\" title=\"隐式Intent用法\"></a>隐式Intent用法</h3><p>1.调用系统浏览器</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> intent=Intent(Intent.ACTION_VIEW)</span><br><span class=\"line\">intent.<span class=\"keyword\">data</span>= Uri.parse(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)</span><br><span class=\"line\">startActivity(intent)</span><br></pre></td></tr></table></figure>\n\n<p>2.调用电话</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> intent=Intent(Intent.ACTION_DIAL)</span><br><span class=\"line\">intent.<span class=\"keyword\">data</span>= Uri.parse(<span class=\"string\">&quot;tel:10086&quot;</span>)</span><br><span class=\"line\">startActivity(intent)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"向下一个活动传递数据\"><a href=\"#向下一个活动传递数据\" class=\"headerlink\" title=\"向下一个活动传递数据\"></a>向下一个活动传递数据</h3><p>利用putExtra传入一个键值对</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> <span class=\"keyword\">data</span>=<span class=\"string\">&quot;Hello SecondActivity&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,SecondActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">&quot;extra_data&quot;</span>,<span class=\"keyword\">data</span>)</span><br><span class=\"line\">startActivity(intent)</span><br></pre></td></tr></table></figure>\n\n<p>利用getStringExtra接收数据传入“键”</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> extraData=intent.getStringExtra(<span class=\"string\">&quot;extra_data&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"向上一活动返回数据\"><a href=\"#向上一活动返回数据\" class=\"headerlink\" title=\"向上一活动返回数据\"></a>向上一活动返回数据</h3><p>1.第一个活动中通过startActivityForResult启动活动</p>\n<p>2.第二个活动构建要传输的数据</p>\n<p>3.在第一个活动中重onActivityResult方法得到返回数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myBinding.button1.setOnClickListener &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,SecondActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">            startActivityForResult(intent,<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button2.setOnClickListener &#123;</span><br><span class=\"line\"><span class=\"keyword\">val</span> intent= Intent()</span><br><span class=\"line\"> intent.putExtra(<span class=\"string\">&quot;data_return&quot;</span>,<span class=\"string\">&quot;Hello FirstActivity!!!&quot;</span>)</span><br><span class=\"line\"> setResult(RESULT_OK,intent)</span><br><span class=\"line\"> finish()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(requestCode: <span class=\"type\">Int</span>, resultCode: <span class=\"type\">Int</span>, <span class=\"keyword\">data</span>: <span class=\"type\">Intent</span>?)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, <span class=\"keyword\">data</span>)</span><br><span class=\"line\">            <span class=\"keyword\">when</span> (requestCode) &#123;</span><br><span class=\"line\">                <span class=\"number\">1</span> -&gt; <span class=\"keyword\">if</span> (resultCode == RESULT_OK) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">val</span> returnData = <span class=\"keyword\">data</span>?.getStringExtra(<span class=\"string\">&quot;data_return&quot;</span>)</span><br><span class=\"line\">                    Log.d(<span class=\"string\">&quot;FirstActivity&quot;</span>, <span class=\"string\">&quot;returned data is <span class=\"variable\">$returnData</span> &quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果通过back键返回：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> intent= Intent()</span><br><span class=\"line\">        intent.putExtra(<span class=\"string\">&quot;data_return&quot;</span>,<span class=\"string\">&quot;Hello FirstActivity&quot;</span>)</span><br><span class=\"line\">        setResult(RESULT_OK,intent)</span><br><span class=\"line\">        finish()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Activity生命周期\"><a href=\"#Activity生命周期\" class=\"headerlink\" title=\"Activity生命周期\"></a>Activity生命周期</h1><h3 id=\"生存期\"><a href=\"#生存期\" class=\"headerlink\" title=\"生存期\"></a>生存期</h3><p><strong>1. onCreate()</strong></p>\n<p>作用：</p>\n<p>当 Activity 第一次被创建时调用。在这个方法中，你通常会完成以下工作：</p>\n<ul>\n<li>设置布局文件（例如调用 <code>setContentView()</code>）</li>\n<li>初始化控件、变量和数据</li>\n<li>配置基本组件（如 Toolbar、Fragment 等）</li>\n</ul>\n<p><strong>2.onStart()</strong></p>\n<p>作用：</p>\n<p>在 <code>onCreate()</code> 之后调用，此时 Activity 已经对用户可见，但还未获得焦点，也就是还不能进行用户交互。通常在这里启动一些即将进入前台的操作。</p>\n<p><strong>3.onResume()</strong></p>\n<p>作用：</p>\n<p>在 <code>onStart()</code> 之后调用，此时 Activity 已经位于前台，并且可以接收用户的输入和交互。这也是应用处于“运行”状态的主要阶段。</p>\n<p><strong>4.onPause()</strong></p>\n<p>作用：</p>\n<p>当系统准备启动或恢复另一个 Activity 时调用，此时当前 Activity 仍然部分可见，但失去了用户焦点。通常在这里进行轻量级的保存工作，比如暂停动画、保存数据或释放一些占用较多资源的操作。</p>\n<p><strong>5.onStop()</strong></p>\n<p>作用：</p>\n<p>当 Activity 完全对用户不可见时调用，可能是因为新的 Activity 覆盖在上面或 Activity 被销毁。通常在这里释放不再需要的资源，并执行较重的保存工作。</p>\n<p><strong>6.onDestroy()</strong></p>\n<p>作用：</p>\n<p>在 Activity 被完全销毁之前调用。这可能是因为用户主动关闭 Activity 或系统由于资源不足而销毁 Activity。在此方法中需要清理所有占用的资源，确保内存没有泄漏。</p>\n<p><strong>7.onRestart()</strong></p>\n<p>作用：</p>\n<p>当一个已停止的 Activity 将要重新启动时调用，此方法紧接在 <code>onStop()</code> 之后调用，然后进入 <code>onStart()</code>。常用于重新初始化在 <code>onStop()</code> 中释放的资源或状态恢复。</p>\n<h3 id=\"生存期类别\"><a href=\"#生存期类别\" class=\"headerlink\" title=\"生存期类别\"></a>生存期类别</h3><p>**1.完整生存期： **</p>\n<p> onCreate()，onStart()，onResume()，onPause()，onStop()，onDestroy()</p>\n<p><strong>2.可见生存期：</strong></p>\n<p>onStart()，onResume()，onPause()，onStop()</p>\n<p><strong>3.前台生存期：</strong></p>\n<p>onResume()，onPause()</p>\n<p><img src=\"/../img/img53.jpg\"></p>\n<h3 id=\"Activity被回收了咋办\"><a href=\"#Activity被回收了咋办\" class=\"headerlink\" title=\"Activity被回收了咋办\"></a>Activity被回收了咋办</h3><p>1.重写onSaveInstanceState()方法保存数据</p>\n<p>2.利用onCreate()方法中的Bundle类型读取数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(outState: <span class=\"type\">Bundle</span>)</span></span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.onSaveInstanceState(outState)</span><br><span class=\"line\">       <span class=\"keyword\">val</span> tempData=<span class=\"string\">&quot;Something you just typed&quot;</span></span><br><span class=\"line\">       outState.putString(<span class=\"string\">&quot;data_key&quot;</span>,tempData)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(savedInstanceState!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> tempData=savedInstanceState.getString(<span class=\"string\">&quot;data_key&quot;</span>)</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;tempData is <span class=\"variable\">$tempData</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Activity启动模式\"><a href=\"#Activity启动模式\" class=\"headerlink\" title=\"Activity启动模式\"></a>Activity启动模式</h1><h3 id=\"standard\"><a href=\"#standard\" class=\"headerlink\" title=\"standard\"></a>standard</h3><p>默认设置，每点击一次按钮均会生成一个新的活动，不管这个活动是否存在</p>\n<h3 id=\"singleTop\"><a href=\"#singleTop\" class=\"headerlink\" title=\"singleTop\"></a>singleTop</h3><p>1.在<activity>标签中添加android:launchMode属性更改</p>\n<p>2.作用：</p>\n<p>创建活动时会先检查栈顶的是否是该活动，如果栈顶的活动是该活动则直接调用如果不是创建新活动</p>\n<p>3.原理图</p>\n<p><img src=\"/../img/img13.jpg\"></p>\n<h3 id=\"singleTask\"><a href=\"#singleTask\" class=\"headerlink\" title=\"singleTask\"></a>singleTask</h3><p>1.在<activity>标签中添加android:launchMode属性更改</p>\n<p>2.作用：</p>\n<p>每次启动该活动时会先检查栈中是否有该活动如果有会直接调用并将该活动上方其他活动直接出栈，如果没有则创建新活动</p>\n<p>3.原理图：</p>\n<p><img src=\"/../img/img11.jpg\"></p>\n<h3 id=\"singleInstance\"><a href=\"#singleInstance\" class=\"headerlink\" title=\"singleInstance\"></a>singleInstance</h3><p>1.在<activity>标签中添加android:launchMode属性更改</p>\n<p>2.作用：</p>\n<p>会启用一个新的返回栈来管理该活动，可以实现不同程序之间共享Activity实例</p>\n<p>3.原理图：</p>\n<p><img src=\"/../img/img12.jpg\"></p>\n<hr>\n<h1 id=\"Activity最佳实践\"><a href=\"#Activity最佳实践\" class=\"headerlink\" title=\"Activity最佳实践\"></a>Activity最佳实践</h1><h3 id=\"知晓当前是哪个活动\"><a href=\"#知晓当前是哪个活动\" class=\"headerlink\" title=\"知晓当前是哪个活动\"></a>知晓当前是哪个活动</h3><p>1.建立BaseActivity类</p>\n<p>2.在该类onCreate方法中打印一行日志打印当前类名</p>\n<p>3.其余所以活动继承该类</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseActivity</span>:<span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;BaseActivity&quot;</span>, javaClass.simpleName)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"随时随地退出程序\"><a href=\"#随时随地退出程序\" class=\"headerlink\" title=\"随时随地退出程序\"></a>随时随地退出程序</h3><p>1.新建一个单例类管理所有活动</p>\n<p>2.修改BaseActivity类中方法实现添加删除</p>\n<p>3.调用方法退出程序</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> ActivityCollector &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> activities=ArrayList&lt;Activity&gt;()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addActivity</span><span class=\"params\">(activity:<span class=\"type\">Activity</span>)</span></span>&#123;</span><br><span class=\"line\">        activities.add(activity)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">removeActivity</span><span class=\"params\">(activity: <span class=\"type\">Activity</span>)</span></span>&#123;</span><br><span class=\"line\">        activities.remove(activity)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">finishAll</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(activity <span class=\"keyword\">in</span> activities)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!activity.isFinishing) &#123;</span><br><span class=\"line\">                activity.finish()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        activities.clear()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseActivity</span>:<span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;BaseActivity&quot;</span>, javaClass.simpleName)</span><br><span class=\"line\">        ActivityCollector.addActivity(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        ActivityCollector.removeActivity(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ActivityCollector.finishAll()</span><br></pre></td></tr></table></figure>\n\n<p>也可以在最后加一个杀掉当前进程的代码，来保证完全退出程序</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android.os.Process.killProcess(android.os.Process.myPid())</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动Activity最佳写法\"><a href=\"#启动Activity最佳写法\" class=\"headerlink\" title=\"启动Activity最佳写法\"></a>启动Activity最佳写法</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在要启动的活动内添加该静态方法</span></span><br><span class=\"line\"><span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 封装启动 SecondActivity 的静态方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">actionStart</span><span class=\"params\">(context: <span class=\"type\">Context</span>, <span class=\"keyword\">data</span>: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个 Intent 对象，指定从当前上下文启动 SecondActivity</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> intent = Intent(context, SecondActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        <span class=\"comment\">// 将传入的字符串数据作为额外参数存入 Intent，</span></span><br><span class=\"line\">        <span class=\"comment\">// &quot;extra_data&quot; 为键，用于在 SecondActivity 中提取该数据</span></span><br><span class=\"line\">        intent.putExtra(<span class=\"string\">&quot;extra_data&quot;</span>, <span class=\"keyword\">data</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 通过上下文启动 SecondActivity</span></span><br><span class=\"line\">        context.startActivity(intent)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  button1.setOnClickListener &#123;</span><br><span class=\"line\">        SecondActivity.actionStart(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;data&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"Toast\n1.一种提醒方式\n\n2.用法\n\n1\n2\n3\n4\n\n\nval button1: Button = findViewById(R.id.button1)\n           button1.setOnClickListener {\n               Toast.makeText(this,\"You clicked out\",Toast.LENGTH_SHORT).show()\n           }\n\n\n\n\n\nViewBinding\n1.先在build.gradle.kts(app)中导入ViewBinding\n\n2.声明该类型\n\n3.绑定布局\n\n1\n2\n3\n4\n5\n6","more":"<h1 id=\"Toast\"><a href=\"#Toast\" class=\"headerlink\" title=\"Toast\"></a>Toast</h1><p>1.一种提醒方式</p>\n<p>2.用法</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> button1: Button = findViewById(R.id.button1)</span><br><span class=\"line\">           button1.setOnClickListener &#123;</span><br><span class=\"line\">               Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;You clicked out&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">           &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"ViewBinding\"><a href=\"#ViewBinding\" class=\"headerlink\" title=\"ViewBinding\"></a>ViewBinding</h1><p>1.先在build.gradle.kts(app)中导入ViewBinding</p>\n<p>2.声明该类型</p>\n<p>3.绑定布局</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 启用 ViewBinding</span></span><br><span class=\"line\">    viewBinding &#123;</span><br><span class=\"line\">        enable = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FirstActivity</span> : <span class=\"type\">BaseActivity</span>() &#123;</span><br><span class=\"line\">          <span class=\"comment\">//声明变量</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> myBinding:FirstActivityBinding</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">            <span class=\"comment\">//绑定布局</span></span><br><span class=\"line\">            myBinding=FirstActivityBinding.inflate(layoutInflater)</span><br><span class=\"line\">            setContentView(myBinding.root)</span><br><span class=\"line\">            <span class=\"comment\">//使用</span></span><br><span class=\"line\">            myBinding.button1.setOnClickListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Menu\"><a href=\"#Menu\" class=\"headerlink\" title=\"Menu\"></a>Menu</h1><p>1.创建<strong>menu</strong>文件夹并创建<strong>Menu resource file</strong></p>\n<p>2.重写**onCreateOptionsMenu()**方法对菜单完成创建</p>\n<p>3.重写**onOptionsItemSelected()**方法设计点击事件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(menu: <span class=\"type\">Menu</span>?)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">            menuInflater.inflate(R.menu.main, menu)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(item: <span class=\"type\">MenuItem</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">when</span> (item.itemId) &#123;</span><br><span class=\"line\">                R.id.add_item -&gt; Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;you clicked add&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">                R.id.remove_item -&gt; Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;you clicked remove&quot;</span>, Toast.LENGTH_SHORT)</span><br><span class=\"line\">                    .show()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h1><h3 id=\"显式Intent\"><a href=\"#显式Intent\" class=\"headerlink\" title=\"显式Intent\"></a>显式Intent</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,SecondActivity::<span class=\"keyword\">class</span>.java)<span class=\"comment\">//SecondActivity::class.java相当于Java中的SecondActivity.class </span></span><br><span class=\"line\">startActivity(intent)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式Intent\"><a href=\"#隐式Intent\" class=\"headerlink\" title=\"隐式Intent\"></a>隐式Intent</h3><p>1.在<intent-filter>标签下配置<action>和<category></p>\n<p>2.直接将action传入Intent构造函数中</p>\n<p>3只有<action>和<category>同时匹配才能响应</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity</span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;.SecondActivity&quot;</span></span><br><span class=\"line\">    android:exported=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">    &lt;intent-filter&gt;</span><br><span class=\"line\">        &lt;action android:name=<span class=\"string\">&quot;com.example.activitytest.ACTION_START&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;category android:name=<span class=\"string\">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;category android:name=<span class=\"string\">&quot;com.example.activitytest.MY_CATEGORY&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/activity&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> intent=Intent(<span class=\"string\">&quot;com.example.activitytest.ACTION_START&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//添加category(action只有一个category可以有多个)</span></span><br><span class=\"line\">intent.addCategory(<span class=\"string\">&quot;com.example.activitytest.MY_CATEGORY&quot;</span>)</span><br><span class=\"line\">startActivity(intent)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式Intent用法\"><a href=\"#隐式Intent用法\" class=\"headerlink\" title=\"隐式Intent用法\"></a>隐式Intent用法</h3><p>1.调用系统浏览器</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> intent=Intent(Intent.ACTION_VIEW)</span><br><span class=\"line\">intent.<span class=\"keyword\">data</span>= Uri.parse(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)</span><br><span class=\"line\">startActivity(intent)</span><br></pre></td></tr></table></figure>\n\n<p>2.调用电话</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> intent=Intent(Intent.ACTION_DIAL)</span><br><span class=\"line\">intent.<span class=\"keyword\">data</span>= Uri.parse(<span class=\"string\">&quot;tel:10086&quot;</span>)</span><br><span class=\"line\">startActivity(intent)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"向下一个活动传递数据\"><a href=\"#向下一个活动传递数据\" class=\"headerlink\" title=\"向下一个活动传递数据\"></a>向下一个活动传递数据</h3><p>利用putExtra传入一个键值对</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> <span class=\"keyword\">data</span>=<span class=\"string\">&quot;Hello SecondActivity&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,SecondActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">&quot;extra_data&quot;</span>,<span class=\"keyword\">data</span>)</span><br><span class=\"line\">startActivity(intent)</span><br></pre></td></tr></table></figure>\n\n<p>利用getStringExtra接收数据传入“键”</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> extraData=intent.getStringExtra(<span class=\"string\">&quot;extra_data&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"向上一活动返回数据\"><a href=\"#向上一活动返回数据\" class=\"headerlink\" title=\"向上一活动返回数据\"></a>向上一活动返回数据</h3><p>1.第一个活动中通过startActivityForResult启动活动</p>\n<p>2.第二个活动构建要传输的数据</p>\n<p>3.在第一个活动中重onActivityResult方法得到返回数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myBinding.button1.setOnClickListener &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> intent=Intent(<span class=\"keyword\">this</span>,SecondActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">            startActivityForResult(intent,<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button2.setOnClickListener &#123;</span><br><span class=\"line\"><span class=\"keyword\">val</span> intent= Intent()</span><br><span class=\"line\"> intent.putExtra(<span class=\"string\">&quot;data_return&quot;</span>,<span class=\"string\">&quot;Hello FirstActivity!!!&quot;</span>)</span><br><span class=\"line\"> setResult(RESULT_OK,intent)</span><br><span class=\"line\"> finish()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(requestCode: <span class=\"type\">Int</span>, resultCode: <span class=\"type\">Int</span>, <span class=\"keyword\">data</span>: <span class=\"type\">Intent</span>?)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, <span class=\"keyword\">data</span>)</span><br><span class=\"line\">            <span class=\"keyword\">when</span> (requestCode) &#123;</span><br><span class=\"line\">                <span class=\"number\">1</span> -&gt; <span class=\"keyword\">if</span> (resultCode == RESULT_OK) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">val</span> returnData = <span class=\"keyword\">data</span>?.getStringExtra(<span class=\"string\">&quot;data_return&quot;</span>)</span><br><span class=\"line\">                    Log.d(<span class=\"string\">&quot;FirstActivity&quot;</span>, <span class=\"string\">&quot;returned data is <span class=\"variable\">$returnData</span> &quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果通过back键返回：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> intent= Intent()</span><br><span class=\"line\">        intent.putExtra(<span class=\"string\">&quot;data_return&quot;</span>,<span class=\"string\">&quot;Hello FirstActivity&quot;</span>)</span><br><span class=\"line\">        setResult(RESULT_OK,intent)</span><br><span class=\"line\">        finish()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Activity生命周期\"><a href=\"#Activity生命周期\" class=\"headerlink\" title=\"Activity生命周期\"></a>Activity生命周期</h1><h3 id=\"生存期\"><a href=\"#生存期\" class=\"headerlink\" title=\"生存期\"></a>生存期</h3><p><strong>1. onCreate()</strong></p>\n<p>作用：</p>\n<p>当 Activity 第一次被创建时调用。在这个方法中，你通常会完成以下工作：</p>\n<ul>\n<li>设置布局文件（例如调用 <code>setContentView()</code>）</li>\n<li>初始化控件、变量和数据</li>\n<li>配置基本组件（如 Toolbar、Fragment 等）</li>\n</ul>\n<p><strong>2.onStart()</strong></p>\n<p>作用：</p>\n<p>在 <code>onCreate()</code> 之后调用，此时 Activity 已经对用户可见，但还未获得焦点，也就是还不能进行用户交互。通常在这里启动一些即将进入前台的操作。</p>\n<p><strong>3.onResume()</strong></p>\n<p>作用：</p>\n<p>在 <code>onStart()</code> 之后调用，此时 Activity 已经位于前台，并且可以接收用户的输入和交互。这也是应用处于“运行”状态的主要阶段。</p>\n<p><strong>4.onPause()</strong></p>\n<p>作用：</p>\n<p>当系统准备启动或恢复另一个 Activity 时调用，此时当前 Activity 仍然部分可见，但失去了用户焦点。通常在这里进行轻量级的保存工作，比如暂停动画、保存数据或释放一些占用较多资源的操作。</p>\n<p><strong>5.onStop()</strong></p>\n<p>作用：</p>\n<p>当 Activity 完全对用户不可见时调用，可能是因为新的 Activity 覆盖在上面或 Activity 被销毁。通常在这里释放不再需要的资源，并执行较重的保存工作。</p>\n<p><strong>6.onDestroy()</strong></p>\n<p>作用：</p>\n<p>在 Activity 被完全销毁之前调用。这可能是因为用户主动关闭 Activity 或系统由于资源不足而销毁 Activity。在此方法中需要清理所有占用的资源，确保内存没有泄漏。</p>\n<p><strong>7.onRestart()</strong></p>\n<p>作用：</p>\n<p>当一个已停止的 Activity 将要重新启动时调用，此方法紧接在 <code>onStop()</code> 之后调用，然后进入 <code>onStart()</code>。常用于重新初始化在 <code>onStop()</code> 中释放的资源或状态恢复。</p>\n<h3 id=\"生存期类别\"><a href=\"#生存期类别\" class=\"headerlink\" title=\"生存期类别\"></a>生存期类别</h3><p>**1.完整生存期： **</p>\n<p> onCreate()，onStart()，onResume()，onPause()，onStop()，onDestroy()</p>\n<p><strong>2.可见生存期：</strong></p>\n<p>onStart()，onResume()，onPause()，onStop()</p>\n<p><strong>3.前台生存期：</strong></p>\n<p>onResume()，onPause()</p>\n<p><img src=\"/../img/img53.jpg\"></p>\n<h3 id=\"Activity被回收了咋办\"><a href=\"#Activity被回收了咋办\" class=\"headerlink\" title=\"Activity被回收了咋办\"></a>Activity被回收了咋办</h3><p>1.重写onSaveInstanceState()方法保存数据</p>\n<p>2.利用onCreate()方法中的Bundle类型读取数据</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(outState: <span class=\"type\">Bundle</span>)</span></span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.onSaveInstanceState(outState)</span><br><span class=\"line\">       <span class=\"keyword\">val</span> tempData=<span class=\"string\">&quot;Something you just typed&quot;</span></span><br><span class=\"line\">       outState.putString(<span class=\"string\">&quot;data_key&quot;</span>,tempData)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(savedInstanceState!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> tempData=savedInstanceState.getString(<span class=\"string\">&quot;data_key&quot;</span>)</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;tempData is <span class=\"variable\">$tempData</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Activity启动模式\"><a href=\"#Activity启动模式\" class=\"headerlink\" title=\"Activity启动模式\"></a>Activity启动模式</h1><h3 id=\"standard\"><a href=\"#standard\" class=\"headerlink\" title=\"standard\"></a>standard</h3><p>默认设置，每点击一次按钮均会生成一个新的活动，不管这个活动是否存在</p>\n<h3 id=\"singleTop\"><a href=\"#singleTop\" class=\"headerlink\" title=\"singleTop\"></a>singleTop</h3><p>1.在<activity>标签中添加android:launchMode属性更改</p>\n<p>2.作用：</p>\n<p>创建活动时会先检查栈顶的是否是该活动，如果栈顶的活动是该活动则直接调用如果不是创建新活动</p>\n<p>3.原理图</p>\n<p><img src=\"/../img/img13.jpg\"></p>\n<h3 id=\"singleTask\"><a href=\"#singleTask\" class=\"headerlink\" title=\"singleTask\"></a>singleTask</h3><p>1.在<activity>标签中添加android:launchMode属性更改</p>\n<p>2.作用：</p>\n<p>每次启动该活动时会先检查栈中是否有该活动如果有会直接调用并将该活动上方其他活动直接出栈，如果没有则创建新活动</p>\n<p>3.原理图：</p>\n<p><img src=\"/../img/img11.jpg\"></p>\n<h3 id=\"singleInstance\"><a href=\"#singleInstance\" class=\"headerlink\" title=\"singleInstance\"></a>singleInstance</h3><p>1.在<activity>标签中添加android:launchMode属性更改</p>\n<p>2.作用：</p>\n<p>会启用一个新的返回栈来管理该活动，可以实现不同程序之间共享Activity实例</p>\n<p>3.原理图：</p>\n<p><img src=\"/../img/img12.jpg\"></p>\n<hr>\n<h1 id=\"Activity最佳实践\"><a href=\"#Activity最佳实践\" class=\"headerlink\" title=\"Activity最佳实践\"></a>Activity最佳实践</h1><h3 id=\"知晓当前是哪个活动\"><a href=\"#知晓当前是哪个活动\" class=\"headerlink\" title=\"知晓当前是哪个活动\"></a>知晓当前是哪个活动</h3><p>1.建立BaseActivity类</p>\n<p>2.在该类onCreate方法中打印一行日志打印当前类名</p>\n<p>3.其余所以活动继承该类</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseActivity</span>:<span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;BaseActivity&quot;</span>, javaClass.simpleName)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"随时随地退出程序\"><a href=\"#随时随地退出程序\" class=\"headerlink\" title=\"随时随地退出程序\"></a>随时随地退出程序</h3><p>1.新建一个单例类管理所有活动</p>\n<p>2.修改BaseActivity类中方法实现添加删除</p>\n<p>3.调用方法退出程序</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> ActivityCollector &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> activities=ArrayList&lt;Activity&gt;()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">addActivity</span><span class=\"params\">(activity:<span class=\"type\">Activity</span>)</span></span>&#123;</span><br><span class=\"line\">        activities.add(activity)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">removeActivity</span><span class=\"params\">(activity: <span class=\"type\">Activity</span>)</span></span>&#123;</span><br><span class=\"line\">        activities.remove(activity)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">finishAll</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(activity <span class=\"keyword\">in</span> activities)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!activity.isFinishing) &#123;</span><br><span class=\"line\">                activity.finish()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        activities.clear()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseActivity</span>:<span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;BaseActivity&quot;</span>, javaClass.simpleName)</span><br><span class=\"line\">        ActivityCollector.addActivity(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        ActivityCollector.removeActivity(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ActivityCollector.finishAll()</span><br></pre></td></tr></table></figure>\n\n<p>也可以在最后加一个杀掉当前进程的代码，来保证完全退出程序</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android.os.Process.killProcess(android.os.Process.myPid())</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动Activity最佳写法\"><a href=\"#启动Activity最佳写法\" class=\"headerlink\" title=\"启动Activity最佳写法\"></a>启动Activity最佳写法</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在要启动的活动内添加该静态方法</span></span><br><span class=\"line\"><span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 封装启动 SecondActivity 的静态方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">actionStart</span><span class=\"params\">(context: <span class=\"type\">Context</span>, <span class=\"keyword\">data</span>: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个 Intent 对象，指定从当前上下文启动 SecondActivity</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> intent = Intent(context, SecondActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">        <span class=\"comment\">// 将传入的字符串数据作为额外参数存入 Intent，</span></span><br><span class=\"line\">        <span class=\"comment\">// &quot;extra_data&quot; 为键，用于在 SecondActivity 中提取该数据</span></span><br><span class=\"line\">        intent.putExtra(<span class=\"string\">&quot;extra_data&quot;</span>, <span class=\"keyword\">data</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 通过上下文启动 SecondActivity</span></span><br><span class=\"line\">        context.startActivity(intent)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  button1.setOnClickListener &#123;</span><br><span class=\"line\">        SecondActivity.actionStart(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;data&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"活动(Java)","date":"2025-02-24T13:02:40.000Z","_content":"\n# 手动创建一个活动的全过程\n\n1.创建一个活动\n2.创建和加载布局(根元素一般选用LinearLayout的):\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n\n    <Button\n        android:id=\"@+id/button_1\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Button 1\" />\n</LinearLayout>\n```\n\n①添加按钮用Button控件\n②利用setContentView()方法加载布局\n3.在AndroidManifest中注册\n4.配置主活动(也可以用label给活动添加个标题，标题栏显示在最顶部)\n\n---\n\n# Toast\n\n1.定义:一种提醒方式，信息出现一段时间会自己消失，不会占用屏幕空间\n2.使用方式:\n\n```java\nToast.makeText(FirstActivity.this, \"You clicked Button 1\", Toast.LENGTH_SHORT).show();\n```\n\n3.利用makeText()创建一个Toast对象，传入三个参数，第一个参数是Context,也就是上下文，第二个参数是文本内容，第三个参数是显示时长\n\n---\n\n# Menu\n\n1.要现在res目录下创建一个新的文件夹menu\n2.创建Menu resource file\n3.修改其中的代码\n\n```java\n<item\n    android:id=\"@+id/add_item\"\n    android:title=\"Add\"/>\n<item\n    android:id=\"@+id/remove_item\"\n    android:title=\"Remove\"/>\n```\n\n其中 **item** 标签就是用来创建具体的某一个菜单项\n\n4.接着重写onCreateOptionsMenu()方法\n\n![](../img/img1.jpg)\n\n5.然后利用onOptionsItemSelected()方法定义菜单响应事件\n\n```java\n @Override\n    public boolean onOptionsItemSelected(MenuItem item){\n        if(item.getItemId()==R.id.add_item){\n                Toast.makeText(this, \"You clicked Add\", Toast.LENGTH_SHORT).show();\n        } else if (item.getItemId()==R.id.remove_item) {\n            Toast.makeText(this, \"You clicked Remove\", Toast.LENGTH_SHORT).show();\n        }\n        return false;\n    }\n```\n\n---\n\n# Intent\n\n用途:启动活动，启动服务，发送广播\n\n### 显式Intent\n\n```java\nIntent intent = new Intent(FirstActivity.this,SecondActivity.class);\nstartActivity(intent);\n```\n\n Intent构造函数接收两个参数，第一个参数是Context上下文，第二个是想要启动的活动目标 然后通过startActivity()方法执行这个intent \n\n### 隐式Intent\n\n1.在**activity**下配置**intent-filter**，指定当前活动能响应的**action**和**category**\n\n```java\n <intent-filter>\n      <action android:name=\"com.example.activitytest.ACTION_START\" />\n\n      <category android:name=\"android.intent.category.DEFAULT\" />\n </intent-filter>\n```\n\n2.只有**action**和**category**能够同时匹配上intent指定的action和category时，活动才能响应该intent\n\n```java\nIntent intent = new Intent(\"com.example.activitytest.ACTION_START\");\nstartActivity(intent);\n```\n\n3.每个intent只能指定一个action却可以指定多个category \n\n4.可以利用addCategory()方法来添加category，在活动中添加一个category同时也需要在**intent-filter**下进行一个声明 \n\n### 更多隐式intent用法\n\n1.通过Intent启动浏览器等:\n\n![](../img/img2.jpg)\n\n\n\n同时我们还应该在**intent-filter**中配置一**data**标签 \n\n![](../img/img3.jpg)\n\n\n\n除了浏览器也可以是其他的网址: \n\n![](../img/img4.jpg)\n\n### 向下一个活动传递数据\n\n1.可以利用putExtra()方法，把我们想要传递的数据存在intent中，启动一个活动后，只需要再把数据取出就可以了。\n2.putExtra()方法使用需要两个参数，第一个是键用于后面取值，第二个是要传递的数据。\n\n```java\n String data=\"Hello SecondAcitivity\";\n Intent intent=new Intent(FirstActivity.this,SecondActivity.class);\n intent.putExtra(\"extra_data\",data);\n startActivity(intent);\n```\n\n\n\n3.取值时首先要通过getIntent()方法获取intent，然后调用getStringExtra()方法获取数据\n\n```java\n        Intent intent = getIntent();\n        String data=intent.getStringExtra(\"extra_data\");\n        Log.d(\"SecondAcitivity\",data);\n```\n\n\n\n### 返回数据给上一个活动\n\n1.利用startActivityForResult()方法来启动活动\n2.调用setResult()方法用于向上一个活动返回数据\n3.用startActivityForResult()方法启动活动该活动销毁后会调回上一个活动的onActivityResult()方法，所以重写该方法可以得到返回的数据\n\n例子：\n\n![](../img/img6.jpg)\n\n![](../img/img5.jpg)\n\n![](../img/img7.jpg)\n\n4.如果通过back键销毁活动则可以通过重写onBackPressed()方法解决\n\n```\n @Override\n    public void onBackPressed() {\n       super.onBackPressed();\n       Intent intent = new Intent();\n       intent.putExtra(\"data_return\", \"Hello FirstActivity\");\n       setResult(RESULT_OK, intent);\n       finish();\n   }\n```\n\n---\n\n\n\n# 活动的生命周期\n\n\n\n### 返回栈\n\n\n\n一个任务就是一组存放在栈里的集合，这个栈也叫返回栈\n\n\n\n### 活动状态\n\n\n\n1.运行状态:处于栈顶\n2.暂停状态:不在栈顶但仍然可见\n3.停止状态:不在栈顶且不可见\n4.销毁状态:从返回栈中移除\n\n\n\n### 生存期\n\n\n\n1.七种回调方法:\n①·onCreate():初始化操作\n②·onStart():活动由不可见变为可见\n③·onResume():此时活动一定处于栈顶且运行状态\n④·onPause():在准备启动或恢复另一个活动时调用\n⑤·onStop():活动完全不可见时用，如果启动的新活动是对话框式的，则会调用onPause(),而onStop()不会执行\n⑥·onDestroy():销毁之前调用\n⑦·onRestart():活动由停止变为运行状态前调用\n完整生存期:①到⑥之间经历的方法\n可见生存期:②到⑤之间\n前台生存期:③到④之间\n\n![](../img/img8.jpg)\n\n  对话框式的主题需要在AndroidManifest中更改配置如下所示:\n\n```java\nandroid:theme=\"@style/Theme.Appcompat.Light.Dialog.Alert\"\n```\n\n\n\n---\n\n# 活动被回收了怎么办\n\n1.利用onSaveInstanceState()方法回调，这个方法会携带一个Bundle类型参数，该类型提供了一系列方法保存数据\n2.例子:\n\n![](../img/img9.jpg)\n\n![](../img/img10.jpg)\n\n---\n\n# 活动的启动模式\n\n在AndroidManifest中用android:launchMode更改模式\n(1)standard:默认启动模式\n\n![](../img/img14.jpg)\n\n\n\n(2)singleTop:在启动活动时如果发现栈顶已经是该活动，则可以直接使用他，不再创建新活动\n\n![](../img/img13.jpg)\n\n\n\n(3)singleTask:每次启动活动时会先检查存不存在该活动，如果存在直接调用此活动，并把该活动上面的活动通通出栈\n\n![](../img/img11.jpg)\n\n\n\n(4)singleInstance:会启用一个新的返回栈来管理活动\n\n![](../img/img12.jpg)\n\n---\n\n# 知晓当前在哪一个活动\n\n1.创建一个新的Java类继承AppCompatActivity并重写onCreate方法在该类中获得当前实例的类名\n\n```java\n\npublic class BaseActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Log.d(\"BaseActivity\", getClass().getSimpleName());\n    }\n\n}\n```\n\n\n\n2.让其他的活动都继承新建的类\n3.观察logcat中各界面的打印信息即可得出结论\n\n---\n\n# 随时随地的退出程序\n\n1.可以创建一个专门的集合对所有活动进行管理就可以了\n\n```java\npublic class ActivityCollector {\n    public static List<BaseActivity> activities=new ArrayList<>();\n    public static void addActivity(BaseActivity activity){\n        activities.add(activity);\n    }\n    public static void removeActivity(BaseActivity activity){\n        activities.remove(activity);\n    }\n    public static void finishAll(){\n        for(BaseActivity activity:activities){\n            if(!activity.isFinishing()){\n                activity.finish();\n            }\n        }\n    }\n}\n\n```\n\n2.设计好管理类接下来对BaseActivity类进行修改\n\n```java\npublic class BaseActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Log.d(\"BaseActivity\", getClass().getSimpleName());\n        ActivityCollector.addActivity(this);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        ActivityCollector.removeActivity(this);\n    }\n}\n\n```\n\n3.这两步操作完，如果以后想直接退出程序直接使用finishAll()方法即可\n\n------\n\n# 启动活动的最佳写法\n\n利用actionStart()方法\n\n```java\npublic static void actionStart(Context context,String data1,String data2){\n   Intent intent = new Intent(context,SecondActivity.class);\n   intent.putExtra(\"param1\",data1);\n   intent.putExtra(\"param2\",data2);\n   context.startActivity(intent);\n}\n```\n\n```java\nSecondActivity.actionStart(FirstActivity.this,\"data1\",\"data2\");\n```\n\n用上面这句话直接启动\n","source":"_posts/活动.md","raw":"title: 活动(Java)\ndate: 2025-02-24 21:02:40\n\ncategories:\n- Android(Java版)\ntags:\n\n---\n\n# 手动创建一个活动的全过程\n\n1.创建一个活动\n2.创建和加载布局(根元素一般选用LinearLayout的):\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n\n    <Button\n        android:id=\"@+id/button_1\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Button 1\" />\n</LinearLayout>\n```\n\n①添加按钮用Button控件\n②利用setContentView()方法加载布局\n3.在AndroidManifest中注册\n4.配置主活动(也可以用label给活动添加个标题，标题栏显示在最顶部)\n\n---\n\n# Toast\n\n1.定义:一种提醒方式，信息出现一段时间会自己消失，不会占用屏幕空间\n2.使用方式:\n\n```java\nToast.makeText(FirstActivity.this, \"You clicked Button 1\", Toast.LENGTH_SHORT).show();\n```\n\n3.利用makeText()创建一个Toast对象，传入三个参数，第一个参数是Context,也就是上下文，第二个参数是文本内容，第三个参数是显示时长\n\n---\n\n# Menu\n\n1.要现在res目录下创建一个新的文件夹menu\n2.创建Menu resource file\n3.修改其中的代码\n\n```java\n<item\n    android:id=\"@+id/add_item\"\n    android:title=\"Add\"/>\n<item\n    android:id=\"@+id/remove_item\"\n    android:title=\"Remove\"/>\n```\n\n其中 **item** 标签就是用来创建具体的某一个菜单项\n\n4.接着重写onCreateOptionsMenu()方法\n\n![](../img/img1.jpg)\n\n5.然后利用onOptionsItemSelected()方法定义菜单响应事件\n\n```java\n @Override\n    public boolean onOptionsItemSelected(MenuItem item){\n        if(item.getItemId()==R.id.add_item){\n                Toast.makeText(this, \"You clicked Add\", Toast.LENGTH_SHORT).show();\n        } else if (item.getItemId()==R.id.remove_item) {\n            Toast.makeText(this, \"You clicked Remove\", Toast.LENGTH_SHORT).show();\n        }\n        return false;\n    }\n```\n\n---\n\n# Intent\n\n用途:启动活动，启动服务，发送广播\n\n### 显式Intent\n\n```java\nIntent intent = new Intent(FirstActivity.this,SecondActivity.class);\nstartActivity(intent);\n```\n\n Intent构造函数接收两个参数，第一个参数是Context上下文，第二个是想要启动的活动目标 然后通过startActivity()方法执行这个intent \n\n### 隐式Intent\n\n1.在**activity**下配置**intent-filter**，指定当前活动能响应的**action**和**category**\n\n```java\n <intent-filter>\n      <action android:name=\"com.example.activitytest.ACTION_START\" />\n\n      <category android:name=\"android.intent.category.DEFAULT\" />\n </intent-filter>\n```\n\n2.只有**action**和**category**能够同时匹配上intent指定的action和category时，活动才能响应该intent\n\n```java\nIntent intent = new Intent(\"com.example.activitytest.ACTION_START\");\nstartActivity(intent);\n```\n\n3.每个intent只能指定一个action却可以指定多个category \n\n4.可以利用addCategory()方法来添加category，在活动中添加一个category同时也需要在**intent-filter**下进行一个声明 \n\n### 更多隐式intent用法\n\n1.通过Intent启动浏览器等:\n\n![](../img/img2.jpg)\n\n\n\n同时我们还应该在**intent-filter**中配置一**data**标签 \n\n![](../img/img3.jpg)\n\n\n\n除了浏览器也可以是其他的网址: \n\n![](../img/img4.jpg)\n\n### 向下一个活动传递数据\n\n1.可以利用putExtra()方法，把我们想要传递的数据存在intent中，启动一个活动后，只需要再把数据取出就可以了。\n2.putExtra()方法使用需要两个参数，第一个是键用于后面取值，第二个是要传递的数据。\n\n```java\n String data=\"Hello SecondAcitivity\";\n Intent intent=new Intent(FirstActivity.this,SecondActivity.class);\n intent.putExtra(\"extra_data\",data);\n startActivity(intent);\n```\n\n\n\n3.取值时首先要通过getIntent()方法获取intent，然后调用getStringExtra()方法获取数据\n\n```java\n        Intent intent = getIntent();\n        String data=intent.getStringExtra(\"extra_data\");\n        Log.d(\"SecondAcitivity\",data);\n```\n\n\n\n### 返回数据给上一个活动\n\n1.利用startActivityForResult()方法来启动活动\n2.调用setResult()方法用于向上一个活动返回数据\n3.用startActivityForResult()方法启动活动该活动销毁后会调回上一个活动的onActivityResult()方法，所以重写该方法可以得到返回的数据\n\n例子：\n\n![](../img/img6.jpg)\n\n![](../img/img5.jpg)\n\n![](../img/img7.jpg)\n\n4.如果通过back键销毁活动则可以通过重写onBackPressed()方法解决\n\n```\n @Override\n    public void onBackPressed() {\n       super.onBackPressed();\n       Intent intent = new Intent();\n       intent.putExtra(\"data_return\", \"Hello FirstActivity\");\n       setResult(RESULT_OK, intent);\n       finish();\n   }\n```\n\n---\n\n\n\n# 活动的生命周期\n\n\n\n### 返回栈\n\n\n\n一个任务就是一组存放在栈里的集合，这个栈也叫返回栈\n\n\n\n### 活动状态\n\n\n\n1.运行状态:处于栈顶\n2.暂停状态:不在栈顶但仍然可见\n3.停止状态:不在栈顶且不可见\n4.销毁状态:从返回栈中移除\n\n\n\n### 生存期\n\n\n\n1.七种回调方法:\n①·onCreate():初始化操作\n②·onStart():活动由不可见变为可见\n③·onResume():此时活动一定处于栈顶且运行状态\n④·onPause():在准备启动或恢复另一个活动时调用\n⑤·onStop():活动完全不可见时用，如果启动的新活动是对话框式的，则会调用onPause(),而onStop()不会执行\n⑥·onDestroy():销毁之前调用\n⑦·onRestart():活动由停止变为运行状态前调用\n完整生存期:①到⑥之间经历的方法\n可见生存期:②到⑤之间\n前台生存期:③到④之间\n\n![](../img/img8.jpg)\n\n  对话框式的主题需要在AndroidManifest中更改配置如下所示:\n\n```java\nandroid:theme=\"@style/Theme.Appcompat.Light.Dialog.Alert\"\n```\n\n\n\n---\n\n# 活动被回收了怎么办\n\n1.利用onSaveInstanceState()方法回调，这个方法会携带一个Bundle类型参数，该类型提供了一系列方法保存数据\n2.例子:\n\n![](../img/img9.jpg)\n\n![](../img/img10.jpg)\n\n---\n\n# 活动的启动模式\n\n在AndroidManifest中用android:launchMode更改模式\n(1)standard:默认启动模式\n\n![](../img/img14.jpg)\n\n\n\n(2)singleTop:在启动活动时如果发现栈顶已经是该活动，则可以直接使用他，不再创建新活动\n\n![](../img/img13.jpg)\n\n\n\n(3)singleTask:每次启动活动时会先检查存不存在该活动，如果存在直接调用此活动，并把该活动上面的活动通通出栈\n\n![](../img/img11.jpg)\n\n\n\n(4)singleInstance:会启用一个新的返回栈来管理活动\n\n![](../img/img12.jpg)\n\n---\n\n# 知晓当前在哪一个活动\n\n1.创建一个新的Java类继承AppCompatActivity并重写onCreate方法在该类中获得当前实例的类名\n\n```java\n\npublic class BaseActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Log.d(\"BaseActivity\", getClass().getSimpleName());\n    }\n\n}\n```\n\n\n\n2.让其他的活动都继承新建的类\n3.观察logcat中各界面的打印信息即可得出结论\n\n---\n\n# 随时随地的退出程序\n\n1.可以创建一个专门的集合对所有活动进行管理就可以了\n\n```java\npublic class ActivityCollector {\n    public static List<BaseActivity> activities=new ArrayList<>();\n    public static void addActivity(BaseActivity activity){\n        activities.add(activity);\n    }\n    public static void removeActivity(BaseActivity activity){\n        activities.remove(activity);\n    }\n    public static void finishAll(){\n        for(BaseActivity activity:activities){\n            if(!activity.isFinishing()){\n                activity.finish();\n            }\n        }\n    }\n}\n\n```\n\n2.设计好管理类接下来对BaseActivity类进行修改\n\n```java\npublic class BaseActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Log.d(\"BaseActivity\", getClass().getSimpleName());\n        ActivityCollector.addActivity(this);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        ActivityCollector.removeActivity(this);\n    }\n}\n\n```\n\n3.这两步操作完，如果以后想直接退出程序直接使用finishAll()方法即可\n\n------\n\n# 启动活动的最佳写法\n\n利用actionStart()方法\n\n```java\npublic static void actionStart(Context context,String data1,String data2){\n   Intent intent = new Intent(context,SecondActivity.class);\n   intent.putExtra(\"param1\",data1);\n   intent.putExtra(\"param2\",data2);\n   context.startActivity(intent);\n}\n```\n\n```java\nSecondActivity.actionStart(FirstActivity.this,\"data1\",\"data2\");\n```\n\n用上面这句话直接启动\n","slug":"活动","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcr002ws4s71quue3pa","content":"<h1 id=\"手动创建一个活动的全过程\"><a href=\"#手动创建一个活动的全过程\" class=\"headerlink\" title=\"手动创建一个活动的全过程\"></a>手动创建一个活动的全过程</h1><p>1.创建一个活动<br>2.创建和加载布局(根元素一般选用LinearLayout的):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/button_1&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Button 1&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>①添加按钮用Button控件<br>②利用setContentView()方法加载布局<br>3.在AndroidManifest中注册<br>4.配置主活动(也可以用label给活动添加个标题，标题栏显示在最顶部)</p>\n<hr>\n<h1 id=\"Toast\"><a href=\"#Toast\" class=\"headerlink\" title=\"Toast\"></a>Toast</h1><p>1.定义:一种提醒方式，信息出现一段时间会自己消失，不会占用屏幕空间<br>2.使用方式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Toast.makeText(FirstActivity.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You clicked Button 1&quot;</span>, Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure>\n\n<p>3.利用makeText()创建一个Toast对象，传入三个参数，第一个参数是Context,也就是上下文，第二个参数是文本内容，第三个参数是显示时长</p>\n<hr>\n<h1 id=\"Menu\"><a href=\"#Menu\" class=\"headerlink\" title=\"Menu\"></a>Menu</h1><p>1.要现在res目录下创建一个新的文件夹menu<br>2.创建Menu resource file<br>3.修改其中的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;item</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/add_item&quot;</span></span><br><span class=\"line\">    android:title=<span class=\"string\">&quot;Add&quot;</span>/&gt;</span><br><span class=\"line\">&lt;item</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/remove_item&quot;</span></span><br><span class=\"line\">    android:title=<span class=\"string\">&quot;Remove&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <strong>item</strong> 标签就是用来创建具体的某一个菜单项</p>\n<p>4.接着重写onCreateOptionsMenu()方法</p>\n<p><img src=\"/../img/img1.jpg\"></p>\n<p>5.然后利用onOptionsItemSelected()方法定义菜单响应事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(item.getItemId()==R.id.add_item)&#123;</span><br><span class=\"line\">               Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You clicked Add&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.getItemId()==R.id.remove_item) &#123;</span><br><span class=\"line\">           Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You clicked Remove&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h1><p>用途:启动活动，启动服务，发送广播</p>\n<h3 id=\"显式Intent\"><a href=\"#显式Intent\" class=\"headerlink\" title=\"显式Intent\"></a>显式Intent</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Intent</span> <span class=\"variable\">intent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(FirstActivity.<span class=\"built_in\">this</span>,SecondActivity.class);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<p> Intent构造函数接收两个参数，第一个参数是Context上下文，第二个是想要启动的活动目标 然后通过startActivity()方法执行这个intent </p>\n<h3 id=\"隐式Intent\"><a href=\"#隐式Intent\" class=\"headerlink\" title=\"隐式Intent\"></a>隐式Intent</h3><p>1.在<strong>activity</strong>下配置<strong>intent-filter</strong>，指定当前活动能响应的<strong>action</strong>和<strong>category</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;intent-filter&gt;</span><br><span class=\"line\">     &lt;action android:name=<span class=\"string\">&quot;com.example.activitytest.ACTION_START&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     &lt;category android:name=<span class=\"string\">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2.只有<strong>action</strong>和<strong>category</strong>能够同时匹配上intent指定的action和category时，活动才能响应该intent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Intent</span> <span class=\"variable\">intent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"string\">&quot;com.example.activitytest.ACTION_START&quot;</span>);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<p>3.每个intent只能指定一个action却可以指定多个category </p>\n<p>4.可以利用addCategory()方法来添加category，在活动中添加一个category同时也需要在<strong>intent-filter</strong>下进行一个声明 </p>\n<h3 id=\"更多隐式intent用法\"><a href=\"#更多隐式intent用法\" class=\"headerlink\" title=\"更多隐式intent用法\"></a>更多隐式intent用法</h3><p>1.通过Intent启动浏览器等:</p>\n<p><img src=\"/../img/img2.jpg\"></p>\n<p>同时我们还应该在<strong>intent-filter</strong>中配置一<strong>data</strong>标签 </p>\n<p><img src=\"/../img/img3.jpg\"></p>\n<p>除了浏览器也可以是其他的网址: </p>\n<p><img src=\"/../img/img4.jpg\"></p>\n<h3 id=\"向下一个活动传递数据\"><a href=\"#向下一个活动传递数据\" class=\"headerlink\" title=\"向下一个活动传递数据\"></a>向下一个活动传递数据</h3><p>1.可以利用putExtra()方法，把我们想要传递的数据存在intent中，启动一个活动后，只需要再把数据取出就可以了。<br>2.putExtra()方法使用需要两个参数，第一个是键用于后面取值，第二个是要传递的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String data=<span class=\"string\">&quot;Hello SecondAcitivity&quot;</span>;</span><br><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(FirstActivity.<span class=\"built_in\">this</span>,SecondActivity.class);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">&quot;extra_data&quot;</span>,data);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.取值时首先要通过getIntent()方法获取intent，然后调用getStringExtra()方法获取数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Intent</span> <span class=\"variable\">intent</span> <span class=\"operator\">=</span> getIntent();</span><br><span class=\"line\">String data=intent.getStringExtra(<span class=\"string\">&quot;extra_data&quot;</span>);</span><br><span class=\"line\">Log.d(<span class=\"string\">&quot;SecondAcitivity&quot;</span>,data);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"返回数据给上一个活动\"><a href=\"#返回数据给上一个活动\" class=\"headerlink\" title=\"返回数据给上一个活动\"></a>返回数据给上一个活动</h3><p>1.利用startActivityForResult()方法来启动活动<br>2.调用setResult()方法用于向上一个活动返回数据<br>3.用startActivityForResult()方法启动活动该活动销毁后会调回上一个活动的onActivityResult()方法，所以重写该方法可以得到返回的数据</p>\n<p>例子：</p>\n<p><img src=\"/../img/img6.jpg\"></p>\n<p><img src=\"/../img/img5.jpg\"></p>\n<p><img src=\"/../img/img7.jpg\"></p>\n<p>4.如果通过back键销毁活动则可以通过重写onBackPressed()方法解决</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   public void onBackPressed() &#123;</span><br><span class=\"line\">      super.onBackPressed();</span><br><span class=\"line\">      Intent intent = new Intent();</span><br><span class=\"line\">      intent.putExtra(&quot;data_return&quot;, &quot;Hello FirstActivity&quot;);</span><br><span class=\"line\">      setResult(RESULT_OK, intent);</span><br><span class=\"line\">      finish();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"活动的生命周期\"><a href=\"#活动的生命周期\" class=\"headerlink\" title=\"活动的生命周期\"></a>活动的生命周期</h1><h3 id=\"返回栈\"><a href=\"#返回栈\" class=\"headerlink\" title=\"返回栈\"></a>返回栈</h3><p>一个任务就是一组存放在栈里的集合，这个栈也叫返回栈</p>\n<h3 id=\"活动状态\"><a href=\"#活动状态\" class=\"headerlink\" title=\"活动状态\"></a>活动状态</h3><p>1.运行状态:处于栈顶<br>2.暂停状态:不在栈顶但仍然可见<br>3.停止状态:不在栈顶且不可见<br>4.销毁状态:从返回栈中移除</p>\n<h3 id=\"生存期\"><a href=\"#生存期\" class=\"headerlink\" title=\"生存期\"></a>生存期</h3><p>1.七种回调方法:<br>①·onCreate():初始化操作<br>②·onStart():活动由不可见变为可见<br>③·onResume():此时活动一定处于栈顶且运行状态<br>④·onPause():在准备启动或恢复另一个活动时调用<br>⑤·onStop():活动完全不可见时用，如果启动的新活动是对话框式的，则会调用onPause(),而onStop()不会执行<br>⑥·onDestroy():销毁之前调用<br>⑦·onRestart():活动由停止变为运行状态前调用<br>完整生存期:①到⑥之间经历的方法<br>可见生存期:②到⑤之间<br>前台生存期:③到④之间</p>\n<p><img src=\"/../img/img8.jpg\"></p>\n<p>  对话框式的主题需要在AndroidManifest中更改配置如下所示:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:theme=<span class=\"string\">&quot;@style/Theme.Appcompat.Light.Dialog.Alert&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"活动被回收了怎么办\"><a href=\"#活动被回收了怎么办\" class=\"headerlink\" title=\"活动被回收了怎么办\"></a>活动被回收了怎么办</h1><p>1.利用onSaveInstanceState()方法回调，这个方法会携带一个Bundle类型参数，该类型提供了一系列方法保存数据<br>2.例子:</p>\n<p><img src=\"/../img/img9.jpg\"></p>\n<p><img src=\"/../img/img10.jpg\"></p>\n<hr>\n<h1 id=\"活动的启动模式\"><a href=\"#活动的启动模式\" class=\"headerlink\" title=\"活动的启动模式\"></a>活动的启动模式</h1><p>在AndroidManifest中用android:launchMode更改模式<br>(1)standard:默认启动模式</p>\n<p><img src=\"/../img/img14.jpg\"></p>\n<p>(2)singleTop:在启动活动时如果发现栈顶已经是该活动，则可以直接使用他，不再创建新活动</p>\n<p><img src=\"/../img/img13.jpg\"></p>\n<p>(3)singleTask:每次启动活动时会先检查存不存在该活动，如果存在直接调用此活动，并把该活动上面的活动通通出栈</p>\n<p><img src=\"/../img/img11.jpg\"></p>\n<p>(4)singleInstance:会启用一个新的返回栈来管理活动</p>\n<p><img src=\"/../img/img12.jpg\"></p>\n<hr>\n<h1 id=\"知晓当前在哪一个活动\"><a href=\"#知晓当前在哪一个活动\" class=\"headerlink\" title=\"知晓当前在哪一个活动\"></a>知晓当前在哪一个活动</h1><p>1.创建一个新的Java类继承AppCompatActivity并重写onCreate方法在该类中获得当前实例的类名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;BaseActivity&quot;</span>, getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>2.让其他的活动都继承新建的类<br>3.观察logcat中各界面的打印信息即可得出结论</p>\n<hr>\n<h1 id=\"随时随地的退出程序\"><a href=\"#随时随地的退出程序\" class=\"headerlink\" title=\"随时随地的退出程序\"></a>随时随地的退出程序</h1><p>1.可以创建一个专门的集合对所有活动进行管理就可以了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ActivityCollector</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;BaseActivity&gt; activities=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addActivity</span><span class=\"params\">(BaseActivity activity)</span>&#123;</span><br><span class=\"line\">        activities.add(activity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeActivity</span><span class=\"params\">(BaseActivity activity)</span>&#123;</span><br><span class=\"line\">        activities.remove(activity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finishAll</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(BaseActivity activity:activities)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!activity.isFinishing())&#123;</span><br><span class=\"line\">                activity.finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.设计好管理类接下来对BaseActivity类进行修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;BaseActivity&quot;</span>, getClass().getSimpleName());</span><br><span class=\"line\">        ActivityCollector.addActivity(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        ActivityCollector.removeActivity(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>3.这两步操作完，如果以后想直接退出程序直接使用finishAll()方法即可</p>\n<hr>\n<h1 id=\"启动活动的最佳写法\"><a href=\"#启动活动的最佳写法\" class=\"headerlink\" title=\"启动活动的最佳写法\"></a>启动活动的最佳写法</h1><p>利用actionStart()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">actionStart</span><span class=\"params\">(Context context,String data1,String data2)</span>&#123;</span><br><span class=\"line\">   <span class=\"type\">Intent</span> <span class=\"variable\">intent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(context,SecondActivity.class);</span><br><span class=\"line\">   intent.putExtra(<span class=\"string\">&quot;param1&quot;</span>,data1);</span><br><span class=\"line\">   intent.putExtra(<span class=\"string\">&quot;param2&quot;</span>,data2);</span><br><span class=\"line\">   context.startActivity(intent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SecondActivity.actionStart(FirstActivity.<span class=\"built_in\">this</span>,<span class=\"string\">&quot;data1&quot;</span>,<span class=\"string\">&quot;data2&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>用上面这句话直接启动</p>\n","excerpt":"手动创建一个活动的全过程\n1.创建一个活动\n2.创建和加载布局(根元素一般选用LinearLayout的):\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n\n    <Button\n        android","more":"<h1 id=\"手动创建一个活动的全过程\"><a href=\"#手动创建一个活动的全过程\" class=\"headerlink\" title=\"手动创建一个活动的全过程\"></a>手动创建一个活动的全过程</h1><p>1.创建一个活动<br>2.创建和加载布局(根元素一般选用LinearLayout的):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/button_1&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Button 1&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>①添加按钮用Button控件<br>②利用setContentView()方法加载布局<br>3.在AndroidManifest中注册<br>4.配置主活动(也可以用label给活动添加个标题，标题栏显示在最顶部)</p>\n<hr>\n<h1 id=\"Toast\"><a href=\"#Toast\" class=\"headerlink\" title=\"Toast\"></a>Toast</h1><p>1.定义:一种提醒方式，信息出现一段时间会自己消失，不会占用屏幕空间<br>2.使用方式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Toast.makeText(FirstActivity.<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You clicked Button 1&quot;</span>, Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure>\n\n<p>3.利用makeText()创建一个Toast对象，传入三个参数，第一个参数是Context,也就是上下文，第二个参数是文本内容，第三个参数是显示时长</p>\n<hr>\n<h1 id=\"Menu\"><a href=\"#Menu\" class=\"headerlink\" title=\"Menu\"></a>Menu</h1><p>1.要现在res目录下创建一个新的文件夹menu<br>2.创建Menu resource file<br>3.修改其中的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;item</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/add_item&quot;</span></span><br><span class=\"line\">    android:title=<span class=\"string\">&quot;Add&quot;</span>/&gt;</span><br><span class=\"line\">&lt;item</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/remove_item&quot;</span></span><br><span class=\"line\">    android:title=<span class=\"string\">&quot;Remove&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <strong>item</strong> 标签就是用来创建具体的某一个菜单项</p>\n<p>4.接着重写onCreateOptionsMenu()方法</p>\n<p><img src=\"/../img/img1.jpg\"></p>\n<p>5.然后利用onOptionsItemSelected()方法定义菜单响应事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(item.getItemId()==R.id.add_item)&#123;</span><br><span class=\"line\">               Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You clicked Add&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.getItemId()==R.id.remove_item) &#123;</span><br><span class=\"line\">           Toast.makeText(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;You clicked Remove&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h1><p>用途:启动活动，启动服务，发送广播</p>\n<h3 id=\"显式Intent\"><a href=\"#显式Intent\" class=\"headerlink\" title=\"显式Intent\"></a>显式Intent</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Intent</span> <span class=\"variable\">intent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(FirstActivity.<span class=\"built_in\">this</span>,SecondActivity.class);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<p> Intent构造函数接收两个参数，第一个参数是Context上下文，第二个是想要启动的活动目标 然后通过startActivity()方法执行这个intent </p>\n<h3 id=\"隐式Intent\"><a href=\"#隐式Intent\" class=\"headerlink\" title=\"隐式Intent\"></a>隐式Intent</h3><p>1.在<strong>activity</strong>下配置<strong>intent-filter</strong>，指定当前活动能响应的<strong>action</strong>和<strong>category</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;intent-filter&gt;</span><br><span class=\"line\">     &lt;action android:name=<span class=\"string\">&quot;com.example.activitytest.ACTION_START&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     &lt;category android:name=<span class=\"string\">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2.只有<strong>action</strong>和<strong>category</strong>能够同时匹配上intent指定的action和category时，活动才能响应该intent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Intent</span> <span class=\"variable\">intent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"string\">&quot;com.example.activitytest.ACTION_START&quot;</span>);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<p>3.每个intent只能指定一个action却可以指定多个category </p>\n<p>4.可以利用addCategory()方法来添加category，在活动中添加一个category同时也需要在<strong>intent-filter</strong>下进行一个声明 </p>\n<h3 id=\"更多隐式intent用法\"><a href=\"#更多隐式intent用法\" class=\"headerlink\" title=\"更多隐式intent用法\"></a>更多隐式intent用法</h3><p>1.通过Intent启动浏览器等:</p>\n<p><img src=\"/../img/img2.jpg\"></p>\n<p>同时我们还应该在<strong>intent-filter</strong>中配置一<strong>data</strong>标签 </p>\n<p><img src=\"/../img/img3.jpg\"></p>\n<p>除了浏览器也可以是其他的网址: </p>\n<p><img src=\"/../img/img4.jpg\"></p>\n<h3 id=\"向下一个活动传递数据\"><a href=\"#向下一个活动传递数据\" class=\"headerlink\" title=\"向下一个活动传递数据\"></a>向下一个活动传递数据</h3><p>1.可以利用putExtra()方法，把我们想要传递的数据存在intent中，启动一个活动后，只需要再把数据取出就可以了。<br>2.putExtra()方法使用需要两个参数，第一个是键用于后面取值，第二个是要传递的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String data=<span class=\"string\">&quot;Hello SecondAcitivity&quot;</span>;</span><br><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(FirstActivity.<span class=\"built_in\">this</span>,SecondActivity.class);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">&quot;extra_data&quot;</span>,data);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.取值时首先要通过getIntent()方法获取intent，然后调用getStringExtra()方法获取数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Intent</span> <span class=\"variable\">intent</span> <span class=\"operator\">=</span> getIntent();</span><br><span class=\"line\">String data=intent.getStringExtra(<span class=\"string\">&quot;extra_data&quot;</span>);</span><br><span class=\"line\">Log.d(<span class=\"string\">&quot;SecondAcitivity&quot;</span>,data);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"返回数据给上一个活动\"><a href=\"#返回数据给上一个活动\" class=\"headerlink\" title=\"返回数据给上一个活动\"></a>返回数据给上一个活动</h3><p>1.利用startActivityForResult()方法来启动活动<br>2.调用setResult()方法用于向上一个活动返回数据<br>3.用startActivityForResult()方法启动活动该活动销毁后会调回上一个活动的onActivityResult()方法，所以重写该方法可以得到返回的数据</p>\n<p>例子：</p>\n<p><img src=\"/../img/img6.jpg\"></p>\n<p><img src=\"/../img/img5.jpg\"></p>\n<p><img src=\"/../img/img7.jpg\"></p>\n<p>4.如果通过back键销毁活动则可以通过重写onBackPressed()方法解决</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   public void onBackPressed() &#123;</span><br><span class=\"line\">      super.onBackPressed();</span><br><span class=\"line\">      Intent intent = new Intent();</span><br><span class=\"line\">      intent.putExtra(&quot;data_return&quot;, &quot;Hello FirstActivity&quot;);</span><br><span class=\"line\">      setResult(RESULT_OK, intent);</span><br><span class=\"line\">      finish();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"活动的生命周期\"><a href=\"#活动的生命周期\" class=\"headerlink\" title=\"活动的生命周期\"></a>活动的生命周期</h1><h3 id=\"返回栈\"><a href=\"#返回栈\" class=\"headerlink\" title=\"返回栈\"></a>返回栈</h3><p>一个任务就是一组存放在栈里的集合，这个栈也叫返回栈</p>\n<h3 id=\"活动状态\"><a href=\"#活动状态\" class=\"headerlink\" title=\"活动状态\"></a>活动状态</h3><p>1.运行状态:处于栈顶<br>2.暂停状态:不在栈顶但仍然可见<br>3.停止状态:不在栈顶且不可见<br>4.销毁状态:从返回栈中移除</p>\n<h3 id=\"生存期\"><a href=\"#生存期\" class=\"headerlink\" title=\"生存期\"></a>生存期</h3><p>1.七种回调方法:<br>①·onCreate():初始化操作<br>②·onStart():活动由不可见变为可见<br>③·onResume():此时活动一定处于栈顶且运行状态<br>④·onPause():在准备启动或恢复另一个活动时调用<br>⑤·onStop():活动完全不可见时用，如果启动的新活动是对话框式的，则会调用onPause(),而onStop()不会执行<br>⑥·onDestroy():销毁之前调用<br>⑦·onRestart():活动由停止变为运行状态前调用<br>完整生存期:①到⑥之间经历的方法<br>可见生存期:②到⑤之间<br>前台生存期:③到④之间</p>\n<p><img src=\"/../img/img8.jpg\"></p>\n<p>  对话框式的主题需要在AndroidManifest中更改配置如下所示:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:theme=<span class=\"string\">&quot;@style/Theme.Appcompat.Light.Dialog.Alert&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"活动被回收了怎么办\"><a href=\"#活动被回收了怎么办\" class=\"headerlink\" title=\"活动被回收了怎么办\"></a>活动被回收了怎么办</h1><p>1.利用onSaveInstanceState()方法回调，这个方法会携带一个Bundle类型参数，该类型提供了一系列方法保存数据<br>2.例子:</p>\n<p><img src=\"/../img/img9.jpg\"></p>\n<p><img src=\"/../img/img10.jpg\"></p>\n<hr>\n<h1 id=\"活动的启动模式\"><a href=\"#活动的启动模式\" class=\"headerlink\" title=\"活动的启动模式\"></a>活动的启动模式</h1><p>在AndroidManifest中用android:launchMode更改模式<br>(1)standard:默认启动模式</p>\n<p><img src=\"/../img/img14.jpg\"></p>\n<p>(2)singleTop:在启动活动时如果发现栈顶已经是该活动，则可以直接使用他，不再创建新活动</p>\n<p><img src=\"/../img/img13.jpg\"></p>\n<p>(3)singleTask:每次启动活动时会先检查存不存在该活动，如果存在直接调用此活动，并把该活动上面的活动通通出栈</p>\n<p><img src=\"/../img/img11.jpg\"></p>\n<p>(4)singleInstance:会启用一个新的返回栈来管理活动</p>\n<p><img src=\"/../img/img12.jpg\"></p>\n<hr>\n<h1 id=\"知晓当前在哪一个活动\"><a href=\"#知晓当前在哪一个活动\" class=\"headerlink\" title=\"知晓当前在哪一个活动\"></a>知晓当前在哪一个活动</h1><p>1.创建一个新的Java类继承AppCompatActivity并重写onCreate方法在该类中获得当前实例的类名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;BaseActivity&quot;</span>, getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>2.让其他的活动都继承新建的类<br>3.观察logcat中各界面的打印信息即可得出结论</p>\n<hr>\n<h1 id=\"随时随地的退出程序\"><a href=\"#随时随地的退出程序\" class=\"headerlink\" title=\"随时随地的退出程序\"></a>随时随地的退出程序</h1><p>1.可以创建一个专门的集合对所有活动进行管理就可以了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ActivityCollector</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;BaseActivity&gt; activities=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addActivity</span><span class=\"params\">(BaseActivity activity)</span>&#123;</span><br><span class=\"line\">        activities.add(activity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeActivity</span><span class=\"params\">(BaseActivity activity)</span>&#123;</span><br><span class=\"line\">        activities.remove(activity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finishAll</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(BaseActivity activity:activities)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!activity.isFinishing())&#123;</span><br><span class=\"line\">                activity.finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.设计好管理类接下来对BaseActivity类进行修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;BaseActivity&quot;</span>, getClass().getSimpleName());</span><br><span class=\"line\">        ActivityCollector.addActivity(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        ActivityCollector.removeActivity(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>3.这两步操作完，如果以后想直接退出程序直接使用finishAll()方法即可</p>\n<hr>\n<h1 id=\"启动活动的最佳写法\"><a href=\"#启动活动的最佳写法\" class=\"headerlink\" title=\"启动活动的最佳写法\"></a>启动活动的最佳写法</h1><p>利用actionStart()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">actionStart</span><span class=\"params\">(Context context,String data1,String data2)</span>&#123;</span><br><span class=\"line\">   <span class=\"type\">Intent</span> <span class=\"variable\">intent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(context,SecondActivity.class);</span><br><span class=\"line\">   intent.putExtra(<span class=\"string\">&quot;param1&quot;</span>,data1);</span><br><span class=\"line\">   intent.putExtra(<span class=\"string\">&quot;param2&quot;</span>,data2);</span><br><span class=\"line\">   context.startActivity(intent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SecondActivity.actionStart(FirstActivity.<span class=\"built_in\">this</span>,<span class=\"string\">&quot;data1&quot;</span>,<span class=\"string\">&quot;data2&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>用上面这句话直接启动</p>\n"},{"title":"碎片(Kotlin)","date":"2025-05-01T06:22:24.000Z","_content":"\n# Fragment使用方式\n\n### 简单用法\n\n1.新建碎片布局\n\n2.新建碎片类继承Fragment并在碎片类中动态加载碎片布局\n\n3.将碎片引入活动布局\n\n```kotlin\n//左碎片布局\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:text=\"Button\"/>\n</LinearLayout>\n```\n\n```kotlin\nclass LeftFragment: Fragment() {\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n       return inflater.inflate(R.layout.left_fragment,container,false)\n    }\n}\n```\n\n```kotlin\n//右碎片布局\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:background=\"#00ff00\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:textSize=\"24sp\"\n        android:text=\"This is right fragment\"/>\n</LinearLayout>\n```\n\n```kotlin\nclass RightFragment:Fragment() {\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.right_fragment,container,false)\n            }\n}\n```\n\n```kotlin\n//主活动布局\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"horizontal\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <fragment\n        android:id=\"@+id/leftFrag\"\n        android:name=\"com.example.fragmenttest.LeftFragment\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\"/>\n    <fragment\n        android:id=\"@+id/rightFrag\"\n        android:name=\"com.example.fragmenttest.RightFragment\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"3\"/>\n</LinearLayout>\n```\n\n### 动态添加Fragment\n\n- 创建待添加的实例\n- 获取FragmentManager对象\n- 开启一个事务使用beginTransaction()方法开启\n- 向容器内添加或替换fragment\n- 提交事务，用commit()完成\n\n```kotlin\n//新碎片布局\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:background=\"#00ff00\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:textSize=\"24sp\"\n        android:text=\"This is another right fragment\"/>\n</LinearLayout>\n```\n\n```kotlin\n//加载新碎片布局\nclass AnotherRightFragment:Fragment() {\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.another_right_fragment,container,false)\n    }\n}\n```\n\n```kotlin\n//主活动布局\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"horizontal\"\n    >\n\n    <fragment\n        android:id=\"@+id/leftFrag\"\n        android:name=\"com.example.fragmenttest.LeftFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n    <FrameLayout\n        android:id=\"@+id/rightLayout\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\">\n        \n    </FrameLayout>\n</LinearLayout>\n```\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        val button:Button=findViewById(R.id.button)\n        button.setOnClickListener {\n            replaceFragment(AnotherRightFragment())\n        }\n        replaceFragment(RightFragment())\n    }\n\n    private fun replaceFragment(fragment: Fragment) {\n        //获取fragmentManager对象\n        val fragmentManager = supportFragmentManager\n        //开启事务\n        val transaction = fragmentManager.beginTransaction()\n        //向容器内添加碎片\n        transaction.replace(R.id.rightLayout,fragment)\n        //将事务添加到返回栈\n        transaction.addToBackStack(null)\n        //提交事务\n        transaction.commit()\n    }\n}\n```\n\n### Fragment和Activity交互\n\n**在活动中调用碎片：**\n\n```kotlin\nval fragment=supportFragmentManager.findFragmentById(R.id.leftFrag) as LeftFragment\n```\n\n**在碎片中调用活动：**\n\n```kotlin\nif(activity!=null){\n    val mainActivity = activity as MainActivity\n}\n```\n\n**不同的碎片之间通信：**\n\n1.在一个碎片中得到与之关联的活动\n\n2.然后在这个Activity中去获取另一个Fragment实例\n\n------\n\n# Fragment的生命周期\n\n### fragment的状态\n\n（1）运行状态：\n\n当一个碎片是可见的，并且它所关联的活动正处于运行状态时，该碎片也处于运行状态\n\n（2）暂停状态：\n\n当一个活动进入暂停状态时(由于另一个未占满屏幕的活动被添加到了栈顶)，与它相关联的可见碎片就会进入到暂停状态。\n\n（3）停止状态：\n\n当一个活动进入到停止状态时，与它相关联的碎片就会进入到停止状态，或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前使用addToBackStack()方法，这时的碎片也会进入到停止状态。总的来说，进入到停止状态的碎片对用户来说完全不可见，有可能被系统回收。\n\n（4）销毁状态：\n\n碎片总是依附于活动而存在，因此当活动被销毁时，与它相关联的碎片就会进入到销毁状态。或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前没有使用addToBackStack()方法，这时碎片也会进入到销毁状态。\n\n### fragment的回调方法\n\n- onAttach().当碎片和活动建立起关联的时候调用\n\n- onCreateView().为碎片加载布局时调用\n\n- onActivityCreated().确保与碎片相关联的活动一定已经创建完毕时使用\n\n- onDestroyView().当与碎片相关联的视图被移除的时候调用\n\n- onDetach().当碎片和活动解除关联时调用\n\n\n碎片的完整生命周期示意图：\n\n![](../img/img39.jpg)\n\n### 体验生命周期\n\n```kotlin\nclass RightFragment:Fragment() {\n    companion object{\n        const val TAG=\"RightFragment\"\n    }\n    \n    override fun onAttach(context: Context) {\n        super.onAttach(context)\n        Log.d(TAG, \"onAttach: \")\n    }\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        Log.d(TAG, \"onCreate: \")\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        Log.d(TAG, \"onCreateView: \")\n        return inflater.inflate(R.layout.right_fragment,container,false)\n            }\n\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\n        super.onActivityCreated(savedInstanceState)\n        Log.d(TAG, \"onActivityCreated: \")\n    }       \n\n    override fun onStart() {\n        super.onStart()\n        Log.d(TAG, \"onStart: \")\n    }\n\n    override fun onResume() {\n        super.onResume()\n        Log.d(TAG, \"onResume: \")\n    }   \n\n    override fun onPause() {\n        super.onPause()\n        Log.d(TAG, \"onPause: \")\n    }\n\n    override fun onStop() {\n           super.onStop()\n        Log.d(TAG, \"onStop: \")\n    }   \n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        Log.d(TAG, \"onDestroyView: \")\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        Log.d(TAG, \"onDestroy: \")\n    }\n    override fun onDetach(){\n        super.onDetach()\n        Log.d(TAG, \"onDetach: \")\n    }\n\n}\n```\n\n------\n\n# 限定符\n\n### 使用限定符\n\n- 使用限定符新建一个layout文件夹(layout-large)\n\n- 在里面新建一个活动布局\n\n- 小屏设备加载layout下布局，大屏加载layout-large下布局\n\n  ```kotlin\n  //layou-large下布局\n  <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:orientation=\"horizontal\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\">\n  <fragment\n  android:id=\"@+id/leftFrag\"\n  android:name=\"com.example.fragmenttest.LeftFragment\"\n  android:layout_width=\"0dp\"\n  android:layout_height=\"match_parent\"\n  android:layout_weight=\"1\"/>\n  <fragment\n  android:id=\"@+id/rightFrag\"\n  android:name=\"com.example.fragmenttest.RightFragment\"\n  android:layout_width=\"0dp\"\n  android:layout_height=\"match_parent\"\n  android:layout_weight=\"3\"/>\n  </LinearLayout>\n  ```\n\n  ```kotlin\n  //layout下布局\n  <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:orientation=\"horizontal\"\n      >\n  \n      <fragment\n          android:id=\"@+id/leftFrag\"\n          android:name=\"com.example.fragmenttest.LeftFragment\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"match_parent\" />\n  </LinearLayout>\n  ```\n\n**常见的限定符：**\n\n![](../img/img40.jpg)\n\n![](../img/img41.jpg)\n\n### 最小宽度限定符\n\n**实例：**layout-sw600dp\n\n**作用：**宽度大于等于600的会加载layout-sw600dp中布局，反之加载layout中布局\n\n------\n\n","source":"_posts/碎片-1.md","raw":"---\n\ntitle: 碎片(Kotlin)\ndate: 2025-05-01 14:22:24\ncategories:\n- Android(Kotlin版)\ntags:\n---\n\n# Fragment使用方式\n\n### 简单用法\n\n1.新建碎片布局\n\n2.新建碎片类继承Fragment并在碎片类中动态加载碎片布局\n\n3.将碎片引入活动布局\n\n```kotlin\n//左碎片布局\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:text=\"Button\"/>\n</LinearLayout>\n```\n\n```kotlin\nclass LeftFragment: Fragment() {\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n       return inflater.inflate(R.layout.left_fragment,container,false)\n    }\n}\n```\n\n```kotlin\n//右碎片布局\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:background=\"#00ff00\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:textSize=\"24sp\"\n        android:text=\"This is right fragment\"/>\n</LinearLayout>\n```\n\n```kotlin\nclass RightFragment:Fragment() {\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.right_fragment,container,false)\n            }\n}\n```\n\n```kotlin\n//主活动布局\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"horizontal\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <fragment\n        android:id=\"@+id/leftFrag\"\n        android:name=\"com.example.fragmenttest.LeftFragment\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\"/>\n    <fragment\n        android:id=\"@+id/rightFrag\"\n        android:name=\"com.example.fragmenttest.RightFragment\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"3\"/>\n</LinearLayout>\n```\n\n### 动态添加Fragment\n\n- 创建待添加的实例\n- 获取FragmentManager对象\n- 开启一个事务使用beginTransaction()方法开启\n- 向容器内添加或替换fragment\n- 提交事务，用commit()完成\n\n```kotlin\n//新碎片布局\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:background=\"#00ff00\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:textSize=\"24sp\"\n        android:text=\"This is another right fragment\"/>\n</LinearLayout>\n```\n\n```kotlin\n//加载新碎片布局\nclass AnotherRightFragment:Fragment() {\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.another_right_fragment,container,false)\n    }\n}\n```\n\n```kotlin\n//主活动布局\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"horizontal\"\n    >\n\n    <fragment\n        android:id=\"@+id/leftFrag\"\n        android:name=\"com.example.fragmenttest.LeftFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n    <FrameLayout\n        android:id=\"@+id/rightLayout\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\">\n        \n    </FrameLayout>\n</LinearLayout>\n```\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        val button:Button=findViewById(R.id.button)\n        button.setOnClickListener {\n            replaceFragment(AnotherRightFragment())\n        }\n        replaceFragment(RightFragment())\n    }\n\n    private fun replaceFragment(fragment: Fragment) {\n        //获取fragmentManager对象\n        val fragmentManager = supportFragmentManager\n        //开启事务\n        val transaction = fragmentManager.beginTransaction()\n        //向容器内添加碎片\n        transaction.replace(R.id.rightLayout,fragment)\n        //将事务添加到返回栈\n        transaction.addToBackStack(null)\n        //提交事务\n        transaction.commit()\n    }\n}\n```\n\n### Fragment和Activity交互\n\n**在活动中调用碎片：**\n\n```kotlin\nval fragment=supportFragmentManager.findFragmentById(R.id.leftFrag) as LeftFragment\n```\n\n**在碎片中调用活动：**\n\n```kotlin\nif(activity!=null){\n    val mainActivity = activity as MainActivity\n}\n```\n\n**不同的碎片之间通信：**\n\n1.在一个碎片中得到与之关联的活动\n\n2.然后在这个Activity中去获取另一个Fragment实例\n\n------\n\n# Fragment的生命周期\n\n### fragment的状态\n\n（1）运行状态：\n\n当一个碎片是可见的，并且它所关联的活动正处于运行状态时，该碎片也处于运行状态\n\n（2）暂停状态：\n\n当一个活动进入暂停状态时(由于另一个未占满屏幕的活动被添加到了栈顶)，与它相关联的可见碎片就会进入到暂停状态。\n\n（3）停止状态：\n\n当一个活动进入到停止状态时，与它相关联的碎片就会进入到停止状态，或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前使用addToBackStack()方法，这时的碎片也会进入到停止状态。总的来说，进入到停止状态的碎片对用户来说完全不可见，有可能被系统回收。\n\n（4）销毁状态：\n\n碎片总是依附于活动而存在，因此当活动被销毁时，与它相关联的碎片就会进入到销毁状态。或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前没有使用addToBackStack()方法，这时碎片也会进入到销毁状态。\n\n### fragment的回调方法\n\n- onAttach().当碎片和活动建立起关联的时候调用\n\n- onCreateView().为碎片加载布局时调用\n\n- onActivityCreated().确保与碎片相关联的活动一定已经创建完毕时使用\n\n- onDestroyView().当与碎片相关联的视图被移除的时候调用\n\n- onDetach().当碎片和活动解除关联时调用\n\n\n碎片的完整生命周期示意图：\n\n![](../img/img39.jpg)\n\n### 体验生命周期\n\n```kotlin\nclass RightFragment:Fragment() {\n    companion object{\n        const val TAG=\"RightFragment\"\n    }\n    \n    override fun onAttach(context: Context) {\n        super.onAttach(context)\n        Log.d(TAG, \"onAttach: \")\n    }\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        Log.d(TAG, \"onCreate: \")\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        Log.d(TAG, \"onCreateView: \")\n        return inflater.inflate(R.layout.right_fragment,container,false)\n            }\n\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\n        super.onActivityCreated(savedInstanceState)\n        Log.d(TAG, \"onActivityCreated: \")\n    }       \n\n    override fun onStart() {\n        super.onStart()\n        Log.d(TAG, \"onStart: \")\n    }\n\n    override fun onResume() {\n        super.onResume()\n        Log.d(TAG, \"onResume: \")\n    }   \n\n    override fun onPause() {\n        super.onPause()\n        Log.d(TAG, \"onPause: \")\n    }\n\n    override fun onStop() {\n           super.onStop()\n        Log.d(TAG, \"onStop: \")\n    }   \n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        Log.d(TAG, \"onDestroyView: \")\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        Log.d(TAG, \"onDestroy: \")\n    }\n    override fun onDetach(){\n        super.onDetach()\n        Log.d(TAG, \"onDetach: \")\n    }\n\n}\n```\n\n------\n\n# 限定符\n\n### 使用限定符\n\n- 使用限定符新建一个layout文件夹(layout-large)\n\n- 在里面新建一个活动布局\n\n- 小屏设备加载layout下布局，大屏加载layout-large下布局\n\n  ```kotlin\n  //layou-large下布局\n  <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:orientation=\"horizontal\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\">\n  <fragment\n  android:id=\"@+id/leftFrag\"\n  android:name=\"com.example.fragmenttest.LeftFragment\"\n  android:layout_width=\"0dp\"\n  android:layout_height=\"match_parent\"\n  android:layout_weight=\"1\"/>\n  <fragment\n  android:id=\"@+id/rightFrag\"\n  android:name=\"com.example.fragmenttest.RightFragment\"\n  android:layout_width=\"0dp\"\n  android:layout_height=\"match_parent\"\n  android:layout_weight=\"3\"/>\n  </LinearLayout>\n  ```\n\n  ```kotlin\n  //layout下布局\n  <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:orientation=\"horizontal\"\n      >\n  \n      <fragment\n          android:id=\"@+id/leftFrag\"\n          android:name=\"com.example.fragmenttest.LeftFragment\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"match_parent\" />\n  </LinearLayout>\n  ```\n\n**常见的限定符：**\n\n![](../img/img40.jpg)\n\n![](../img/img41.jpg)\n\n### 最小宽度限定符\n\n**实例：**layout-sw600dp\n\n**作用：**宽度大于等于600的会加载layout-sw600dp中布局，反之加载layout中布局\n\n------\n\n","slug":"碎片-1","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcr002ys4s7g9x2bwts","content":"<h1 id=\"Fragment使用方式\"><a href=\"#Fragment使用方式\" class=\"headerlink\" title=\"Fragment使用方式\"></a>Fragment使用方式</h1><h3 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h3><p>1.新建碎片布局</p>\n<p>2.新建碎片类继承Fragment并在碎片类中动态加载碎片布局</p>\n<p>3.将碎片引入活动布局</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//左碎片布局</span></span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/button&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_horizontal&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Button&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LeftFragment</span>: <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        inflater: <span class=\"type\">LayoutInflater</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span>: View? &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> inflater.inflate(R.layout.left_fragment,container,<span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//右碎片布局</span></span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;#00ff00&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_horizontal&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;24sp&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;This is right fragment&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RightFragment</span>:<span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        inflater: <span class=\"type\">LayoutInflater</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.right_fragment,container,<span class=\"literal\">false</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主活动布局</span></span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;fragment</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/leftFrag&quot;</span></span><br><span class=\"line\">        android:name=<span class=\"string\">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_weight=<span class=\"string\">&quot;1&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;fragment</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/rightFrag&quot;</span></span><br><span class=\"line\">        android:name=<span class=\"string\">&quot;com.example.fragmenttest.RightFragment&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_weight=<span class=\"string\">&quot;3&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态添加Fragment\"><a href=\"#动态添加Fragment\" class=\"headerlink\" title=\"动态添加Fragment\"></a>动态添加Fragment</h3><ul>\n<li>创建待添加的实例</li>\n<li>获取FragmentManager对象</li>\n<li>开启一个事务使用beginTransaction()方法开启</li>\n<li>向容器内添加或替换fragment</li>\n<li>提交事务，用commit()完成</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//新碎片布局</span></span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;#00ff00&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_horizontal&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;24sp&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;This is another right fragment&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加载新碎片布局</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AnotherRightFragment</span>:<span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        inflater: <span class=\"type\">LayoutInflater</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.another_right_fragment,container,<span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主活动布局</span></span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;fragment</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/leftFrag&quot;</span></span><br><span class=\"line\">        android:name=<span class=\"string\">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;FrameLayout</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/rightLayout&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_weight=<span class=\"string\">&quot;1&quot;</span>&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &lt;/FrameLayout&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding: ActivityMainBinding</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> button:Button=findViewById(R.id.button)</span><br><span class=\"line\">        button.setOnClickListener &#123;</span><br><span class=\"line\">            replaceFragment(AnotherRightFragment())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        replaceFragment(RightFragment())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">replaceFragment</span><span class=\"params\">(fragment: <span class=\"type\">Fragment</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取fragmentManager对象</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> fragmentManager = supportFragmentManager</span><br><span class=\"line\">        <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> transaction = fragmentManager.beginTransaction()</span><br><span class=\"line\">        <span class=\"comment\">//向容器内添加碎片</span></span><br><span class=\"line\">        transaction.replace(R.id.rightLayout,fragment)</span><br><span class=\"line\">        <span class=\"comment\">//将事务添加到返回栈</span></span><br><span class=\"line\">        transaction.addToBackStack(<span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">//提交事务</span></span><br><span class=\"line\">        transaction.commit()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fragment和Activity交互\"><a href=\"#Fragment和Activity交互\" class=\"headerlink\" title=\"Fragment和Activity交互\"></a>Fragment和Activity交互</h3><p><strong>在活动中调用碎片：</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> fragment=supportFragmentManager.findFragmentById(R.id.leftFrag) <span class=\"keyword\">as</span> LeftFragment</span><br></pre></td></tr></table></figure>\n\n<p><strong>在碎片中调用活动：</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(activity!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> mainActivity = activity <span class=\"keyword\">as</span> MainActivity</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不同的碎片之间通信：</strong></p>\n<p>1.在一个碎片中得到与之关联的活动</p>\n<p>2.然后在这个Activity中去获取另一个Fragment实例</p>\n<hr>\n<h1 id=\"Fragment的生命周期\"><a href=\"#Fragment的生命周期\" class=\"headerlink\" title=\"Fragment的生命周期\"></a>Fragment的生命周期</h1><h3 id=\"fragment的状态\"><a href=\"#fragment的状态\" class=\"headerlink\" title=\"fragment的状态\"></a>fragment的状态</h3><p>（1）运行状态：</p>\n<p>当一个碎片是可见的，并且它所关联的活动正处于运行状态时，该碎片也处于运行状态</p>\n<p>（2）暂停状态：</p>\n<p>当一个活动进入暂停状态时(由于另一个未占满屏幕的活动被添加到了栈顶)，与它相关联的可见碎片就会进入到暂停状态。</p>\n<p>（3）停止状态：</p>\n<p>当一个活动进入到停止状态时，与它相关联的碎片就会进入到停止状态，或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前使用addToBackStack()方法，这时的碎片也会进入到停止状态。总的来说，进入到停止状态的碎片对用户来说完全不可见，有可能被系统回收。</p>\n<p>（4）销毁状态：</p>\n<p>碎片总是依附于活动而存在，因此当活动被销毁时，与它相关联的碎片就会进入到销毁状态。或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前没有使用addToBackStack()方法，这时碎片也会进入到销毁状态。</p>\n<h3 id=\"fragment的回调方法\"><a href=\"#fragment的回调方法\" class=\"headerlink\" title=\"fragment的回调方法\"></a>fragment的回调方法</h3><ul>\n<li><p>onAttach().当碎片和活动建立起关联的时候调用</p>\n</li>\n<li><p>onCreateView().为碎片加载布局时调用</p>\n</li>\n<li><p>onActivityCreated().确保与碎片相关联的活动一定已经创建完毕时使用</p>\n</li>\n<li><p>onDestroyView().当与碎片相关联的视图被移除的时候调用</p>\n</li>\n<li><p>onDetach().当碎片和活动解除关联时调用</p>\n</li>\n</ul>\n<p>碎片的完整生命周期示意图：</p>\n<p><img src=\"/../img/img39.jpg\"></p>\n<h3 id=\"体验生命周期\"><a href=\"#体验生命周期\" class=\"headerlink\" title=\"体验生命周期\"></a>体验生命周期</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RightFragment</span>:<span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> TAG=<span class=\"string\">&quot;RightFragment&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onAttach</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onAttach(context)</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onAttach: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onCreate: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        inflater: <span class=\"type\">LayoutInflater</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onCreateView: &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.right_fragment,container,<span class=\"literal\">false</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState)</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onActivityCreated: &quot;</span>)</span><br><span class=\"line\">    &#125;       </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStart</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStart()</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onStart: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResume</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume()</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onResume: &quot;</span>)</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onPause</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause()</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onPause: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStop</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">super</span>.onStop()</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onStop: &quot;</span>)</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroyView()</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onDestroyView: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onDestroy: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDetach</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDetach()</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onDetach: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"限定符\"><a href=\"#限定符\" class=\"headerlink\" title=\"限定符\"></a>限定符</h1><h3 id=\"使用限定符\"><a href=\"#使用限定符\" class=\"headerlink\" title=\"使用限定符\"></a>使用限定符</h3><ul>\n<li><p>使用限定符新建一个layout文件夹(layout-large)</p>\n</li>\n<li><p>在里面新建一个活动布局</p>\n</li>\n<li><p>小屏设备加载layout下布局，大屏加载layout-large下布局</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//layou-large下布局</span></span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">&lt;fragment</span><br><span class=\"line\">android:id=<span class=\"string\">&quot;@+id/leftFrag&quot;</span></span><br><span class=\"line\">android:name=<span class=\"string\">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class=\"line\">android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">android:layout_weight=<span class=\"string\">&quot;1&quot;</span>/&gt;</span><br><span class=\"line\">&lt;fragment</span><br><span class=\"line\">android:id=<span class=\"string\">&quot;@+id/rightFrag&quot;</span></span><br><span class=\"line\">android:name=<span class=\"string\">&quot;com.example.fragmenttest.RightFragment&quot;</span></span><br><span class=\"line\">android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">android:layout_weight=<span class=\"string\">&quot;3&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//layout下布局</span></span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;fragment</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/leftFrag&quot;</span></span><br><span class=\"line\">        android:name=<span class=\"string\">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>常见的限定符：</strong></p>\n<p><img src=\"/../img/img40.jpg\"></p>\n<p><img src=\"/../img/img41.jpg\"></p>\n<h3 id=\"最小宽度限定符\"><a href=\"#最小宽度限定符\" class=\"headerlink\" title=\"最小宽度限定符\"></a>最小宽度限定符</h3><p>**实例：**layout-sw600dp</p>\n<p>**作用：**宽度大于等于600的会加载layout-sw600dp中布局，反之加载layout中布局</p>\n<hr>\n","excerpt":"Fragment使用方式\n简单用法\n1.新建碎片布局\n\n2.新建碎片类继承Fragment并在碎片类中动态加载碎片布局\n\n3.将碎片引入活动布局\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n//左碎片布局\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">","more":"<h1 id=\"Fragment使用方式\"><a href=\"#Fragment使用方式\" class=\"headerlink\" title=\"Fragment使用方式\"></a>Fragment使用方式</h1><h3 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h3><p>1.新建碎片布局</p>\n<p>2.新建碎片类继承Fragment并在碎片类中动态加载碎片布局</p>\n<p>3.将碎片引入活动布局</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//左碎片布局</span></span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/button&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_horizontal&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Button&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LeftFragment</span>: <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        inflater: <span class=\"type\">LayoutInflater</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span>: View? &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> inflater.inflate(R.layout.left_fragment,container,<span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//右碎片布局</span></span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;#00ff00&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_horizontal&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;24sp&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;This is right fragment&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RightFragment</span>:<span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        inflater: <span class=\"type\">LayoutInflater</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.right_fragment,container,<span class=\"literal\">false</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主活动布局</span></span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;fragment</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/leftFrag&quot;</span></span><br><span class=\"line\">        android:name=<span class=\"string\">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_weight=<span class=\"string\">&quot;1&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;fragment</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/rightFrag&quot;</span></span><br><span class=\"line\">        android:name=<span class=\"string\">&quot;com.example.fragmenttest.RightFragment&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_weight=<span class=\"string\">&quot;3&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态添加Fragment\"><a href=\"#动态添加Fragment\" class=\"headerlink\" title=\"动态添加Fragment\"></a>动态添加Fragment</h3><ul>\n<li>创建待添加的实例</li>\n<li>获取FragmentManager对象</li>\n<li>开启一个事务使用beginTransaction()方法开启</li>\n<li>向容器内添加或替换fragment</li>\n<li>提交事务，用commit()完成</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//新碎片布局</span></span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;#00ff00&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_horizontal&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;24sp&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;This is another right fragment&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加载新碎片布局</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AnotherRightFragment</span>:<span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        inflater: <span class=\"type\">LayoutInflater</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.another_right_fragment,container,<span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主活动布局</span></span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;fragment</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/leftFrag&quot;</span></span><br><span class=\"line\">        android:name=<span class=\"string\">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;FrameLayout</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/rightLayout&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_weight=<span class=\"string\">&quot;1&quot;</span>&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &lt;/FrameLayout&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding: ActivityMainBinding</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> button:Button=findViewById(R.id.button)</span><br><span class=\"line\">        button.setOnClickListener &#123;</span><br><span class=\"line\">            replaceFragment(AnotherRightFragment())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        replaceFragment(RightFragment())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">replaceFragment</span><span class=\"params\">(fragment: <span class=\"type\">Fragment</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取fragmentManager对象</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> fragmentManager = supportFragmentManager</span><br><span class=\"line\">        <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> transaction = fragmentManager.beginTransaction()</span><br><span class=\"line\">        <span class=\"comment\">//向容器内添加碎片</span></span><br><span class=\"line\">        transaction.replace(R.id.rightLayout,fragment)</span><br><span class=\"line\">        <span class=\"comment\">//将事务添加到返回栈</span></span><br><span class=\"line\">        transaction.addToBackStack(<span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">//提交事务</span></span><br><span class=\"line\">        transaction.commit()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fragment和Activity交互\"><a href=\"#Fragment和Activity交互\" class=\"headerlink\" title=\"Fragment和Activity交互\"></a>Fragment和Activity交互</h3><p><strong>在活动中调用碎片：</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> fragment=supportFragmentManager.findFragmentById(R.id.leftFrag) <span class=\"keyword\">as</span> LeftFragment</span><br></pre></td></tr></table></figure>\n\n<p><strong>在碎片中调用活动：</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(activity!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> mainActivity = activity <span class=\"keyword\">as</span> MainActivity</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不同的碎片之间通信：</strong></p>\n<p>1.在一个碎片中得到与之关联的活动</p>\n<p>2.然后在这个Activity中去获取另一个Fragment实例</p>\n<hr>\n<h1 id=\"Fragment的生命周期\"><a href=\"#Fragment的生命周期\" class=\"headerlink\" title=\"Fragment的生命周期\"></a>Fragment的生命周期</h1><h3 id=\"fragment的状态\"><a href=\"#fragment的状态\" class=\"headerlink\" title=\"fragment的状态\"></a>fragment的状态</h3><p>（1）运行状态：</p>\n<p>当一个碎片是可见的，并且它所关联的活动正处于运行状态时，该碎片也处于运行状态</p>\n<p>（2）暂停状态：</p>\n<p>当一个活动进入暂停状态时(由于另一个未占满屏幕的活动被添加到了栈顶)，与它相关联的可见碎片就会进入到暂停状态。</p>\n<p>（3）停止状态：</p>\n<p>当一个活动进入到停止状态时，与它相关联的碎片就会进入到停止状态，或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前使用addToBackStack()方法，这时的碎片也会进入到停止状态。总的来说，进入到停止状态的碎片对用户来说完全不可见，有可能被系统回收。</p>\n<p>（4）销毁状态：</p>\n<p>碎片总是依附于活动而存在，因此当活动被销毁时，与它相关联的碎片就会进入到销毁状态。或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前没有使用addToBackStack()方法，这时碎片也会进入到销毁状态。</p>\n<h3 id=\"fragment的回调方法\"><a href=\"#fragment的回调方法\" class=\"headerlink\" title=\"fragment的回调方法\"></a>fragment的回调方法</h3><ul>\n<li><p>onAttach().当碎片和活动建立起关联的时候调用</p>\n</li>\n<li><p>onCreateView().为碎片加载布局时调用</p>\n</li>\n<li><p>onActivityCreated().确保与碎片相关联的活动一定已经创建完毕时使用</p>\n</li>\n<li><p>onDestroyView().当与碎片相关联的视图被移除的时候调用</p>\n</li>\n<li><p>onDetach().当碎片和活动解除关联时调用</p>\n</li>\n</ul>\n<p>碎片的完整生命周期示意图：</p>\n<p><img src=\"/../img/img39.jpg\"></p>\n<h3 id=\"体验生命周期\"><a href=\"#体验生命周期\" class=\"headerlink\" title=\"体验生命周期\"></a>体验生命周期</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RightFragment</span>:<span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> TAG=<span class=\"string\">&quot;RightFragment&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onAttach</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onAttach(context)</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onAttach: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onCreate: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        inflater: <span class=\"type\">LayoutInflater</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onCreateView: &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.right_fragment,container,<span class=\"literal\">false</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState)</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onActivityCreated: &quot;</span>)</span><br><span class=\"line\">    &#125;       </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStart</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStart()</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onStart: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResume</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume()</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onResume: &quot;</span>)</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onPause</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause()</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onPause: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStop</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">super</span>.onStop()</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onStop: &quot;</span>)</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroyView()</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onDestroyView: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onDestroy: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDetach</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDetach()</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onDetach: &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"限定符\"><a href=\"#限定符\" class=\"headerlink\" title=\"限定符\"></a>限定符</h1><h3 id=\"使用限定符\"><a href=\"#使用限定符\" class=\"headerlink\" title=\"使用限定符\"></a>使用限定符</h3><ul>\n<li><p>使用限定符新建一个layout文件夹(layout-large)</p>\n</li>\n<li><p>在里面新建一个活动布局</p>\n</li>\n<li><p>小屏设备加载layout下布局，大屏加载layout-large下布局</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//layou-large下布局</span></span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">&lt;fragment</span><br><span class=\"line\">android:id=<span class=\"string\">&quot;@+id/leftFrag&quot;</span></span><br><span class=\"line\">android:name=<span class=\"string\">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class=\"line\">android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">android:layout_weight=<span class=\"string\">&quot;1&quot;</span>/&gt;</span><br><span class=\"line\">&lt;fragment</span><br><span class=\"line\">android:id=<span class=\"string\">&quot;@+id/rightFrag&quot;</span></span><br><span class=\"line\">android:name=<span class=\"string\">&quot;com.example.fragmenttest.RightFragment&quot;</span></span><br><span class=\"line\">android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">android:layout_weight=<span class=\"string\">&quot;3&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//layout下布局</span></span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;fragment</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/leftFrag&quot;</span></span><br><span class=\"line\">        android:name=<span class=\"string\">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>常见的限定符：</strong></p>\n<p><img src=\"/../img/img40.jpg\"></p>\n<p><img src=\"/../img/img41.jpg\"></p>\n<h3 id=\"最小宽度限定符\"><a href=\"#最小宽度限定符\" class=\"headerlink\" title=\"最小宽度限定符\"></a>最小宽度限定符</h3><p>**实例：**layout-sw600dp</p>\n<p>**作用：**宽度大于等于600的会加载layout-sw600dp中布局，反之加载layout中布局</p>\n<hr>\n"},{"title":"碎片(Java)","date":"2025-02-26T13:53:56.000Z","_content":"\n\n\n# 碎片是什么\n\n碎片是一种可以嵌入在活动当中的UI片段，它能让程序更加合理充分地利用大屏幕的空间，因而在平板上应用广泛。\n\n------\n\n# 碎片的使用方式\n\n### 碎片的简单用法\n\n新建一个左侧碎片布局left_fragment.xml:\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:text=\"Button\"/>\n</LinearLayout>\n```\n\n新建一个右侧碎片布局right_fragment.xml:\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:background=\"#00ff00\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:textSize=\"20sp\"\n        android:text=\"This is right fragment\"/>\n</LinearLayout>\n```\n\n新建一个LeftFragment类继承自Fragment(**通过LayoutInflater的inflate()方法将定义的碎片布局动态加载进去**):\n\n```java\npublic class LeftFragment extends Fragment {\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view=inflater.inflate(R.layout.left_fragment,container,false);\n        return view;\n    }\n}\n\n```\n\n同样的方法新建一个RightFragment类：\n\n```java\npublic class RightFragment extends Fragment {\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view=inflater.inflate(R.layout.right_fragment,container,false);\n        return view;\n    }\n}\n\n```\n\n接下来修改activity_main布局中的代码：\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"horizontal\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    >\n   <fragment\n       android:id=\"@+id/left_fragment\"\n       android:name=\"com.example.fragmenttest.LeftFragment\"\n       android:layout_width=\"0dp\"\n       android:layout_height=\"match_parent\"\n       android:layout_weight=\"1\"/>\n   <fragment\n       android:id=\"@+id/right_fragment\"\n       android:name=\"com.example.fragmenttest.RightFragment\"\n       android:layout_width=\"0dp\"\n       android:layout_height=\"match_parent\" \n       android:layout_weight=\"1\"/>\n</LinearLayout>\n```\n\n### 动态添加碎片\n\n(1)创建待添加的碎片实例(another_right_fragment.xml)\n\n创建布局以及加载实例\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:background=\"#ffff00\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:textSize=\"20sp\"\n        android:text=\"This is another right fragment\"/>\n</LinearLayout>\n```\n\n```java\npublic class AnotherRightFragment extends Fragment {\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view=inflater.inflate(R.layout.another_right_fragment,container,false);\n        return view;\n    }\n}\n\n```\n\n修改主活动布局文件：\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"horizontal\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    >\n   <fragment\n       android:id=\"@+id/left_fragment\"\n       android:name=\"com.example.fragmenttest.LeftFragment\"\n       android:layout_width=\"0dp\"\n       android:layout_height=\"match_parent\"\n       android:layout_weight=\"1\"/>\n   <FrameLayout\n       android:id=\"@+id/right_layout\"\n       android:layout_width=\"0dp\"\n       android:layout_height=\"match_parent\"\n       android:layout_weight=\"1\">\n     </FrameLayout>\n</LinearLayout>\n```\n\n(2)获取FragmentManager，在活动中可以直接通过调用getSupportFragmentManager()方法得到\n\n(3)开启一个事务，通过调用beginTransaction()方法开启\n\n(4)向容器内添加或替换碎片，一般使用replace()方法实现，需要传入容器的id和待添加的碎片实例\n\n(5)提交事务，调用commit()方法来完成\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n       Button button=(Button) findViewById(R.id.button);\n        button.setOnClickListener(new View.OnClickListener() {\n          @Override\n            public void onClick(View view) {\n                if(view.getId()==R.id.button){\n                    replaceFragment(new AnotherRightFragment());\n                }\n            }\n        });\n      replaceFragment(new RightFragment());\n\n    }\n   private void replaceFragment(Fragment fragement){\n        FragmentManager fragmentManager=getSupportFragmentManager();\n        FragmentTransaction transaction=fragmentManager.beginTransaction();\n        transaction.replace(R.id.right_layout,fragement);\n        transaction.commit();\n    }\n}\n```\n\n### 在碎片中模拟返回栈\n\n利用addToBackStack()方法可以将一个事务添加到返回栈中\n\n```java\nprivate void replaceFragment(Fragment fragement){\n        FragmentManager fragmentManager=getSupportFragmentManager();\n        FragmentTransaction transaction=fragmentManager.beginTransaction();\n        transaction.replace(R.id.right_layout,fragement);\n        transaction.addToBackStack(null);\n        transaction.commit();\n}\n```\n\n### 碎片与活动之间进行通信\n\n调用FragmentManager的findFragmentById()方法在活动中得到相应碎片的实例，然后就能轻松调用碎片里的方法\n\n```java\nRightFragment rightFragment=(RightFragment) getFragmentManager().findFragmentById(R.id.right_fragment);\n```\n\n通过getActivity可以在碎片中调用活动中的方法\n\n```java\nManinActivity activity=(ManinActivity) getActivity(); \n```\n\n------\n\n\n\n# 碎片的生命周期\n\n### 碎片的状态\n\n（1）运行状态：\n\n当一个碎片是可见的，并且它所关联的活动正处于运行状态时，该碎片也处于运行状态\n\n（2）暂停状态：\n\n当一个活动进入暂停状态时(由于另一个未占满屏幕的活动被添加到了栈顶)，与它相关联的可见碎片就会进入到暂停状态。\n\n（3）停止状态：\n\n当一个活动进入到停止状态时，与它相关联的碎片就会进入到停止状态，或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前使用addToBackStack()方法，这时的碎片也会进入到停止状态。总的来说，进入到停止状态的碎片对用户来说完全不可见，有可能被系统回收。\n\n（4）销毁状态：\n\n碎片总是依附于活动而存在，因此当活动被销毁时，与它相关联的碎片就会进入到销毁状态。或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前没有使用addToBackStack()方法，这时碎片也会进入到销毁状态。\n\n### 碎片的回调方法\n\nonAttach().当碎片和活动建立起关联的时候调用\n\nonCreateView().为碎片加载布局时调用\n\nonActivityCreated().确保与碎片相关联的活动一定已经创建完毕时使用\n\nonDestroyView().当与碎片相关联的视图被移除的时候调用\n\nonDetach().当碎片和活动解除关联时调用\n\n碎片的完整生命周期示意图：\n\n![](../img/img39.jpg)\n\n### 体验碎片的生命周期\n\n```java\npublic class RightFragment extends Fragment {\n    public static final String TAG=\"RightFragment\";\n\n    @Override\n    public void onAttach(@NonNull Context context) {\n        super.onAttach(context);\n        Log.d(TAG, \"onAttach\");\n    }\n\n    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Log.d(TAG, \"onCreate\");\n    }\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        Log.d(TAG, \"onCreateView\");\n        View view=inflater.inflate(R.layout.right_fragment,container,false);\n        return view;\n    }\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        Log.d(TAG, \"onActivityCreated\");\n    }\n\n    @Override\n    public void onStart() {\n        super.onStart();\n        Log.d(TAG, \"onStart\");\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        Log.d(TAG, \"onResume\");\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        Log.d(TAG, \"onPause\");\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        Log.d(TAG, \"onStop\");\n    }\n\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        Log.d(TAG, \"onDestroyView\");\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.d(TAG, \"onDestroy\");\n    }\n\n    @Override\n    public void onDetach() {\n        super.onDetach();\n        Log.d(TAG, \"onDetach\");\n    }\n}\n```\n\n------\n\n\n\n# 加载动态布局的技巧\n\n### 使用限定符\n\n新建一个layout-large文件夹并在里面添加activity_main布局，layout中布局是单页模式，layout-large中布局是双页模式。其中large便是限定符，那些屏幕大的会自动识别并使用layout-large布局,屏幕小的则使用layout布局\n\n### 常见限定符如下图所示\n\n![](../img/img40.jpg)\n\n\n\n![](../img/img41.jpg)\n\n### 使用最小宽度限定符\n\n想更加灵活地为不同设备加载布局，这时就可以用到最小宽度限定符，这允许我们对屏幕宽度指定一个最小值，以这个值为临界，比这个大的加载一个布局，比这个小的加载另一个布局。\n\n例子：\n\n在res下新建layout-sw600dp文件夹，宽度大于600dp的加载layout-sw600dp上的布局，宽度小于600dp的加载layout上的布局\n\n------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/碎片.md","raw":"---\ntitle: 碎片(Java)\ndate: 2025-02-26 21:53:56\ncategories:\n- Android(Java版)\ntags:\n---\n\n\n\n# 碎片是什么\n\n碎片是一种可以嵌入在活动当中的UI片段，它能让程序更加合理充分地利用大屏幕的空间，因而在平板上应用广泛。\n\n------\n\n# 碎片的使用方式\n\n### 碎片的简单用法\n\n新建一个左侧碎片布局left_fragment.xml:\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:text=\"Button\"/>\n</LinearLayout>\n```\n\n新建一个右侧碎片布局right_fragment.xml:\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:background=\"#00ff00\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:textSize=\"20sp\"\n        android:text=\"This is right fragment\"/>\n</LinearLayout>\n```\n\n新建一个LeftFragment类继承自Fragment(**通过LayoutInflater的inflate()方法将定义的碎片布局动态加载进去**):\n\n```java\npublic class LeftFragment extends Fragment {\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view=inflater.inflate(R.layout.left_fragment,container,false);\n        return view;\n    }\n}\n\n```\n\n同样的方法新建一个RightFragment类：\n\n```java\npublic class RightFragment extends Fragment {\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view=inflater.inflate(R.layout.right_fragment,container,false);\n        return view;\n    }\n}\n\n```\n\n接下来修改activity_main布局中的代码：\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"horizontal\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    >\n   <fragment\n       android:id=\"@+id/left_fragment\"\n       android:name=\"com.example.fragmenttest.LeftFragment\"\n       android:layout_width=\"0dp\"\n       android:layout_height=\"match_parent\"\n       android:layout_weight=\"1\"/>\n   <fragment\n       android:id=\"@+id/right_fragment\"\n       android:name=\"com.example.fragmenttest.RightFragment\"\n       android:layout_width=\"0dp\"\n       android:layout_height=\"match_parent\" \n       android:layout_weight=\"1\"/>\n</LinearLayout>\n```\n\n### 动态添加碎片\n\n(1)创建待添加的碎片实例(another_right_fragment.xml)\n\n创建布局以及加载实例\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:background=\"#ffff00\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:textSize=\"20sp\"\n        android:text=\"This is another right fragment\"/>\n</LinearLayout>\n```\n\n```java\npublic class AnotherRightFragment extends Fragment {\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view=inflater.inflate(R.layout.another_right_fragment,container,false);\n        return view;\n    }\n}\n\n```\n\n修改主活动布局文件：\n\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"horizontal\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    >\n   <fragment\n       android:id=\"@+id/left_fragment\"\n       android:name=\"com.example.fragmenttest.LeftFragment\"\n       android:layout_width=\"0dp\"\n       android:layout_height=\"match_parent\"\n       android:layout_weight=\"1\"/>\n   <FrameLayout\n       android:id=\"@+id/right_layout\"\n       android:layout_width=\"0dp\"\n       android:layout_height=\"match_parent\"\n       android:layout_weight=\"1\">\n     </FrameLayout>\n</LinearLayout>\n```\n\n(2)获取FragmentManager，在活动中可以直接通过调用getSupportFragmentManager()方法得到\n\n(3)开启一个事务，通过调用beginTransaction()方法开启\n\n(4)向容器内添加或替换碎片，一般使用replace()方法实现，需要传入容器的id和待添加的碎片实例\n\n(5)提交事务，调用commit()方法来完成\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n       Button button=(Button) findViewById(R.id.button);\n        button.setOnClickListener(new View.OnClickListener() {\n          @Override\n            public void onClick(View view) {\n                if(view.getId()==R.id.button){\n                    replaceFragment(new AnotherRightFragment());\n                }\n            }\n        });\n      replaceFragment(new RightFragment());\n\n    }\n   private void replaceFragment(Fragment fragement){\n        FragmentManager fragmentManager=getSupportFragmentManager();\n        FragmentTransaction transaction=fragmentManager.beginTransaction();\n        transaction.replace(R.id.right_layout,fragement);\n        transaction.commit();\n    }\n}\n```\n\n### 在碎片中模拟返回栈\n\n利用addToBackStack()方法可以将一个事务添加到返回栈中\n\n```java\nprivate void replaceFragment(Fragment fragement){\n        FragmentManager fragmentManager=getSupportFragmentManager();\n        FragmentTransaction transaction=fragmentManager.beginTransaction();\n        transaction.replace(R.id.right_layout,fragement);\n        transaction.addToBackStack(null);\n        transaction.commit();\n}\n```\n\n### 碎片与活动之间进行通信\n\n调用FragmentManager的findFragmentById()方法在活动中得到相应碎片的实例，然后就能轻松调用碎片里的方法\n\n```java\nRightFragment rightFragment=(RightFragment) getFragmentManager().findFragmentById(R.id.right_fragment);\n```\n\n通过getActivity可以在碎片中调用活动中的方法\n\n```java\nManinActivity activity=(ManinActivity) getActivity(); \n```\n\n------\n\n\n\n# 碎片的生命周期\n\n### 碎片的状态\n\n（1）运行状态：\n\n当一个碎片是可见的，并且它所关联的活动正处于运行状态时，该碎片也处于运行状态\n\n（2）暂停状态：\n\n当一个活动进入暂停状态时(由于另一个未占满屏幕的活动被添加到了栈顶)，与它相关联的可见碎片就会进入到暂停状态。\n\n（3）停止状态：\n\n当一个活动进入到停止状态时，与它相关联的碎片就会进入到停止状态，或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前使用addToBackStack()方法，这时的碎片也会进入到停止状态。总的来说，进入到停止状态的碎片对用户来说完全不可见，有可能被系统回收。\n\n（4）销毁状态：\n\n碎片总是依附于活动而存在，因此当活动被销毁时，与它相关联的碎片就会进入到销毁状态。或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前没有使用addToBackStack()方法，这时碎片也会进入到销毁状态。\n\n### 碎片的回调方法\n\nonAttach().当碎片和活动建立起关联的时候调用\n\nonCreateView().为碎片加载布局时调用\n\nonActivityCreated().确保与碎片相关联的活动一定已经创建完毕时使用\n\nonDestroyView().当与碎片相关联的视图被移除的时候调用\n\nonDetach().当碎片和活动解除关联时调用\n\n碎片的完整生命周期示意图：\n\n![](../img/img39.jpg)\n\n### 体验碎片的生命周期\n\n```java\npublic class RightFragment extends Fragment {\n    public static final String TAG=\"RightFragment\";\n\n    @Override\n    public void onAttach(@NonNull Context context) {\n        super.onAttach(context);\n        Log.d(TAG, \"onAttach\");\n    }\n\n    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Log.d(TAG, \"onCreate\");\n    }\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        Log.d(TAG, \"onCreateView\");\n        View view=inflater.inflate(R.layout.right_fragment,container,false);\n        return view;\n    }\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        Log.d(TAG, \"onActivityCreated\");\n    }\n\n    @Override\n    public void onStart() {\n        super.onStart();\n        Log.d(TAG, \"onStart\");\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        Log.d(TAG, \"onResume\");\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        Log.d(TAG, \"onPause\");\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        Log.d(TAG, \"onStop\");\n    }\n\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        Log.d(TAG, \"onDestroyView\");\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.d(TAG, \"onDestroy\");\n    }\n\n    @Override\n    public void onDetach() {\n        super.onDetach();\n        Log.d(TAG, \"onDetach\");\n    }\n}\n```\n\n------\n\n\n\n# 加载动态布局的技巧\n\n### 使用限定符\n\n新建一个layout-large文件夹并在里面添加activity_main布局，layout中布局是单页模式，layout-large中布局是双页模式。其中large便是限定符，那些屏幕大的会自动识别并使用layout-large布局,屏幕小的则使用layout布局\n\n### 常见限定符如下图所示\n\n![](../img/img40.jpg)\n\n\n\n![](../img/img41.jpg)\n\n### 使用最小宽度限定符\n\n想更加灵活地为不同设备加载布局，这时就可以用到最小宽度限定符，这允许我们对屏幕宽度指定一个最小值，以这个值为临界，比这个大的加载一个布局，比这个小的加载另一个布局。\n\n例子：\n\n在res下新建layout-sw600dp文件夹，宽度大于600dp的加载layout-sw600dp上的布局，宽度小于600dp的加载layout上的布局\n\n------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"碎片","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcs0030s4s789t8cfye","content":"<h1 id=\"碎片是什么\"><a href=\"#碎片是什么\" class=\"headerlink\" title=\"碎片是什么\"></a>碎片是什么</h1><p>碎片是一种可以嵌入在活动当中的UI片段，它能让程序更加合理充分地利用大屏幕的空间，因而在平板上应用广泛。</p>\n<hr>\n<h1 id=\"碎片的使用方式\"><a href=\"#碎片的使用方式\" class=\"headerlink\" title=\"碎片的使用方式\"></a>碎片的使用方式</h1><h3 id=\"碎片的简单用法\"><a href=\"#碎片的简单用法\" class=\"headerlink\" title=\"碎片的简单用法\"></a>碎片的简单用法</h3><p>新建一个左侧碎片布局left_fragment.xml:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/button&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_horizontal&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Button&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建一个右侧碎片布局right_fragment.xml:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;#00ff00&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_horizontal&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;20sp&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;This is right fragment&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建一个LeftFragment类继承自Fragment(<strong>通过LayoutInflater的inflate()方法将定义的碎片布局动态加载进去</strong>):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LeftFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LayoutInflater inflater, <span class=\"meta\">@Nullable</span> ViewGroup container, <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        View view=inflater.inflate(R.layout.left_fragment,container,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>同样的方法新建一个RightFragment类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RightFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LayoutInflater inflater, <span class=\"meta\">@Nullable</span> ViewGroup container, <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        View view=inflater.inflate(R.layout.right_fragment,container,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>接下来修改activity_main布局中的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">   &lt;fragment</span><br><span class=\"line\">       android:id=<span class=\"string\">&quot;@+id/left_fragment&quot;</span></span><br><span class=\"line\">       android:name=<span class=\"string\">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class=\"line\">       android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">       android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">       android:layout_weight=<span class=\"string\">&quot;1&quot;</span>/&gt;</span><br><span class=\"line\">   &lt;fragment</span><br><span class=\"line\">       android:id=<span class=\"string\">&quot;@+id/right_fragment&quot;</span></span><br><span class=\"line\">       android:name=<span class=\"string\">&quot;com.example.fragmenttest.RightFragment&quot;</span></span><br><span class=\"line\">       android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">       android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span> </span><br><span class=\"line\">       android:layout_weight=<span class=\"string\">&quot;1&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态添加碎片\"><a href=\"#动态添加碎片\" class=\"headerlink\" title=\"动态添加碎片\"></a>动态添加碎片</h3><p>(1)创建待添加的碎片实例(another_right_fragment.xml)</p>\n<p>创建布局以及加载实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;#ffff00&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_horizontal&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;20sp&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;This is another right fragment&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnotherRightFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LayoutInflater inflater, <span class=\"meta\">@Nullable</span> ViewGroup container, <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        View view=inflater.inflate(R.layout.another_right_fragment,container,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>修改主活动布局文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">   &lt;fragment</span><br><span class=\"line\">       android:id=<span class=\"string\">&quot;@+id/left_fragment&quot;</span></span><br><span class=\"line\">       android:name=<span class=\"string\">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class=\"line\">       android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">       android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">       android:layout_weight=<span class=\"string\">&quot;1&quot;</span>/&gt;</span><br><span class=\"line\">   &lt;FrameLayout</span><br><span class=\"line\">       android:id=<span class=\"string\">&quot;@+id/right_layout&quot;</span></span><br><span class=\"line\">       android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">       android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">       android:layout_weight=<span class=\"string\">&quot;1&quot;</span>&gt;</span><br><span class=\"line\">     &lt;/FrameLayout&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>(2)获取FragmentManager，在活动中可以直接通过调用getSupportFragmentManager()方法得到</p>\n<p>(3)开启一个事务，通过调用beginTransaction()方法开启</p>\n<p>(4)向容器内添加或替换碎片，一般使用replace()方法实现，需要传入容器的id和待添加的碎片实例</p>\n<p>(5)提交事务，调用commit()方法来完成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">       Button button=(Button) findViewById(R.id.button);</span><br><span class=\"line\">        button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(view.getId()==R.id.button)&#123;</span><br><span class=\"line\">                    replaceFragment(<span class=\"keyword\">new</span> <span class=\"title class_\">AnotherRightFragment</span>());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      replaceFragment(<span class=\"keyword\">new</span> <span class=\"title class_\">RightFragment</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">replaceFragment</span><span class=\"params\">(Fragment fragement)</span>&#123;</span><br><span class=\"line\">        FragmentManager fragmentManager=getSupportFragmentManager();</span><br><span class=\"line\">        FragmentTransaction transaction=fragmentManager.beginTransaction();</span><br><span class=\"line\">        transaction.replace(R.id.right_layout,fragement);</span><br><span class=\"line\">        transaction.commit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在碎片中模拟返回栈\"><a href=\"#在碎片中模拟返回栈\" class=\"headerlink\" title=\"在碎片中模拟返回栈\"></a>在碎片中模拟返回栈</h3><p>利用addToBackStack()方法可以将一个事务添加到返回栈中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">replaceFragment</span><span class=\"params\">(Fragment fragement)</span>&#123;</span><br><span class=\"line\">        FragmentManager fragmentManager=getSupportFragmentManager();</span><br><span class=\"line\">        FragmentTransaction transaction=fragmentManager.beginTransaction();</span><br><span class=\"line\">        transaction.replace(R.id.right_layout,fragement);</span><br><span class=\"line\">        transaction.addToBackStack(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        transaction.commit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"碎片与活动之间进行通信\"><a href=\"#碎片与活动之间进行通信\" class=\"headerlink\" title=\"碎片与活动之间进行通信\"></a>碎片与活动之间进行通信</h3><p>调用FragmentManager的findFragmentById()方法在活动中得到相应碎片的实例，然后就能轻松调用碎片里的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RightFragment rightFragment=(RightFragment) getFragmentManager().findFragmentById(R.id.right_fragment);</span><br></pre></td></tr></table></figure>\n\n<p>通过getActivity可以在碎片中调用活动中的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ManinActivity activity=(ManinActivity) getActivity(); </span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"碎片的生命周期\"><a href=\"#碎片的生命周期\" class=\"headerlink\" title=\"碎片的生命周期\"></a>碎片的生命周期</h1><h3 id=\"碎片的状态\"><a href=\"#碎片的状态\" class=\"headerlink\" title=\"碎片的状态\"></a>碎片的状态</h3><p>（1）运行状态：</p>\n<p>当一个碎片是可见的，并且它所关联的活动正处于运行状态时，该碎片也处于运行状态</p>\n<p>（2）暂停状态：</p>\n<p>当一个活动进入暂停状态时(由于另一个未占满屏幕的活动被添加到了栈顶)，与它相关联的可见碎片就会进入到暂停状态。</p>\n<p>（3）停止状态：</p>\n<p>当一个活动进入到停止状态时，与它相关联的碎片就会进入到停止状态，或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前使用addToBackStack()方法，这时的碎片也会进入到停止状态。总的来说，进入到停止状态的碎片对用户来说完全不可见，有可能被系统回收。</p>\n<p>（4）销毁状态：</p>\n<p>碎片总是依附于活动而存在，因此当活动被销毁时，与它相关联的碎片就会进入到销毁状态。或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前没有使用addToBackStack()方法，这时碎片也会进入到销毁状态。</p>\n<h3 id=\"碎片的回调方法\"><a href=\"#碎片的回调方法\" class=\"headerlink\" title=\"碎片的回调方法\"></a>碎片的回调方法</h3><p>onAttach().当碎片和活动建立起关联的时候调用</p>\n<p>onCreateView().为碎片加载布局时调用</p>\n<p>onActivityCreated().确保与碎片相关联的活动一定已经创建完毕时使用</p>\n<p>onDestroyView().当与碎片相关联的视图被移除的时候调用</p>\n<p>onDetach().当碎片和活动解除关联时调用</p>\n<p>碎片的完整生命周期示意图：</p>\n<p><img src=\"/../img/img39.jpg\"></p>\n<h3 id=\"体验碎片的生命周期\"><a href=\"#体验碎片的生命周期\" class=\"headerlink\" title=\"体验碎片的生命周期\"></a>体验碎片的生命周期</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RightFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=<span class=\"string\">&quot;RightFragment&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onAttach</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Context context)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onAttach(context);</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onAttach&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onCreate&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LayoutInflater inflater, <span class=\"meta\">@Nullable</span> ViewGroup container, <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onCreateView&quot;</span>);</span><br><span class=\"line\">        View view=inflater.inflate(R.layout.right_fragment,container,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onActivityCreated&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStart</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStart();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onStart&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResume</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onResume();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onResume&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPause</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onPause();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onPause&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStop();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onStop&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroyView</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroyView();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onDestroyView&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onDestroy&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDetach</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDetach();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onDetach&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"加载动态布局的技巧\"><a href=\"#加载动态布局的技巧\" class=\"headerlink\" title=\"加载动态布局的技巧\"></a>加载动态布局的技巧</h1><h3 id=\"使用限定符\"><a href=\"#使用限定符\" class=\"headerlink\" title=\"使用限定符\"></a>使用限定符</h3><p>新建一个layout-large文件夹并在里面添加activity_main布局，layout中布局是单页模式，layout-large中布局是双页模式。其中large便是限定符，那些屏幕大的会自动识别并使用layout-large布局,屏幕小的则使用layout布局</p>\n<h3 id=\"常见限定符如下图所示\"><a href=\"#常见限定符如下图所示\" class=\"headerlink\" title=\"常见限定符如下图所示\"></a>常见限定符如下图所示</h3><p><img src=\"/../img/img40.jpg\"></p>\n<p><img src=\"/../img/img41.jpg\"></p>\n<h3 id=\"使用最小宽度限定符\"><a href=\"#使用最小宽度限定符\" class=\"headerlink\" title=\"使用最小宽度限定符\"></a>使用最小宽度限定符</h3><p>想更加灵活地为不同设备加载布局，这时就可以用到最小宽度限定符，这允许我们对屏幕宽度指定一个最小值，以这个值为临界，比这个大的加载一个布局，比这个小的加载另一个布局。</p>\n<p>例子：</p>\n<p>在res下新建layout-sw600dp文件夹，宽度大于600dp的加载layout-sw600dp上的布局，宽度小于600dp的加载layout上的布局</p>\n<hr>\n","excerpt":"碎片是什么\n碎片是一种可以嵌入在活动当中的UI片段，它能让程序更加合理充分地利用大屏幕的空间，因而在平板上应用广泛。\n\n\n\n\n碎片的使用方式\n碎片的简单用法\n新建一个左侧碎片布局left_fragment.xml:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layou","more":"<h1 id=\"碎片是什么\"><a href=\"#碎片是什么\" class=\"headerlink\" title=\"碎片是什么\"></a>碎片是什么</h1><p>碎片是一种可以嵌入在活动当中的UI片段，它能让程序更加合理充分地利用大屏幕的空间，因而在平板上应用广泛。</p>\n<hr>\n<h1 id=\"碎片的使用方式\"><a href=\"#碎片的使用方式\" class=\"headerlink\" title=\"碎片的使用方式\"></a>碎片的使用方式</h1><h3 id=\"碎片的简单用法\"><a href=\"#碎片的简单用法\" class=\"headerlink\" title=\"碎片的简单用法\"></a>碎片的简单用法</h3><p>新建一个左侧碎片布局left_fragment.xml:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/button&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_horizontal&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;Button&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建一个右侧碎片布局right_fragment.xml:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;#00ff00&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_horizontal&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;20sp&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;This is right fragment&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建一个LeftFragment类继承自Fragment(<strong>通过LayoutInflater的inflate()方法将定义的碎片布局动态加载进去</strong>):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LeftFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LayoutInflater inflater, <span class=\"meta\">@Nullable</span> ViewGroup container, <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        View view=inflater.inflate(R.layout.left_fragment,container,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>同样的方法新建一个RightFragment类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RightFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LayoutInflater inflater, <span class=\"meta\">@Nullable</span> ViewGroup container, <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        View view=inflater.inflate(R.layout.right_fragment,container,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>接下来修改activity_main布局中的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">   &lt;fragment</span><br><span class=\"line\">       android:id=<span class=\"string\">&quot;@+id/left_fragment&quot;</span></span><br><span class=\"line\">       android:name=<span class=\"string\">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class=\"line\">       android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">       android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">       android:layout_weight=<span class=\"string\">&quot;1&quot;</span>/&gt;</span><br><span class=\"line\">   &lt;fragment</span><br><span class=\"line\">       android:id=<span class=\"string\">&quot;@+id/right_fragment&quot;</span></span><br><span class=\"line\">       android:name=<span class=\"string\">&quot;com.example.fragmenttest.RightFragment&quot;</span></span><br><span class=\"line\">       android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">       android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span> </span><br><span class=\"line\">       android:layout_weight=<span class=\"string\">&quot;1&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态添加碎片\"><a href=\"#动态添加碎片\" class=\"headerlink\" title=\"动态添加碎片\"></a>动态添加碎片</h3><p>(1)创建待添加的碎片实例(another_right_fragment.xml)</p>\n<p>创建布局以及加载实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;#ffff00&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_gravity=<span class=\"string\">&quot;center_horizontal&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;20sp&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;This is another right fragment&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnotherRightFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LayoutInflater inflater, <span class=\"meta\">@Nullable</span> ViewGroup container, <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        View view=inflater.inflate(R.layout.another_right_fragment,container,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>修改主活动布局文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">   &lt;fragment</span><br><span class=\"line\">       android:id=<span class=\"string\">&quot;@+id/left_fragment&quot;</span></span><br><span class=\"line\">       android:name=<span class=\"string\">&quot;com.example.fragmenttest.LeftFragment&quot;</span></span><br><span class=\"line\">       android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">       android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">       android:layout_weight=<span class=\"string\">&quot;1&quot;</span>/&gt;</span><br><span class=\"line\">   &lt;FrameLayout</span><br><span class=\"line\">       android:id=<span class=\"string\">&quot;@+id/right_layout&quot;</span></span><br><span class=\"line\">       android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">       android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">       android:layout_weight=<span class=\"string\">&quot;1&quot;</span>&gt;</span><br><span class=\"line\">     &lt;/FrameLayout&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>(2)获取FragmentManager，在活动中可以直接通过调用getSupportFragmentManager()方法得到</p>\n<p>(3)开启一个事务，通过调用beginTransaction()方法开启</p>\n<p>(4)向容器内添加或替换碎片，一般使用replace()方法实现，需要传入容器的id和待添加的碎片实例</p>\n<p>(5)提交事务，调用commit()方法来完成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">       Button button=(Button) findViewById(R.id.button);</span><br><span class=\"line\">        button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View view)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(view.getId()==R.id.button)&#123;</span><br><span class=\"line\">                    replaceFragment(<span class=\"keyword\">new</span> <span class=\"title class_\">AnotherRightFragment</span>());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      replaceFragment(<span class=\"keyword\">new</span> <span class=\"title class_\">RightFragment</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">replaceFragment</span><span class=\"params\">(Fragment fragement)</span>&#123;</span><br><span class=\"line\">        FragmentManager fragmentManager=getSupportFragmentManager();</span><br><span class=\"line\">        FragmentTransaction transaction=fragmentManager.beginTransaction();</span><br><span class=\"line\">        transaction.replace(R.id.right_layout,fragement);</span><br><span class=\"line\">        transaction.commit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在碎片中模拟返回栈\"><a href=\"#在碎片中模拟返回栈\" class=\"headerlink\" title=\"在碎片中模拟返回栈\"></a>在碎片中模拟返回栈</h3><p>利用addToBackStack()方法可以将一个事务添加到返回栈中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">replaceFragment</span><span class=\"params\">(Fragment fragement)</span>&#123;</span><br><span class=\"line\">        FragmentManager fragmentManager=getSupportFragmentManager();</span><br><span class=\"line\">        FragmentTransaction transaction=fragmentManager.beginTransaction();</span><br><span class=\"line\">        transaction.replace(R.id.right_layout,fragement);</span><br><span class=\"line\">        transaction.addToBackStack(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        transaction.commit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"碎片与活动之间进行通信\"><a href=\"#碎片与活动之间进行通信\" class=\"headerlink\" title=\"碎片与活动之间进行通信\"></a>碎片与活动之间进行通信</h3><p>调用FragmentManager的findFragmentById()方法在活动中得到相应碎片的实例，然后就能轻松调用碎片里的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RightFragment rightFragment=(RightFragment) getFragmentManager().findFragmentById(R.id.right_fragment);</span><br></pre></td></tr></table></figure>\n\n<p>通过getActivity可以在碎片中调用活动中的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ManinActivity activity=(ManinActivity) getActivity(); </span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"碎片的生命周期\"><a href=\"#碎片的生命周期\" class=\"headerlink\" title=\"碎片的生命周期\"></a>碎片的生命周期</h1><h3 id=\"碎片的状态\"><a href=\"#碎片的状态\" class=\"headerlink\" title=\"碎片的状态\"></a>碎片的状态</h3><p>（1）运行状态：</p>\n<p>当一个碎片是可见的，并且它所关联的活动正处于运行状态时，该碎片也处于运行状态</p>\n<p>（2）暂停状态：</p>\n<p>当一个活动进入暂停状态时(由于另一个未占满屏幕的活动被添加到了栈顶)，与它相关联的可见碎片就会进入到暂停状态。</p>\n<p>（3）停止状态：</p>\n<p>当一个活动进入到停止状态时，与它相关联的碎片就会进入到停止状态，或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前使用addToBackStack()方法，这时的碎片也会进入到停止状态。总的来说，进入到停止状态的碎片对用户来说完全不可见，有可能被系统回收。</p>\n<p>（4）销毁状态：</p>\n<p>碎片总是依附于活动而存在，因此当活动被销毁时，与它相关联的碎片就会进入到销毁状态。或者通过调用FragmentTransaction的remove(),replace()方法将碎片从活动中移除，但如果在事务提交之前没有使用addToBackStack()方法，这时碎片也会进入到销毁状态。</p>\n<h3 id=\"碎片的回调方法\"><a href=\"#碎片的回调方法\" class=\"headerlink\" title=\"碎片的回调方法\"></a>碎片的回调方法</h3><p>onAttach().当碎片和活动建立起关联的时候调用</p>\n<p>onCreateView().为碎片加载布局时调用</p>\n<p>onActivityCreated().确保与碎片相关联的活动一定已经创建完毕时使用</p>\n<p>onDestroyView().当与碎片相关联的视图被移除的时候调用</p>\n<p>onDetach().当碎片和活动解除关联时调用</p>\n<p>碎片的完整生命周期示意图：</p>\n<p><img src=\"/../img/img39.jpg\"></p>\n<h3 id=\"体验碎片的生命周期\"><a href=\"#体验碎片的生命周期\" class=\"headerlink\" title=\"体验碎片的生命周期\"></a>体验碎片的生命周期</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RightFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=<span class=\"string\">&quot;RightFragment&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onAttach</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Context context)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onAttach(context);</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onAttach&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onCreate&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LayoutInflater inflater, <span class=\"meta\">@Nullable</span> ViewGroup container, <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onCreateView&quot;</span>);</span><br><span class=\"line\">        View view=inflater.inflate(R.layout.right_fragment,container,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onActivityCreated&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStart</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStart();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onStart&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResume</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onResume();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onResume&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPause</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onPause();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onPause&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStop();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onStop&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroyView</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroyView();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onDestroyView&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDestroy();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onDestroy&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onDetach</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onDetach();</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;onDetach&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"加载动态布局的技巧\"><a href=\"#加载动态布局的技巧\" class=\"headerlink\" title=\"加载动态布局的技巧\"></a>加载动态布局的技巧</h1><h3 id=\"使用限定符\"><a href=\"#使用限定符\" class=\"headerlink\" title=\"使用限定符\"></a>使用限定符</h3><p>新建一个layout-large文件夹并在里面添加activity_main布局，layout中布局是单页模式，layout-large中布局是双页模式。其中large便是限定符，那些屏幕大的会自动识别并使用layout-large布局,屏幕小的则使用layout布局</p>\n<h3 id=\"常见限定符如下图所示\"><a href=\"#常见限定符如下图所示\" class=\"headerlink\" title=\"常见限定符如下图所示\"></a>常见限定符如下图所示</h3><p><img src=\"/../img/img40.jpg\"></p>\n<p><img src=\"/../img/img41.jpg\"></p>\n<h3 id=\"使用最小宽度限定符\"><a href=\"#使用最小宽度限定符\" class=\"headerlink\" title=\"使用最小宽度限定符\"></a>使用最小宽度限定符</h3><p>想更加灵活地为不同设备加载布局，这时就可以用到最小宽度限定符，这允许我们对屏幕宽度指定一个最小值，以这个值为临界，比这个大的加载一个布局，比这个小的加载另一个布局。</p>\n<p>例子：</p>\n<p>在res下新建layout-sw600dp文件夹，宽度大于600dp的加载layout-sw600dp上的布局，宽度小于600dp的加载layout上的布局</p>\n<hr>\n"},{"title":"编写好用的工具","date":"2025-06-15T18:41:33.000Z","_content":"\n### 求N个数的最大最小值\n\n使用泛型实现Comparable接口，可以适用于任意类型数字比较\n\n```kotlin\nfun <T:Comparable<T>> max(vararg nums:T):T{\n    if(nums.isEmpty()) throw RuntimeException(\"Params can not be empty\")\n    var maxNum=nums[0]\n    for(num in nums){\n        if(num>maxNum){\n            maxNum=num\n        }\n    }\n    return maxNum\n}\n```\n\n------\n\n### 简化Toast用法\n\n```kotlin\n//字符串调用\nfun String.showToast(context: Context,duration: Int=Toast.LENGTH_SHORT){\n    Toast.makeText(context,this,duration).show()\n}\n//资源id引用时调用\nfun Int.showToast(context: Context,duration: Int=Toast.LENGTH_SHORT){\n    Toast.makeText(context,this,duration).show()\n}\n```\n\n------\n\n### 简化Snackbar用法\n\n```kotlin\nfun View.showSnackbar(text:String,actionText:String?=null,duration:Int=Snackbar.LENGTH_SHORT,block:(()->Unit)?=null){\n  val snackbar=  Snackbar.make(this,text,duration)\n    if(actionText!=null&&block!=null){\n        snackbar.setAction(actionText){\n            block()\n        }\n    }\n    snackbar.show()\n}\nfun View.showSnackbar(resId:Int,actionResId:Int?=null,duration:Int=Snackbar.LENGTH_SHORT,block:(()->Unit)?=null){\n    val snackbar=  Snackbar.make(this,resId,duration)\n    if(actionResId!=null&&block!=null){\n        snackbar.setAction(actionResId){\n            block()\n        }\n    }\n    snackbar.show()\n}\n```\n\n```kotlin\n//调用\nview.showSnackbar(\"this is Snackbar\",\"Action\"){\n    //具体逻辑\n}\n```\n\n------\n\n","source":"_posts/编写好用的工具.md","raw":"---\ntitle: 编写好用的工具\ndate: 2025-06-16 02:41:33\ncategories:\n- Kotlin\ntags:\n---\n\n### 求N个数的最大最小值\n\n使用泛型实现Comparable接口，可以适用于任意类型数字比较\n\n```kotlin\nfun <T:Comparable<T>> max(vararg nums:T):T{\n    if(nums.isEmpty()) throw RuntimeException(\"Params can not be empty\")\n    var maxNum=nums[0]\n    for(num in nums){\n        if(num>maxNum){\n            maxNum=num\n        }\n    }\n    return maxNum\n}\n```\n\n------\n\n### 简化Toast用法\n\n```kotlin\n//字符串调用\nfun String.showToast(context: Context,duration: Int=Toast.LENGTH_SHORT){\n    Toast.makeText(context,this,duration).show()\n}\n//资源id引用时调用\nfun Int.showToast(context: Context,duration: Int=Toast.LENGTH_SHORT){\n    Toast.makeText(context,this,duration).show()\n}\n```\n\n------\n\n### 简化Snackbar用法\n\n```kotlin\nfun View.showSnackbar(text:String,actionText:String?=null,duration:Int=Snackbar.LENGTH_SHORT,block:(()->Unit)?=null){\n  val snackbar=  Snackbar.make(this,text,duration)\n    if(actionText!=null&&block!=null){\n        snackbar.setAction(actionText){\n            block()\n        }\n    }\n    snackbar.show()\n}\nfun View.showSnackbar(resId:Int,actionResId:Int?=null,duration:Int=Snackbar.LENGTH_SHORT,block:(()->Unit)?=null){\n    val snackbar=  Snackbar.make(this,resId,duration)\n    if(actionResId!=null&&block!=null){\n        snackbar.setAction(actionResId){\n            block()\n        }\n    }\n    snackbar.show()\n}\n```\n\n```kotlin\n//调用\nview.showSnackbar(\"this is Snackbar\",\"Action\"){\n    //具体逻辑\n}\n```\n\n------\n\n","slug":"编写好用的工具","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcs0032s4s7bc0p0f8g","content":"<h3 id=\"求N个数的最大最小值\"><a href=\"#求N个数的最大最小值\" class=\"headerlink\" title=\"求N个数的最大最小值\"></a>求N个数的最大最小值</h3><p>使用泛型实现Comparable接口，可以适用于任意类型数字比较</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T:Comparable&lt;T&gt;</span>&gt; <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">vararg</span> nums:<span class=\"type\">T</span>)</span></span>:T&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.isEmpty()) <span class=\"keyword\">throw</span> RuntimeException(<span class=\"string\">&quot;Params can not be empty&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxNum=nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(num <span class=\"keyword\">in</span> nums)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;maxNum)&#123;</span><br><span class=\"line\">            maxNum=num</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxNum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"简化Toast用法\"><a href=\"#简化Toast用法\" class=\"headerlink\" title=\"简化Toast用法\"></a>简化Toast用法</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> String.<span class=\"title\">showToast</span><span class=\"params\">(context: <span class=\"type\">Context</span>,duration: <span class=\"type\">Int</span>=Toast.LENGTH_SHORT)</span></span>&#123;</span><br><span class=\"line\">    Toast.makeText(context,<span class=\"keyword\">this</span>,duration).show()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//资源id引用时调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"built_in\">Int</span>.<span class=\"title\">showToast</span><span class=\"params\">(context: <span class=\"type\">Context</span>,duration: <span class=\"type\">Int</span>=Toast.LENGTH_SHORT)</span></span>&#123;</span><br><span class=\"line\">    Toast.makeText(context,<span class=\"keyword\">this</span>,duration).show()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"简化Snackbar用法\"><a href=\"#简化Snackbar用法\" class=\"headerlink\" title=\"简化Snackbar用法\"></a>简化Snackbar用法</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> View.<span class=\"title\">showSnackbar</span><span class=\"params\">(text:<span class=\"type\">String</span>,actionText:<span class=\"type\">String</span>?=<span class=\"literal\">null</span>,duration:<span class=\"type\">Int</span>=Snackbar.LENGTH_SHORT,block:(()-&gt;<span class=\"type\">Unit</span>)?=<span class=\"literal\">null</span>)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> snackbar=  Snackbar.make(<span class=\"keyword\">this</span>,text,duration)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(actionText!=<span class=\"literal\">null</span>&amp;&amp;block!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        snackbar.setAction(actionText)&#123;</span><br><span class=\"line\">            block()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    snackbar.show()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> View.<span class=\"title\">showSnackbar</span><span class=\"params\">(resId:<span class=\"type\">Int</span>,actionResId:<span class=\"type\">Int</span>?=<span class=\"literal\">null</span>,duration:<span class=\"type\">Int</span>=Snackbar.LENGTH_SHORT,block:(()-&gt;<span class=\"type\">Unit</span>)?=<span class=\"literal\">null</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> snackbar=  Snackbar.make(<span class=\"keyword\">this</span>,resId,duration)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(actionResId!=<span class=\"literal\">null</span>&amp;&amp;block!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        snackbar.setAction(actionResId)&#123;</span><br><span class=\"line\">            block()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    snackbar.show()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">view.showSnackbar(<span class=\"string\">&quot;this is Snackbar&quot;</span>,<span class=\"string\">&quot;Action&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//具体逻辑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"求N个数的最大最小值\n使用泛型实现Comparable接口，可以适用于任意类型数字比较\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nfun <T:Comparable<T>> max(vararg nums:T):T{\n    if(nums.isEmpty()) throw RuntimeException(\"Params can not be empty\")\n    var maxNum=nums[0]\n    for(num in nums){\n        if(num>maxNum){\n            maxNum=num\n        }\n    }\n    ret","more":"<h3 id=\"求N个数的最大最小值\"><a href=\"#求N个数的最大最小值\" class=\"headerlink\" title=\"求N个数的最大最小值\"></a>求N个数的最大最小值</h3><p>使用泛型实现Comparable接口，可以适用于任意类型数字比较</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T:Comparable&lt;T&gt;</span>&gt; <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">vararg</span> nums:<span class=\"type\">T</span>)</span></span>:T&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.isEmpty()) <span class=\"keyword\">throw</span> RuntimeException(<span class=\"string\">&quot;Params can not be empty&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxNum=nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(num <span class=\"keyword\">in</span> nums)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;maxNum)&#123;</span><br><span class=\"line\">            maxNum=num</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxNum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"简化Toast用法\"><a href=\"#简化Toast用法\" class=\"headerlink\" title=\"简化Toast用法\"></a>简化Toast用法</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> String.<span class=\"title\">showToast</span><span class=\"params\">(context: <span class=\"type\">Context</span>,duration: <span class=\"type\">Int</span>=Toast.LENGTH_SHORT)</span></span>&#123;</span><br><span class=\"line\">    Toast.makeText(context,<span class=\"keyword\">this</span>,duration).show()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//资源id引用时调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"built_in\">Int</span>.<span class=\"title\">showToast</span><span class=\"params\">(context: <span class=\"type\">Context</span>,duration: <span class=\"type\">Int</span>=Toast.LENGTH_SHORT)</span></span>&#123;</span><br><span class=\"line\">    Toast.makeText(context,<span class=\"keyword\">this</span>,duration).show()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"简化Snackbar用法\"><a href=\"#简化Snackbar用法\" class=\"headerlink\" title=\"简化Snackbar用法\"></a>简化Snackbar用法</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> View.<span class=\"title\">showSnackbar</span><span class=\"params\">(text:<span class=\"type\">String</span>,actionText:<span class=\"type\">String</span>?=<span class=\"literal\">null</span>,duration:<span class=\"type\">Int</span>=Snackbar.LENGTH_SHORT,block:(()-&gt;<span class=\"type\">Unit</span>)?=<span class=\"literal\">null</span>)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> snackbar=  Snackbar.make(<span class=\"keyword\">this</span>,text,duration)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(actionText!=<span class=\"literal\">null</span>&amp;&amp;block!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        snackbar.setAction(actionText)&#123;</span><br><span class=\"line\">            block()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    snackbar.show()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> View.<span class=\"title\">showSnackbar</span><span class=\"params\">(resId:<span class=\"type\">Int</span>,actionResId:<span class=\"type\">Int</span>?=<span class=\"literal\">null</span>,duration:<span class=\"type\">Int</span>=Snackbar.LENGTH_SHORT,block:(()-&gt;<span class=\"type\">Unit</span>)?=<span class=\"literal\">null</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> snackbar=  Snackbar.make(<span class=\"keyword\">this</span>,resId,duration)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(actionResId!=<span class=\"literal\">null</span>&amp;&amp;block!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        snackbar.setAction(actionResId)&#123;</span><br><span class=\"line\">            block()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    snackbar.show()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">view.showSnackbar(<span class=\"string\">&quot;this is Snackbar&quot;</span>,<span class=\"string\">&quot;Action&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//具体逻辑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"网络技术(Kotlin)","date":"2025-06-04T08:47:59.000Z","_content":"\n# WebView\n\n1. 使用WebView控件\n\n2. 调用getSettings方法设置浏览器属性\n\n3. 传入WebViewClient实例\n\n4. 传入网址\n\n5. 声明网络权限\n\n   ```kotlin\n   <WebView\n           android:id=\"@+id/webView\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\"/>\n   ```\n\n   ```kotlin\n   class MainActivity : AppCompatActivity() {\n       private lateinit var binding:ActivityMainBinding\n       override fun onCreate(savedInstanceState: Bundle?) {\n           super.onCreate(savedInstanceState)\n           enableEdgeToEdge()\n           binding=ActivityMainBinding.inflate(layoutInflater)\n           setContentView(binding.root)\n           ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n               val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n               v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n               insets\n           }\n           binding.webView.settings.javaScriptEnabled=true\n           //当需要从一个网页跳转到另一个网页时，目标网页仍在WebView中展示，而不是打开系统浏览器\n           binding.webView.webViewClient= WebViewClient()\n           binding.webView.loadUrl(\"https://www.baidu.com\")\n       }\n   }\n   ```\n\n   ```kotlin\n   <uses-permission android:name=\"android.permission.INTERNET\"/>\n   ```\n\n------\n\n# 使用HTTP访问网络\n\n### HttpURLConnection\n\n1. 获取HttpURLConnection实例\n2. 设置请求方法\n3. 自由定制一些功能\n4. 得到从服务器返回的输入流，并对输入流进行读取\n5. 将HTTP连接关闭\n6. 记得声明权限\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        binding= ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n            insets\n        }\n        binding.sendRequest.setOnClickListener {\n            sendRequestWithHttpURLConnection()\n        }\n    }   \n    private fun sendRequestWithHttpURLConnection() {\n        //开启线程发送网络请求\n        thread {\n            var connection:HttpURLConnection?=null\n            try {\n                val response=StringBuilder()\n                val url=URL(\"https://www.baidu.com\")\n                connection=url.openConnection() as HttpURLConnection\n                connection.connectTimeout=8000\n                connection.readTimeout=8000\n                val input=connection.inputStream\n                //下面对获取到的输入流进行读取\n                val reader=BufferedReader(InputStreamReader(input))\n                reader.use {\n                    reader.forEachLine {\n                        response.append(it)\n                    }\n                }\n                showResponse(response.toString())\n\n            }catch (e:Exception){\n                e.printStackTrace()\n            }finally {\n                //断开连接\n                connection?.disconnect()\n            }\n        }\n    }\nprivate fun showResponse(response: String) {\n        runOnUiThread {\n            //在这里进行UI操作，将结果显示到界面上\n            binding.responseText.text=response\n        }\n    }\n}\n```\n\n### 使用OkHttp\n\n**发送GET请求**\n\n1. 安装依赖库\n\n2. 创建一个OkHttpClient()实例\n\n3. 创建Request对象，通过连缀丰富对象\n\n4. 通过newCall方法获取Call对象，并调用execute方法发送请求并获取服务器返回的数据\n\n5. 得到返回数据的具体内容\n\n   ```kotlin\n       implementation(\"com.squareup.okhttp3:okhttp:4.11.0\")\n   ```\n\n   \n\n   ```kotlin\n    private fun sendRequestWithOkHttp() {\n           //开启线程发送网络请求\n           thread {\n               try {\n                   val client=OkHttpClient()\n                   val request=Request.Builder()\n                       .url(\"https://www.baidu.com\")                \n                       .build()\n                   val response=client.newCall(request).execute()\n                   val responseData=response.body?.string()\n                   if (responseData!=null){\n                       showResponse(responseData)\n                   }\n               }catch (e:Exception){\n                   e.printStackTrace()\n               }\n           }\n       }\n   ```\n\n**发送POST请求**\n\n1. 安装依赖库\n\n2. 创建一个OkHttpClient()实例\n\n3. 创建一个RequestBody对象\n\n4. 创建Request对象，并调用post方法，通过连缀丰富对象\n\n5. 通过newCall方法获取Call对象，并调用execute方法发送请求并获取服务器返回的数据\n\n6. 得到返回数据的具体内容\n\n   ```kotlin\n       implementation(\"com.squareup.okhttp3:okhttp:4.11.0\")\n   ```\n\n   ```kotlin\n    private fun sendRequestWithOkHttp() {\n           //开启线程发送网络请求\n           thread {\n               try {\n                   val client=OkHttpClient()\n                   val requestBody=FormBody.Builder()\n                       .add(\"username\",\"admin\")\n                   \t.add(\"password\",\"123456\")\n                   \t.build()\n                   val request=Request.Builder()\n                       .url(\"https://www.baidu.com\")   \n                   \t.post(requestBody)\n                       .build()\n                   val response=client.newCall(request).execute()\n                   val responseData=response.body?.string()\n                   if (responseData!=null){\n                       showResponse(responseData)\n                   }\n               }catch (e:Exception){\n                   e.printStackTrace()\n               }\n           }\n       }\n   ```\n\n------\n\n# 解析XML数据\n\n### Pull解析方式\n\n1. 创建XmlPullParserFactory实例,并得到得到XmlPullParser对象\n\n2. 将服务器返回的XML数据设置进去\n\n3. 开始解析，用geteventType()得到当前解析的事件\n\n4. 在while循环中不断进行解析，调用next获得下一个解析事件\n\n5. 在循环内通过getName获得名字，用nextText获取具体内容\n\n6. 为了让程序可以使用HTTP，还要在xml文件中添加配置\n\n7. 在AndroidManifest中启动配置文件\n\n   ```kotlin\n    private fun parseXMLWithPull(xmlData:String){\n               try {\n                   //创建XmlPullParserFactory实例\n                   val factory=XmlPullParserFactory.newInstance()\n                   //借助XmlPullParserFactory实例得到XmlPullParser对象\n                   val xmlPullParser=factory.newPullParser()\n                   //将服务器返回的XML数据设置进去\n                   xmlPullParser.setInput(StringReade r(xmlData))\n                   //开始解析\n                   //用geteventType()得到当前解析的事件\n                   var eventType=xmlPullParser.eventType\n                   var id=\"\"\n                   var name=\"\"\n                   var version=\"\"\n                   //当eventType!=XmlPullParser.END_DOCUMENT说明解析工作还未完成\n                   while(eventType!=XmlPullParser.END_DOCUMENT){\n                       //通过getName得到当前节点的名字\n                       val nodeName=xmlPullParser.name\n                       when (eventType) {\n                           //开始解析某节点\n                           XmlPullParser.START_TAG->{\n                               when(nodeName){\n                                    //通过nextText()获取节点具体内容\n                                   \"id\"->id=xmlPullParser.nextText()\n                                   \"name\"->name=xmlPullParser.nextText()\n                                   \"version\"->version=xmlPullParser.nextText()\n                               }\n                           }\n                           //完成解析某个节点\n                           XmlPullParser.END_TAG->{\n                               if(\"app\"==nodeName){\n                                   Log.d(\"MainActivity\", \"id is $id\")\n                                   Log.d(\"MainActivity\", \"name is $name\")\n                                   Log.d(\"MainActivity\", \"version is $version\")\n                               }\n                           }\n                       }\n                       //调用next()方法获取下一个解析事件\n                       eventType=xmlPullParser.next()\n   \n                   }\n               }catch (e:Exception){\n                   e.printStackTrace()\n               }\n       }\n   ```\n\n   ```kotlin\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <network-security-config>\n       <base-config cleartextTrafficPermitted=\"true\">\n           <trust-anchors>\n               <certificates src=\"system\"/>\n           </trust-anchors>\n       </base-config>\n   </network-security-config>\n   ```\n\n   ```kotlin\n   android:networkSecurityConfig=\"@xml/neiwork_config\"\n   ```\n\n   \n\n### SAX解析方式\n\n1. 新建一个类继承DefaultHandler,并重写五种方法\n2. 创建SAXParserFactory实例\n3. 获取XMLReader对象\n4. 将编写的实例类设置到XMLReader中\n5. 调用parse方法开始执行\n\n```kotlin\nclass MyHandle:DefaultHandler() {\n    private var nodeName=\"\"\n    private lateinit var id:StringBuilder\n    private lateinit var name:StringBuilder\n    private lateinit var version:StringBuilder\n    //开始XML解析时调用\n    override fun startDocument() {\n        id=StringBuilder()\n        name=StringBuilder()\n        version=StringBuilder()\n\n    }\n\t//开始解析某个节点时调用\n    override fun startElement(\n        uri: String?,\n        localName: String?,\n        qName: String?,\n        attributes: Attributes?\n    ) {\n        // localName记录当前节点名称\n        nodeName= localName!!\n        Log.d(\"MyHandle\", \"uri is $uri\")\n        Log.d(\"MyHandle\", \"localName is $localName\")\n        Log.d(\"MyHandle\", \"qName is $qName\")\n        Log.d(\"MyHandle\", \"attributes is $attributes\")\n\n\n    }\n\t//获取节点内内容时调用\n    override fun characters(ch: CharArray?, start: Int, length: Int) {\n        //根据当前节点名判断加到哪个StringBuilder对象中\n        when(nodeName){\n            \"id\"->id.append(ch,start,length)\n            \"name\"->name.append(ch,start,length)\n            \"version\"->version.append(ch,start,length)\n\n        }\n    }\n//完成解析某个节点时调用\n    override fun endElement(uri: String?, localName: String?, qName: String?) {\n        if (\"app\"==localName){\n            //trim()方法是用于去除字符串两端的空白字符\n            Log.d(\"MyHandle\", \"id is ${id.toString().trim()} \")\n            Log.d(\"MyHandle\", \"name is ${name.toString().trim()} \")\n            Log.d(\"MyHandle\", \"version is ${version.toString().trim()} \")\n            //最后将StringBuilder内容清空\n            id.setLength(0)\n            name.setLength(0)\n            version.setLength(0)\n        }\n    }\n   //完成xml解析时调用\n    override fun endDocument() {\n        super.endDocument()\n    }\n\n}\n```\n\n```kotlin\n private fun parseXMLWithSAX(xmlData: String) = try {\n        val factory=SAXParserFactory.newInstance()\n        val xmlReader=factory.newSAXParser().xmlReader\n        val handler= MyHandle()\n\n        //将MyHandle的实例设置到XMLReader中\n        xmlReader.contentHandler=handler\n        //开始执行解析\n        xmlReader.parse(InputSource(StringReader(xmlData)))\n\n    }catch (e:Exception){\n        e.printStackTrace()\n    }\n}\n\n```\n\n\n\n------\n\n# 解析JSON格式数据\n\n### 使用JSONObject\n\n1. 定义一个数组，将返回的数据传入到JSONArray对象中\n2. 循环遍历数组，取出各个元素\n\n```kotlin\nprivate fun parseJSONWithJSONObject(jsonData: String) {\n        try {\n            //定义一个JSON数组\n            val jsonArray=JSONArray(jsonData)\n            //循环遍历\n            for (i in 0 until jsonArray.length()){\n                //取出元素，每个取出的元素都是一个jsonObject对象\n                val jsonObject=jsonArray.getJSONObject(i)\n                val id=jsonObject.getString(\"id\")\n                val name=jsonObject.getString(\"name\")\n                val version=jsonObject.getString(\"version\")\n                Log.d(\"MainActivity\", \"id is $id\")\n                Log.d(\"MainActivity\", \"name is $name\")\n                Log.d(\"MainActivity\", \"version is $version\")\n\n            }\n        }catch (e:Exception){\n            e.printStackTrace()\n        }\n\n    }\n```\n\n\n\n### 使用GSON\n\n**优点**：可以将一段JSON格式的字符串自动映射成一个对象，不需要再手动编写代码解析\n\n1. 添加依赖库\n2. 获取Gson对象\n3. 如果是一个JSON数据，可以调用fromJson方法，如果是一段Json数组需要借助TypeToken将期望解析成的数据类型传入fromJson方法\n\n```kotlin\nimplementation (\"com.google.code.gson:gson:2.10.1\")\n```\n\n```kotlin\n private fun parseJSONWithGSON(jsonData: String) {\n        val gson=Gson()\n        val typeOf=object :TypeToken<List<App>>() {}.type\n        val appList=gson.fromJson<List<App>>(jsonData,typeOf)\n        for(app in appList){\n            Log.d(\"MainActivity\", \"id is ${app.id}\")\n            Log.d(\"MainActivity\", \"name is ${app.name}\")\n            Log.d(\"MainActivity\", \"version is ${app.version}\")\n        }\n\n    }\n```\n\n------\n\n# 网络请求回调的实现方式\n\n**采用回调的原因**：所有耗时逻辑在子线程中进行，sendHttpRequest()方法在服务器还没来得及响应的时候就执行结束\n\n### HttpURLConnection方法\n\n1. 将请求方法放入到单例类中\n\n2. 定义一个接口，并定义方法\n\n3. 给方法添加一个接口参数，并开启一个子线程\n\n4. 在线程中回调接口方法\n\n5. 调用sendRequestWithHttpURLConnection()方法，调用时还需将接口实例传入\n\n   ```kotlin\n   interface HttpCallbackListener {\n       fun onFinish(response:String)\n       fun onError(e: Exception)\n   }\n   ```\n\n   ```kotlin\n   object HttpUtil {\n        fun sendRequestWithHttpURLConnection(adress: String, listener: HttpCallbackListener) {\n           //开启线程发送网络请求\n           thread {\n               var connection: HttpURLConnection? = null\n               try {\n                   val response = StringBuilder()\n                   val url = URL(adress)\n                   connection = url.openConnection() as HttpURLConnection\n                   connection.connectTimeout = 8000\n                   connection.readTimeout = 8000\n                   val input = connection.inputStream\n                   //下面对获取到的输入流进行读取\n                   val reader = BufferedReader(InputStreamReader(input))\n                   reader.use {\n                       reader.forEachLine {\n                           response.append(it)\n                       }\n                   }\n                   //回调onFinish()方法\n                   listener.onFinish(response.toString())\n   \n               } catch (e: Exception) {\n                   e.printStackTrace()\n                   //回调onError方法\n                   listener.onError(e)\n               } finally {\n                   connection?.disconnect()\n               }\n           }\n       }\n   }\n   ```\n\n   ```kotlin\n   HttpUtil.sendRequestWithHttpURLConnection(adress,object:HttpCallbackListener{\n       override fun onFinish(response:String){\n           //得到服务器返回的具体内容\n       }\n        override fun onError(e:Exception){\n           //在这里对异常情况进行处理\n       }\n   })\n   ```\n\n### OkHttp方法\n\n1. 将请求方法放入到单例类中\n2. 传入okhttp3.Callback参数，这是oKHttp库自带的回调接口\n3. 在newCall后调用enqueue方法，并传入接口参数\n4. 调用sendRequestWithOkHttp()方法\n\n```kotlin\n fun sendRequestWithOkHttp(adress: String, callback: okhttp3.Callback) {\n        val client = OkHttpClient()\n        val request = Request.Builder()\n            .url(adress)\n            .build()\n        //enqueue()内部帮我们开好了子线程，然后子线程中执行Http请求\n     client.newCall(request).enqueue(callback)\n    }\n```\n\n```kotlin\nHttpUtil.sendRequestWithOkHttp(adress,object:Callback{\n    override fun onResponse(call:Call,response:Response){\n        //得到服务器返回的具体内容\n        val responseData=response.body?.string()\n    }\n    override fun onFailure(call:Call,e:IOException){\n         //在这里对异常情况进行处理\n    }\n})\n```\n\n------\n\n# 最好用的网络库：Retrofit\n\n### 基本用法\n\n1. 添加依赖库\n\n2. 定义接口，使用@GET注解表示调用方法时Retrofit会发起一条GET请求，请求地址就是注解中传入的具体参数\n\n3. 构建Retrofit对象,baseUrl用于指定所以Retrofit请求的根路径,addConverterFactory用于指定Retrofit在解析数据时所使用的转换库，这俩方法必须调用\n\n4. 创建接口的动态代理对象\n\n5. 调用接口方法返回一个Call<List<App>>对象，再调用它enqueue方法（发送请求时Retrofit会自动在内部开启线程，整个操作无需考虑线程切换问题）\n\n6. 调用response.body()方法获取Retrofit解析后的对象，也就是List<App>类型数据，最后遍历List\n\n7. 记得声明权限\n\n8. 如果服务器接口是HTTP，则需要进行网络安全配置，并启动配置\n\n   ```kotlin\n   // Retrofit 核心库\n       implementation (\"com.squareup.retrofit2:retrofit:2.9.0\")\n       // Gson 转换器\n       implementation (\"com.squareup.retrofit2:converter-gson:2.9.0\")\n   ```\n\n   ```kotlin\n     binding.getAppDataBtn.setOnClickListener {\n               val retrofit=Retrofit.Builder()\n                   .baseUrl(\"http://10.0.2.2/\")\n                   .addConverterFactory(GsonConverterFactory.create())\n                   .build()\n               val appService=retrofit.create(AppService::class.java)\n               appService.getAppData().enqueue( object :retrofit2.Callback<List<App>> {\n                   override fun onResponse(\n                       call: retrofit2.Call<List<App>>,\n                       response: retrofit2.Response<List<App>>\n                   ) {\n                       val list=response.body()\n                       if(list!=null){\n                           for (app in list){\n                               Log.d(\"MainActivity\", \"id is ${app.id}\")\n                               Log.d(\"MainActivity\", \"name is ${app.name}\")\n                               Log.d(\"MainActivity\", \"version is ${app.version}\")\n                           }\n                       }\n                   }\n                   override fun onFailure(call: retrofit2.Call<List<App>>, t: Throwable) {\n                       t.printStackTrace()\n                   }\n               })\n           }\n   ```\n\n### 处理复杂的接口地址类型\n\n`class Data(val id:String,val content:String)`\n\n- **接口地址是静态**\n\n  ```kotlin\n  GET http://example.com/get_data.json\n  interface ExampleService{\n      @GET(\"get_data.json\")\n      fun getData():Call<Data>\n  }\n  ```\n\n- **接口地址是动态变化的**\n\n  page部分代表页数，传入不同页数，返回数据也不同。\n\n  ```kotlin\n  GET http://example.com/<page>/get_data.json\n  interface ExampleService{\n      @GET(\"{page}/get_data.json\")\n      fun getData(@Path(\"page\") page:Int):Call<Data>\n  }\n  ```\n\n- **接口要求传入一系列参数**\n\n  这是一个标准的带参数的GET请求格式，接口地址的最后使用问号连接参数，每个参数都是使用等号连接符连接的键值对，多个参数之间用&分隔\n\n  ```kotlin\n  GET http://example.com/get_data.json?u=<user>&t=<token>\n  interface ExampleService{\n      @GET(\"get_data.json\")\n      fun getData(@Query(\"u\") user:String,@Query(\"t\") token:String):Call<Data>\n  }\n  ```\n\n- **多种请求类型**\n\n  GET请求用于从服务器获取数据，POST请求用于从服务器提交数据，PUT和PATCH请求用于修改服务器上的数据，DELETE请求用于删除服务器上的数据\n\n- **DELETE请求**\n\n  **使用ResponseBody的原因**：POST,PUT,PATCH和DELETE与GET不同，它们更多用于对数据进行操作，而不是获取数据，所以对服务器响应的数据并不关心，ResponseBody表示能接收任意类型的响应数据，但不对数据进行解析。\n\n  ```kotlin\n  DELETE http://example.com/data/<id>\n  interface ExampleService{\n      @DELETE(\"data/{id}\")\n      fun deleteData(@Path(\"id\") id:String):Call<ResponseBody>\n  }\n  ```\n\n- **POST请求**\n\n  ```kotlin\n  POST http://example.com/data/create\n  {\"id\":1,\"content\":\"The description for this data.\"}\n  interface ExampleService{\n      @POST(\"data/create\")\n      fun createData(@Body data:Data):Call<ResponseBody>\n  }\n  ```\n\n  **@Body注解作用**：当发出请求时，会自动将Data对象中的数据转化成JSON格式文本，并放到HTTP请求的body部分，服务器收到请求后只需从body中将这一部分数据解析出来即可，这种写法也可用来给PUT,PATCH和DELETE请求提交数据\n\n- **在HTTP请求的header中指定参数**\n\n  ```kotlin\n  GET http://example.com/get_data.json\n  User-Agent:okhttp\n  Cache-Control:max-age=0\n  ```\n\n  这些header参数其实就是一个个键值对\n\n  **静态header声明：**\n\n  ```kotlin\n  interface ExampleService{\n      @Headers(\"User-Agent:okhttp\",\"Cache-Control:max-age=0\")\n      @GET(\"get_data.json\")\n      fun getData():Call<Data>\n  }\n  ```\n\n  **动态header声明：**\n\n  ```kotlin\n  interface ExampleService{\n      @GET(\"get_data.json\")\n      fun getData(@Header(\"User-Agent\") userAgent:String,@Header(\"Cache-Control\") cacheControl:String):Call<Data>\n  }\n  ```\n\n  \n\n### Retrofit构建器的最佳写法\n\n- 新建一个单例类\n\n- 将构建Retrofit写法放入\n\n- 使用泛型实化\n\n- 调用\n\n  ```kotlin\n  object ServiceCreator{\n      private const val BASE_URL=\"http://10.0.2.2/\"\n      private val retrofit=Retrofit.Builder()\n                  .baseUrl(BASE_URL)\n                  .addConverterFactory(GsonConverterFactory.create())\n                  .build()\n      fun <T> create(serviceClass: Class<T>): T = retrofit.create(serviceClass)\n      inline fun <reified T> create(): T = create(T::class.java)\n  }\n  ```\n  \n  ```kotlin\n  val appService=ServiceCreator.create<AppService>()\n  ```\n\n------\n\n","source":"_posts/网络技术.md","raw":"---\ntitle: 网络技术(Kotlin)\ndate: 2025-06-04 16:47:59\ncategories:\n- Android(Kotlin版)\ntags:\n---\n\n# WebView\n\n1. 使用WebView控件\n\n2. 调用getSettings方法设置浏览器属性\n\n3. 传入WebViewClient实例\n\n4. 传入网址\n\n5. 声明网络权限\n\n   ```kotlin\n   <WebView\n           android:id=\"@+id/webView\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\"/>\n   ```\n\n   ```kotlin\n   class MainActivity : AppCompatActivity() {\n       private lateinit var binding:ActivityMainBinding\n       override fun onCreate(savedInstanceState: Bundle?) {\n           super.onCreate(savedInstanceState)\n           enableEdgeToEdge()\n           binding=ActivityMainBinding.inflate(layoutInflater)\n           setContentView(binding.root)\n           ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n               val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n               v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n               insets\n           }\n           binding.webView.settings.javaScriptEnabled=true\n           //当需要从一个网页跳转到另一个网页时，目标网页仍在WebView中展示，而不是打开系统浏览器\n           binding.webView.webViewClient= WebViewClient()\n           binding.webView.loadUrl(\"https://www.baidu.com\")\n       }\n   }\n   ```\n\n   ```kotlin\n   <uses-permission android:name=\"android.permission.INTERNET\"/>\n   ```\n\n------\n\n# 使用HTTP访问网络\n\n### HttpURLConnection\n\n1. 获取HttpURLConnection实例\n2. 设置请求方法\n3. 自由定制一些功能\n4. 得到从服务器返回的输入流，并对输入流进行读取\n5. 将HTTP连接关闭\n6. 记得声明权限\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        binding= ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\n            insets\n        }\n        binding.sendRequest.setOnClickListener {\n            sendRequestWithHttpURLConnection()\n        }\n    }   \n    private fun sendRequestWithHttpURLConnection() {\n        //开启线程发送网络请求\n        thread {\n            var connection:HttpURLConnection?=null\n            try {\n                val response=StringBuilder()\n                val url=URL(\"https://www.baidu.com\")\n                connection=url.openConnection() as HttpURLConnection\n                connection.connectTimeout=8000\n                connection.readTimeout=8000\n                val input=connection.inputStream\n                //下面对获取到的输入流进行读取\n                val reader=BufferedReader(InputStreamReader(input))\n                reader.use {\n                    reader.forEachLine {\n                        response.append(it)\n                    }\n                }\n                showResponse(response.toString())\n\n            }catch (e:Exception){\n                e.printStackTrace()\n            }finally {\n                //断开连接\n                connection?.disconnect()\n            }\n        }\n    }\nprivate fun showResponse(response: String) {\n        runOnUiThread {\n            //在这里进行UI操作，将结果显示到界面上\n            binding.responseText.text=response\n        }\n    }\n}\n```\n\n### 使用OkHttp\n\n**发送GET请求**\n\n1. 安装依赖库\n\n2. 创建一个OkHttpClient()实例\n\n3. 创建Request对象，通过连缀丰富对象\n\n4. 通过newCall方法获取Call对象，并调用execute方法发送请求并获取服务器返回的数据\n\n5. 得到返回数据的具体内容\n\n   ```kotlin\n       implementation(\"com.squareup.okhttp3:okhttp:4.11.0\")\n   ```\n\n   \n\n   ```kotlin\n    private fun sendRequestWithOkHttp() {\n           //开启线程发送网络请求\n           thread {\n               try {\n                   val client=OkHttpClient()\n                   val request=Request.Builder()\n                       .url(\"https://www.baidu.com\")                \n                       .build()\n                   val response=client.newCall(request).execute()\n                   val responseData=response.body?.string()\n                   if (responseData!=null){\n                       showResponse(responseData)\n                   }\n               }catch (e:Exception){\n                   e.printStackTrace()\n               }\n           }\n       }\n   ```\n\n**发送POST请求**\n\n1. 安装依赖库\n\n2. 创建一个OkHttpClient()实例\n\n3. 创建一个RequestBody对象\n\n4. 创建Request对象，并调用post方法，通过连缀丰富对象\n\n5. 通过newCall方法获取Call对象，并调用execute方法发送请求并获取服务器返回的数据\n\n6. 得到返回数据的具体内容\n\n   ```kotlin\n       implementation(\"com.squareup.okhttp3:okhttp:4.11.0\")\n   ```\n\n   ```kotlin\n    private fun sendRequestWithOkHttp() {\n           //开启线程发送网络请求\n           thread {\n               try {\n                   val client=OkHttpClient()\n                   val requestBody=FormBody.Builder()\n                       .add(\"username\",\"admin\")\n                   \t.add(\"password\",\"123456\")\n                   \t.build()\n                   val request=Request.Builder()\n                       .url(\"https://www.baidu.com\")   \n                   \t.post(requestBody)\n                       .build()\n                   val response=client.newCall(request).execute()\n                   val responseData=response.body?.string()\n                   if (responseData!=null){\n                       showResponse(responseData)\n                   }\n               }catch (e:Exception){\n                   e.printStackTrace()\n               }\n           }\n       }\n   ```\n\n------\n\n# 解析XML数据\n\n### Pull解析方式\n\n1. 创建XmlPullParserFactory实例,并得到得到XmlPullParser对象\n\n2. 将服务器返回的XML数据设置进去\n\n3. 开始解析，用geteventType()得到当前解析的事件\n\n4. 在while循环中不断进行解析，调用next获得下一个解析事件\n\n5. 在循环内通过getName获得名字，用nextText获取具体内容\n\n6. 为了让程序可以使用HTTP，还要在xml文件中添加配置\n\n7. 在AndroidManifest中启动配置文件\n\n   ```kotlin\n    private fun parseXMLWithPull(xmlData:String){\n               try {\n                   //创建XmlPullParserFactory实例\n                   val factory=XmlPullParserFactory.newInstance()\n                   //借助XmlPullParserFactory实例得到XmlPullParser对象\n                   val xmlPullParser=factory.newPullParser()\n                   //将服务器返回的XML数据设置进去\n                   xmlPullParser.setInput(StringReade r(xmlData))\n                   //开始解析\n                   //用geteventType()得到当前解析的事件\n                   var eventType=xmlPullParser.eventType\n                   var id=\"\"\n                   var name=\"\"\n                   var version=\"\"\n                   //当eventType!=XmlPullParser.END_DOCUMENT说明解析工作还未完成\n                   while(eventType!=XmlPullParser.END_DOCUMENT){\n                       //通过getName得到当前节点的名字\n                       val nodeName=xmlPullParser.name\n                       when (eventType) {\n                           //开始解析某节点\n                           XmlPullParser.START_TAG->{\n                               when(nodeName){\n                                    //通过nextText()获取节点具体内容\n                                   \"id\"->id=xmlPullParser.nextText()\n                                   \"name\"->name=xmlPullParser.nextText()\n                                   \"version\"->version=xmlPullParser.nextText()\n                               }\n                           }\n                           //完成解析某个节点\n                           XmlPullParser.END_TAG->{\n                               if(\"app\"==nodeName){\n                                   Log.d(\"MainActivity\", \"id is $id\")\n                                   Log.d(\"MainActivity\", \"name is $name\")\n                                   Log.d(\"MainActivity\", \"version is $version\")\n                               }\n                           }\n                       }\n                       //调用next()方法获取下一个解析事件\n                       eventType=xmlPullParser.next()\n   \n                   }\n               }catch (e:Exception){\n                   e.printStackTrace()\n               }\n       }\n   ```\n\n   ```kotlin\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <network-security-config>\n       <base-config cleartextTrafficPermitted=\"true\">\n           <trust-anchors>\n               <certificates src=\"system\"/>\n           </trust-anchors>\n       </base-config>\n   </network-security-config>\n   ```\n\n   ```kotlin\n   android:networkSecurityConfig=\"@xml/neiwork_config\"\n   ```\n\n   \n\n### SAX解析方式\n\n1. 新建一个类继承DefaultHandler,并重写五种方法\n2. 创建SAXParserFactory实例\n3. 获取XMLReader对象\n4. 将编写的实例类设置到XMLReader中\n5. 调用parse方法开始执行\n\n```kotlin\nclass MyHandle:DefaultHandler() {\n    private var nodeName=\"\"\n    private lateinit var id:StringBuilder\n    private lateinit var name:StringBuilder\n    private lateinit var version:StringBuilder\n    //开始XML解析时调用\n    override fun startDocument() {\n        id=StringBuilder()\n        name=StringBuilder()\n        version=StringBuilder()\n\n    }\n\t//开始解析某个节点时调用\n    override fun startElement(\n        uri: String?,\n        localName: String?,\n        qName: String?,\n        attributes: Attributes?\n    ) {\n        // localName记录当前节点名称\n        nodeName= localName!!\n        Log.d(\"MyHandle\", \"uri is $uri\")\n        Log.d(\"MyHandle\", \"localName is $localName\")\n        Log.d(\"MyHandle\", \"qName is $qName\")\n        Log.d(\"MyHandle\", \"attributes is $attributes\")\n\n\n    }\n\t//获取节点内内容时调用\n    override fun characters(ch: CharArray?, start: Int, length: Int) {\n        //根据当前节点名判断加到哪个StringBuilder对象中\n        when(nodeName){\n            \"id\"->id.append(ch,start,length)\n            \"name\"->name.append(ch,start,length)\n            \"version\"->version.append(ch,start,length)\n\n        }\n    }\n//完成解析某个节点时调用\n    override fun endElement(uri: String?, localName: String?, qName: String?) {\n        if (\"app\"==localName){\n            //trim()方法是用于去除字符串两端的空白字符\n            Log.d(\"MyHandle\", \"id is ${id.toString().trim()} \")\n            Log.d(\"MyHandle\", \"name is ${name.toString().trim()} \")\n            Log.d(\"MyHandle\", \"version is ${version.toString().trim()} \")\n            //最后将StringBuilder内容清空\n            id.setLength(0)\n            name.setLength(0)\n            version.setLength(0)\n        }\n    }\n   //完成xml解析时调用\n    override fun endDocument() {\n        super.endDocument()\n    }\n\n}\n```\n\n```kotlin\n private fun parseXMLWithSAX(xmlData: String) = try {\n        val factory=SAXParserFactory.newInstance()\n        val xmlReader=factory.newSAXParser().xmlReader\n        val handler= MyHandle()\n\n        //将MyHandle的实例设置到XMLReader中\n        xmlReader.contentHandler=handler\n        //开始执行解析\n        xmlReader.parse(InputSource(StringReader(xmlData)))\n\n    }catch (e:Exception){\n        e.printStackTrace()\n    }\n}\n\n```\n\n\n\n------\n\n# 解析JSON格式数据\n\n### 使用JSONObject\n\n1. 定义一个数组，将返回的数据传入到JSONArray对象中\n2. 循环遍历数组，取出各个元素\n\n```kotlin\nprivate fun parseJSONWithJSONObject(jsonData: String) {\n        try {\n            //定义一个JSON数组\n            val jsonArray=JSONArray(jsonData)\n            //循环遍历\n            for (i in 0 until jsonArray.length()){\n                //取出元素，每个取出的元素都是一个jsonObject对象\n                val jsonObject=jsonArray.getJSONObject(i)\n                val id=jsonObject.getString(\"id\")\n                val name=jsonObject.getString(\"name\")\n                val version=jsonObject.getString(\"version\")\n                Log.d(\"MainActivity\", \"id is $id\")\n                Log.d(\"MainActivity\", \"name is $name\")\n                Log.d(\"MainActivity\", \"version is $version\")\n\n            }\n        }catch (e:Exception){\n            e.printStackTrace()\n        }\n\n    }\n```\n\n\n\n### 使用GSON\n\n**优点**：可以将一段JSON格式的字符串自动映射成一个对象，不需要再手动编写代码解析\n\n1. 添加依赖库\n2. 获取Gson对象\n3. 如果是一个JSON数据，可以调用fromJson方法，如果是一段Json数组需要借助TypeToken将期望解析成的数据类型传入fromJson方法\n\n```kotlin\nimplementation (\"com.google.code.gson:gson:2.10.1\")\n```\n\n```kotlin\n private fun parseJSONWithGSON(jsonData: String) {\n        val gson=Gson()\n        val typeOf=object :TypeToken<List<App>>() {}.type\n        val appList=gson.fromJson<List<App>>(jsonData,typeOf)\n        for(app in appList){\n            Log.d(\"MainActivity\", \"id is ${app.id}\")\n            Log.d(\"MainActivity\", \"name is ${app.name}\")\n            Log.d(\"MainActivity\", \"version is ${app.version}\")\n        }\n\n    }\n```\n\n------\n\n# 网络请求回调的实现方式\n\n**采用回调的原因**：所有耗时逻辑在子线程中进行，sendHttpRequest()方法在服务器还没来得及响应的时候就执行结束\n\n### HttpURLConnection方法\n\n1. 将请求方法放入到单例类中\n\n2. 定义一个接口，并定义方法\n\n3. 给方法添加一个接口参数，并开启一个子线程\n\n4. 在线程中回调接口方法\n\n5. 调用sendRequestWithHttpURLConnection()方法，调用时还需将接口实例传入\n\n   ```kotlin\n   interface HttpCallbackListener {\n       fun onFinish(response:String)\n       fun onError(e: Exception)\n   }\n   ```\n\n   ```kotlin\n   object HttpUtil {\n        fun sendRequestWithHttpURLConnection(adress: String, listener: HttpCallbackListener) {\n           //开启线程发送网络请求\n           thread {\n               var connection: HttpURLConnection? = null\n               try {\n                   val response = StringBuilder()\n                   val url = URL(adress)\n                   connection = url.openConnection() as HttpURLConnection\n                   connection.connectTimeout = 8000\n                   connection.readTimeout = 8000\n                   val input = connection.inputStream\n                   //下面对获取到的输入流进行读取\n                   val reader = BufferedReader(InputStreamReader(input))\n                   reader.use {\n                       reader.forEachLine {\n                           response.append(it)\n                       }\n                   }\n                   //回调onFinish()方法\n                   listener.onFinish(response.toString())\n   \n               } catch (e: Exception) {\n                   e.printStackTrace()\n                   //回调onError方法\n                   listener.onError(e)\n               } finally {\n                   connection?.disconnect()\n               }\n           }\n       }\n   }\n   ```\n\n   ```kotlin\n   HttpUtil.sendRequestWithHttpURLConnection(adress,object:HttpCallbackListener{\n       override fun onFinish(response:String){\n           //得到服务器返回的具体内容\n       }\n        override fun onError(e:Exception){\n           //在这里对异常情况进行处理\n       }\n   })\n   ```\n\n### OkHttp方法\n\n1. 将请求方法放入到单例类中\n2. 传入okhttp3.Callback参数，这是oKHttp库自带的回调接口\n3. 在newCall后调用enqueue方法，并传入接口参数\n4. 调用sendRequestWithOkHttp()方法\n\n```kotlin\n fun sendRequestWithOkHttp(adress: String, callback: okhttp3.Callback) {\n        val client = OkHttpClient()\n        val request = Request.Builder()\n            .url(adress)\n            .build()\n        //enqueue()内部帮我们开好了子线程，然后子线程中执行Http请求\n     client.newCall(request).enqueue(callback)\n    }\n```\n\n```kotlin\nHttpUtil.sendRequestWithOkHttp(adress,object:Callback{\n    override fun onResponse(call:Call,response:Response){\n        //得到服务器返回的具体内容\n        val responseData=response.body?.string()\n    }\n    override fun onFailure(call:Call,e:IOException){\n         //在这里对异常情况进行处理\n    }\n})\n```\n\n------\n\n# 最好用的网络库：Retrofit\n\n### 基本用法\n\n1. 添加依赖库\n\n2. 定义接口，使用@GET注解表示调用方法时Retrofit会发起一条GET请求，请求地址就是注解中传入的具体参数\n\n3. 构建Retrofit对象,baseUrl用于指定所以Retrofit请求的根路径,addConverterFactory用于指定Retrofit在解析数据时所使用的转换库，这俩方法必须调用\n\n4. 创建接口的动态代理对象\n\n5. 调用接口方法返回一个Call<List<App>>对象，再调用它enqueue方法（发送请求时Retrofit会自动在内部开启线程，整个操作无需考虑线程切换问题）\n\n6. 调用response.body()方法获取Retrofit解析后的对象，也就是List<App>类型数据，最后遍历List\n\n7. 记得声明权限\n\n8. 如果服务器接口是HTTP，则需要进行网络安全配置，并启动配置\n\n   ```kotlin\n   // Retrofit 核心库\n       implementation (\"com.squareup.retrofit2:retrofit:2.9.0\")\n       // Gson 转换器\n       implementation (\"com.squareup.retrofit2:converter-gson:2.9.0\")\n   ```\n\n   ```kotlin\n     binding.getAppDataBtn.setOnClickListener {\n               val retrofit=Retrofit.Builder()\n                   .baseUrl(\"http://10.0.2.2/\")\n                   .addConverterFactory(GsonConverterFactory.create())\n                   .build()\n               val appService=retrofit.create(AppService::class.java)\n               appService.getAppData().enqueue( object :retrofit2.Callback<List<App>> {\n                   override fun onResponse(\n                       call: retrofit2.Call<List<App>>,\n                       response: retrofit2.Response<List<App>>\n                   ) {\n                       val list=response.body()\n                       if(list!=null){\n                           for (app in list){\n                               Log.d(\"MainActivity\", \"id is ${app.id}\")\n                               Log.d(\"MainActivity\", \"name is ${app.name}\")\n                               Log.d(\"MainActivity\", \"version is ${app.version}\")\n                           }\n                       }\n                   }\n                   override fun onFailure(call: retrofit2.Call<List<App>>, t: Throwable) {\n                       t.printStackTrace()\n                   }\n               })\n           }\n   ```\n\n### 处理复杂的接口地址类型\n\n`class Data(val id:String,val content:String)`\n\n- **接口地址是静态**\n\n  ```kotlin\n  GET http://example.com/get_data.json\n  interface ExampleService{\n      @GET(\"get_data.json\")\n      fun getData():Call<Data>\n  }\n  ```\n\n- **接口地址是动态变化的**\n\n  page部分代表页数，传入不同页数，返回数据也不同。\n\n  ```kotlin\n  GET http://example.com/<page>/get_data.json\n  interface ExampleService{\n      @GET(\"{page}/get_data.json\")\n      fun getData(@Path(\"page\") page:Int):Call<Data>\n  }\n  ```\n\n- **接口要求传入一系列参数**\n\n  这是一个标准的带参数的GET请求格式，接口地址的最后使用问号连接参数，每个参数都是使用等号连接符连接的键值对，多个参数之间用&分隔\n\n  ```kotlin\n  GET http://example.com/get_data.json?u=<user>&t=<token>\n  interface ExampleService{\n      @GET(\"get_data.json\")\n      fun getData(@Query(\"u\") user:String,@Query(\"t\") token:String):Call<Data>\n  }\n  ```\n\n- **多种请求类型**\n\n  GET请求用于从服务器获取数据，POST请求用于从服务器提交数据，PUT和PATCH请求用于修改服务器上的数据，DELETE请求用于删除服务器上的数据\n\n- **DELETE请求**\n\n  **使用ResponseBody的原因**：POST,PUT,PATCH和DELETE与GET不同，它们更多用于对数据进行操作，而不是获取数据，所以对服务器响应的数据并不关心，ResponseBody表示能接收任意类型的响应数据，但不对数据进行解析。\n\n  ```kotlin\n  DELETE http://example.com/data/<id>\n  interface ExampleService{\n      @DELETE(\"data/{id}\")\n      fun deleteData(@Path(\"id\") id:String):Call<ResponseBody>\n  }\n  ```\n\n- **POST请求**\n\n  ```kotlin\n  POST http://example.com/data/create\n  {\"id\":1,\"content\":\"The description for this data.\"}\n  interface ExampleService{\n      @POST(\"data/create\")\n      fun createData(@Body data:Data):Call<ResponseBody>\n  }\n  ```\n\n  **@Body注解作用**：当发出请求时，会自动将Data对象中的数据转化成JSON格式文本，并放到HTTP请求的body部分，服务器收到请求后只需从body中将这一部分数据解析出来即可，这种写法也可用来给PUT,PATCH和DELETE请求提交数据\n\n- **在HTTP请求的header中指定参数**\n\n  ```kotlin\n  GET http://example.com/get_data.json\n  User-Agent:okhttp\n  Cache-Control:max-age=0\n  ```\n\n  这些header参数其实就是一个个键值对\n\n  **静态header声明：**\n\n  ```kotlin\n  interface ExampleService{\n      @Headers(\"User-Agent:okhttp\",\"Cache-Control:max-age=0\")\n      @GET(\"get_data.json\")\n      fun getData():Call<Data>\n  }\n  ```\n\n  **动态header声明：**\n\n  ```kotlin\n  interface ExampleService{\n      @GET(\"get_data.json\")\n      fun getData(@Header(\"User-Agent\") userAgent:String,@Header(\"Cache-Control\") cacheControl:String):Call<Data>\n  }\n  ```\n\n  \n\n### Retrofit构建器的最佳写法\n\n- 新建一个单例类\n\n- 将构建Retrofit写法放入\n\n- 使用泛型实化\n\n- 调用\n\n  ```kotlin\n  object ServiceCreator{\n      private const val BASE_URL=\"http://10.0.2.2/\"\n      private val retrofit=Retrofit.Builder()\n                  .baseUrl(BASE_URL)\n                  .addConverterFactory(GsonConverterFactory.create())\n                  .build()\n      fun <T> create(serviceClass: Class<T>): T = retrofit.create(serviceClass)\n      inline fun <reified T> create(): T = create(T::class.java)\n  }\n  ```\n  \n  ```kotlin\n  val appService=ServiceCreator.create<AppService>()\n  ```\n\n------\n\n","slug":"网络技术","published":1,"updated":"2025-09-08T12:37:03.351Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gct0034s4s7dmdi52iq","content":"<h1 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h1><ol>\n<li><p>使用WebView控件</p>\n</li>\n<li><p>调用getSettings方法设置浏览器属性</p>\n</li>\n<li><p>传入WebViewClient实例</p>\n</li>\n<li><p>传入网址</p>\n</li>\n<li><p>声明网络权限</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;WebView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/webView&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding:ActivityMainBinding</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        enableEdgeToEdge()</span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) &#123; v, insets -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())</span><br><span class=\"line\">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)</span><br><span class=\"line\">            insets</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.webView.settings.javaScriptEnabled=<span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\">//当需要从一个网页跳转到另一个网页时，目标网页仍在WebView中展示，而不是打开系统浏览器</span></span><br><span class=\"line\">        binding.webView.webViewClient= WebViewClient()</span><br><span class=\"line\">        binding.webView.loadUrl(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.INTERNET&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h1 id=\"使用HTTP访问网络\"><a href=\"#使用HTTP访问网络\" class=\"headerlink\" title=\"使用HTTP访问网络\"></a>使用HTTP访问网络</h1><h3 id=\"HttpURLConnection\"><a href=\"#HttpURLConnection\" class=\"headerlink\" title=\"HttpURLConnection\"></a>HttpURLConnection</h3><ol>\n<li>获取HttpURLConnection实例</li>\n<li>设置请求方法</li>\n<li>自由定制一些功能</li>\n<li>得到从服务器返回的输入流，并对输入流进行读取</li>\n<li>将HTTP连接关闭</li>\n<li>记得声明权限</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding: ActivityMainBinding</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        enableEdgeToEdge()</span><br><span class=\"line\">        binding= ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) &#123; v, insets -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())</span><br><span class=\"line\">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)</span><br><span class=\"line\">            insets</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.sendRequest.setOnClickListener &#123;</span><br><span class=\"line\">            sendRequestWithHttpURLConnection()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sendRequestWithHttpURLConnection</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开启线程发送网络请求</span></span><br><span class=\"line\">        thread &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> connection:HttpURLConnection?=<span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> response=StringBuilder()</span><br><span class=\"line\">                <span class=\"keyword\">val</span> url=URL(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)</span><br><span class=\"line\">                connection=url.openConnection() <span class=\"keyword\">as</span> HttpURLConnection</span><br><span class=\"line\">                connection.connectTimeout=<span class=\"number\">8000</span></span><br><span class=\"line\">                connection.readTimeout=<span class=\"number\">8000</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> input=connection.inputStream</span><br><span class=\"line\">                <span class=\"comment\">//下面对获取到的输入流进行读取</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> reader=BufferedReader(InputStreamReader(input))</span><br><span class=\"line\">                reader.use &#123;</span><br><span class=\"line\">                    reader.forEachLine &#123;</span><br><span class=\"line\">                        response.append(it)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                showResponse(response.toString())</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">                e.printStackTrace()</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//断开连接</span></span><br><span class=\"line\">                connection?.disconnect()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">showResponse</span><span class=\"params\">(response: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        runOnUiThread &#123;</span><br><span class=\"line\">            <span class=\"comment\">//在这里进行UI操作，将结果显示到界面上</span></span><br><span class=\"line\">            binding.responseText.text=response</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用OkHttp\"><a href=\"#使用OkHttp\" class=\"headerlink\" title=\"使用OkHttp\"></a>使用OkHttp</h3><p><strong>发送GET请求</strong></p>\n<ol>\n<li><p>安装依赖库</p>\n</li>\n<li><p>创建一个OkHttpClient()实例</p>\n</li>\n<li><p>创建Request对象，通过连缀丰富对象</p>\n</li>\n<li><p>通过newCall方法获取Call对象，并调用execute方法发送请求并获取服务器返回的数据</p>\n</li>\n<li><p>得到返回数据的具体内容</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;com.squareup.okhttp3:okhttp:4.11.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sendRequestWithOkHttp</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//开启线程发送网络请求</span></span><br><span class=\"line\">       thread &#123;</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">val</span> client=OkHttpClient()</span><br><span class=\"line\">               <span class=\"keyword\">val</span> request=Request.Builder()</span><br><span class=\"line\">                   .url(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)                </span><br><span class=\"line\">                   .build()</span><br><span class=\"line\">               <span class=\"keyword\">val</span> response=client.newCall(request).execute()</span><br><span class=\"line\">               <span class=\"keyword\">val</span> responseData=response.body?.string()</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (responseData!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                   showResponse(responseData)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">               e.printStackTrace()</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>发送POST请求</strong></p>\n<ol>\n<li><p>安装依赖库</p>\n</li>\n<li><p>创建一个OkHttpClient()实例</p>\n</li>\n<li><p>创建一个RequestBody对象</p>\n</li>\n<li><p>创建Request对象，并调用post方法，通过连缀丰富对象</p>\n</li>\n<li><p>通过newCall方法获取Call对象，并调用execute方法发送请求并获取服务器返回的数据</p>\n</li>\n<li><p>得到返回数据的具体内容</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;com.squareup.okhttp3:okhttp:4.11.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sendRequestWithOkHttp</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//开启线程发送网络请求</span></span><br><span class=\"line\">       thread &#123;</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">val</span> client=OkHttpClient()</span><br><span class=\"line\">               <span class=\"keyword\">val</span> requestBody=FormBody.Builder()</span><br><span class=\"line\">                   .add(<span class=\"string\">&quot;username&quot;</span>,<span class=\"string\">&quot;admin&quot;</span>)</span><br><span class=\"line\">               \t.add(<span class=\"string\">&quot;password&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">               \t.build()</span><br><span class=\"line\">               <span class=\"keyword\">val</span> request=Request.Builder()</span><br><span class=\"line\">                   .url(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)   </span><br><span class=\"line\">               \t.post(requestBody)</span><br><span class=\"line\">                   .build()</span><br><span class=\"line\">               <span class=\"keyword\">val</span> response=client.newCall(request).execute()</span><br><span class=\"line\">               <span class=\"keyword\">val</span> responseData=response.body?.string()</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (responseData!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                   showResponse(responseData)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">               e.printStackTrace()</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h1 id=\"解析XML数据\"><a href=\"#解析XML数据\" class=\"headerlink\" title=\"解析XML数据\"></a>解析XML数据</h1><h3 id=\"Pull解析方式\"><a href=\"#Pull解析方式\" class=\"headerlink\" title=\"Pull解析方式\"></a>Pull解析方式</h3><ol>\n<li><p>创建XmlPullParserFactory实例,并得到得到XmlPullParser对象</p>\n</li>\n<li><p>将服务器返回的XML数据设置进去</p>\n</li>\n<li><p>开始解析，用geteventType()得到当前解析的事件</p>\n</li>\n<li><p>在while循环中不断进行解析，调用next获得下一个解析事件</p>\n</li>\n<li><p>在循环内通过getName获得名字，用nextText获取具体内容</p>\n</li>\n<li><p>为了让程序可以使用HTTP，还要在xml文件中添加配置</p>\n</li>\n<li><p>在AndroidManifest中启动配置文件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">parseXMLWithPull</span><span class=\"params\">(xmlData:<span class=\"type\">String</span>)</span></span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">//创建XmlPullParserFactory实例</span></span><br><span class=\"line\">               <span class=\"keyword\">val</span> factory=XmlPullParserFactory.newInstance()</span><br><span class=\"line\">               <span class=\"comment\">//借助XmlPullParserFactory实例得到XmlPullParser对象</span></span><br><span class=\"line\">               <span class=\"keyword\">val</span> xmlPullParser=factory.newPullParser()</span><br><span class=\"line\">               <span class=\"comment\">//将服务器返回的XML数据设置进去</span></span><br><span class=\"line\">               xmlPullParser.setInput(StringReade r(xmlData))</span><br><span class=\"line\">               <span class=\"comment\">//开始解析</span></span><br><span class=\"line\">               <span class=\"comment\">//用geteventType()得到当前解析的事件</span></span><br><span class=\"line\">               <span class=\"keyword\">var</span> eventType=xmlPullParser.eventType</span><br><span class=\"line\">               <span class=\"keyword\">var</span> id=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">               <span class=\"keyword\">var</span> name=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">               <span class=\"keyword\">var</span> version=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">               <span class=\"comment\">//当eventType!=XmlPullParser.END_DOCUMENT说明解析工作还未完成</span></span><br><span class=\"line\">               <span class=\"keyword\">while</span>(eventType!=XmlPullParser.END_DOCUMENT)&#123;</span><br><span class=\"line\">                   <span class=\"comment\">//通过getName得到当前节点的名字</span></span><br><span class=\"line\">                   <span class=\"keyword\">val</span> nodeName=xmlPullParser.name</span><br><span class=\"line\">                   <span class=\"keyword\">when</span> (eventType) &#123;</span><br><span class=\"line\">                       <span class=\"comment\">//开始解析某节点</span></span><br><span class=\"line\">                       XmlPullParser.START_TAG-&gt;&#123;</span><br><span class=\"line\">                           <span class=\"keyword\">when</span>(nodeName)&#123;</span><br><span class=\"line\">                                <span class=\"comment\">//通过nextText()获取节点具体内容</span></span><br><span class=\"line\">                               <span class=\"string\">&quot;id&quot;</span>-&gt;id=xmlPullParser.nextText()</span><br><span class=\"line\">                               <span class=\"string\">&quot;name&quot;</span>-&gt;name=xmlPullParser.nextText()</span><br><span class=\"line\">                               <span class=\"string\">&quot;version&quot;</span>-&gt;version=xmlPullParser.nextText()</span><br><span class=\"line\">                           &#125;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       <span class=\"comment\">//完成解析某个节点</span></span><br><span class=\"line\">                       XmlPullParser.END_TAG-&gt;&#123;</span><br><span class=\"line\">                           <span class=\"keyword\">if</span>(<span class=\"string\">&quot;app&quot;</span>==nodeName)&#123;</span><br><span class=\"line\">                               Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;id is <span class=\"variable\">$id</span>&quot;</span>)</span><br><span class=\"line\">                               Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;name is <span class=\"variable\">$name</span>&quot;</span>)</span><br><span class=\"line\">                               Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;version is <span class=\"variable\">$version</span>&quot;</span>)</span><br><span class=\"line\">                           &#125;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"comment\">//调用next()方法获取下一个解析事件</span></span><br><span class=\"line\">                   eventType=xmlPullParser.next()</span><br><span class=\"line\">   </span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">               e.printStackTrace()</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;network-security-config&gt;</span><br><span class=\"line\">    &lt;base-config cleartextTrafficPermitted=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">        &lt;trust-anchors&gt;</span><br><span class=\"line\">            &lt;certificates src=<span class=\"string\">&quot;system&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/trust-anchors&gt;</span><br><span class=\"line\">    &lt;/base-config&gt;</span><br><span class=\"line\">&lt;/network-security-config&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:networkSecurityConfig=<span class=\"string\">&quot;@xml/neiwork_config&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"SAX解析方式\"><a href=\"#SAX解析方式\" class=\"headerlink\" title=\"SAX解析方式\"></a>SAX解析方式</h3><ol>\n<li>新建一个类继承DefaultHandler,并重写五种方法</li>\n<li>创建SAXParserFactory实例</li>\n<li>获取XMLReader对象</li>\n<li>将编写的实例类设置到XMLReader中</li>\n<li>调用parse方法开始执行</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyHandle</span>:<span class=\"type\">DefaultHandler</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> nodeName=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> id:StringBuilder</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> name:StringBuilder</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> version:StringBuilder</span><br><span class=\"line\">    <span class=\"comment\">//开始XML解析时调用</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">startDocument</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        id=StringBuilder()</span><br><span class=\"line\">        name=StringBuilder()</span><br><span class=\"line\">        version=StringBuilder()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//开始解析某个节点时调用</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">startElement</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        uri: <span class=\"type\">String</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        localName: <span class=\"type\">String</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        qName: <span class=\"type\">String</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        attributes: <span class=\"type\">Attributes</span>?</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// localName记录当前节点名称</span></span><br><span class=\"line\">        nodeName= localName!!</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyHandle&quot;</span>, <span class=\"string\">&quot;uri is <span class=\"variable\">$uri</span>&quot;</span>)</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyHandle&quot;</span>, <span class=\"string\">&quot;localName is <span class=\"variable\">$localName</span>&quot;</span>)</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyHandle&quot;</span>, <span class=\"string\">&quot;qName is <span class=\"variable\">$qName</span>&quot;</span>)</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyHandle&quot;</span>, <span class=\"string\">&quot;attributes is <span class=\"variable\">$attributes</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取节点内内容时调用</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">characters</span><span class=\"params\">(ch: <span class=\"type\">CharArray</span>?, start: <span class=\"type\">Int</span>, length: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据当前节点名判断加到哪个StringBuilder对象中</span></span><br><span class=\"line\">        <span class=\"keyword\">when</span>(nodeName)&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;id&quot;</span>-&gt;id.append(ch,start,length)</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span>-&gt;name.append(ch,start,length)</span><br><span class=\"line\">            <span class=\"string\">&quot;version&quot;</span>-&gt;version.append(ch,start,length)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//完成解析某个节点时调用</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">endElement</span><span class=\"params\">(uri: <span class=\"type\">String</span>?, localName: <span class=\"type\">String</span>?, qName: <span class=\"type\">String</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;app&quot;</span>==localName)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//trim()方法是用于去除字符串两端的空白字符</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MyHandle&quot;</span>, <span class=\"string\">&quot;id is <span class=\"subst\">$&#123;id.toString().trim()&#125;</span> &quot;</span>)</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MyHandle&quot;</span>, <span class=\"string\">&quot;name is <span class=\"subst\">$&#123;name.toString().trim()&#125;</span> &quot;</span>)</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MyHandle&quot;</span>, <span class=\"string\">&quot;version is <span class=\"subst\">$&#123;version.toString().trim()&#125;</span> &quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\">//最后将StringBuilder内容清空</span></span><br><span class=\"line\">            id.setLength(<span class=\"number\">0</span>)</span><br><span class=\"line\">            name.setLength(<span class=\"number\">0</span>)</span><br><span class=\"line\">            version.setLength(<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//完成xml解析时调用</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">endDocument</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.endDocument()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">parseXMLWithSAX</span><span class=\"params\">(xmlData: <span class=\"type\">String</span>)</span></span> = <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> factory=SAXParserFactory.newInstance()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> xmlReader=factory.newSAXParser().xmlReader</span><br><span class=\"line\">        <span class=\"keyword\">val</span> handler= MyHandle()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将MyHandle的实例设置到XMLReader中</span></span><br><span class=\"line\">        xmlReader.contentHandler=handler</span><br><span class=\"line\">        <span class=\"comment\">//开始执行解析</span></span><br><span class=\"line\">        xmlReader.parse(InputSource(StringReader(xmlData)))</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">        e.printStackTrace()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"解析JSON格式数据\"><a href=\"#解析JSON格式数据\" class=\"headerlink\" title=\"解析JSON格式数据\"></a>解析JSON格式数据</h1><h3 id=\"使用JSONObject\"><a href=\"#使用JSONObject\" class=\"headerlink\" title=\"使用JSONObject\"></a>使用JSONObject</h3><ol>\n<li>定义一个数组，将返回的数据传入到JSONArray对象中</li>\n<li>循环遍历数组，取出各个元素</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">parseJSONWithJSONObject</span><span class=\"params\">(jsonData: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//定义一个JSON数组</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> jsonArray=JSONArray(jsonData)</span><br><span class=\"line\">            <span class=\"comment\">//循环遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until jsonArray.length())&#123;</span><br><span class=\"line\">                <span class=\"comment\">//取出元素，每个取出的元素都是一个jsonObject对象</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> jsonObject=jsonArray.getJSONObject(i)</span><br><span class=\"line\">                <span class=\"keyword\">val</span> id=jsonObject.getString(<span class=\"string\">&quot;id&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">val</span> name=jsonObject.getString(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">val</span> version=jsonObject.getString(<span class=\"string\">&quot;version&quot;</span>)</span><br><span class=\"line\">                Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;id is <span class=\"variable\">$id</span>&quot;</span>)</span><br><span class=\"line\">                Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;name is <span class=\"variable\">$name</span>&quot;</span>)</span><br><span class=\"line\">                Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;version is <span class=\"variable\">$version</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">            e.printStackTrace()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用GSON\"><a href=\"#使用GSON\" class=\"headerlink\" title=\"使用GSON\"></a>使用GSON</h3><p><strong>优点</strong>：可以将一段JSON格式的字符串自动映射成一个对象，不需要再手动编写代码解析</p>\n<ol>\n<li>添加依赖库</li>\n<li>获取Gson对象</li>\n<li>如果是一个JSON数据，可以调用fromJson方法，如果是一段Json数组需要借助TypeToken将期望解析成的数据类型传入fromJson方法</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;com.google.code.gson:gson:2.10.1&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">parseJSONWithGSON</span><span class=\"params\">(jsonData: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">val</span> gson=Gson()</span><br><span class=\"line\">       <span class=\"keyword\">val</span> typeOf=<span class=\"keyword\">object</span> :TypeToken&lt;List&lt;App&gt;&gt;() &#123;&#125;.type</span><br><span class=\"line\">       <span class=\"keyword\">val</span> appList=gson.fromJson&lt;List&lt;App&gt;&gt;(jsonData,typeOf)</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(app <span class=\"keyword\">in</span> appList)&#123;</span><br><span class=\"line\">           Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;id is <span class=\"subst\">$&#123;app.id&#125;</span>&quot;</span>)</span><br><span class=\"line\">           Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;name is <span class=\"subst\">$&#123;app.name&#125;</span>&quot;</span>)</span><br><span class=\"line\">           Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;version is <span class=\"subst\">$&#123;app.version&#125;</span>&quot;</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"网络请求回调的实现方式\"><a href=\"#网络请求回调的实现方式\" class=\"headerlink\" title=\"网络请求回调的实现方式\"></a>网络请求回调的实现方式</h1><p><strong>采用回调的原因</strong>：所有耗时逻辑在子线程中进行，sendHttpRequest()方法在服务器还没来得及响应的时候就执行结束</p>\n<h3 id=\"HttpURLConnection方法\"><a href=\"#HttpURLConnection方法\" class=\"headerlink\" title=\"HttpURLConnection方法\"></a>HttpURLConnection方法</h3><ol>\n<li><p>将请求方法放入到单例类中</p>\n</li>\n<li><p>定义一个接口，并定义方法</p>\n</li>\n<li><p>给方法添加一个接口参数，并开启一个子线程</p>\n</li>\n<li><p>在线程中回调接口方法</p>\n</li>\n<li><p>调用sendRequestWithHttpURLConnection()方法，调用时还需将接口实例传入</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">HttpCallbackListener</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFinish</span><span class=\"params\">(response:<span class=\"type\">String</span>)</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onError</span><span class=\"params\">(e: <span class=\"type\">Exception</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> HttpUtil &#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sendRequestWithHttpURLConnection</span><span class=\"params\">(adress: <span class=\"type\">String</span>, listener: <span class=\"type\">HttpCallbackListener</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开启线程发送网络请求</span></span><br><span class=\"line\">        thread &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> connection: HttpURLConnection? = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> response = StringBuilder()</span><br><span class=\"line\">                <span class=\"keyword\">val</span> url = URL(adress)</span><br><span class=\"line\">                connection = url.openConnection() <span class=\"keyword\">as</span> HttpURLConnection</span><br><span class=\"line\">                connection.connectTimeout = <span class=\"number\">8000</span></span><br><span class=\"line\">                connection.readTimeout = <span class=\"number\">8000</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> input = connection.inputStream</span><br><span class=\"line\">                <span class=\"comment\">//下面对获取到的输入流进行读取</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> reader = BufferedReader(InputStreamReader(input))</span><br><span class=\"line\">                reader.use &#123;</span><br><span class=\"line\">                    reader.forEachLine &#123;</span><br><span class=\"line\">                        response.append(it)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//回调onFinish()方法</span></span><br><span class=\"line\">                listener.onFinish(response.toString())</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">                e.printStackTrace()</span><br><span class=\"line\">                <span class=\"comment\">//回调onError方法</span></span><br><span class=\"line\">                listener.onError(e)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                connection?.disconnect()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpUtil.sendRequestWithHttpURLConnection(adress,<span class=\"keyword\">object</span>:HttpCallbackListener&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFinish</span><span class=\"params\">(response:<span class=\"type\">String</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//得到服务器返回的具体内容</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onError</span><span class=\"params\">(e:<span class=\"type\">Exception</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//在这里对异常情况进行处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"OkHttp方法\"><a href=\"#OkHttp方法\" class=\"headerlink\" title=\"OkHttp方法\"></a>OkHttp方法</h3><ol>\n<li>将请求方法放入到单例类中</li>\n<li>传入okhttp3.Callback参数，这是oKHttp库自带的回调接口</li>\n<li>在newCall后调用enqueue方法，并传入接口参数</li>\n<li>调用sendRequestWithOkHttp()方法</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sendRequestWithOkHttp</span><span class=\"params\">(adress: <span class=\"type\">String</span>, callback: <span class=\"type\">okhttp3</span>.<span class=\"type\">Callback</span>)</span></span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">val</span> client = OkHttpClient()</span><br><span class=\"line\">       <span class=\"keyword\">val</span> request = Request.Builder()</span><br><span class=\"line\">           .url(adress)</span><br><span class=\"line\">           .build()</span><br><span class=\"line\">       <span class=\"comment\">//enqueue()内部帮我们开好了子线程，然后子线程中执行Http请求</span></span><br><span class=\"line\">    client.newCall(request).enqueue(callback)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpUtil.sendRequestWithOkHttp(adress,<span class=\"keyword\">object</span>:Callback&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResponse</span><span class=\"params\">(call:<span class=\"type\">Call</span>,response:<span class=\"type\">Response</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//得到服务器返回的具体内容</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> responseData=response.body?.string()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFailure</span><span class=\"params\">(call:<span class=\"type\">Call</span>,e:<span class=\"type\">IOException</span>)</span></span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">//在这里对异常情况进行处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"最好用的网络库：Retrofit\"><a href=\"#最好用的网络库：Retrofit\" class=\"headerlink\" title=\"最好用的网络库：Retrofit\"></a>最好用的网络库：Retrofit</h1><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><ol>\n<li><p>添加依赖库</p>\n</li>\n<li><p>定义接口，使用@GET注解表示调用方法时Retrofit会发起一条GET请求，请求地址就是注解中传入的具体参数</p>\n</li>\n<li><p>构建Retrofit对象,baseUrl用于指定所以Retrofit请求的根路径,addConverterFactory用于指定Retrofit在解析数据时所使用的转换库，这俩方法必须调用</p>\n</li>\n<li><p>创建接口的动态代理对象</p>\n</li>\n<li><p>调用接口方法返回一个Call&lt;List<App>&gt;对象，再调用它enqueue方法（发送请求时Retrofit会自动在内部开启线程，整个操作无需考虑线程切换问题）</p>\n</li>\n<li><p>调用response.body()方法获取Retrofit解析后的对象，也就是List<App>类型数据，最后遍历List</p>\n</li>\n<li><p>记得声明权限</p>\n</li>\n<li><p>如果服务器接口是HTTP，则需要进行网络安全配置，并启动配置</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Retrofit 核心库</span></span><br><span class=\"line\">    implementation (<span class=\"string\">&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Gson 转换器</span></span><br><span class=\"line\">    implementation (<span class=\"string\">&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.getAppDataBtn.setOnClickListener &#123;</span><br><span class=\"line\">          <span class=\"keyword\">val</span> retrofit=Retrofit.Builder()</span><br><span class=\"line\">              .baseUrl(<span class=\"string\">&quot;http://10.0.2.2/&quot;</span>)</span><br><span class=\"line\">              .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">              .build()</span><br><span class=\"line\">          <span class=\"keyword\">val</span> appService=retrofit.create(AppService::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">          appService.getAppData().enqueue( <span class=\"keyword\">object</span> :retrofit2.Callback&lt;List&lt;App&gt;&gt; &#123;</span><br><span class=\"line\">              <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResponse</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                  call: <span class=\"type\">retrofit2</span>.<span class=\"type\">Call</span>&lt;<span class=\"type\">List</span>&lt;<span class=\"type\">App</span>&gt;&gt;,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                  response: <span class=\"type\">retrofit2</span>.<span class=\"type\">Response</span>&lt;<span class=\"type\">List</span>&lt;<span class=\"type\">App</span>&gt;&gt;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">              )</span></span> &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">val</span> list=response.body()</span><br><span class=\"line\">                  <span class=\"keyword\">if</span>(list!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                      <span class=\"keyword\">for</span> (app <span class=\"keyword\">in</span> list)&#123;</span><br><span class=\"line\">                          Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;id is <span class=\"subst\">$&#123;app.id&#125;</span>&quot;</span>)</span><br><span class=\"line\">                          Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;name is <span class=\"subst\">$&#123;app.name&#125;</span>&quot;</span>)</span><br><span class=\"line\">                          Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;version is <span class=\"subst\">$&#123;app.version&#125;</span>&quot;</span>)</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFailure</span><span class=\"params\">(call: <span class=\"type\">retrofit2</span>.<span class=\"type\">Call</span>&lt;<span class=\"type\">List</span>&lt;<span class=\"type\">App</span>&gt;&gt;, t: <span class=\"type\">Throwable</span>)</span></span> &#123;</span><br><span class=\"line\">                  t.printStackTrace()</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"处理复杂的接口地址类型\"><a href=\"#处理复杂的接口地址类型\" class=\"headerlink\" title=\"处理复杂的接口地址类型\"></a>处理复杂的接口地址类型</h3><p><code>class Data(val id:String,val content:String)</code></p>\n<ul>\n<li><p><strong>接口地址是静态</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET http:<span class=\"comment\">//example.com/get_data.json</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET(<span class=\"string\">&quot;get_data.json&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getData</span><span class=\"params\">()</span></span>:Call&lt;Data&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>接口地址是动态变化的</strong></p>\n<p>page部分代表页数，传入不同页数，返回数据也不同。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET http:<span class=\"comment\">//example.com/&lt;page&gt;/get_data.json</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET(<span class=\"string\">&quot;&#123;page&#125;/get_data.json&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getData</span><span class=\"params\">(<span class=\"meta\">@Path(<span class=\"string\">&quot;page&quot;</span>)</span> page:<span class=\"type\">Int</span>)</span></span>:Call&lt;Data&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>接口要求传入一系列参数</strong></p>\n<p>这是一个标准的带参数的GET请求格式，接口地址的最后使用问号连接参数，每个参数都是使用等号连接符连接的键值对，多个参数之间用&amp;分隔</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET http:<span class=\"comment\">//example.com/get_data.json?u=&lt;user&gt;&amp;t=&lt;token&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET(<span class=\"string\">&quot;get_data.json&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getData</span><span class=\"params\">(<span class=\"meta\">@Query(<span class=\"string\">&quot;u&quot;</span>)</span> user:<span class=\"type\">String</span>,<span class=\"meta\">@Query(<span class=\"string\">&quot;t&quot;</span>)</span> token:<span class=\"type\">String</span>)</span></span>:Call&lt;Data&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>多种请求类型</strong></p>\n<p>GET请求用于从服务器获取数据，POST请求用于从服务器提交数据，PUT和PATCH请求用于修改服务器上的数据，DELETE请求用于删除服务器上的数据</p>\n</li>\n<li><p><strong>DELETE请求</strong></p>\n<p><strong>使用ResponseBody的原因</strong>：POST,PUT,PATCH和DELETE与GET不同，它们更多用于对数据进行操作，而不是获取数据，所以对服务器响应的数据并不关心，ResponseBody表示能接收任意类型的响应数据，但不对数据进行解析。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE http:<span class=\"comment\">//example.com/data/&lt;id&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@DELETE(<span class=\"string\">&quot;data/&#123;id&#125;&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteData</span><span class=\"params\">(<span class=\"meta\">@Path(<span class=\"string\">&quot;id&quot;</span>)</span> id:<span class=\"type\">String</span>)</span></span>:Call&lt;ResponseBody&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>POST请求</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http:<span class=\"comment\">//example.com/data/create</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;id&quot;</span>:<span class=\"number\">1</span>,<span class=\"string\">&quot;content&quot;</span>:<span class=\"string\">&quot;The description for this data.&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@POST(<span class=\"string\">&quot;data/create&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createData</span><span class=\"params\">(<span class=\"meta\">@Body</span> <span class=\"keyword\">data</span>:<span class=\"type\">Data</span>)</span></span>:Call&lt;ResponseBody&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@Body注解作用</strong>：当发出请求时，会自动将Data对象中的数据转化成JSON格式文本，并放到HTTP请求的body部分，服务器收到请求后只需从body中将这一部分数据解析出来即可，这种写法也可用来给PUT,PATCH和DELETE请求提交数据</p>\n</li>\n<li><p><strong>在HTTP请求的header中指定参数</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET http:<span class=\"comment\">//example.com/get_data.json</span></span><br><span class=\"line\">User-Agent:okhttp</span><br><span class=\"line\">Cache-Control:max-age=<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>这些header参数其实就是一个个键值对</p>\n<p><strong>静态header声明：</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Headers(<span class=\"string\">&quot;User-Agent:okhttp&quot;</span>,<span class=\"string\">&quot;Cache-Control:max-age=0&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@GET(<span class=\"string\">&quot;get_data.json&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getData</span><span class=\"params\">()</span></span>:Call&lt;Data&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>动态header声明：</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET(<span class=\"string\">&quot;get_data.json&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getData</span><span class=\"params\">(<span class=\"meta\">@Header(<span class=\"string\">&quot;User-Agent&quot;</span>)</span> userAgent:<span class=\"type\">String</span>,<span class=\"meta\">@Header(<span class=\"string\">&quot;Cache-Control&quot;</span>)</span> cacheControl:<span class=\"type\">String</span>)</span></span>:Call&lt;Data&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Retrofit构建器的最佳写法\"><a href=\"#Retrofit构建器的最佳写法\" class=\"headerlink\" title=\"Retrofit构建器的最佳写法\"></a>Retrofit构建器的最佳写法</h3><ul>\n<li><p>新建一个单例类</p>\n</li>\n<li><p>将构建Retrofit写法放入</p>\n</li>\n<li><p>使用泛型实化</p>\n</li>\n<li><p>调用</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> ServiceCreator&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> BASE_URL=<span class=\"string\">&quot;http://10.0.2.2/&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> retrofit=Retrofit.Builder()</span><br><span class=\"line\">                .baseUrl(BASE_URL)</span><br><span class=\"line\">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">create</span><span class=\"params\">(serviceClass: <span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>: T = retrofit.create(serviceClass)</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">create</span><span class=\"params\">()</span></span>: T = create(T::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> appService=ServiceCreator.create&lt;AppService&gt;()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n","excerpt":"WebView\n 1. 使用WebView控件\n    \n    \n 2. 调用getSettings方法设置浏览器属性\n    \n    \n 3. 传入WebViewClient实例\n    \n    \n 4. 传入网址\n    \n    \n 5. 声明网络权限\n    \n    1\n    2\n    3\n    4\n    \n    \n    <WebView\n            android:id=\"@+id/webView\"\n            android:layout_width=\"match_parent\"\n            android:layout_he","more":"<h1 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h1><ol>\n<li><p>使用WebView控件</p>\n</li>\n<li><p>调用getSettings方法设置浏览器属性</p>\n</li>\n<li><p>传入WebViewClient实例</p>\n</li>\n<li><p>传入网址</p>\n</li>\n<li><p>声明网络权限</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;WebView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/webView&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding:ActivityMainBinding</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        enableEdgeToEdge()</span><br><span class=\"line\">        binding=ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) &#123; v, insets -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())</span><br><span class=\"line\">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)</span><br><span class=\"line\">            insets</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.webView.settings.javaScriptEnabled=<span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\">//当需要从一个网页跳转到另一个网页时，目标网页仍在WebView中展示，而不是打开系统浏览器</span></span><br><span class=\"line\">        binding.webView.webViewClient= WebViewClient()</span><br><span class=\"line\">        binding.webView.loadUrl(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.INTERNET&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h1 id=\"使用HTTP访问网络\"><a href=\"#使用HTTP访问网络\" class=\"headerlink\" title=\"使用HTTP访问网络\"></a>使用HTTP访问网络</h1><h3 id=\"HttpURLConnection\"><a href=\"#HttpURLConnection\" class=\"headerlink\" title=\"HttpURLConnection\"></a>HttpURLConnection</h3><ol>\n<li>获取HttpURLConnection实例</li>\n<li>设置请求方法</li>\n<li>自由定制一些功能</li>\n<li>得到从服务器返回的输入流，并对输入流进行读取</li>\n<li>将HTTP连接关闭</li>\n<li>记得声明权限</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> binding: ActivityMainBinding</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        enableEdgeToEdge()</span><br><span class=\"line\">        binding= ActivityMainBinding.inflate(layoutInflater)</span><br><span class=\"line\">        setContentView(binding.root)</span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) &#123; v, insets -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())</span><br><span class=\"line\">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)</span><br><span class=\"line\">            insets</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        binding.sendRequest.setOnClickListener &#123;</span><br><span class=\"line\">            sendRequestWithHttpURLConnection()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sendRequestWithHttpURLConnection</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开启线程发送网络请求</span></span><br><span class=\"line\">        thread &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> connection:HttpURLConnection?=<span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> response=StringBuilder()</span><br><span class=\"line\">                <span class=\"keyword\">val</span> url=URL(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)</span><br><span class=\"line\">                connection=url.openConnection() <span class=\"keyword\">as</span> HttpURLConnection</span><br><span class=\"line\">                connection.connectTimeout=<span class=\"number\">8000</span></span><br><span class=\"line\">                connection.readTimeout=<span class=\"number\">8000</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> input=connection.inputStream</span><br><span class=\"line\">                <span class=\"comment\">//下面对获取到的输入流进行读取</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> reader=BufferedReader(InputStreamReader(input))</span><br><span class=\"line\">                reader.use &#123;</span><br><span class=\"line\">                    reader.forEachLine &#123;</span><br><span class=\"line\">                        response.append(it)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                showResponse(response.toString())</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">                e.printStackTrace()</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//断开连接</span></span><br><span class=\"line\">                connection?.disconnect()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">showResponse</span><span class=\"params\">(response: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        runOnUiThread &#123;</span><br><span class=\"line\">            <span class=\"comment\">//在这里进行UI操作，将结果显示到界面上</span></span><br><span class=\"line\">            binding.responseText.text=response</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用OkHttp\"><a href=\"#使用OkHttp\" class=\"headerlink\" title=\"使用OkHttp\"></a>使用OkHttp</h3><p><strong>发送GET请求</strong></p>\n<ol>\n<li><p>安装依赖库</p>\n</li>\n<li><p>创建一个OkHttpClient()实例</p>\n</li>\n<li><p>创建Request对象，通过连缀丰富对象</p>\n</li>\n<li><p>通过newCall方法获取Call对象，并调用execute方法发送请求并获取服务器返回的数据</p>\n</li>\n<li><p>得到返回数据的具体内容</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;com.squareup.okhttp3:okhttp:4.11.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sendRequestWithOkHttp</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//开启线程发送网络请求</span></span><br><span class=\"line\">       thread &#123;</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">val</span> client=OkHttpClient()</span><br><span class=\"line\">               <span class=\"keyword\">val</span> request=Request.Builder()</span><br><span class=\"line\">                   .url(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)                </span><br><span class=\"line\">                   .build()</span><br><span class=\"line\">               <span class=\"keyword\">val</span> response=client.newCall(request).execute()</span><br><span class=\"line\">               <span class=\"keyword\">val</span> responseData=response.body?.string()</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (responseData!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                   showResponse(responseData)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">               e.printStackTrace()</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>发送POST请求</strong></p>\n<ol>\n<li><p>安装依赖库</p>\n</li>\n<li><p>创建一个OkHttpClient()实例</p>\n</li>\n<li><p>创建一个RequestBody对象</p>\n</li>\n<li><p>创建Request对象，并调用post方法，通过连缀丰富对象</p>\n</li>\n<li><p>通过newCall方法获取Call对象，并调用execute方法发送请求并获取服务器返回的数据</p>\n</li>\n<li><p>得到返回数据的具体内容</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;com.squareup.okhttp3:okhttp:4.11.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sendRequestWithOkHttp</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//开启线程发送网络请求</span></span><br><span class=\"line\">       thread &#123;</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">val</span> client=OkHttpClient()</span><br><span class=\"line\">               <span class=\"keyword\">val</span> requestBody=FormBody.Builder()</span><br><span class=\"line\">                   .add(<span class=\"string\">&quot;username&quot;</span>,<span class=\"string\">&quot;admin&quot;</span>)</span><br><span class=\"line\">               \t.add(<span class=\"string\">&quot;password&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">               \t.build()</span><br><span class=\"line\">               <span class=\"keyword\">val</span> request=Request.Builder()</span><br><span class=\"line\">                   .url(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)   </span><br><span class=\"line\">               \t.post(requestBody)</span><br><span class=\"line\">                   .build()</span><br><span class=\"line\">               <span class=\"keyword\">val</span> response=client.newCall(request).execute()</span><br><span class=\"line\">               <span class=\"keyword\">val</span> responseData=response.body?.string()</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (responseData!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                   showResponse(responseData)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">               e.printStackTrace()</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h1 id=\"解析XML数据\"><a href=\"#解析XML数据\" class=\"headerlink\" title=\"解析XML数据\"></a>解析XML数据</h1><h3 id=\"Pull解析方式\"><a href=\"#Pull解析方式\" class=\"headerlink\" title=\"Pull解析方式\"></a>Pull解析方式</h3><ol>\n<li><p>创建XmlPullParserFactory实例,并得到得到XmlPullParser对象</p>\n</li>\n<li><p>将服务器返回的XML数据设置进去</p>\n</li>\n<li><p>开始解析，用geteventType()得到当前解析的事件</p>\n</li>\n<li><p>在while循环中不断进行解析，调用next获得下一个解析事件</p>\n</li>\n<li><p>在循环内通过getName获得名字，用nextText获取具体内容</p>\n</li>\n<li><p>为了让程序可以使用HTTP，还要在xml文件中添加配置</p>\n</li>\n<li><p>在AndroidManifest中启动配置文件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">parseXMLWithPull</span><span class=\"params\">(xmlData:<span class=\"type\">String</span>)</span></span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">//创建XmlPullParserFactory实例</span></span><br><span class=\"line\">               <span class=\"keyword\">val</span> factory=XmlPullParserFactory.newInstance()</span><br><span class=\"line\">               <span class=\"comment\">//借助XmlPullParserFactory实例得到XmlPullParser对象</span></span><br><span class=\"line\">               <span class=\"keyword\">val</span> xmlPullParser=factory.newPullParser()</span><br><span class=\"line\">               <span class=\"comment\">//将服务器返回的XML数据设置进去</span></span><br><span class=\"line\">               xmlPullParser.setInput(StringReade r(xmlData))</span><br><span class=\"line\">               <span class=\"comment\">//开始解析</span></span><br><span class=\"line\">               <span class=\"comment\">//用geteventType()得到当前解析的事件</span></span><br><span class=\"line\">               <span class=\"keyword\">var</span> eventType=xmlPullParser.eventType</span><br><span class=\"line\">               <span class=\"keyword\">var</span> id=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">               <span class=\"keyword\">var</span> name=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">               <span class=\"keyword\">var</span> version=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">               <span class=\"comment\">//当eventType!=XmlPullParser.END_DOCUMENT说明解析工作还未完成</span></span><br><span class=\"line\">               <span class=\"keyword\">while</span>(eventType!=XmlPullParser.END_DOCUMENT)&#123;</span><br><span class=\"line\">                   <span class=\"comment\">//通过getName得到当前节点的名字</span></span><br><span class=\"line\">                   <span class=\"keyword\">val</span> nodeName=xmlPullParser.name</span><br><span class=\"line\">                   <span class=\"keyword\">when</span> (eventType) &#123;</span><br><span class=\"line\">                       <span class=\"comment\">//开始解析某节点</span></span><br><span class=\"line\">                       XmlPullParser.START_TAG-&gt;&#123;</span><br><span class=\"line\">                           <span class=\"keyword\">when</span>(nodeName)&#123;</span><br><span class=\"line\">                                <span class=\"comment\">//通过nextText()获取节点具体内容</span></span><br><span class=\"line\">                               <span class=\"string\">&quot;id&quot;</span>-&gt;id=xmlPullParser.nextText()</span><br><span class=\"line\">                               <span class=\"string\">&quot;name&quot;</span>-&gt;name=xmlPullParser.nextText()</span><br><span class=\"line\">                               <span class=\"string\">&quot;version&quot;</span>-&gt;version=xmlPullParser.nextText()</span><br><span class=\"line\">                           &#125;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       <span class=\"comment\">//完成解析某个节点</span></span><br><span class=\"line\">                       XmlPullParser.END_TAG-&gt;&#123;</span><br><span class=\"line\">                           <span class=\"keyword\">if</span>(<span class=\"string\">&quot;app&quot;</span>==nodeName)&#123;</span><br><span class=\"line\">                               Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;id is <span class=\"variable\">$id</span>&quot;</span>)</span><br><span class=\"line\">                               Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;name is <span class=\"variable\">$name</span>&quot;</span>)</span><br><span class=\"line\">                               Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;version is <span class=\"variable\">$version</span>&quot;</span>)</span><br><span class=\"line\">                           &#125;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"comment\">//调用next()方法获取下一个解析事件</span></span><br><span class=\"line\">                   eventType=xmlPullParser.next()</span><br><span class=\"line\">   </span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">               e.printStackTrace()</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;network-security-config&gt;</span><br><span class=\"line\">    &lt;base-config cleartextTrafficPermitted=<span class=\"string\">&quot;true&quot;</span>&gt;</span><br><span class=\"line\">        &lt;trust-anchors&gt;</span><br><span class=\"line\">            &lt;certificates src=<span class=\"string\">&quot;system&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/trust-anchors&gt;</span><br><span class=\"line\">    &lt;/base-config&gt;</span><br><span class=\"line\">&lt;/network-security-config&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:networkSecurityConfig=<span class=\"string\">&quot;@xml/neiwork_config&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"SAX解析方式\"><a href=\"#SAX解析方式\" class=\"headerlink\" title=\"SAX解析方式\"></a>SAX解析方式</h3><ol>\n<li>新建一个类继承DefaultHandler,并重写五种方法</li>\n<li>创建SAXParserFactory实例</li>\n<li>获取XMLReader对象</li>\n<li>将编写的实例类设置到XMLReader中</li>\n<li>调用parse方法开始执行</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyHandle</span>:<span class=\"type\">DefaultHandler</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> nodeName=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> id:StringBuilder</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> name:StringBuilder</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> version:StringBuilder</span><br><span class=\"line\">    <span class=\"comment\">//开始XML解析时调用</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">startDocument</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        id=StringBuilder()</span><br><span class=\"line\">        name=StringBuilder()</span><br><span class=\"line\">        version=StringBuilder()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//开始解析某个节点时调用</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">startElement</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        uri: <span class=\"type\">String</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        localName: <span class=\"type\">String</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        qName: <span class=\"type\">String</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        attributes: <span class=\"type\">Attributes</span>?</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// localName记录当前节点名称</span></span><br><span class=\"line\">        nodeName= localName!!</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyHandle&quot;</span>, <span class=\"string\">&quot;uri is <span class=\"variable\">$uri</span>&quot;</span>)</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyHandle&quot;</span>, <span class=\"string\">&quot;localName is <span class=\"variable\">$localName</span>&quot;</span>)</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyHandle&quot;</span>, <span class=\"string\">&quot;qName is <span class=\"variable\">$qName</span>&quot;</span>)</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;MyHandle&quot;</span>, <span class=\"string\">&quot;attributes is <span class=\"variable\">$attributes</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取节点内内容时调用</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">characters</span><span class=\"params\">(ch: <span class=\"type\">CharArray</span>?, start: <span class=\"type\">Int</span>, length: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据当前节点名判断加到哪个StringBuilder对象中</span></span><br><span class=\"line\">        <span class=\"keyword\">when</span>(nodeName)&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;id&quot;</span>-&gt;id.append(ch,start,length)</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span>-&gt;name.append(ch,start,length)</span><br><span class=\"line\">            <span class=\"string\">&quot;version&quot;</span>-&gt;version.append(ch,start,length)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//完成解析某个节点时调用</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">endElement</span><span class=\"params\">(uri: <span class=\"type\">String</span>?, localName: <span class=\"type\">String</span>?, qName: <span class=\"type\">String</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;app&quot;</span>==localName)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//trim()方法是用于去除字符串两端的空白字符</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MyHandle&quot;</span>, <span class=\"string\">&quot;id is <span class=\"subst\">$&#123;id.toString().trim()&#125;</span> &quot;</span>)</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MyHandle&quot;</span>, <span class=\"string\">&quot;name is <span class=\"subst\">$&#123;name.toString().trim()&#125;</span> &quot;</span>)</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;MyHandle&quot;</span>, <span class=\"string\">&quot;version is <span class=\"subst\">$&#123;version.toString().trim()&#125;</span> &quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\">//最后将StringBuilder内容清空</span></span><br><span class=\"line\">            id.setLength(<span class=\"number\">0</span>)</span><br><span class=\"line\">            name.setLength(<span class=\"number\">0</span>)</span><br><span class=\"line\">            version.setLength(<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//完成xml解析时调用</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">endDocument</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.endDocument()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">parseXMLWithSAX</span><span class=\"params\">(xmlData: <span class=\"type\">String</span>)</span></span> = <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> factory=SAXParserFactory.newInstance()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> xmlReader=factory.newSAXParser().xmlReader</span><br><span class=\"line\">        <span class=\"keyword\">val</span> handler= MyHandle()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将MyHandle的实例设置到XMLReader中</span></span><br><span class=\"line\">        xmlReader.contentHandler=handler</span><br><span class=\"line\">        <span class=\"comment\">//开始执行解析</span></span><br><span class=\"line\">        xmlReader.parse(InputSource(StringReader(xmlData)))</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">        e.printStackTrace()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"解析JSON格式数据\"><a href=\"#解析JSON格式数据\" class=\"headerlink\" title=\"解析JSON格式数据\"></a>解析JSON格式数据</h1><h3 id=\"使用JSONObject\"><a href=\"#使用JSONObject\" class=\"headerlink\" title=\"使用JSONObject\"></a>使用JSONObject</h3><ol>\n<li>定义一个数组，将返回的数据传入到JSONArray对象中</li>\n<li>循环遍历数组，取出各个元素</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">parseJSONWithJSONObject</span><span class=\"params\">(jsonData: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//定义一个JSON数组</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> jsonArray=JSONArray(jsonData)</span><br><span class=\"line\">            <span class=\"comment\">//循环遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until jsonArray.length())&#123;</span><br><span class=\"line\">                <span class=\"comment\">//取出元素，每个取出的元素都是一个jsonObject对象</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> jsonObject=jsonArray.getJSONObject(i)</span><br><span class=\"line\">                <span class=\"keyword\">val</span> id=jsonObject.getString(<span class=\"string\">&quot;id&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">val</span> name=jsonObject.getString(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">val</span> version=jsonObject.getString(<span class=\"string\">&quot;version&quot;</span>)</span><br><span class=\"line\">                Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;id is <span class=\"variable\">$id</span>&quot;</span>)</span><br><span class=\"line\">                Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;name is <span class=\"variable\">$name</span>&quot;</span>)</span><br><span class=\"line\">                Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;version is <span class=\"variable\">$version</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">            e.printStackTrace()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用GSON\"><a href=\"#使用GSON\" class=\"headerlink\" title=\"使用GSON\"></a>使用GSON</h3><p><strong>优点</strong>：可以将一段JSON格式的字符串自动映射成一个对象，不需要再手动编写代码解析</p>\n<ol>\n<li>添加依赖库</li>\n<li>获取Gson对象</li>\n<li>如果是一个JSON数据，可以调用fromJson方法，如果是一段Json数组需要借助TypeToken将期望解析成的数据类型传入fromJson方法</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation (<span class=\"string\">&quot;com.google.code.gson:gson:2.10.1&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">parseJSONWithGSON</span><span class=\"params\">(jsonData: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">val</span> gson=Gson()</span><br><span class=\"line\">       <span class=\"keyword\">val</span> typeOf=<span class=\"keyword\">object</span> :TypeToken&lt;List&lt;App&gt;&gt;() &#123;&#125;.type</span><br><span class=\"line\">       <span class=\"keyword\">val</span> appList=gson.fromJson&lt;List&lt;App&gt;&gt;(jsonData,typeOf)</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(app <span class=\"keyword\">in</span> appList)&#123;</span><br><span class=\"line\">           Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;id is <span class=\"subst\">$&#123;app.id&#125;</span>&quot;</span>)</span><br><span class=\"line\">           Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;name is <span class=\"subst\">$&#123;app.name&#125;</span>&quot;</span>)</span><br><span class=\"line\">           Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;version is <span class=\"subst\">$&#123;app.version&#125;</span>&quot;</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"网络请求回调的实现方式\"><a href=\"#网络请求回调的实现方式\" class=\"headerlink\" title=\"网络请求回调的实现方式\"></a>网络请求回调的实现方式</h1><p><strong>采用回调的原因</strong>：所有耗时逻辑在子线程中进行，sendHttpRequest()方法在服务器还没来得及响应的时候就执行结束</p>\n<h3 id=\"HttpURLConnection方法\"><a href=\"#HttpURLConnection方法\" class=\"headerlink\" title=\"HttpURLConnection方法\"></a>HttpURLConnection方法</h3><ol>\n<li><p>将请求方法放入到单例类中</p>\n</li>\n<li><p>定义一个接口，并定义方法</p>\n</li>\n<li><p>给方法添加一个接口参数，并开启一个子线程</p>\n</li>\n<li><p>在线程中回调接口方法</p>\n</li>\n<li><p>调用sendRequestWithHttpURLConnection()方法，调用时还需将接口实例传入</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">HttpCallbackListener</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFinish</span><span class=\"params\">(response:<span class=\"type\">String</span>)</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onError</span><span class=\"params\">(e: <span class=\"type\">Exception</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> HttpUtil &#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sendRequestWithHttpURLConnection</span><span class=\"params\">(adress: <span class=\"type\">String</span>, listener: <span class=\"type\">HttpCallbackListener</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开启线程发送网络请求</span></span><br><span class=\"line\">        thread &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> connection: HttpURLConnection? = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> response = StringBuilder()</span><br><span class=\"line\">                <span class=\"keyword\">val</span> url = URL(adress)</span><br><span class=\"line\">                connection = url.openConnection() <span class=\"keyword\">as</span> HttpURLConnection</span><br><span class=\"line\">                connection.connectTimeout = <span class=\"number\">8000</span></span><br><span class=\"line\">                connection.readTimeout = <span class=\"number\">8000</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> input = connection.inputStream</span><br><span class=\"line\">                <span class=\"comment\">//下面对获取到的输入流进行读取</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> reader = BufferedReader(InputStreamReader(input))</span><br><span class=\"line\">                reader.use &#123;</span><br><span class=\"line\">                    reader.forEachLine &#123;</span><br><span class=\"line\">                        response.append(it)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//回调onFinish()方法</span></span><br><span class=\"line\">                listener.onFinish(response.toString())</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">                e.printStackTrace()</span><br><span class=\"line\">                <span class=\"comment\">//回调onError方法</span></span><br><span class=\"line\">                listener.onError(e)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                connection?.disconnect()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpUtil.sendRequestWithHttpURLConnection(adress,<span class=\"keyword\">object</span>:HttpCallbackListener&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFinish</span><span class=\"params\">(response:<span class=\"type\">String</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//得到服务器返回的具体内容</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onError</span><span class=\"params\">(e:<span class=\"type\">Exception</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//在这里对异常情况进行处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"OkHttp方法\"><a href=\"#OkHttp方法\" class=\"headerlink\" title=\"OkHttp方法\"></a>OkHttp方法</h3><ol>\n<li>将请求方法放入到单例类中</li>\n<li>传入okhttp3.Callback参数，这是oKHttp库自带的回调接口</li>\n<li>在newCall后调用enqueue方法，并传入接口参数</li>\n<li>调用sendRequestWithOkHttp()方法</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sendRequestWithOkHttp</span><span class=\"params\">(adress: <span class=\"type\">String</span>, callback: <span class=\"type\">okhttp3</span>.<span class=\"type\">Callback</span>)</span></span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">val</span> client = OkHttpClient()</span><br><span class=\"line\">       <span class=\"keyword\">val</span> request = Request.Builder()</span><br><span class=\"line\">           .url(adress)</span><br><span class=\"line\">           .build()</span><br><span class=\"line\">       <span class=\"comment\">//enqueue()内部帮我们开好了子线程，然后子线程中执行Http请求</span></span><br><span class=\"line\">    client.newCall(request).enqueue(callback)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpUtil.sendRequestWithOkHttp(adress,<span class=\"keyword\">object</span>:Callback&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResponse</span><span class=\"params\">(call:<span class=\"type\">Call</span>,response:<span class=\"type\">Response</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//得到服务器返回的具体内容</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> responseData=response.body?.string()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFailure</span><span class=\"params\">(call:<span class=\"type\">Call</span>,e:<span class=\"type\">IOException</span>)</span></span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">//在这里对异常情况进行处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"最好用的网络库：Retrofit\"><a href=\"#最好用的网络库：Retrofit\" class=\"headerlink\" title=\"最好用的网络库：Retrofit\"></a>最好用的网络库：Retrofit</h1><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><ol>\n<li><p>添加依赖库</p>\n</li>\n<li><p>定义接口，使用@GET注解表示调用方法时Retrofit会发起一条GET请求，请求地址就是注解中传入的具体参数</p>\n</li>\n<li><p>构建Retrofit对象,baseUrl用于指定所以Retrofit请求的根路径,addConverterFactory用于指定Retrofit在解析数据时所使用的转换库，这俩方法必须调用</p>\n</li>\n<li><p>创建接口的动态代理对象</p>\n</li>\n<li><p>调用接口方法返回一个Call&lt;List<App>&gt;对象，再调用它enqueue方法（发送请求时Retrofit会自动在内部开启线程，整个操作无需考虑线程切换问题）</p>\n</li>\n<li><p>调用response.body()方法获取Retrofit解析后的对象，也就是List<App>类型数据，最后遍历List</p>\n</li>\n<li><p>记得声明权限</p>\n</li>\n<li><p>如果服务器接口是HTTP，则需要进行网络安全配置，并启动配置</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Retrofit 核心库</span></span><br><span class=\"line\">    implementation (<span class=\"string\">&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Gson 转换器</span></span><br><span class=\"line\">    implementation (<span class=\"string\">&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.getAppDataBtn.setOnClickListener &#123;</span><br><span class=\"line\">          <span class=\"keyword\">val</span> retrofit=Retrofit.Builder()</span><br><span class=\"line\">              .baseUrl(<span class=\"string\">&quot;http://10.0.2.2/&quot;</span>)</span><br><span class=\"line\">              .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">              .build()</span><br><span class=\"line\">          <span class=\"keyword\">val</span> appService=retrofit.create(AppService::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">          appService.getAppData().enqueue( <span class=\"keyword\">object</span> :retrofit2.Callback&lt;List&lt;App&gt;&gt; &#123;</span><br><span class=\"line\">              <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResponse</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                  call: <span class=\"type\">retrofit2</span>.<span class=\"type\">Call</span>&lt;<span class=\"type\">List</span>&lt;<span class=\"type\">App</span>&gt;&gt;,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                  response: <span class=\"type\">retrofit2</span>.<span class=\"type\">Response</span>&lt;<span class=\"type\">List</span>&lt;<span class=\"type\">App</span>&gt;&gt;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">              )</span></span> &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">val</span> list=response.body()</span><br><span class=\"line\">                  <span class=\"keyword\">if</span>(list!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                      <span class=\"keyword\">for</span> (app <span class=\"keyword\">in</span> list)&#123;</span><br><span class=\"line\">                          Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;id is <span class=\"subst\">$&#123;app.id&#125;</span>&quot;</span>)</span><br><span class=\"line\">                          Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;name is <span class=\"subst\">$&#123;app.name&#125;</span>&quot;</span>)</span><br><span class=\"line\">                          Log.d(<span class=\"string\">&quot;MainActivity&quot;</span>, <span class=\"string\">&quot;version is <span class=\"subst\">$&#123;app.version&#125;</span>&quot;</span>)</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFailure</span><span class=\"params\">(call: <span class=\"type\">retrofit2</span>.<span class=\"type\">Call</span>&lt;<span class=\"type\">List</span>&lt;<span class=\"type\">App</span>&gt;&gt;, t: <span class=\"type\">Throwable</span>)</span></span> &#123;</span><br><span class=\"line\">                  t.printStackTrace()</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"处理复杂的接口地址类型\"><a href=\"#处理复杂的接口地址类型\" class=\"headerlink\" title=\"处理复杂的接口地址类型\"></a>处理复杂的接口地址类型</h3><p><code>class Data(val id:String,val content:String)</code></p>\n<ul>\n<li><p><strong>接口地址是静态</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET http:<span class=\"comment\">//example.com/get_data.json</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET(<span class=\"string\">&quot;get_data.json&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getData</span><span class=\"params\">()</span></span>:Call&lt;Data&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>接口地址是动态变化的</strong></p>\n<p>page部分代表页数，传入不同页数，返回数据也不同。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET http:<span class=\"comment\">//example.com/&lt;page&gt;/get_data.json</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET(<span class=\"string\">&quot;&#123;page&#125;/get_data.json&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getData</span><span class=\"params\">(<span class=\"meta\">@Path(<span class=\"string\">&quot;page&quot;</span>)</span> page:<span class=\"type\">Int</span>)</span></span>:Call&lt;Data&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>接口要求传入一系列参数</strong></p>\n<p>这是一个标准的带参数的GET请求格式，接口地址的最后使用问号连接参数，每个参数都是使用等号连接符连接的键值对，多个参数之间用&amp;分隔</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET http:<span class=\"comment\">//example.com/get_data.json?u=&lt;user&gt;&amp;t=&lt;token&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET(<span class=\"string\">&quot;get_data.json&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getData</span><span class=\"params\">(<span class=\"meta\">@Query(<span class=\"string\">&quot;u&quot;</span>)</span> user:<span class=\"type\">String</span>,<span class=\"meta\">@Query(<span class=\"string\">&quot;t&quot;</span>)</span> token:<span class=\"type\">String</span>)</span></span>:Call&lt;Data&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>多种请求类型</strong></p>\n<p>GET请求用于从服务器获取数据，POST请求用于从服务器提交数据，PUT和PATCH请求用于修改服务器上的数据，DELETE请求用于删除服务器上的数据</p>\n</li>\n<li><p><strong>DELETE请求</strong></p>\n<p><strong>使用ResponseBody的原因</strong>：POST,PUT,PATCH和DELETE与GET不同，它们更多用于对数据进行操作，而不是获取数据，所以对服务器响应的数据并不关心，ResponseBody表示能接收任意类型的响应数据，但不对数据进行解析。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE http:<span class=\"comment\">//example.com/data/&lt;id&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@DELETE(<span class=\"string\">&quot;data/&#123;id&#125;&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteData</span><span class=\"params\">(<span class=\"meta\">@Path(<span class=\"string\">&quot;id&quot;</span>)</span> id:<span class=\"type\">String</span>)</span></span>:Call&lt;ResponseBody&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>POST请求</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http:<span class=\"comment\">//example.com/data/create</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;id&quot;</span>:<span class=\"number\">1</span>,<span class=\"string\">&quot;content&quot;</span>:<span class=\"string\">&quot;The description for this data.&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@POST(<span class=\"string\">&quot;data/create&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createData</span><span class=\"params\">(<span class=\"meta\">@Body</span> <span class=\"keyword\">data</span>:<span class=\"type\">Data</span>)</span></span>:Call&lt;ResponseBody&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@Body注解作用</strong>：当发出请求时，会自动将Data对象中的数据转化成JSON格式文本，并放到HTTP请求的body部分，服务器收到请求后只需从body中将这一部分数据解析出来即可，这种写法也可用来给PUT,PATCH和DELETE请求提交数据</p>\n</li>\n<li><p><strong>在HTTP请求的header中指定参数</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET http:<span class=\"comment\">//example.com/get_data.json</span></span><br><span class=\"line\">User-Agent:okhttp</span><br><span class=\"line\">Cache-Control:max-age=<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>这些header参数其实就是一个个键值对</p>\n<p><strong>静态header声明：</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Headers(<span class=\"string\">&quot;User-Agent:okhttp&quot;</span>,<span class=\"string\">&quot;Cache-Control:max-age=0&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@GET(<span class=\"string\">&quot;get_data.json&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getData</span><span class=\"params\">()</span></span>:Call&lt;Data&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>动态header声明：</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ExampleService</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET(<span class=\"string\">&quot;get_data.json&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getData</span><span class=\"params\">(<span class=\"meta\">@Header(<span class=\"string\">&quot;User-Agent&quot;</span>)</span> userAgent:<span class=\"type\">String</span>,<span class=\"meta\">@Header(<span class=\"string\">&quot;Cache-Control&quot;</span>)</span> cacheControl:<span class=\"type\">String</span>)</span></span>:Call&lt;Data&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Retrofit构建器的最佳写法\"><a href=\"#Retrofit构建器的最佳写法\" class=\"headerlink\" title=\"Retrofit构建器的最佳写法\"></a>Retrofit构建器的最佳写法</h3><ul>\n<li><p>新建一个单例类</p>\n</li>\n<li><p>将构建Retrofit写法放入</p>\n</li>\n<li><p>使用泛型实化</p>\n</li>\n<li><p>调用</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> ServiceCreator&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> BASE_URL=<span class=\"string\">&quot;http://10.0.2.2/&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> retrofit=Retrofit.Builder()</span><br><span class=\"line\">                .baseUrl(BASE_URL)</span><br><span class=\"line\">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">create</span><span class=\"params\">(serviceClass: <span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>: T = retrofit.create(serviceClass)</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">create</span><span class=\"params\">()</span></span>: T = create(T::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> appService=ServiceCreator.create&lt;AppService&gt;()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n"},{"title":"自定义View(一)","date":"2025-07-04T09:08:12.000Z","_content":"\n# 基本步骤\n\n### 自定义View的属性\n\n- **format取值类型：**\n\n  | 格式类型    | 含义说明                                            |\n  | ----------- | --------------------------------------------------- |\n  | `reference` | 资源引用，例如 `@string/app_name`、`@drawable/icon` |\n  | `string`    | 字符串文本，例如 `\"Hello\"`                          |\n  | `integer`   | 整数，例如 `42`                                     |\n  | `boolean`   | 布尔值，例如 `true`、`false`                        |\n  | `color`     | 颜色值，例如 `#FF0000` 或 `@color/primary`          |\n  | `dimension` | 尺寸值，例如 `16dp`、`12sp`                         |\n  | `float`     | 浮点数，例如 `3.14`                                 |\n  | `enum`      | 枚举值（需配合 `<enum>` 使用）                      |\n  | `flag`      | 位标志（可多选，需配合 `<flag>` 使用）              |\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <attr name=\"titleText\" format=\"string\" />\n    <attr name=\"titleTextColor\" format=\"color\" />\n    <attr name=\"titleTextSize\" format=\"dimension\" />\n    <declare-styleable name=\"MyView\">\n        <attr name=\"titleText\" />\n        <attr name=\"titleTextColor\" />\n        <attr name=\"titleTextSize\" />\n    </declare-styleable>\n</resources>\n```\n\n### 在View的构造方法中获得我们自定义的属性\n\n```kotlin\n// 自定义 View，支持自定义属性\nclass MyView @JvmOverloads constructor(\n    context: Context,\n    attrs: AttributeSet? = null,\n    defStyleAttr: Int = 0  // 支持 style 属性\n) : View(context, attrs, defStyleAttr) {\n\n    // 显示的文本\n    private var mTitleText: String = \"\"\n\n    // 文本颜色\n    private var mTitleTextColor: Int = Color.BLACK\n\n    // 文本大小（像素）\n    private var mTitleTextSize: Int = 0\n\n    // 用于记录文本的边界矩形\n    //用于 存储当前文字的实际宽高，以便在 onMeasure() 和 onDraw() 中正确地布局和绘制文字。\n    private val mBound: Rect = Rect()\n\n    // 画笔对象,用于绘制文本、图形、颜色等\n    private val mPaint: Paint = Paint()\n\n    init {\n        // 读取自定义属性\n        attrs?.let {\n            //从 XML 中获取自定义属性值（包括默认值、主题值）并赋给你的 View 成员变量\n            val typedArray = context.theme.obtainStyledAttributes(\n                it,\n                R.styleable.MyView, // 需要在 attrs.xml 中声明\n                defStyleAttr,\n                0\n            )\n\n            try {\n                // 获取 titleText 属性\n                mTitleText = typedArray.getString(R.styleable.MyView_titleText) ?: \"\"\n\n                // 获取 titleTextColor 属性，默认为黑色\n                mTitleTextColor = typedArray.getColor(\n                    R.styleable.MyView_titleTextColor,\n                    Color.BLACK\n                )\n\n                // 获取 titleTextSize 属性，默认为 16sp\n                mTitleTextSize = typedArray.getDimensionPixelSize(\n                    R.styleable.MyView_titleTextSize,\n                    TypedValue.applyDimension(\n                        TypedValue.COMPLEX_UNIT_SP, 16f, resources.displayMetrics\n                    ).toInt()\n                )\n            } finally {\n                typedArray.recycle() // 回收 TypedArray，防止内存泄漏\n            }\n        }\n\n        // 初始化画笔\n        mPaint.textSize = mTitleTextSize.toFloat()\n        mPaint.color = mTitleTextColor\n\n        // 计算文本的边界\n        /**\n         * | 参数                  | 含义                         |\n         * | ------------------- | -------------------------- |\n         * | `mTitleText`        | 你要测量的文字内容                  |\n         * | `0`                 | 起始字符索引                     |\n         * | `mTitleText.length` | 结束字符索引（不包含）                |\n         * | `mBound`            | 用来存储文字所占矩形区域的对象，类型是 `Rect` |\n         *\n         */\n        mPaint.getTextBounds(mTitleText, 0, mTitleText.length, mBound)\n    }\n}\n```\n\n\n\n### [重写onMeasure()方法]（并非必要）\n\n```kotlin\n// 测量 View 的宽高\n    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\n        val widthMode = MeasureSpec.getMode(widthMeasureSpec)\n        val widthSize = MeasureSpec.getSize(widthMeasureSpec)\n        val heightMode = MeasureSpec.getMode(heightMeasureSpec)\n        val heightSize = MeasureSpec.getSize(heightMeasureSpec)\n\n        var width: Int\n        var height: Int\n\n        mPaint.textSize = mTitleTextSize.toFloat()\n        if (mTitleText.isNotEmpty()) {\n            mPaint.getTextBounds(mTitleText, 0, mTitleText.length, mBound)\n        }\n\n        val textWidth = mBound.width()\n        val textHeight = mBound.height()\n\n        // 根据测量模式决定最终宽度\n        width = when (widthMode) {\n            MeasureSpec.EXACTLY -> widthSize\n            MeasureSpec.AT_MOST -> minOf(widthSize, paddingLeft + textWidth + paddingRight)\n            MeasureSpec.UNSPECIFIED -> paddingLeft + textWidth + paddingRight\n            else -> paddingLeft + textWidth + paddingRight\n        }\n\n        // 根据测量模式决定最终高度\n        height = when (heightMode) {\n            MeasureSpec.EXACTLY -> heightSize\n            MeasureSpec.AT_MOST -> minOf(heightSize, paddingTop + textHeight + paddingBottom)\n            MeasureSpec.UNSPECIFIED -> paddingTop + textHeight + paddingBottom\n            else -> paddingTop + textHeight + paddingBottom\n        }\n    //提交尺寸\n        setMeasuredDimension(width, height)\n    }\n```\n\n\n\n### 重写onDraw()方法\n\n```kotlin\n // 绘制内容\n    override fun onDraw(canvas: Canvas) {\n        // 绘制黄色背景\n        mPaint.color = Color.YELLOW\n        /**\n         * | 参数       | 值                          | 含义                 |\n         * | -------- | -------------------------- | ------------------ |\n         * | `left`   | `0f`                       | 矩形左边缘坐标            |\n         * | `top`    | `0f`                       | 矩形上边缘坐标            |\n         * | `right`  | `measuredWidth.toFloat()`  | 矩形右边缘（整个 View 的宽度） |\n         * | `bottom` | `measuredHeight.toFloat()` | 矩形下边缘（整个 View 的高度） |\n         * | `mPaint` | 一个 `Paint` 对象              | 描述画笔颜色、样式、粗细等      |\n         *\n         */\n        canvas.drawRect(0f, 0f, measuredWidth.toFloat(), measuredHeight.toFloat(), mPaint)\n\n        // 绘制文本\n        mPaint.color = mTitleTextColor\n        /**\n         * | 参数           | 含义                            |\n         * | ------------ | ----------------------------- |\n         * | `mTitleText` | 要绘制的文字内容                      |\n         * | `x`          | 水平位置，**文字的起点 x 坐标**           |\n         * | `y`          | 垂直位置，**文字的 baseline（基线）y 坐标** |\n         * | `mPaint`     | 用于绘制的画笔，包括颜色、字体、大小等           |\n         *\n         */\n        canvas.drawText(\n            mTitleText,\n            (width / 2 - mBound.width() / 2).toFloat(), // 水平居中\n            (height / 2 + mBound.height() / 2).toFloat(), // 垂直居中\n            mPaint\n        )\n    }\n```\n\n如果还需要点击事件，可以在init{}里面加上注册监听器语句\n\n```kotlin\n this.setOnClickListener {\n            //写出具体逻辑\n            postInvalidate() // 重新绘制\n        }\n```\n\n### 引入布局\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:custom=\"http://schemas.android.com/apk/res-auto\"//必须自定义命名空间\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:ignore=\"ResAuto\">\n    <com.example.studyview.MyView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        custom:titleText=\"3712\"\n        android:padding=\"10dp\"\n        custom:titleTextColor=\"#ff0000\"\n        android:layout_centerInParent=\"true\"\n        custom:titleTextSize=\"40sp\"\n         />\n\n</RelativeLayout>\n```\n\n------\n\n","source":"_posts/自定义View(一).md","raw":"---\ntitle: 自定义View(一)\ndate: 2025-07-04 17:08:12\ncategories:\n- 自定义View\ntags:\n---\n\n# 基本步骤\n\n### 自定义View的属性\n\n- **format取值类型：**\n\n  | 格式类型    | 含义说明                                            |\n  | ----------- | --------------------------------------------------- |\n  | `reference` | 资源引用，例如 `@string/app_name`、`@drawable/icon` |\n  | `string`    | 字符串文本，例如 `\"Hello\"`                          |\n  | `integer`   | 整数，例如 `42`                                     |\n  | `boolean`   | 布尔值，例如 `true`、`false`                        |\n  | `color`     | 颜色值，例如 `#FF0000` 或 `@color/primary`          |\n  | `dimension` | 尺寸值，例如 `16dp`、`12sp`                         |\n  | `float`     | 浮点数，例如 `3.14`                                 |\n  | `enum`      | 枚举值（需配合 `<enum>` 使用）                      |\n  | `flag`      | 位标志（可多选，需配合 `<flag>` 使用）              |\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <attr name=\"titleText\" format=\"string\" />\n    <attr name=\"titleTextColor\" format=\"color\" />\n    <attr name=\"titleTextSize\" format=\"dimension\" />\n    <declare-styleable name=\"MyView\">\n        <attr name=\"titleText\" />\n        <attr name=\"titleTextColor\" />\n        <attr name=\"titleTextSize\" />\n    </declare-styleable>\n</resources>\n```\n\n### 在View的构造方法中获得我们自定义的属性\n\n```kotlin\n// 自定义 View，支持自定义属性\nclass MyView @JvmOverloads constructor(\n    context: Context,\n    attrs: AttributeSet? = null,\n    defStyleAttr: Int = 0  // 支持 style 属性\n) : View(context, attrs, defStyleAttr) {\n\n    // 显示的文本\n    private var mTitleText: String = \"\"\n\n    // 文本颜色\n    private var mTitleTextColor: Int = Color.BLACK\n\n    // 文本大小（像素）\n    private var mTitleTextSize: Int = 0\n\n    // 用于记录文本的边界矩形\n    //用于 存储当前文字的实际宽高，以便在 onMeasure() 和 onDraw() 中正确地布局和绘制文字。\n    private val mBound: Rect = Rect()\n\n    // 画笔对象,用于绘制文本、图形、颜色等\n    private val mPaint: Paint = Paint()\n\n    init {\n        // 读取自定义属性\n        attrs?.let {\n            //从 XML 中获取自定义属性值（包括默认值、主题值）并赋给你的 View 成员变量\n            val typedArray = context.theme.obtainStyledAttributes(\n                it,\n                R.styleable.MyView, // 需要在 attrs.xml 中声明\n                defStyleAttr,\n                0\n            )\n\n            try {\n                // 获取 titleText 属性\n                mTitleText = typedArray.getString(R.styleable.MyView_titleText) ?: \"\"\n\n                // 获取 titleTextColor 属性，默认为黑色\n                mTitleTextColor = typedArray.getColor(\n                    R.styleable.MyView_titleTextColor,\n                    Color.BLACK\n                )\n\n                // 获取 titleTextSize 属性，默认为 16sp\n                mTitleTextSize = typedArray.getDimensionPixelSize(\n                    R.styleable.MyView_titleTextSize,\n                    TypedValue.applyDimension(\n                        TypedValue.COMPLEX_UNIT_SP, 16f, resources.displayMetrics\n                    ).toInt()\n                )\n            } finally {\n                typedArray.recycle() // 回收 TypedArray，防止内存泄漏\n            }\n        }\n\n        // 初始化画笔\n        mPaint.textSize = mTitleTextSize.toFloat()\n        mPaint.color = mTitleTextColor\n\n        // 计算文本的边界\n        /**\n         * | 参数                  | 含义                         |\n         * | ------------------- | -------------------------- |\n         * | `mTitleText`        | 你要测量的文字内容                  |\n         * | `0`                 | 起始字符索引                     |\n         * | `mTitleText.length` | 结束字符索引（不包含）                |\n         * | `mBound`            | 用来存储文字所占矩形区域的对象，类型是 `Rect` |\n         *\n         */\n        mPaint.getTextBounds(mTitleText, 0, mTitleText.length, mBound)\n    }\n}\n```\n\n\n\n### [重写onMeasure()方法]（并非必要）\n\n```kotlin\n// 测量 View 的宽高\n    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\n        val widthMode = MeasureSpec.getMode(widthMeasureSpec)\n        val widthSize = MeasureSpec.getSize(widthMeasureSpec)\n        val heightMode = MeasureSpec.getMode(heightMeasureSpec)\n        val heightSize = MeasureSpec.getSize(heightMeasureSpec)\n\n        var width: Int\n        var height: Int\n\n        mPaint.textSize = mTitleTextSize.toFloat()\n        if (mTitleText.isNotEmpty()) {\n            mPaint.getTextBounds(mTitleText, 0, mTitleText.length, mBound)\n        }\n\n        val textWidth = mBound.width()\n        val textHeight = mBound.height()\n\n        // 根据测量模式决定最终宽度\n        width = when (widthMode) {\n            MeasureSpec.EXACTLY -> widthSize\n            MeasureSpec.AT_MOST -> minOf(widthSize, paddingLeft + textWidth + paddingRight)\n            MeasureSpec.UNSPECIFIED -> paddingLeft + textWidth + paddingRight\n            else -> paddingLeft + textWidth + paddingRight\n        }\n\n        // 根据测量模式决定最终高度\n        height = when (heightMode) {\n            MeasureSpec.EXACTLY -> heightSize\n            MeasureSpec.AT_MOST -> minOf(heightSize, paddingTop + textHeight + paddingBottom)\n            MeasureSpec.UNSPECIFIED -> paddingTop + textHeight + paddingBottom\n            else -> paddingTop + textHeight + paddingBottom\n        }\n    //提交尺寸\n        setMeasuredDimension(width, height)\n    }\n```\n\n\n\n### 重写onDraw()方法\n\n```kotlin\n // 绘制内容\n    override fun onDraw(canvas: Canvas) {\n        // 绘制黄色背景\n        mPaint.color = Color.YELLOW\n        /**\n         * | 参数       | 值                          | 含义                 |\n         * | -------- | -------------------------- | ------------------ |\n         * | `left`   | `0f`                       | 矩形左边缘坐标            |\n         * | `top`    | `0f`                       | 矩形上边缘坐标            |\n         * | `right`  | `measuredWidth.toFloat()`  | 矩形右边缘（整个 View 的宽度） |\n         * | `bottom` | `measuredHeight.toFloat()` | 矩形下边缘（整个 View 的高度） |\n         * | `mPaint` | 一个 `Paint` 对象              | 描述画笔颜色、样式、粗细等      |\n         *\n         */\n        canvas.drawRect(0f, 0f, measuredWidth.toFloat(), measuredHeight.toFloat(), mPaint)\n\n        // 绘制文本\n        mPaint.color = mTitleTextColor\n        /**\n         * | 参数           | 含义                            |\n         * | ------------ | ----------------------------- |\n         * | `mTitleText` | 要绘制的文字内容                      |\n         * | `x`          | 水平位置，**文字的起点 x 坐标**           |\n         * | `y`          | 垂直位置，**文字的 baseline（基线）y 坐标** |\n         * | `mPaint`     | 用于绘制的画笔，包括颜色、字体、大小等           |\n         *\n         */\n        canvas.drawText(\n            mTitleText,\n            (width / 2 - mBound.width() / 2).toFloat(), // 水平居中\n            (height / 2 + mBound.height() / 2).toFloat(), // 垂直居中\n            mPaint\n        )\n    }\n```\n\n如果还需要点击事件，可以在init{}里面加上注册监听器语句\n\n```kotlin\n this.setOnClickListener {\n            //写出具体逻辑\n            postInvalidate() // 重新绘制\n        }\n```\n\n### 引入布局\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:custom=\"http://schemas.android.com/apk/res-auto\"//必须自定义命名空间\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:ignore=\"ResAuto\">\n    <com.example.studyview.MyView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        custom:titleText=\"3712\"\n        android:padding=\"10dp\"\n        custom:titleTextColor=\"#ff0000\"\n        android:layout_centerInParent=\"true\"\n        custom:titleTextSize=\"40sp\"\n         />\n\n</RelativeLayout>\n```\n\n------\n\n","slug":"自定义View(一)","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcu0036s4s77l408zys","content":"<h1 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h1><h3 id=\"自定义View的属性\"><a href=\"#自定义View的属性\" class=\"headerlink\" title=\"自定义View的属性\"></a>自定义View的属性</h3><ul>\n<li><p><strong>format取值类型：</strong></p>\n<table>\n<thead>\n<tr>\n<th>格式类型</th>\n<th>含义说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>reference</code></td>\n<td>资源引用，例如 <code>@string/app_name</code>、<code>@drawable/icon</code></td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td>字符串文本，例如 <code>&quot;Hello&quot;</code></td>\n</tr>\n<tr>\n<td><code>integer</code></td>\n<td>整数，例如 <code>42</code></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td>布尔值，例如 <code>true</code>、<code>false</code></td>\n</tr>\n<tr>\n<td><code>color</code></td>\n<td>颜色值，例如 <code>#FF0000</code> 或 <code>@color/primary</code></td>\n</tr>\n<tr>\n<td><code>dimension</code></td>\n<td>尺寸值，例如 <code>16dp</code>、<code>12sp</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>浮点数，例如 <code>3.14</code></td>\n</tr>\n<tr>\n<td><code>enum</code></td>\n<td>枚举值（需配合 <code>&lt;enum&gt;</code> 使用）</td>\n</tr>\n<tr>\n<td><code>flag</code></td>\n<td>位标志（可多选，需配合 <code>&lt;flag&gt;</code> 使用）</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;titleText&quot;</span> format=<span class=\"string\">&quot;string&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;titleTextColor&quot;</span> format=<span class=\"string\">&quot;color&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;titleTextSize&quot;</span> format=<span class=\"string\">&quot;dimension&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;declare-styleable name=<span class=\"string\">&quot;MyView&quot;</span>&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;titleText&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;titleTextColor&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;titleTextSize&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/declare-styleable&gt;</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在View的构造方法中获得我们自定义的属性\"><a href=\"#在View的构造方法中获得我们自定义的属性\" class=\"headerlink\" title=\"在View的构造方法中获得我们自定义的属性\"></a>在View的构造方法中获得我们自定义的属性</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义 View，支持自定义属性</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyView</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span>(</span><br><span class=\"line\">    context: Context,</span><br><span class=\"line\">    attrs: AttributeSet? = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    defStyleAttr: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>  <span class=\"comment\">// 支持 style 属性</span></span><br><span class=\"line\">) : View(context, attrs, defStyleAttr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 显示的文本</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mTitleText: String = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 文本颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mTitleTextColor: <span class=\"built_in\">Int</span> = Color.BLACK</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 文本大小（像素）</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mTitleTextSize: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于记录文本的边界矩形</span></span><br><span class=\"line\">    <span class=\"comment\">//用于 存储当前文字的实际宽高，以便在 onMeasure() 和 onDraw() 中正确地布局和绘制文字。</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mBound: Rect = Rect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 画笔对象,用于绘制文本、图形、颜色等</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mPaint: Paint = Paint()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 读取自定义属性</span></span><br><span class=\"line\">        attrs?.let &#123;</span><br><span class=\"line\">            <span class=\"comment\">//从 XML 中获取自定义属性值（包括默认值、主题值）并赋给你的 View 成员变量</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> typedArray = context.theme.obtainStyledAttributes(</span><br><span class=\"line\">                it,</span><br><span class=\"line\">                R.styleable.MyView, <span class=\"comment\">// 需要在 attrs.xml 中声明</span></span><br><span class=\"line\">                defStyleAttr,</span><br><span class=\"line\">                <span class=\"number\">0</span></span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 获取 titleText 属性</span></span><br><span class=\"line\">                mTitleText = typedArray.getString(R.styleable.MyView_titleText) ?: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 获取 titleTextColor 属性，默认为黑色</span></span><br><span class=\"line\">                mTitleTextColor = typedArray.getColor(</span><br><span class=\"line\">                    R.styleable.MyView_titleTextColor,</span><br><span class=\"line\">                    Color.BLACK</span><br><span class=\"line\">                )</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 获取 titleTextSize 属性，默认为 16sp</span></span><br><span class=\"line\">                mTitleTextSize = typedArray.getDimensionPixelSize(</span><br><span class=\"line\">                    R.styleable.MyView_titleTextSize,</span><br><span class=\"line\">                    TypedValue.applyDimension(</span><br><span class=\"line\">                        TypedValue.COMPLEX_UNIT_SP, <span class=\"number\">16f</span>, resources.displayMetrics</span><br><span class=\"line\">                    ).toInt()</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                typedArray.recycle() <span class=\"comment\">// 回收 TypedArray，防止内存泄漏</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 初始化画笔</span></span><br><span class=\"line\">        mPaint.textSize = mTitleTextSize.toFloat()</span><br><span class=\"line\">        mPaint.color = mTitleTextColor</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算文本的边界</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * | 参数                  | 含义                         |</span></span><br><span class=\"line\"><span class=\"comment\">         * | ------------------- | -------------------------- |</span></span><br><span class=\"line\"><span class=\"comment\">         * | `mTitleText`        | 你要测量的文字内容                  |</span></span><br><span class=\"line\"><span class=\"comment\">         * | `0`                 | 起始字符索引                     |</span></span><br><span class=\"line\"><span class=\"comment\">         * | `mTitleText.length` | 结束字符索引（不包含）                |</span></span><br><span class=\"line\"><span class=\"comment\">         * | `mBound`            | 用来存储文字所占矩形区域的对象，类型是 `Rect` |</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        mPaint.getTextBounds(mTitleText, <span class=\"number\">0</span>, mTitleText.length, mBound)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"重写onMeasure-方法-（并非必要）\"><a href=\"#重写onMeasure-方法-（并非必要）\" class=\"headerlink\" title=\"[重写onMeasure()方法]（并非必要）\"></a>[重写onMeasure()方法]（并非必要）</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测量 View 的宽高</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onMeasure</span><span class=\"params\">(widthMeasureSpec: <span class=\"type\">Int</span>, heightMeasureSpec: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> widthMode = MeasureSpec.getMode(widthMeasureSpec)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> widthSize = MeasureSpec.getSize(widthMeasureSpec)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> heightMode = MeasureSpec.getMode(heightMeasureSpec)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> heightSize = MeasureSpec.getSize(heightMeasureSpec)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> width: <span class=\"built_in\">Int</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> height: <span class=\"built_in\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">        mPaint.textSize = mTitleTextSize.toFloat()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mTitleText.isNotEmpty()) &#123;</span><br><span class=\"line\">            mPaint.getTextBounds(mTitleText, <span class=\"number\">0</span>, mTitleText.length, mBound)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> textWidth = mBound.width()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> textHeight = mBound.height()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据测量模式决定最终宽度</span></span><br><span class=\"line\">        width = <span class=\"keyword\">when</span> (widthMode) &#123;</span><br><span class=\"line\">            MeasureSpec.EXACTLY -&gt; widthSize</span><br><span class=\"line\">            MeasureSpec.AT_MOST -&gt; minOf(widthSize, paddingLeft + textWidth + paddingRight)</span><br><span class=\"line\">            MeasureSpec.UNSPECIFIED -&gt; paddingLeft + textWidth + paddingRight</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; paddingLeft + textWidth + paddingRight</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据测量模式决定最终高度</span></span><br><span class=\"line\">        height = <span class=\"keyword\">when</span> (heightMode) &#123;</span><br><span class=\"line\">            MeasureSpec.EXACTLY -&gt; heightSize</span><br><span class=\"line\">            MeasureSpec.AT_MOST -&gt; minOf(heightSize, paddingTop + textHeight + paddingBottom)</span><br><span class=\"line\">            MeasureSpec.UNSPECIFIED -&gt; paddingTop + textHeight + paddingBottom</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; paddingTop + textHeight + paddingBottom</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">//提交尺寸</span></span><br><span class=\"line\">        setMeasuredDimension(width, height)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"重写onDraw-方法\"><a href=\"#重写onDraw-方法\" class=\"headerlink\" title=\"重写onDraw()方法\"></a>重写onDraw()方法</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 绘制内容</span></span><br><span class=\"line\">   <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDraw</span><span class=\"params\">(canvas: <span class=\"type\">Canvas</span>)</span></span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 绘制黄色背景</span></span><br><span class=\"line\">       mPaint.color = Color.YELLOW</span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * | 参数       | 值                          | 含义                 |</span></span><br><span class=\"line\"><span class=\"comment\">        * | -------- | -------------------------- | ------------------ |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `left`   | `0f`                       | 矩形左边缘坐标            |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `top`    | `0f`                       | 矩形上边缘坐标            |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `right`  | `measuredWidth.toFloat()`  | 矩形右边缘（整个 View 的宽度） |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `bottom` | `measuredHeight.toFloat()` | 矩形下边缘（整个 View 的高度） |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `mPaint` | 一个 `Paint` 对象              | 描述画笔颜色、样式、粗细等      |</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       canvas.drawRect(<span class=\"number\">0f</span>, <span class=\"number\">0f</span>, measuredWidth.toFloat(), measuredHeight.toFloat(), mPaint)</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 绘制文本</span></span><br><span class=\"line\">       mPaint.color = mTitleTextColor</span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * | 参数           | 含义                            |</span></span><br><span class=\"line\"><span class=\"comment\">        * | ------------ | ----------------------------- |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `mTitleText` | 要绘制的文字内容                      |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `x`          | 水平位置，**文字的起点 x 坐标**           |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `y`          | 垂直位置，**文字的 baseline（基线）y 坐标** |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `mPaint`     | 用于绘制的画笔，包括颜色、字体、大小等           |</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       canvas.drawText(</span><br><span class=\"line\">           mTitleText,</span><br><span class=\"line\">           (width / <span class=\"number\">2</span> - mBound.width() / <span class=\"number\">2</span>).toFloat(), <span class=\"comment\">// 水平居中</span></span><br><span class=\"line\">           (height / <span class=\"number\">2</span> + mBound.height() / <span class=\"number\">2</span>).toFloat(), <span class=\"comment\">// 垂直居中</span></span><br><span class=\"line\">           mPaint</span><br><span class=\"line\">       )</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果还需要点击事件，可以在init{}里面加上注册监听器语句</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setOnClickListener &#123;</span><br><span class=\"line\">           <span class=\"comment\">//写出具体逻辑</span></span><br><span class=\"line\">           postInvalidate() <span class=\"comment\">// 重新绘制</span></span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引入布局\"><a href=\"#引入布局\" class=\"headerlink\" title=\"引入布局\"></a>引入布局</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;RelativeLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    xmlns:custom=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span><span class=\"comment\">//必须自定义命名空间</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    tools:ignore=<span class=\"string\">&quot;ResAuto&quot;</span>&gt;</span><br><span class=\"line\">    &lt;com.example.studyview.MyView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        custom:titleText=<span class=\"string\">&quot;3712&quot;</span></span><br><span class=\"line\">        android:padding=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        custom:titleTextColor=<span class=\"string\">&quot;#ff0000&quot;</span></span><br><span class=\"line\">        android:layout_centerInParent=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">        custom:titleTextSize=<span class=\"string\">&quot;40sp&quot;</span></span><br><span class=\"line\">         /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"基本步骤\n自定义View的属性\n * format取值类型：\n   \n   格式类型含义说明reference资源引用，例如 @string/app_name、@drawable/iconstring字符串文本，例如 \"Hello\"integer整数，例如 42boolean布尔值，例如 true、falsecolor颜色值，例如 #FF0000 或 @color/primarydimension尺寸值，例如 16dp、12spfloat浮点数，例如 3.14enum枚举值（需配合 <enum> 使用）flag位标志（可多选，需配合 <flag> 使用）\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n","more":"<h1 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h1><h3 id=\"自定义View的属性\"><a href=\"#自定义View的属性\" class=\"headerlink\" title=\"自定义View的属性\"></a>自定义View的属性</h3><ul>\n<li><p><strong>format取值类型：</strong></p>\n<table>\n<thead>\n<tr>\n<th>格式类型</th>\n<th>含义说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>reference</code></td>\n<td>资源引用，例如 <code>@string/app_name</code>、<code>@drawable/icon</code></td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td>字符串文本，例如 <code>&quot;Hello&quot;</code></td>\n</tr>\n<tr>\n<td><code>integer</code></td>\n<td>整数，例如 <code>42</code></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td>布尔值，例如 <code>true</code>、<code>false</code></td>\n</tr>\n<tr>\n<td><code>color</code></td>\n<td>颜色值，例如 <code>#FF0000</code> 或 <code>@color/primary</code></td>\n</tr>\n<tr>\n<td><code>dimension</code></td>\n<td>尺寸值，例如 <code>16dp</code>、<code>12sp</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>浮点数，例如 <code>3.14</code></td>\n</tr>\n<tr>\n<td><code>enum</code></td>\n<td>枚举值（需配合 <code>&lt;enum&gt;</code> 使用）</td>\n</tr>\n<tr>\n<td><code>flag</code></td>\n<td>位标志（可多选，需配合 <code>&lt;flag&gt;</code> 使用）</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;titleText&quot;</span> format=<span class=\"string\">&quot;string&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;titleTextColor&quot;</span> format=<span class=\"string\">&quot;color&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;titleTextSize&quot;</span> format=<span class=\"string\">&quot;dimension&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;declare-styleable name=<span class=\"string\">&quot;MyView&quot;</span>&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;titleText&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;titleTextColor&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;titleTextSize&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/declare-styleable&gt;</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在View的构造方法中获得我们自定义的属性\"><a href=\"#在View的构造方法中获得我们自定义的属性\" class=\"headerlink\" title=\"在View的构造方法中获得我们自定义的属性\"></a>在View的构造方法中获得我们自定义的属性</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义 View，支持自定义属性</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyView</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span>(</span><br><span class=\"line\">    context: Context,</span><br><span class=\"line\">    attrs: AttributeSet? = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    defStyleAttr: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>  <span class=\"comment\">// 支持 style 属性</span></span><br><span class=\"line\">) : View(context, attrs, defStyleAttr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 显示的文本</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mTitleText: String = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 文本颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mTitleTextColor: <span class=\"built_in\">Int</span> = Color.BLACK</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 文本大小（像素）</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mTitleTextSize: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于记录文本的边界矩形</span></span><br><span class=\"line\">    <span class=\"comment\">//用于 存储当前文字的实际宽高，以便在 onMeasure() 和 onDraw() 中正确地布局和绘制文字。</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mBound: Rect = Rect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 画笔对象,用于绘制文本、图形、颜色等</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mPaint: Paint = Paint()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 读取自定义属性</span></span><br><span class=\"line\">        attrs?.let &#123;</span><br><span class=\"line\">            <span class=\"comment\">//从 XML 中获取自定义属性值（包括默认值、主题值）并赋给你的 View 成员变量</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> typedArray = context.theme.obtainStyledAttributes(</span><br><span class=\"line\">                it,</span><br><span class=\"line\">                R.styleable.MyView, <span class=\"comment\">// 需要在 attrs.xml 中声明</span></span><br><span class=\"line\">                defStyleAttr,</span><br><span class=\"line\">                <span class=\"number\">0</span></span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 获取 titleText 属性</span></span><br><span class=\"line\">                mTitleText = typedArray.getString(R.styleable.MyView_titleText) ?: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 获取 titleTextColor 属性，默认为黑色</span></span><br><span class=\"line\">                mTitleTextColor = typedArray.getColor(</span><br><span class=\"line\">                    R.styleable.MyView_titleTextColor,</span><br><span class=\"line\">                    Color.BLACK</span><br><span class=\"line\">                )</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 获取 titleTextSize 属性，默认为 16sp</span></span><br><span class=\"line\">                mTitleTextSize = typedArray.getDimensionPixelSize(</span><br><span class=\"line\">                    R.styleable.MyView_titleTextSize,</span><br><span class=\"line\">                    TypedValue.applyDimension(</span><br><span class=\"line\">                        TypedValue.COMPLEX_UNIT_SP, <span class=\"number\">16f</span>, resources.displayMetrics</span><br><span class=\"line\">                    ).toInt()</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                typedArray.recycle() <span class=\"comment\">// 回收 TypedArray，防止内存泄漏</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 初始化画笔</span></span><br><span class=\"line\">        mPaint.textSize = mTitleTextSize.toFloat()</span><br><span class=\"line\">        mPaint.color = mTitleTextColor</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算文本的边界</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * | 参数                  | 含义                         |</span></span><br><span class=\"line\"><span class=\"comment\">         * | ------------------- | -------------------------- |</span></span><br><span class=\"line\"><span class=\"comment\">         * | `mTitleText`        | 你要测量的文字内容                  |</span></span><br><span class=\"line\"><span class=\"comment\">         * | `0`                 | 起始字符索引                     |</span></span><br><span class=\"line\"><span class=\"comment\">         * | `mTitleText.length` | 结束字符索引（不包含）                |</span></span><br><span class=\"line\"><span class=\"comment\">         * | `mBound`            | 用来存储文字所占矩形区域的对象，类型是 `Rect` |</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        mPaint.getTextBounds(mTitleText, <span class=\"number\">0</span>, mTitleText.length, mBound)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"重写onMeasure-方法-（并非必要）\"><a href=\"#重写onMeasure-方法-（并非必要）\" class=\"headerlink\" title=\"[重写onMeasure()方法]（并非必要）\"></a>[重写onMeasure()方法]（并非必要）</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测量 View 的宽高</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onMeasure</span><span class=\"params\">(widthMeasureSpec: <span class=\"type\">Int</span>, heightMeasureSpec: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> widthMode = MeasureSpec.getMode(widthMeasureSpec)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> widthSize = MeasureSpec.getSize(widthMeasureSpec)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> heightMode = MeasureSpec.getMode(heightMeasureSpec)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> heightSize = MeasureSpec.getSize(heightMeasureSpec)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> width: <span class=\"built_in\">Int</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> height: <span class=\"built_in\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">        mPaint.textSize = mTitleTextSize.toFloat()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mTitleText.isNotEmpty()) &#123;</span><br><span class=\"line\">            mPaint.getTextBounds(mTitleText, <span class=\"number\">0</span>, mTitleText.length, mBound)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> textWidth = mBound.width()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> textHeight = mBound.height()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据测量模式决定最终宽度</span></span><br><span class=\"line\">        width = <span class=\"keyword\">when</span> (widthMode) &#123;</span><br><span class=\"line\">            MeasureSpec.EXACTLY -&gt; widthSize</span><br><span class=\"line\">            MeasureSpec.AT_MOST -&gt; minOf(widthSize, paddingLeft + textWidth + paddingRight)</span><br><span class=\"line\">            MeasureSpec.UNSPECIFIED -&gt; paddingLeft + textWidth + paddingRight</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; paddingLeft + textWidth + paddingRight</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据测量模式决定最终高度</span></span><br><span class=\"line\">        height = <span class=\"keyword\">when</span> (heightMode) &#123;</span><br><span class=\"line\">            MeasureSpec.EXACTLY -&gt; heightSize</span><br><span class=\"line\">            MeasureSpec.AT_MOST -&gt; minOf(heightSize, paddingTop + textHeight + paddingBottom)</span><br><span class=\"line\">            MeasureSpec.UNSPECIFIED -&gt; paddingTop + textHeight + paddingBottom</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; paddingTop + textHeight + paddingBottom</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">//提交尺寸</span></span><br><span class=\"line\">        setMeasuredDimension(width, height)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"重写onDraw-方法\"><a href=\"#重写onDraw-方法\" class=\"headerlink\" title=\"重写onDraw()方法\"></a>重写onDraw()方法</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 绘制内容</span></span><br><span class=\"line\">   <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDraw</span><span class=\"params\">(canvas: <span class=\"type\">Canvas</span>)</span></span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 绘制黄色背景</span></span><br><span class=\"line\">       mPaint.color = Color.YELLOW</span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * | 参数       | 值                          | 含义                 |</span></span><br><span class=\"line\"><span class=\"comment\">        * | -------- | -------------------------- | ------------------ |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `left`   | `0f`                       | 矩形左边缘坐标            |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `top`    | `0f`                       | 矩形上边缘坐标            |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `right`  | `measuredWidth.toFloat()`  | 矩形右边缘（整个 View 的宽度） |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `bottom` | `measuredHeight.toFloat()` | 矩形下边缘（整个 View 的高度） |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `mPaint` | 一个 `Paint` 对象              | 描述画笔颜色、样式、粗细等      |</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       canvas.drawRect(<span class=\"number\">0f</span>, <span class=\"number\">0f</span>, measuredWidth.toFloat(), measuredHeight.toFloat(), mPaint)</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 绘制文本</span></span><br><span class=\"line\">       mPaint.color = mTitleTextColor</span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * | 参数           | 含义                            |</span></span><br><span class=\"line\"><span class=\"comment\">        * | ------------ | ----------------------------- |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `mTitleText` | 要绘制的文字内容                      |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `x`          | 水平位置，**文字的起点 x 坐标**           |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `y`          | 垂直位置，**文字的 baseline（基线）y 坐标** |</span></span><br><span class=\"line\"><span class=\"comment\">        * | `mPaint`     | 用于绘制的画笔，包括颜色、字体、大小等           |</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       canvas.drawText(</span><br><span class=\"line\">           mTitleText,</span><br><span class=\"line\">           (width / <span class=\"number\">2</span> - mBound.width() / <span class=\"number\">2</span>).toFloat(), <span class=\"comment\">// 水平居中</span></span><br><span class=\"line\">           (height / <span class=\"number\">2</span> + mBound.height() / <span class=\"number\">2</span>).toFloat(), <span class=\"comment\">// 垂直居中</span></span><br><span class=\"line\">           mPaint</span><br><span class=\"line\">       )</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果还需要点击事件，可以在init{}里面加上注册监听器语句</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setOnClickListener &#123;</span><br><span class=\"line\">           <span class=\"comment\">//写出具体逻辑</span></span><br><span class=\"line\">           postInvalidate() <span class=\"comment\">// 重新绘制</span></span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引入布局\"><a href=\"#引入布局\" class=\"headerlink\" title=\"引入布局\"></a>引入布局</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;RelativeLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    xmlns:custom=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span><span class=\"comment\">//必须自定义命名空间</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    tools:ignore=<span class=\"string\">&quot;ResAuto&quot;</span>&gt;</span><br><span class=\"line\">    &lt;com.example.studyview.MyView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        custom:titleText=<span class=\"string\">&quot;3712&quot;</span></span><br><span class=\"line\">        android:padding=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        custom:titleTextColor=<span class=\"string\">&quot;#ff0000&quot;</span></span><br><span class=\"line\">        android:layout_centerInParent=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">        custom:titleTextSize=<span class=\"string\">&quot;40sp&quot;</span></span><br><span class=\"line\">         /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"自定义View(二)","date":"2025-07-05T12:59:14.000Z","_content":"\n### 目的\n\n自定义View显示一张图片，下面包含图片的文本介绍\n\n### 实现\n\n- **自定义属性**\n\n```kotlin\n<resources>\n    <attr name=\"titleText\" format=\"string\" />\n    <attr name=\"titleTextColor\" format=\"color\" />\n    <attr name=\"titleTextSize\" format=\"dimension\" />\n    <attr name=\"image\" format=\"reference\"/>\n    <attr name=\"imageScaleType\">\n        <enum name=\"fillXY\" value=\"0\" />\n        <enum name=\"center\" value=\"1\" />\n    </attr>\n\n    <declare-styleable name=\"MyView\">\n        <attr name=\"titleText\" />\n        <attr name=\"titleTextColor\" />\n        <attr name=\"titleTextSize\" />\n        <attr name=\"image\"/>\n        <attr name=\"imageScaleType\"/>\n    </declare-styleable>\n</resources>\n```\n\n- **获取自定义属性**\n\n```kotlin\n// 自定义View类，继承自View\nclass MyView @JvmOverloads constructor(\n    context: Context, // 上下文对象\n    attrs: AttributeSet? = null, // XML属性集，可为空\n    defStyleAttr: Int = 0  // 默认样式属性，支持style属性\n) : View(context, attrs, defStyleAttr) {\n    // 声明位图变量，用于存储图片\n    private var mImage: Bitmap? = null\n    // 声明图片缩放类型变量\n    private var mImageScale: Int = 0\n    // 声明标题文本变量\n    private var mTitle: String = \"\"\n    // 声明文本颜色变量，默认为黑色\n    private var mTextColor: Int = Color.BLACK\n    // 声明文本大小变量\n    private var mTextSize: Int = 0\n    // 声明View宽度变量\n    private var mWidth=0\n    // 声明View高度变量\n    private var mHeight=0\n    // 声明矩形对象，用于定义绘制区域\n    private val rect = Rect()\n    // 声明画笔对象，用于绘制图形\n    private val mPaint = Paint()\n    // 声明文本边界矩形，用于计算文本尺寸\n    private val mTextBound = Rect()\n\n    // 初始化代码块\n    init {\n        // 获取主题中的样式属性\n        val a = context.theme.obtainStyledAttributes(\n            attrs, // 属性集\n            R.styleable.MyView, // 自定义属性数组\n            defStyleAttr, // 默认样式\n            0 // 默认值\n        )\n\n        // 遍历所有属性\n        for (i in 0 until a.indexCount) {\n            // 根据属性类型进行不同处理\n            when (val attr = a.getIndex(i)) {\n                // 处理图片属性\n                R.styleable.MyView_image -> {\n                    // 获取资源ID\n                    val resId = a.getResourceId(attr, 0)\n                    // 如果资源ID有效，则解码位图\n                    if (resId != 0) {\n                        mImage = BitmapFactory.decodeResource(resources, resId)\n                    }\n                }\n                // 处理图片缩放类型属性\n                R.styleable.MyView_imageScaleType -> {\n                    mImageScale = a.getInt(attr, 0)\n                }\n                // 处理标题文本属性\n                R.styleable.MyView_titleText -> {\n                    mTitle = a.getString(attr) ?: \"\"\n                }\n                // 处理标题文本颜色属性\n                R.styleable.MyView_titleTextColor -> {\n                    mTextColor = a.getColor(attr, Color.BLACK)\n                }\n                // 处理标题文本大小属性\n                R.styleable.MyView_titleTextSize -> {\n                    mTextSize = a.getDimensionPixelSize(\n                        attr, // 属性索引\n                        // 默认值：16sp转换为像素\n                        TypedValue.applyDimension(\n                            TypedValue.COMPLEX_UNIT_SP, // 单位类型：sp\n                            16f, // 默认大小：16\n                            resources.displayMetrics // 显示指标\n                        ).toInt() // 转换为整数\n                    )\n                }\n            }\n        }\n\n        // 回收属性对象，释放资源\n        a.recycle()\n\n        // 设置画笔的文本大小\n        mPaint.textSize = mTextSize.toFloat()\n        // 计算文本边界，获取文本的宽高信息\n        mPaint.getTextBounds(mTitle, 0, mTitle.length, mTextBound)\n    }\n}\n```\n\n- **重写onMeasure方法**\n\n```kotlin\n// 重写测量方法，计算View的尺寸\n    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\n        // 处理宽度测量\n        var specMode = MeasureSpec.getMode(widthMeasureSpec) // 获取宽度测量模式\n        var specSize = MeasureSpec.getSize(widthMeasureSpec) // 获取宽度测量大小\n\n        // 根据测量模式计算宽度\n        mWidth = when (specMode) {\n            // 精确模式：直接使用指定的大小\n            MeasureSpec.EXACTLY -> {\n                Log.e(\"xxx\", \"EXACTLY\") // 输出日志\n                specSize\n            }\n            // 最大模式：不能超过指定大小\n            MeasureSpec.AT_MOST -> {\n                // 根据图片计算期望宽度\n                val desireByImg = paddingLeft + paddingRight + (mImage?.width ?: 0)\n                // 根据文本计算期望宽度\n                val desireByTitle = paddingLeft + paddingRight + mTextBound.width()\n                // 取两者中的最大值\n                val desire = maxOf(desireByImg, desireByTitle)\n                Log.e(\"xxx\", \"AT_MOST\") // 输出日志\n                // 返回期望值和指定值中的较小值\n                minOf(desire, specSize)\n            }\n            // 未指定模式：使用期望的大小\n            else -> { // MeasureSpec.UNSPECIFIED\n                // 根据图片计算期望宽度\n                val desireByImg = paddingLeft + paddingRight + (mImage?.width ?: 0)\n                // 根据文本计算期望宽度\n                val desireByTitle = paddingLeft + paddingRight + mTextBound.width()\n                // 返回两者中的最大值\n                maxOf(desireByImg, desireByTitle)\n            }\n        }\n\n        // 处理高度测量\n        specMode = MeasureSpec.getMode(heightMeasureSpec) // 获取高度测量模式\n        specSize = MeasureSpec.getSize(heightMeasureSpec) // 获取高度测量大小\n\n        // 根据测量模式计算高度\n        mHeight = when (specMode) {\n            // 精确模式：直接使用指定的大小\n            MeasureSpec.EXACTLY -> specSize\n            // 最大模式：不能超过指定大小\n            MeasureSpec.AT_MOST -> {\n                // 计算期望高度：内边距 + 图片高度 + 文本高度\n                val desire = paddingTop + paddingBottom + (mImage?.height ?: 0) + mTextBound.height()\n                // 返回期望值和指定值中的较小值\n                minOf(desire, specSize)\n            }\n            // 未指定模式：使用期望的大小\n            else -> {\n                // 计算期望高度：内边距 + 图片高度 + 文本高度\n                paddingTop + paddingBottom + (mImage?.height ?: 0) + mTextBound.height()\n            }\n        }\n\n        // 设置测量结果，告诉父View我们的尺寸\n        setMeasuredDimension(mWidth, mHeight)\n    }\n```\n\n- **重写onDraw方法**\n\n```kotlin\n// 重写绘制方法，在画布上绘制内容\n    override fun onDraw(canvas: Canvas) {\n        // 绘制边框\n        mPaint.strokeWidth = 4f // 设置边框宽度为4像素\n        mPaint.style = Paint.Style.STROKE // 设置画笔样式为描边\n        mPaint.color = Color.CYAN // 设置边框颜色为青色\n        // 绘制矩形边框，覆盖整个View区域\n        canvas.drawRect(0f, 0f, measuredWidth.toFloat(), measuredHeight.toFloat(), mPaint)\n\n        // 初始化绘图区域，考虑内边距\n        rect.left = paddingLeft // 左边界\n        rect.right = mWidth - paddingRight // 右边界\n        rect.top = paddingTop // 上边界\n        rect.bottom = mHeight - paddingBottom // 下边界\n\n        // 设置文字画笔样式\n        mPaint.color = mTextColor // 设置文本颜色\n        mPaint.style = Paint.Style.FILL // 设置画笔样式为填充\n\n        // 判断文字是否需要省略显示\n        val displayText = if (mTextBound.width() > mWidth) {\n            // 如果文本宽度超过View宽度，需要省略\n            val textPaint = TextPaint(mPaint) // 创建文本画笔\n            // 使用省略号处理文本\n            TextUtils.ellipsize(\n                mTitle, // 原始文本\n                textPaint, // 文本画笔\n                (mWidth - paddingLeft - paddingRight).toFloat(), // 可用宽度\n                TextUtils.TruncateAt.END // 在末尾添加省略号\n            ).toString()\n        } else {\n            // 如果文本宽度不超过View宽度，直接使用原文本\n            mTitle\n        }\n\n        // 计算文字位置并绘制\n        val textX = if (displayText == mTitle) {\n            // 如果是原文本，居中显示\n            mWidth / 2f - mTextBound.width() / 2f\n        } else {\n            // 如果是省略文本，左对齐显示\n            paddingLeft.toFloat()\n        }\n        val textY = (mHeight - paddingBottom).toFloat() // 文本Y坐标，考虑下内边距\n        canvas.drawText(displayText, textX, textY, mPaint) // 绘制文本\n\n        // 图片绘制区域去掉文字高度部分\n        rect.bottom -= mTextBound.height() // 减去文本高度，为图片留出空间\n\n        // 绘制图片\n        mImage?.let { bitmap ->\n            if (mImageScale == 0) {\n                // 缩放模式：图片填充整个可用区域\n                canvas.drawBitmap(bitmap, null, rect, mPaint)\n            } else {\n                // 居中模式：图片居中显示，保持原始大小\n                // 计算图片的居中绘制区域\n                rect.left = mWidth / 2 - bitmap.width / 2 // 左边界居中\n                rect.right = mWidth / 2 + bitmap.width / 2 // 右边界居中\n                rect.top = (mHeight - mTextBound.height()) / 2 - bitmap.height / 2 // 上边界居中\n                rect.bottom = (mHeight - mTextBound.height()) / 2 + bitmap.height / 2 // 下边界居中\n                canvas.drawBitmap(bitmap, null, rect, mPaint) // 绘制位图\n            }\n        }\n    }\n```\n\n- **引入布局**\n\n```kotlin\n<LinearLayout  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:example=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_height=\"match_parent\"\n    android:layout_width=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:ignore=\"ResAuto\">\n    <com.example.viewtest.MyView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"10dp\"\n        android:padding=\"10dp\"\n        example:image=\"@drawable/custom_img\"\n        example:imageScaleType=\"center\"\n        example:titleText=\"hello andorid ! \"\n        example:titleTextColor=\"#ff0000\"\n        example:titleTextSize=\"30sp\" />\n\n    <com.example.viewtest.MyView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"10dp\"\n        android:padding=\"10dp\"\n        example:image=\"@drawable/vol_01\"\n        example:imageScaleType=\"center\"\n        example:titleText=\"helloworld\"\n        example:titleTextColor=\"#00ff00\"\n        example:titleTextSize=\"20sp\" />\n\n    <com.example.viewtest.MyView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"10dp\"\n        android:padding=\"10dp\"\n        example:image=\"@drawable/vol_02\"\n        example:imageScaleType=\"fillXY\"\n        example:titleText=\"妹子~\"\n        example:titleTextColor=\"#ff0000\"\n        example:titleTextSize=\"12sp\" />\n</LinearLayout>\n```\n\n------\n\n","source":"_posts/自定义View-二.md","raw":"---\ntitle: 自定义View(二)\ndate: 2025-07-05 20:59:14\ncategories:\n- 自定义View\ntags:\n---\n\n### 目的\n\n自定义View显示一张图片，下面包含图片的文本介绍\n\n### 实现\n\n- **自定义属性**\n\n```kotlin\n<resources>\n    <attr name=\"titleText\" format=\"string\" />\n    <attr name=\"titleTextColor\" format=\"color\" />\n    <attr name=\"titleTextSize\" format=\"dimension\" />\n    <attr name=\"image\" format=\"reference\"/>\n    <attr name=\"imageScaleType\">\n        <enum name=\"fillXY\" value=\"0\" />\n        <enum name=\"center\" value=\"1\" />\n    </attr>\n\n    <declare-styleable name=\"MyView\">\n        <attr name=\"titleText\" />\n        <attr name=\"titleTextColor\" />\n        <attr name=\"titleTextSize\" />\n        <attr name=\"image\"/>\n        <attr name=\"imageScaleType\"/>\n    </declare-styleable>\n</resources>\n```\n\n- **获取自定义属性**\n\n```kotlin\n// 自定义View类，继承自View\nclass MyView @JvmOverloads constructor(\n    context: Context, // 上下文对象\n    attrs: AttributeSet? = null, // XML属性集，可为空\n    defStyleAttr: Int = 0  // 默认样式属性，支持style属性\n) : View(context, attrs, defStyleAttr) {\n    // 声明位图变量，用于存储图片\n    private var mImage: Bitmap? = null\n    // 声明图片缩放类型变量\n    private var mImageScale: Int = 0\n    // 声明标题文本变量\n    private var mTitle: String = \"\"\n    // 声明文本颜色变量，默认为黑色\n    private var mTextColor: Int = Color.BLACK\n    // 声明文本大小变量\n    private var mTextSize: Int = 0\n    // 声明View宽度变量\n    private var mWidth=0\n    // 声明View高度变量\n    private var mHeight=0\n    // 声明矩形对象，用于定义绘制区域\n    private val rect = Rect()\n    // 声明画笔对象，用于绘制图形\n    private val mPaint = Paint()\n    // 声明文本边界矩形，用于计算文本尺寸\n    private val mTextBound = Rect()\n\n    // 初始化代码块\n    init {\n        // 获取主题中的样式属性\n        val a = context.theme.obtainStyledAttributes(\n            attrs, // 属性集\n            R.styleable.MyView, // 自定义属性数组\n            defStyleAttr, // 默认样式\n            0 // 默认值\n        )\n\n        // 遍历所有属性\n        for (i in 0 until a.indexCount) {\n            // 根据属性类型进行不同处理\n            when (val attr = a.getIndex(i)) {\n                // 处理图片属性\n                R.styleable.MyView_image -> {\n                    // 获取资源ID\n                    val resId = a.getResourceId(attr, 0)\n                    // 如果资源ID有效，则解码位图\n                    if (resId != 0) {\n                        mImage = BitmapFactory.decodeResource(resources, resId)\n                    }\n                }\n                // 处理图片缩放类型属性\n                R.styleable.MyView_imageScaleType -> {\n                    mImageScale = a.getInt(attr, 0)\n                }\n                // 处理标题文本属性\n                R.styleable.MyView_titleText -> {\n                    mTitle = a.getString(attr) ?: \"\"\n                }\n                // 处理标题文本颜色属性\n                R.styleable.MyView_titleTextColor -> {\n                    mTextColor = a.getColor(attr, Color.BLACK)\n                }\n                // 处理标题文本大小属性\n                R.styleable.MyView_titleTextSize -> {\n                    mTextSize = a.getDimensionPixelSize(\n                        attr, // 属性索引\n                        // 默认值：16sp转换为像素\n                        TypedValue.applyDimension(\n                            TypedValue.COMPLEX_UNIT_SP, // 单位类型：sp\n                            16f, // 默认大小：16\n                            resources.displayMetrics // 显示指标\n                        ).toInt() // 转换为整数\n                    )\n                }\n            }\n        }\n\n        // 回收属性对象，释放资源\n        a.recycle()\n\n        // 设置画笔的文本大小\n        mPaint.textSize = mTextSize.toFloat()\n        // 计算文本边界，获取文本的宽高信息\n        mPaint.getTextBounds(mTitle, 0, mTitle.length, mTextBound)\n    }\n}\n```\n\n- **重写onMeasure方法**\n\n```kotlin\n// 重写测量方法，计算View的尺寸\n    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\n        // 处理宽度测量\n        var specMode = MeasureSpec.getMode(widthMeasureSpec) // 获取宽度测量模式\n        var specSize = MeasureSpec.getSize(widthMeasureSpec) // 获取宽度测量大小\n\n        // 根据测量模式计算宽度\n        mWidth = when (specMode) {\n            // 精确模式：直接使用指定的大小\n            MeasureSpec.EXACTLY -> {\n                Log.e(\"xxx\", \"EXACTLY\") // 输出日志\n                specSize\n            }\n            // 最大模式：不能超过指定大小\n            MeasureSpec.AT_MOST -> {\n                // 根据图片计算期望宽度\n                val desireByImg = paddingLeft + paddingRight + (mImage?.width ?: 0)\n                // 根据文本计算期望宽度\n                val desireByTitle = paddingLeft + paddingRight + mTextBound.width()\n                // 取两者中的最大值\n                val desire = maxOf(desireByImg, desireByTitle)\n                Log.e(\"xxx\", \"AT_MOST\") // 输出日志\n                // 返回期望值和指定值中的较小值\n                minOf(desire, specSize)\n            }\n            // 未指定模式：使用期望的大小\n            else -> { // MeasureSpec.UNSPECIFIED\n                // 根据图片计算期望宽度\n                val desireByImg = paddingLeft + paddingRight + (mImage?.width ?: 0)\n                // 根据文本计算期望宽度\n                val desireByTitle = paddingLeft + paddingRight + mTextBound.width()\n                // 返回两者中的最大值\n                maxOf(desireByImg, desireByTitle)\n            }\n        }\n\n        // 处理高度测量\n        specMode = MeasureSpec.getMode(heightMeasureSpec) // 获取高度测量模式\n        specSize = MeasureSpec.getSize(heightMeasureSpec) // 获取高度测量大小\n\n        // 根据测量模式计算高度\n        mHeight = when (specMode) {\n            // 精确模式：直接使用指定的大小\n            MeasureSpec.EXACTLY -> specSize\n            // 最大模式：不能超过指定大小\n            MeasureSpec.AT_MOST -> {\n                // 计算期望高度：内边距 + 图片高度 + 文本高度\n                val desire = paddingTop + paddingBottom + (mImage?.height ?: 0) + mTextBound.height()\n                // 返回期望值和指定值中的较小值\n                minOf(desire, specSize)\n            }\n            // 未指定模式：使用期望的大小\n            else -> {\n                // 计算期望高度：内边距 + 图片高度 + 文本高度\n                paddingTop + paddingBottom + (mImage?.height ?: 0) + mTextBound.height()\n            }\n        }\n\n        // 设置测量结果，告诉父View我们的尺寸\n        setMeasuredDimension(mWidth, mHeight)\n    }\n```\n\n- **重写onDraw方法**\n\n```kotlin\n// 重写绘制方法，在画布上绘制内容\n    override fun onDraw(canvas: Canvas) {\n        // 绘制边框\n        mPaint.strokeWidth = 4f // 设置边框宽度为4像素\n        mPaint.style = Paint.Style.STROKE // 设置画笔样式为描边\n        mPaint.color = Color.CYAN // 设置边框颜色为青色\n        // 绘制矩形边框，覆盖整个View区域\n        canvas.drawRect(0f, 0f, measuredWidth.toFloat(), measuredHeight.toFloat(), mPaint)\n\n        // 初始化绘图区域，考虑内边距\n        rect.left = paddingLeft // 左边界\n        rect.right = mWidth - paddingRight // 右边界\n        rect.top = paddingTop // 上边界\n        rect.bottom = mHeight - paddingBottom // 下边界\n\n        // 设置文字画笔样式\n        mPaint.color = mTextColor // 设置文本颜色\n        mPaint.style = Paint.Style.FILL // 设置画笔样式为填充\n\n        // 判断文字是否需要省略显示\n        val displayText = if (mTextBound.width() > mWidth) {\n            // 如果文本宽度超过View宽度，需要省略\n            val textPaint = TextPaint(mPaint) // 创建文本画笔\n            // 使用省略号处理文本\n            TextUtils.ellipsize(\n                mTitle, // 原始文本\n                textPaint, // 文本画笔\n                (mWidth - paddingLeft - paddingRight).toFloat(), // 可用宽度\n                TextUtils.TruncateAt.END // 在末尾添加省略号\n            ).toString()\n        } else {\n            // 如果文本宽度不超过View宽度，直接使用原文本\n            mTitle\n        }\n\n        // 计算文字位置并绘制\n        val textX = if (displayText == mTitle) {\n            // 如果是原文本，居中显示\n            mWidth / 2f - mTextBound.width() / 2f\n        } else {\n            // 如果是省略文本，左对齐显示\n            paddingLeft.toFloat()\n        }\n        val textY = (mHeight - paddingBottom).toFloat() // 文本Y坐标，考虑下内边距\n        canvas.drawText(displayText, textX, textY, mPaint) // 绘制文本\n\n        // 图片绘制区域去掉文字高度部分\n        rect.bottom -= mTextBound.height() // 减去文本高度，为图片留出空间\n\n        // 绘制图片\n        mImage?.let { bitmap ->\n            if (mImageScale == 0) {\n                // 缩放模式：图片填充整个可用区域\n                canvas.drawBitmap(bitmap, null, rect, mPaint)\n            } else {\n                // 居中模式：图片居中显示，保持原始大小\n                // 计算图片的居中绘制区域\n                rect.left = mWidth / 2 - bitmap.width / 2 // 左边界居中\n                rect.right = mWidth / 2 + bitmap.width / 2 // 右边界居中\n                rect.top = (mHeight - mTextBound.height()) / 2 - bitmap.height / 2 // 上边界居中\n                rect.bottom = (mHeight - mTextBound.height()) / 2 + bitmap.height / 2 // 下边界居中\n                canvas.drawBitmap(bitmap, null, rect, mPaint) // 绘制位图\n            }\n        }\n    }\n```\n\n- **引入布局**\n\n```kotlin\n<LinearLayout  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:example=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_height=\"match_parent\"\n    android:layout_width=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:ignore=\"ResAuto\">\n    <com.example.viewtest.MyView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"10dp\"\n        android:padding=\"10dp\"\n        example:image=\"@drawable/custom_img\"\n        example:imageScaleType=\"center\"\n        example:titleText=\"hello andorid ! \"\n        example:titleTextColor=\"#ff0000\"\n        example:titleTextSize=\"30sp\" />\n\n    <com.example.viewtest.MyView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"10dp\"\n        android:padding=\"10dp\"\n        example:image=\"@drawable/vol_01\"\n        example:imageScaleType=\"center\"\n        example:titleText=\"helloworld\"\n        example:titleTextColor=\"#00ff00\"\n        example:titleTextSize=\"20sp\" />\n\n    <com.example.viewtest.MyView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"10dp\"\n        android:padding=\"10dp\"\n        example:image=\"@drawable/vol_02\"\n        example:imageScaleType=\"fillXY\"\n        example:titleText=\"妹子~\"\n        example:titleTextColor=\"#ff0000\"\n        example:titleTextSize=\"12sp\" />\n</LinearLayout>\n```\n\n------\n\n","slug":"自定义View-二","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcu0038s4s7e59u6itd","content":"<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>自定义View显示一张图片，下面包含图片的文本介绍</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><ul>\n<li><strong>自定义属性</strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;titleText&quot;</span> format=<span class=\"string\">&quot;string&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;titleTextColor&quot;</span> format=<span class=\"string\">&quot;color&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;titleTextSize&quot;</span> format=<span class=\"string\">&quot;dimension&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;image&quot;</span> format=<span class=\"string\">&quot;reference&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;imageScaleType&quot;</span>&gt;</span><br><span class=\"line\">        &lt;<span class=\"keyword\">enum</span> name=<span class=\"string\">&quot;fillXY&quot;</span> value=<span class=\"string\">&quot;0&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;<span class=\"keyword\">enum</span> name=<span class=\"string\">&quot;center&quot;</span> value=<span class=\"string\">&quot;1&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/attr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;declare-styleable name=<span class=\"string\">&quot;MyView&quot;</span>&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;titleText&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;titleTextColor&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;titleTextSize&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;image&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;imageScaleType&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/declare-styleable&gt;</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>获取自定义属性</strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义View类，继承自View</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyView</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span>(</span><br><span class=\"line\">    context: Context, <span class=\"comment\">// 上下文对象</span></span><br><span class=\"line\">    attrs: AttributeSet? = <span class=\"literal\">null</span>, <span class=\"comment\">// XML属性集，可为空</span></span><br><span class=\"line\">    defStyleAttr: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>  <span class=\"comment\">// 默认样式属性，支持style属性</span></span><br><span class=\"line\">) : View(context, attrs, defStyleAttr) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明位图变量，用于存储图片</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mImage: Bitmap? = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">// 声明图片缩放类型变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mImageScale: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">// 声明标题文本变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mTitle: String = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// 声明文本颜色变量，默认为黑色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mTextColor: <span class=\"built_in\">Int</span> = Color.BLACK</span><br><span class=\"line\">    <span class=\"comment\">// 声明文本大小变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mTextSize: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">// 声明View宽度变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mWidth=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">// 声明View高度变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mHeight=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">// 声明矩形对象，用于定义绘制区域</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> rect = Rect()</span><br><span class=\"line\">    <span class=\"comment\">// 声明画笔对象，用于绘制图形</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mPaint = Paint()</span><br><span class=\"line\">    <span class=\"comment\">// 声明文本边界矩形，用于计算文本尺寸</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mTextBound = Rect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取主题中的样式属性</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> a = context.theme.obtainStyledAttributes(</span><br><span class=\"line\">            attrs, <span class=\"comment\">// 属性集</span></span><br><span class=\"line\">            R.styleable.MyView, <span class=\"comment\">// 自定义属性数组</span></span><br><span class=\"line\">            defStyleAttr, <span class=\"comment\">// 默认样式</span></span><br><span class=\"line\">            <span class=\"number\">0</span> <span class=\"comment\">// 默认值</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历所有属性</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until a.indexCount) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据属性类型进行不同处理</span></span><br><span class=\"line\">            <span class=\"keyword\">when</span> (<span class=\"keyword\">val</span> attr = a.getIndex(i)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 处理图片属性</span></span><br><span class=\"line\">                R.styleable.MyView_image -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 获取资源ID</span></span><br><span class=\"line\">                    <span class=\"keyword\">val</span> resId = a.getResourceId(attr, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"comment\">// 如果资源ID有效，则解码位图</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (resId != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        mImage = BitmapFactory.decodeResource(resources, resId)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 处理图片缩放类型属性</span></span><br><span class=\"line\">                R.styleable.MyView_imageScaleType -&gt; &#123;</span><br><span class=\"line\">                    mImageScale = a.getInt(attr, <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 处理标题文本属性</span></span><br><span class=\"line\">                R.styleable.MyView_titleText -&gt; &#123;</span><br><span class=\"line\">                    mTitle = a.getString(attr) ?: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 处理标题文本颜色属性</span></span><br><span class=\"line\">                R.styleable.MyView_titleTextColor -&gt; &#123;</span><br><span class=\"line\">                    mTextColor = a.getColor(attr, Color.BLACK)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 处理标题文本大小属性</span></span><br><span class=\"line\">                R.styleable.MyView_titleTextSize -&gt; &#123;</span><br><span class=\"line\">                    mTextSize = a.getDimensionPixelSize(</span><br><span class=\"line\">                        attr, <span class=\"comment\">// 属性索引</span></span><br><span class=\"line\">                        <span class=\"comment\">// 默认值：16sp转换为像素</span></span><br><span class=\"line\">                        TypedValue.applyDimension(</span><br><span class=\"line\">                            TypedValue.COMPLEX_UNIT_SP, <span class=\"comment\">// 单位类型：sp</span></span><br><span class=\"line\">                            <span class=\"number\">16f</span>, <span class=\"comment\">// 默认大小：16</span></span><br><span class=\"line\">                            resources.displayMetrics <span class=\"comment\">// 显示指标</span></span><br><span class=\"line\">                        ).toInt() <span class=\"comment\">// 转换为整数</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 回收属性对象，释放资源</span></span><br><span class=\"line\">        a.recycle()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置画笔的文本大小</span></span><br><span class=\"line\">        mPaint.textSize = mTextSize.toFloat()</span><br><span class=\"line\">        <span class=\"comment\">// 计算文本边界，获取文本的宽高信息</span></span><br><span class=\"line\">        mPaint.getTextBounds(mTitle, <span class=\"number\">0</span>, mTitle.length, mTextBound)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>重写onMeasure方法</strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重写测量方法，计算View的尺寸</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onMeasure</span><span class=\"params\">(widthMeasureSpec: <span class=\"type\">Int</span>, heightMeasureSpec: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理宽度测量</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> specMode = MeasureSpec.getMode(widthMeasureSpec) <span class=\"comment\">// 获取宽度测量模式</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> specSize = MeasureSpec.getSize(widthMeasureSpec) <span class=\"comment\">// 获取宽度测量大小</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据测量模式计算宽度</span></span><br><span class=\"line\">        mWidth = <span class=\"keyword\">when</span> (specMode) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 精确模式：直接使用指定的大小</span></span><br><span class=\"line\">            MeasureSpec.EXACTLY -&gt; &#123;</span><br><span class=\"line\">                Log.e(<span class=\"string\">&quot;xxx&quot;</span>, <span class=\"string\">&quot;EXACTLY&quot;</span>) <span class=\"comment\">// 输出日志</span></span><br><span class=\"line\">                specSize</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 最大模式：不能超过指定大小</span></span><br><span class=\"line\">            MeasureSpec.AT_MOST -&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 根据图片计算期望宽度</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> desireByImg = paddingLeft + paddingRight + (mImage?.width ?: <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 根据文本计算期望宽度</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> desireByTitle = paddingLeft + paddingRight + mTextBound.width()</span><br><span class=\"line\">                <span class=\"comment\">// 取两者中的最大值</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> desire = maxOf(desireByImg, desireByTitle)</span><br><span class=\"line\">                Log.e(<span class=\"string\">&quot;xxx&quot;</span>, <span class=\"string\">&quot;AT_MOST&quot;</span>) <span class=\"comment\">// 输出日志</span></span><br><span class=\"line\">                <span class=\"comment\">// 返回期望值和指定值中的较小值</span></span><br><span class=\"line\">                minOf(desire, specSize)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 未指定模式：使用期望的大小</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; &#123; <span class=\"comment\">// MeasureSpec.UNSPECIFIED</span></span><br><span class=\"line\">                <span class=\"comment\">// 根据图片计算期望宽度</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> desireByImg = paddingLeft + paddingRight + (mImage?.width ?: <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 根据文本计算期望宽度</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> desireByTitle = paddingLeft + paddingRight + mTextBound.width()</span><br><span class=\"line\">                <span class=\"comment\">// 返回两者中的最大值</span></span><br><span class=\"line\">                maxOf(desireByImg, desireByTitle)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理高度测量</span></span><br><span class=\"line\">        specMode = MeasureSpec.getMode(heightMeasureSpec) <span class=\"comment\">// 获取高度测量模式</span></span><br><span class=\"line\">        specSize = MeasureSpec.getSize(heightMeasureSpec) <span class=\"comment\">// 获取高度测量大小</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据测量模式计算高度</span></span><br><span class=\"line\">        mHeight = <span class=\"keyword\">when</span> (specMode) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 精确模式：直接使用指定的大小</span></span><br><span class=\"line\">            MeasureSpec.EXACTLY -&gt; specSize</span><br><span class=\"line\">            <span class=\"comment\">// 最大模式：不能超过指定大小</span></span><br><span class=\"line\">            MeasureSpec.AT_MOST -&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 计算期望高度：内边距 + 图片高度 + 文本高度</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> desire = paddingTop + paddingBottom + (mImage?.height ?: <span class=\"number\">0</span>) + mTextBound.height()</span><br><span class=\"line\">                <span class=\"comment\">// 返回期望值和指定值中的较小值</span></span><br><span class=\"line\">                minOf(desire, specSize)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 未指定模式：使用期望的大小</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 计算期望高度：内边距 + 图片高度 + 文本高度</span></span><br><span class=\"line\">                paddingTop + paddingBottom + (mImage?.height ?: <span class=\"number\">0</span>) + mTextBound.height()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置测量结果，告诉父View我们的尺寸</span></span><br><span class=\"line\">        setMeasuredDimension(mWidth, mHeight)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>重写onDraw方法</strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重写绘制方法，在画布上绘制内容</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDraw</span><span class=\"params\">(canvas: <span class=\"type\">Canvas</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 绘制边框</span></span><br><span class=\"line\">        mPaint.strokeWidth = <span class=\"number\">4f</span> <span class=\"comment\">// 设置边框宽度为4像素</span></span><br><span class=\"line\">        mPaint.style = Paint.Style.STROKE <span class=\"comment\">// 设置画笔样式为描边</span></span><br><span class=\"line\">        mPaint.color = Color.CYAN <span class=\"comment\">// 设置边框颜色为青色</span></span><br><span class=\"line\">        <span class=\"comment\">// 绘制矩形边框，覆盖整个View区域</span></span><br><span class=\"line\">        canvas.drawRect(<span class=\"number\">0f</span>, <span class=\"number\">0f</span>, measuredWidth.toFloat(), measuredHeight.toFloat(), mPaint)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 初始化绘图区域，考虑内边距</span></span><br><span class=\"line\">        rect.left = paddingLeft <span class=\"comment\">// 左边界</span></span><br><span class=\"line\">        rect.right = mWidth - paddingRight <span class=\"comment\">// 右边界</span></span><br><span class=\"line\">        rect.top = paddingTop <span class=\"comment\">// 上边界</span></span><br><span class=\"line\">        rect.bottom = mHeight - paddingBottom <span class=\"comment\">// 下边界</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置文字画笔样式</span></span><br><span class=\"line\">        mPaint.color = mTextColor <span class=\"comment\">// 设置文本颜色</span></span><br><span class=\"line\">        mPaint.style = Paint.Style.FILL <span class=\"comment\">// 设置画笔样式为填充</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断文字是否需要省略显示</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> displayText = <span class=\"keyword\">if</span> (mTextBound.width() &gt; mWidth) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果文本宽度超过View宽度，需要省略</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> textPaint = TextPaint(mPaint) <span class=\"comment\">// 创建文本画笔</span></span><br><span class=\"line\">            <span class=\"comment\">// 使用省略号处理文本</span></span><br><span class=\"line\">            TextUtils.ellipsize(</span><br><span class=\"line\">                mTitle, <span class=\"comment\">// 原始文本</span></span><br><span class=\"line\">                textPaint, <span class=\"comment\">// 文本画笔</span></span><br><span class=\"line\">                (mWidth - paddingLeft - paddingRight).toFloat(), <span class=\"comment\">// 可用宽度</span></span><br><span class=\"line\">                TextUtils.TruncateAt.END <span class=\"comment\">// 在末尾添加省略号</span></span><br><span class=\"line\">            ).toString()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果文本宽度不超过View宽度，直接使用原文本</span></span><br><span class=\"line\">            mTitle</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算文字位置并绘制</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> textX = <span class=\"keyword\">if</span> (displayText == mTitle) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果是原文本，居中显示</span></span><br><span class=\"line\">            mWidth / <span class=\"number\">2f</span> - mTextBound.width() / <span class=\"number\">2f</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果是省略文本，左对齐显示</span></span><br><span class=\"line\">            paddingLeft.toFloat()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> textY = (mHeight - paddingBottom).toFloat() <span class=\"comment\">// 文本Y坐标，考虑下内边距</span></span><br><span class=\"line\">        canvas.drawText(displayText, textX, textY, mPaint) <span class=\"comment\">// 绘制文本</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 图片绘制区域去掉文字高度部分</span></span><br><span class=\"line\">        rect.bottom -= mTextBound.height() <span class=\"comment\">// 减去文本高度，为图片留出空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 绘制图片</span></span><br><span class=\"line\">        mImage?.let &#123; bitmap -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mImageScale == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 缩放模式：图片填充整个可用区域</span></span><br><span class=\"line\">                canvas.drawBitmap(bitmap, <span class=\"literal\">null</span>, rect, mPaint)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 居中模式：图片居中显示，保持原始大小</span></span><br><span class=\"line\">                <span class=\"comment\">// 计算图片的居中绘制区域</span></span><br><span class=\"line\">                rect.left = mWidth / <span class=\"number\">2</span> - bitmap.width / <span class=\"number\">2</span> <span class=\"comment\">// 左边界居中</span></span><br><span class=\"line\">                rect.right = mWidth / <span class=\"number\">2</span> + bitmap.width / <span class=\"number\">2</span> <span class=\"comment\">// 右边界居中</span></span><br><span class=\"line\">                rect.top = (mHeight - mTextBound.height()) / <span class=\"number\">2</span> - bitmap.height / <span class=\"number\">2</span> <span class=\"comment\">// 上边界居中</span></span><br><span class=\"line\">                rect.bottom = (mHeight - mTextBound.height()) / <span class=\"number\">2</span> + bitmap.height / <span class=\"number\">2</span> <span class=\"comment\">// 下边界居中</span></span><br><span class=\"line\">                canvas.drawBitmap(bitmap, <span class=\"literal\">null</span>, rect, mPaint) <span class=\"comment\">// 绘制位图</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>引入布局</strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout  xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class=\"line\">    xmlns:example=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    tools:ignore=<span class=\"string\">&quot;ResAuto&quot;</span>&gt;</span><br><span class=\"line\">    &lt;com.example.viewtest.MyView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_margin=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        android:padding=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        example:image=<span class=\"string\">&quot;@drawable/custom_img&quot;</span></span><br><span class=\"line\">        example:imageScaleType=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        example:titleText=<span class=\"string\">&quot;hello andorid ! &quot;</span></span><br><span class=\"line\">        example:titleTextColor=<span class=\"string\">&quot;#ff0000&quot;</span></span><br><span class=\"line\">        example:titleTextSize=<span class=\"string\">&quot;30sp&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.example.viewtest.MyView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_margin=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        android:padding=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        example:image=<span class=\"string\">&quot;@drawable/vol_01&quot;</span></span><br><span class=\"line\">        example:imageScaleType=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        example:titleText=<span class=\"string\">&quot;helloworld&quot;</span></span><br><span class=\"line\">        example:titleTextColor=<span class=\"string\">&quot;#00ff00&quot;</span></span><br><span class=\"line\">        example:titleTextSize=<span class=\"string\">&quot;20sp&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.example.viewtest.MyView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_margin=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        android:padding=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        example:image=<span class=\"string\">&quot;@drawable/vol_02&quot;</span></span><br><span class=\"line\">        example:imageScaleType=<span class=\"string\">&quot;fillXY&quot;</span></span><br><span class=\"line\">        example:titleText=<span class=\"string\">&quot;妹子~&quot;</span></span><br><span class=\"line\">        example:titleTextColor=<span class=\"string\">&quot;#ff0000&quot;</span></span><br><span class=\"line\">        example:titleTextSize=<span class=\"string\">&quot;12sp&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"目的\n自定义View显示一张图片，下面包含图片的文本介绍\n\n实现\n * 自定义属性\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n<resources>\n    <attr name=\"titleText\" format=\"string\" />\n    <attr name=\"titleTextColor\" format=\"color\" />\n    <attr name=\"titleTextSize\" format=\"dimension\" />\n    <attr name=\"image\" format=\"reference\"/>\n    <","more":"<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>自定义View显示一张图片，下面包含图片的文本介绍</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><ul>\n<li><strong>自定义属性</strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;titleText&quot;</span> format=<span class=\"string\">&quot;string&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;titleTextColor&quot;</span> format=<span class=\"string\">&quot;color&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;titleTextSize&quot;</span> format=<span class=\"string\">&quot;dimension&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;image&quot;</span> format=<span class=\"string\">&quot;reference&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;attr name=<span class=\"string\">&quot;imageScaleType&quot;</span>&gt;</span><br><span class=\"line\">        &lt;<span class=\"keyword\">enum</span> name=<span class=\"string\">&quot;fillXY&quot;</span> value=<span class=\"string\">&quot;0&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;<span class=\"keyword\">enum</span> name=<span class=\"string\">&quot;center&quot;</span> value=<span class=\"string\">&quot;1&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/attr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;declare-styleable name=<span class=\"string\">&quot;MyView&quot;</span>&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;titleText&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;titleTextColor&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;titleTextSize&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;image&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;attr name=<span class=\"string\">&quot;imageScaleType&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/declare-styleable&gt;</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>获取自定义属性</strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义View类，继承自View</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyView</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span>(</span><br><span class=\"line\">    context: Context, <span class=\"comment\">// 上下文对象</span></span><br><span class=\"line\">    attrs: AttributeSet? = <span class=\"literal\">null</span>, <span class=\"comment\">// XML属性集，可为空</span></span><br><span class=\"line\">    defStyleAttr: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>  <span class=\"comment\">// 默认样式属性，支持style属性</span></span><br><span class=\"line\">) : View(context, attrs, defStyleAttr) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明位图变量，用于存储图片</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mImage: Bitmap? = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">// 声明图片缩放类型变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mImageScale: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">// 声明标题文本变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mTitle: String = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// 声明文本颜色变量，默认为黑色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mTextColor: <span class=\"built_in\">Int</span> = Color.BLACK</span><br><span class=\"line\">    <span class=\"comment\">// 声明文本大小变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mTextSize: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">// 声明View宽度变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mWidth=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">// 声明View高度变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mHeight=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">// 声明矩形对象，用于定义绘制区域</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> rect = Rect()</span><br><span class=\"line\">    <span class=\"comment\">// 声明画笔对象，用于绘制图形</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mPaint = Paint()</span><br><span class=\"line\">    <span class=\"comment\">// 声明文本边界矩形，用于计算文本尺寸</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mTextBound = Rect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取主题中的样式属性</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> a = context.theme.obtainStyledAttributes(</span><br><span class=\"line\">            attrs, <span class=\"comment\">// 属性集</span></span><br><span class=\"line\">            R.styleable.MyView, <span class=\"comment\">// 自定义属性数组</span></span><br><span class=\"line\">            defStyleAttr, <span class=\"comment\">// 默认样式</span></span><br><span class=\"line\">            <span class=\"number\">0</span> <span class=\"comment\">// 默认值</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历所有属性</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until a.indexCount) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据属性类型进行不同处理</span></span><br><span class=\"line\">            <span class=\"keyword\">when</span> (<span class=\"keyword\">val</span> attr = a.getIndex(i)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 处理图片属性</span></span><br><span class=\"line\">                R.styleable.MyView_image -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 获取资源ID</span></span><br><span class=\"line\">                    <span class=\"keyword\">val</span> resId = a.getResourceId(attr, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"comment\">// 如果资源ID有效，则解码位图</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (resId != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        mImage = BitmapFactory.decodeResource(resources, resId)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 处理图片缩放类型属性</span></span><br><span class=\"line\">                R.styleable.MyView_imageScaleType -&gt; &#123;</span><br><span class=\"line\">                    mImageScale = a.getInt(attr, <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 处理标题文本属性</span></span><br><span class=\"line\">                R.styleable.MyView_titleText -&gt; &#123;</span><br><span class=\"line\">                    mTitle = a.getString(attr) ?: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 处理标题文本颜色属性</span></span><br><span class=\"line\">                R.styleable.MyView_titleTextColor -&gt; &#123;</span><br><span class=\"line\">                    mTextColor = a.getColor(attr, Color.BLACK)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 处理标题文本大小属性</span></span><br><span class=\"line\">                R.styleable.MyView_titleTextSize -&gt; &#123;</span><br><span class=\"line\">                    mTextSize = a.getDimensionPixelSize(</span><br><span class=\"line\">                        attr, <span class=\"comment\">// 属性索引</span></span><br><span class=\"line\">                        <span class=\"comment\">// 默认值：16sp转换为像素</span></span><br><span class=\"line\">                        TypedValue.applyDimension(</span><br><span class=\"line\">                            TypedValue.COMPLEX_UNIT_SP, <span class=\"comment\">// 单位类型：sp</span></span><br><span class=\"line\">                            <span class=\"number\">16f</span>, <span class=\"comment\">// 默认大小：16</span></span><br><span class=\"line\">                            resources.displayMetrics <span class=\"comment\">// 显示指标</span></span><br><span class=\"line\">                        ).toInt() <span class=\"comment\">// 转换为整数</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 回收属性对象，释放资源</span></span><br><span class=\"line\">        a.recycle()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置画笔的文本大小</span></span><br><span class=\"line\">        mPaint.textSize = mTextSize.toFloat()</span><br><span class=\"line\">        <span class=\"comment\">// 计算文本边界，获取文本的宽高信息</span></span><br><span class=\"line\">        mPaint.getTextBounds(mTitle, <span class=\"number\">0</span>, mTitle.length, mTextBound)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>重写onMeasure方法</strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重写测量方法，计算View的尺寸</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onMeasure</span><span class=\"params\">(widthMeasureSpec: <span class=\"type\">Int</span>, heightMeasureSpec: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理宽度测量</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> specMode = MeasureSpec.getMode(widthMeasureSpec) <span class=\"comment\">// 获取宽度测量模式</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> specSize = MeasureSpec.getSize(widthMeasureSpec) <span class=\"comment\">// 获取宽度测量大小</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据测量模式计算宽度</span></span><br><span class=\"line\">        mWidth = <span class=\"keyword\">when</span> (specMode) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 精确模式：直接使用指定的大小</span></span><br><span class=\"line\">            MeasureSpec.EXACTLY -&gt; &#123;</span><br><span class=\"line\">                Log.e(<span class=\"string\">&quot;xxx&quot;</span>, <span class=\"string\">&quot;EXACTLY&quot;</span>) <span class=\"comment\">// 输出日志</span></span><br><span class=\"line\">                specSize</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 最大模式：不能超过指定大小</span></span><br><span class=\"line\">            MeasureSpec.AT_MOST -&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 根据图片计算期望宽度</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> desireByImg = paddingLeft + paddingRight + (mImage?.width ?: <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 根据文本计算期望宽度</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> desireByTitle = paddingLeft + paddingRight + mTextBound.width()</span><br><span class=\"line\">                <span class=\"comment\">// 取两者中的最大值</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> desire = maxOf(desireByImg, desireByTitle)</span><br><span class=\"line\">                Log.e(<span class=\"string\">&quot;xxx&quot;</span>, <span class=\"string\">&quot;AT_MOST&quot;</span>) <span class=\"comment\">// 输出日志</span></span><br><span class=\"line\">                <span class=\"comment\">// 返回期望值和指定值中的较小值</span></span><br><span class=\"line\">                minOf(desire, specSize)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 未指定模式：使用期望的大小</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; &#123; <span class=\"comment\">// MeasureSpec.UNSPECIFIED</span></span><br><span class=\"line\">                <span class=\"comment\">// 根据图片计算期望宽度</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> desireByImg = paddingLeft + paddingRight + (mImage?.width ?: <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 根据文本计算期望宽度</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> desireByTitle = paddingLeft + paddingRight + mTextBound.width()</span><br><span class=\"line\">                <span class=\"comment\">// 返回两者中的最大值</span></span><br><span class=\"line\">                maxOf(desireByImg, desireByTitle)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理高度测量</span></span><br><span class=\"line\">        specMode = MeasureSpec.getMode(heightMeasureSpec) <span class=\"comment\">// 获取高度测量模式</span></span><br><span class=\"line\">        specSize = MeasureSpec.getSize(heightMeasureSpec) <span class=\"comment\">// 获取高度测量大小</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据测量模式计算高度</span></span><br><span class=\"line\">        mHeight = <span class=\"keyword\">when</span> (specMode) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 精确模式：直接使用指定的大小</span></span><br><span class=\"line\">            MeasureSpec.EXACTLY -&gt; specSize</span><br><span class=\"line\">            <span class=\"comment\">// 最大模式：不能超过指定大小</span></span><br><span class=\"line\">            MeasureSpec.AT_MOST -&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 计算期望高度：内边距 + 图片高度 + 文本高度</span></span><br><span class=\"line\">                <span class=\"keyword\">val</span> desire = paddingTop + paddingBottom + (mImage?.height ?: <span class=\"number\">0</span>) + mTextBound.height()</span><br><span class=\"line\">                <span class=\"comment\">// 返回期望值和指定值中的较小值</span></span><br><span class=\"line\">                minOf(desire, specSize)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 未指定模式：使用期望的大小</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 计算期望高度：内边距 + 图片高度 + 文本高度</span></span><br><span class=\"line\">                paddingTop + paddingBottom + (mImage?.height ?: <span class=\"number\">0</span>) + mTextBound.height()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置测量结果，告诉父View我们的尺寸</span></span><br><span class=\"line\">        setMeasuredDimension(mWidth, mHeight)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>重写onDraw方法</strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重写绘制方法，在画布上绘制内容</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDraw</span><span class=\"params\">(canvas: <span class=\"type\">Canvas</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 绘制边框</span></span><br><span class=\"line\">        mPaint.strokeWidth = <span class=\"number\">4f</span> <span class=\"comment\">// 设置边框宽度为4像素</span></span><br><span class=\"line\">        mPaint.style = Paint.Style.STROKE <span class=\"comment\">// 设置画笔样式为描边</span></span><br><span class=\"line\">        mPaint.color = Color.CYAN <span class=\"comment\">// 设置边框颜色为青色</span></span><br><span class=\"line\">        <span class=\"comment\">// 绘制矩形边框，覆盖整个View区域</span></span><br><span class=\"line\">        canvas.drawRect(<span class=\"number\">0f</span>, <span class=\"number\">0f</span>, measuredWidth.toFloat(), measuredHeight.toFloat(), mPaint)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 初始化绘图区域，考虑内边距</span></span><br><span class=\"line\">        rect.left = paddingLeft <span class=\"comment\">// 左边界</span></span><br><span class=\"line\">        rect.right = mWidth - paddingRight <span class=\"comment\">// 右边界</span></span><br><span class=\"line\">        rect.top = paddingTop <span class=\"comment\">// 上边界</span></span><br><span class=\"line\">        rect.bottom = mHeight - paddingBottom <span class=\"comment\">// 下边界</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置文字画笔样式</span></span><br><span class=\"line\">        mPaint.color = mTextColor <span class=\"comment\">// 设置文本颜色</span></span><br><span class=\"line\">        mPaint.style = Paint.Style.FILL <span class=\"comment\">// 设置画笔样式为填充</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断文字是否需要省略显示</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> displayText = <span class=\"keyword\">if</span> (mTextBound.width() &gt; mWidth) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果文本宽度超过View宽度，需要省略</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> textPaint = TextPaint(mPaint) <span class=\"comment\">// 创建文本画笔</span></span><br><span class=\"line\">            <span class=\"comment\">// 使用省略号处理文本</span></span><br><span class=\"line\">            TextUtils.ellipsize(</span><br><span class=\"line\">                mTitle, <span class=\"comment\">// 原始文本</span></span><br><span class=\"line\">                textPaint, <span class=\"comment\">// 文本画笔</span></span><br><span class=\"line\">                (mWidth - paddingLeft - paddingRight).toFloat(), <span class=\"comment\">// 可用宽度</span></span><br><span class=\"line\">                TextUtils.TruncateAt.END <span class=\"comment\">// 在末尾添加省略号</span></span><br><span class=\"line\">            ).toString()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果文本宽度不超过View宽度，直接使用原文本</span></span><br><span class=\"line\">            mTitle</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算文字位置并绘制</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> textX = <span class=\"keyword\">if</span> (displayText == mTitle) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果是原文本，居中显示</span></span><br><span class=\"line\">            mWidth / <span class=\"number\">2f</span> - mTextBound.width() / <span class=\"number\">2f</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果是省略文本，左对齐显示</span></span><br><span class=\"line\">            paddingLeft.toFloat()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> textY = (mHeight - paddingBottom).toFloat() <span class=\"comment\">// 文本Y坐标，考虑下内边距</span></span><br><span class=\"line\">        canvas.drawText(displayText, textX, textY, mPaint) <span class=\"comment\">// 绘制文本</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 图片绘制区域去掉文字高度部分</span></span><br><span class=\"line\">        rect.bottom -= mTextBound.height() <span class=\"comment\">// 减去文本高度，为图片留出空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 绘制图片</span></span><br><span class=\"line\">        mImage?.let &#123; bitmap -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mImageScale == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 缩放模式：图片填充整个可用区域</span></span><br><span class=\"line\">                canvas.drawBitmap(bitmap, <span class=\"literal\">null</span>, rect, mPaint)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 居中模式：图片居中显示，保持原始大小</span></span><br><span class=\"line\">                <span class=\"comment\">// 计算图片的居中绘制区域</span></span><br><span class=\"line\">                rect.left = mWidth / <span class=\"number\">2</span> - bitmap.width / <span class=\"number\">2</span> <span class=\"comment\">// 左边界居中</span></span><br><span class=\"line\">                rect.right = mWidth / <span class=\"number\">2</span> + bitmap.width / <span class=\"number\">2</span> <span class=\"comment\">// 右边界居中</span></span><br><span class=\"line\">                rect.top = (mHeight - mTextBound.height()) / <span class=\"number\">2</span> - bitmap.height / <span class=\"number\">2</span> <span class=\"comment\">// 上边界居中</span></span><br><span class=\"line\">                rect.bottom = (mHeight - mTextBound.height()) / <span class=\"number\">2</span> + bitmap.height / <span class=\"number\">2</span> <span class=\"comment\">// 下边界居中</span></span><br><span class=\"line\">                canvas.drawBitmap(bitmap, <span class=\"literal\">null</span>, rect, mPaint) <span class=\"comment\">// 绘制位图</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>引入布局</strong></li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout  xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class=\"line\">    xmlns:example=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    tools:ignore=<span class=\"string\">&quot;ResAuto&quot;</span>&gt;</span><br><span class=\"line\">    &lt;com.example.viewtest.MyView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_margin=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        android:padding=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        example:image=<span class=\"string\">&quot;@drawable/custom_img&quot;</span></span><br><span class=\"line\">        example:imageScaleType=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        example:titleText=<span class=\"string\">&quot;hello andorid ! &quot;</span></span><br><span class=\"line\">        example:titleTextColor=<span class=\"string\">&quot;#ff0000&quot;</span></span><br><span class=\"line\">        example:titleTextSize=<span class=\"string\">&quot;30sp&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.example.viewtest.MyView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_margin=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        android:padding=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        example:image=<span class=\"string\">&quot;@drawable/vol_01&quot;</span></span><br><span class=\"line\">        example:imageScaleType=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        example:titleText=<span class=\"string\">&quot;helloworld&quot;</span></span><br><span class=\"line\">        example:titleTextColor=<span class=\"string\">&quot;#00ff00&quot;</span></span><br><span class=\"line\">        example:titleTextSize=<span class=\"string\">&quot;20sp&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.example.viewtest.MyView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:layout_margin=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        android:padding=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        example:image=<span class=\"string\">&quot;@drawable/vol_02&quot;</span></span><br><span class=\"line\">        example:imageScaleType=<span class=\"string\">&quot;fillXY&quot;</span></span><br><span class=\"line\">        example:titleText=<span class=\"string\">&quot;妹子~&quot;</span></span><br><span class=\"line\">        example:titleTextColor=<span class=\"string\">&quot;#ff0000&quot;</span></span><br><span class=\"line\">        example:titleTextSize=<span class=\"string\">&quot;12sp&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"自定义ViewGroup","date":"2025-07-06T10:20:25.000Z","_content":"\n### 作用\n\n类似于自定义布局\n\n### 职责\n\nViewGroup相当于一个放置View的容器，并且我们在写布局xml的时候，会告诉容器（凡是以layout为开头的属性，都是为用于告诉容器的），我们的宽度（layout_width）、高度（layout_height）、对齐方式（layout_gravity）等；当然还有margin等；于是乎，ViewGroup的职能为：给childView计算出建议的宽和高和测量模式 ；决定childView的位置；为什么只是建议的宽和高，而不是直接确定呢，别忘了childView宽和高可以设置为wrap_content，这样只有childView才能计算出自己的宽和高。\n\n### 步骤\n\n- **决定该ViewGroup的LayoutParams**\n- **重写onMeasure方法**\n- **重写onLayout方法**\n- **使用该布局**\n\n### 完整代码实例\n\n```kotlin\nclass ViewLayout(context: Context, attrs: AttributeSet?):ViewGroup(context,attrs) {\n    override fun generateLayoutParams(attrs: AttributeSet?): ViewGroup.LayoutParams {\n        return MarginLayoutParams(context,attrs)\n    }\n\n    /**\n     * 计算所有ChildView的宽度和高度 然后根据ChildView的计算结果，设置自己的宽和高\n     */\n    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\n        /**\n         * 获得此ViewGroup上级容器为其推荐的宽和高，以及计算模式\n         */\n        val widthMode = MeasureSpec.getMode(widthMeasureSpec)\n        val heightMode = MeasureSpec.getMode(heightMeasureSpec)\n        val sizeWidth = MeasureSpec.getSize(widthMeasureSpec)\n        val sizeHeight = MeasureSpec.getSize(heightMeasureSpec)\n\n\n        // 计算出所有的childView的宽和高\n        measureChildren(widthMeasureSpec, heightMeasureSpec)\n        /**\n         * 记录如果是wrap_content是设置的宽和高\n         */\n        var width = 0\n        var height = 0\n\n        val cCount = childCount\n\n        var cWidth = 0\n        var cHeight = 0\n        var cParams: MarginLayoutParams? = null\n\n\n        // 用于计算左边两个childView的高度\n        var lHeight = 0\n        // 用于计算右边两个childView的高度，最终高度取二者之间大值\n        var rHeight = 0\n\n\n        // 用于计算上边两个childView的宽度\n        var tWidth = 0\n        // 用于计算下面两个childiew的宽度，最终宽度取二者之间大值\n        var bWidth = 0\n\n        /**\n         * 根据childView计算的出的宽和高，以及设置的margin计算容器的宽和高，主要用于容器是warp_content时\n         */\n        for (i in 0..<cCount) {\n            val childView = getChildAt(i)\n            cWidth = childView.measuredWidth\n            cHeight = childView.measuredHeight\n            cParams = childView.layoutParams as MarginLayoutParams\n\n\n            // 上面两个childView\n            if (i == 0 || i == 1) {\n                tWidth += cWidth + cParams!!.leftMargin + cParams!!.rightMargin\n            }\n\n            if (i == 2 || i == 3) {\n                bWidth += cWidth + cParams!!.leftMargin + cParams!!.rightMargin\n            }\n\n            if (i == 0 || i == 2) {\n                lHeight += cHeight + cParams!!.topMargin + cParams!!.bottomMargin\n            }\n\n            if (i == 1 || i == 3) {\n                rHeight += cHeight + cParams!!.topMargin + cParams!!.bottomMargin\n            }\n        }\n\n        width = max(tWidth.toDouble(), bWidth.toDouble()).toInt()\n        height = max(lHeight.toDouble(), rHeight.toDouble()).toInt()\n\n        /**\n         * 如果是wrap_content设置为我们计算的值\n         * 否则：直接设置为父容器计算的值\n         */\n        setMeasuredDimension(\n            if (widthMode == MeasureSpec.EXACTLY)\n                sizeWidth\n            else\n                width, if (heightMode == MeasureSpec.EXACTLY)\n                sizeHeight\n            else\n                height\n        )\n    }\n\n    // abstract method in viewgroup\n    override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\n        val cCount = childCount\n        var cWidth = 0\n        var cHeight = 0\n        var cParams: MarginLayoutParams? = null\n        /**\n         * 遍历所有childView根据其宽和高，以及margin进行布局\n         */\n        for (i in 0..<cCount) {\n            val childView = getChildAt(i)\n            cWidth = childView.measuredWidth\n            cHeight = childView.measuredHeight\n            cParams = childView.layoutParams as MarginLayoutParams\n\n            var cl = 0\n            var ct = 0\n            var cr = 0\n            var cb = 0\n\n            when (i) {\n                0 -> {\n                    cl = cParams!!.leftMargin\n                    ct = cParams!!.topMargin\n                }\n\n                1 -> {\n                    cl = (width - cWidth - cParams!!.rightMargin)\n                    ct = cParams!!.topMargin\n                }\n\n                2 -> {\n                    cl = cParams!!.leftMargin\n                    ct = height - cHeight - cParams!!.bottomMargin\n                }\n\n                3 -> {\n                    cl = (width - cWidth - cParams!!.rightMargin)\n                    ct = height - cHeight - cParams!!.bottomMargin\n                }\n            }\n            cr = cl + cWidth\n            cb = cHeight + ct\n            childView.layout(cl, ct, cr, cb)\n        }\n    }\n\n}\n```\n\n```kotlin\n<com.example.studyviewgrope.ViewLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"#AA333333\" >\n\n    <TextView\n        android:layout_width=\"150dp\"\n        android:layout_height=\"150dp\"\n        android:background=\"#E5ED05\"\n        android:gravity=\"center\"\n        android:text=\"0\"\n        android:textColor=\"#FFFFFF\"\n        android:textSize=\"22sp\"\n        android:textStyle=\"bold\" />\n\n    <TextView\n        android:layout_width=\"50dp\"\n        android:layout_height=\"50dp\"\n        android:background=\"#00ff00\"\n        android:gravity=\"center\"\n        android:text=\"1\"\n        android:textColor=\"#FFFFFF\"\n        android:textSize=\"22sp\"\n        android:textStyle=\"bold\" />\n\n    <TextView\n        android:layout_width=\"50dp\"\n        android:layout_height=\"50dp\"\n        android:background=\"#ff0000\"\n        android:gravity=\"center\"\n        android:text=\"2\"\n        android:textColor=\"#FFFFFF\"\n        android:textSize=\"22sp\"\n        android:textStyle=\"bold\" />\n\n    <TextView\n        android:layout_width=\"150dp\"\n        android:layout_height=\"150dp\"\n        android:background=\"#0000ff\"\n        android:gravity=\"center\"\n        android:text=\"3\"\n        android:textColor=\"#FFFFFF\"\n        android:textSize=\"22sp\"\n        android:textStyle=\"bold\" />\n\n</com.example.studyviewgrope.ViewLayout>\n```\n\n","source":"_posts/自定义ViewGroup.md","raw":"---\ntitle: 自定义ViewGroup\ndate: 2025-07-06 18:20:25\ncategories:\n- 自定义View\ntags:\n---\n\n### 作用\n\n类似于自定义布局\n\n### 职责\n\nViewGroup相当于一个放置View的容器，并且我们在写布局xml的时候，会告诉容器（凡是以layout为开头的属性，都是为用于告诉容器的），我们的宽度（layout_width）、高度（layout_height）、对齐方式（layout_gravity）等；当然还有margin等；于是乎，ViewGroup的职能为：给childView计算出建议的宽和高和测量模式 ；决定childView的位置；为什么只是建议的宽和高，而不是直接确定呢，别忘了childView宽和高可以设置为wrap_content，这样只有childView才能计算出自己的宽和高。\n\n### 步骤\n\n- **决定该ViewGroup的LayoutParams**\n- **重写onMeasure方法**\n- **重写onLayout方法**\n- **使用该布局**\n\n### 完整代码实例\n\n```kotlin\nclass ViewLayout(context: Context, attrs: AttributeSet?):ViewGroup(context,attrs) {\n    override fun generateLayoutParams(attrs: AttributeSet?): ViewGroup.LayoutParams {\n        return MarginLayoutParams(context,attrs)\n    }\n\n    /**\n     * 计算所有ChildView的宽度和高度 然后根据ChildView的计算结果，设置自己的宽和高\n     */\n    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\n        /**\n         * 获得此ViewGroup上级容器为其推荐的宽和高，以及计算模式\n         */\n        val widthMode = MeasureSpec.getMode(widthMeasureSpec)\n        val heightMode = MeasureSpec.getMode(heightMeasureSpec)\n        val sizeWidth = MeasureSpec.getSize(widthMeasureSpec)\n        val sizeHeight = MeasureSpec.getSize(heightMeasureSpec)\n\n\n        // 计算出所有的childView的宽和高\n        measureChildren(widthMeasureSpec, heightMeasureSpec)\n        /**\n         * 记录如果是wrap_content是设置的宽和高\n         */\n        var width = 0\n        var height = 0\n\n        val cCount = childCount\n\n        var cWidth = 0\n        var cHeight = 0\n        var cParams: MarginLayoutParams? = null\n\n\n        // 用于计算左边两个childView的高度\n        var lHeight = 0\n        // 用于计算右边两个childView的高度，最终高度取二者之间大值\n        var rHeight = 0\n\n\n        // 用于计算上边两个childView的宽度\n        var tWidth = 0\n        // 用于计算下面两个childiew的宽度，最终宽度取二者之间大值\n        var bWidth = 0\n\n        /**\n         * 根据childView计算的出的宽和高，以及设置的margin计算容器的宽和高，主要用于容器是warp_content时\n         */\n        for (i in 0..<cCount) {\n            val childView = getChildAt(i)\n            cWidth = childView.measuredWidth\n            cHeight = childView.measuredHeight\n            cParams = childView.layoutParams as MarginLayoutParams\n\n\n            // 上面两个childView\n            if (i == 0 || i == 1) {\n                tWidth += cWidth + cParams!!.leftMargin + cParams!!.rightMargin\n            }\n\n            if (i == 2 || i == 3) {\n                bWidth += cWidth + cParams!!.leftMargin + cParams!!.rightMargin\n            }\n\n            if (i == 0 || i == 2) {\n                lHeight += cHeight + cParams!!.topMargin + cParams!!.bottomMargin\n            }\n\n            if (i == 1 || i == 3) {\n                rHeight += cHeight + cParams!!.topMargin + cParams!!.bottomMargin\n            }\n        }\n\n        width = max(tWidth.toDouble(), bWidth.toDouble()).toInt()\n        height = max(lHeight.toDouble(), rHeight.toDouble()).toInt()\n\n        /**\n         * 如果是wrap_content设置为我们计算的值\n         * 否则：直接设置为父容器计算的值\n         */\n        setMeasuredDimension(\n            if (widthMode == MeasureSpec.EXACTLY)\n                sizeWidth\n            else\n                width, if (heightMode == MeasureSpec.EXACTLY)\n                sizeHeight\n            else\n                height\n        )\n    }\n\n    // abstract method in viewgroup\n    override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\n        val cCount = childCount\n        var cWidth = 0\n        var cHeight = 0\n        var cParams: MarginLayoutParams? = null\n        /**\n         * 遍历所有childView根据其宽和高，以及margin进行布局\n         */\n        for (i in 0..<cCount) {\n            val childView = getChildAt(i)\n            cWidth = childView.measuredWidth\n            cHeight = childView.measuredHeight\n            cParams = childView.layoutParams as MarginLayoutParams\n\n            var cl = 0\n            var ct = 0\n            var cr = 0\n            var cb = 0\n\n            when (i) {\n                0 -> {\n                    cl = cParams!!.leftMargin\n                    ct = cParams!!.topMargin\n                }\n\n                1 -> {\n                    cl = (width - cWidth - cParams!!.rightMargin)\n                    ct = cParams!!.topMargin\n                }\n\n                2 -> {\n                    cl = cParams!!.leftMargin\n                    ct = height - cHeight - cParams!!.bottomMargin\n                }\n\n                3 -> {\n                    cl = (width - cWidth - cParams!!.rightMargin)\n                    ct = height - cHeight - cParams!!.bottomMargin\n                }\n            }\n            cr = cl + cWidth\n            cb = cHeight + ct\n            childView.layout(cl, ct, cr, cb)\n        }\n    }\n\n}\n```\n\n```kotlin\n<com.example.studyviewgrope.ViewLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"#AA333333\" >\n\n    <TextView\n        android:layout_width=\"150dp\"\n        android:layout_height=\"150dp\"\n        android:background=\"#E5ED05\"\n        android:gravity=\"center\"\n        android:text=\"0\"\n        android:textColor=\"#FFFFFF\"\n        android:textSize=\"22sp\"\n        android:textStyle=\"bold\" />\n\n    <TextView\n        android:layout_width=\"50dp\"\n        android:layout_height=\"50dp\"\n        android:background=\"#00ff00\"\n        android:gravity=\"center\"\n        android:text=\"1\"\n        android:textColor=\"#FFFFFF\"\n        android:textSize=\"22sp\"\n        android:textStyle=\"bold\" />\n\n    <TextView\n        android:layout_width=\"50dp\"\n        android:layout_height=\"50dp\"\n        android:background=\"#ff0000\"\n        android:gravity=\"center\"\n        android:text=\"2\"\n        android:textColor=\"#FFFFFF\"\n        android:textSize=\"22sp\"\n        android:textStyle=\"bold\" />\n\n    <TextView\n        android:layout_width=\"150dp\"\n        android:layout_height=\"150dp\"\n        android:background=\"#0000ff\"\n        android:gravity=\"center\"\n        android:text=\"3\"\n        android:textColor=\"#FFFFFF\"\n        android:textSize=\"22sp\"\n        android:textStyle=\"bold\" />\n\n</com.example.studyviewgrope.ViewLayout>\n```\n\n","slug":"自定义ViewGroup","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gcv003bs4s7e2y861qc","content":"<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>类似于自定义布局</p>\n<h3 id=\"职责\"><a href=\"#职责\" class=\"headerlink\" title=\"职责\"></a>职责</h3><p>ViewGroup相当于一个放置View的容器，并且我们在写布局xml的时候，会告诉容器（凡是以layout为开头的属性，都是为用于告诉容器的），我们的宽度（layout_width）、高度（layout_height）、对齐方式（layout_gravity）等；当然还有margin等；于是乎，ViewGroup的职能为：给childView计算出建议的宽和高和测量模式 ；决定childView的位置；为什么只是建议的宽和高，而不是直接确定呢，别忘了childView宽和高可以设置为wrap_content，这样只有childView才能计算出自己的宽和高。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li><strong>决定该ViewGroup的LayoutParams</strong></li>\n<li><strong>重写onMeasure方法</strong></li>\n<li><strong>重写onLayout方法</strong></li>\n<li><strong>使用该布局</strong></li>\n</ul>\n<h3 id=\"完整代码实例\"><a href=\"#完整代码实例\" class=\"headerlink\" title=\"完整代码实例\"></a>完整代码实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ViewLayout</span>(context: Context, attrs: AttributeSet?):ViewGroup(context,attrs) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">generateLayoutParams</span><span class=\"params\">(attrs: <span class=\"type\">AttributeSet</span>?)</span></span>: ViewGroup.LayoutParams &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MarginLayoutParams(context,attrs)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算所有ChildView的宽度和高度 然后根据ChildView的计算结果，设置自己的宽和高</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onMeasure</span><span class=\"params\">(widthMeasureSpec: <span class=\"type\">Int</span>, heightMeasureSpec: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 获得此ViewGroup上级容器为其推荐的宽和高，以及计算模式</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> widthMode = MeasureSpec.getMode(widthMeasureSpec)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> heightMode = MeasureSpec.getMode(heightMeasureSpec)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> sizeWidth = MeasureSpec.getSize(widthMeasureSpec)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> sizeHeight = MeasureSpec.getSize(heightMeasureSpec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算出所有的childView的宽和高</span></span><br><span class=\"line\">        measureChildren(widthMeasureSpec, heightMeasureSpec)</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 记录如果是wrap_content是设置的宽和高</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> width = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> height = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> cCount = childCount</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cWidth = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cHeight = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cParams: MarginLayoutParams? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 用于计算左边两个childView的高度</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> lHeight = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\">// 用于计算右边两个childView的高度，最终高度取二者之间大值</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> rHeight = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 用于计算上边两个childView的宽度</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> tWidth = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\">// 用于计算下面两个childiew的宽度，最终宽度取二者之间大值</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bWidth = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 根据childView计算的出的宽和高，以及设置的margin计算容器的宽和高，主要用于容器是warp_content时</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span>.&lt;cCount) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> childView = getChildAt(i)</span><br><span class=\"line\">            cWidth = childView.measuredWidth</span><br><span class=\"line\">            cHeight = childView.measuredHeight</span><br><span class=\"line\">            cParams = childView.layoutParams <span class=\"keyword\">as</span> MarginLayoutParams</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 上面两个childView</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                tWidth += cWidth + cParams!!.leftMargin + cParams!!.rightMargin</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">2</span> || i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                bWidth += cWidth + cParams!!.leftMargin + cParams!!.rightMargin</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || i == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                lHeight += cHeight + cParams!!.topMargin + cParams!!.bottomMargin</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span> || i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                rHeight += cHeight + cParams!!.topMargin + cParams!!.bottomMargin</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        width = max(tWidth.toDouble(), bWidth.toDouble()).toInt()</span><br><span class=\"line\">        height = max(lHeight.toDouble(), rHeight.toDouble()).toInt()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果是wrap_content设置为我们计算的值</span></span><br><span class=\"line\"><span class=\"comment\">         * 否则：直接设置为父容器计算的值</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        setMeasuredDimension(</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (widthMode == MeasureSpec.EXACTLY)</span><br><span class=\"line\">                sizeWidth</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                width, <span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY)</span><br><span class=\"line\">                sizeHeight</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                height</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// abstract method in viewgroup</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLayout</span><span class=\"params\">(changed: <span class=\"type\">Boolean</span>, l: <span class=\"type\">Int</span>, t: <span class=\"type\">Int</span>, r: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> cCount = childCount</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cWidth = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cHeight = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cParams: MarginLayoutParams? = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 遍历所有childView根据其宽和高，以及margin进行布局</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span>.&lt;cCount) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> childView = getChildAt(i)</span><br><span class=\"line\">            cWidth = childView.measuredWidth</span><br><span class=\"line\">            cHeight = childView.measuredHeight</span><br><span class=\"line\">            cParams = childView.layoutParams <span class=\"keyword\">as</span> MarginLayoutParams</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> cl = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> ct = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> cr = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> cb = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">when</span> (i) &#123;</span><br><span class=\"line\">                <span class=\"number\">0</span> -&gt; &#123;</span><br><span class=\"line\">                    cl = cParams!!.leftMargin</span><br><span class=\"line\">                    ct = cParams!!.topMargin</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"number\">1</span> -&gt; &#123;</span><br><span class=\"line\">                    cl = (width - cWidth - cParams!!.rightMargin)</span><br><span class=\"line\">                    ct = cParams!!.topMargin</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"number\">2</span> -&gt; &#123;</span><br><span class=\"line\">                    cl = cParams!!.leftMargin</span><br><span class=\"line\">                    ct = height - cHeight - cParams!!.bottomMargin</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"number\">3</span> -&gt; &#123;</span><br><span class=\"line\">                    cl = (width - cWidth - cParams!!.rightMargin)</span><br><span class=\"line\">                    ct = height - cHeight - cParams!!.bottomMargin</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cr = cl + cWidth</span><br><span class=\"line\">            cb = cHeight + ct</span><br><span class=\"line\">            childView.layout(cl, ct, cr, cb)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.example.studyviewgrope.ViewLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;#AA333333&quot;</span> &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;150dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;150dp&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;#E5ED05&quot;</span></span><br><span class=\"line\">        android:gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFFFFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;22sp&quot;</span></span><br><span class=\"line\">        android:textStyle=<span class=\"string\">&quot;bold&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;50dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;50dp&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;#00ff00&quot;</span></span><br><span class=\"line\">        android:gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFFFFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;22sp&quot;</span></span><br><span class=\"line\">        android:textStyle=<span class=\"string\">&quot;bold&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;50dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;50dp&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;#ff0000&quot;</span></span><br><span class=\"line\">        android:gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFFFFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;22sp&quot;</span></span><br><span class=\"line\">        android:textStyle=<span class=\"string\">&quot;bold&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;150dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;150dp&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;#0000ff&quot;</span></span><br><span class=\"line\">        android:gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFFFFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;22sp&quot;</span></span><br><span class=\"line\">        android:textStyle=<span class=\"string\">&quot;bold&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/com.example.studyviewgrope.ViewLayout&gt;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"作用\n类似于自定义布局\n\n职责\nViewGroup相当于一个放置View的容器，并且我们在写布局xml的时候，会告诉容器（凡是以layout为开头的属性，都是为用于告诉容器的），我们的宽度（layout_width）、高度（layout_height）、对齐方式（layout_gravity）等；当然还有margin等；于是乎，ViewGroup的职能为：给childView计算出建议的宽和高和测量模式 ；决定childView的位置；为什么只是建议的宽和高，而不是直接确定呢，别忘了childView宽和高可以设置为wrap_content，这样只有childView才能计算出自己的宽和高。\n","more":"<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>类似于自定义布局</p>\n<h3 id=\"职责\"><a href=\"#职责\" class=\"headerlink\" title=\"职责\"></a>职责</h3><p>ViewGroup相当于一个放置View的容器，并且我们在写布局xml的时候，会告诉容器（凡是以layout为开头的属性，都是为用于告诉容器的），我们的宽度（layout_width）、高度（layout_height）、对齐方式（layout_gravity）等；当然还有margin等；于是乎，ViewGroup的职能为：给childView计算出建议的宽和高和测量模式 ；决定childView的位置；为什么只是建议的宽和高，而不是直接确定呢，别忘了childView宽和高可以设置为wrap_content，这样只有childView才能计算出自己的宽和高。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li><strong>决定该ViewGroup的LayoutParams</strong></li>\n<li><strong>重写onMeasure方法</strong></li>\n<li><strong>重写onLayout方法</strong></li>\n<li><strong>使用该布局</strong></li>\n</ul>\n<h3 id=\"完整代码实例\"><a href=\"#完整代码实例\" class=\"headerlink\" title=\"完整代码实例\"></a>完整代码实例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ViewLayout</span>(context: Context, attrs: AttributeSet?):ViewGroup(context,attrs) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">generateLayoutParams</span><span class=\"params\">(attrs: <span class=\"type\">AttributeSet</span>?)</span></span>: ViewGroup.LayoutParams &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MarginLayoutParams(context,attrs)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算所有ChildView的宽度和高度 然后根据ChildView的计算结果，设置自己的宽和高</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onMeasure</span><span class=\"params\">(widthMeasureSpec: <span class=\"type\">Int</span>, heightMeasureSpec: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 获得此ViewGroup上级容器为其推荐的宽和高，以及计算模式</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> widthMode = MeasureSpec.getMode(widthMeasureSpec)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> heightMode = MeasureSpec.getMode(heightMeasureSpec)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> sizeWidth = MeasureSpec.getSize(widthMeasureSpec)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> sizeHeight = MeasureSpec.getSize(heightMeasureSpec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算出所有的childView的宽和高</span></span><br><span class=\"line\">        measureChildren(widthMeasureSpec, heightMeasureSpec)</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 记录如果是wrap_content是设置的宽和高</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> width = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> height = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> cCount = childCount</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cWidth = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cHeight = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cParams: MarginLayoutParams? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 用于计算左边两个childView的高度</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> lHeight = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\">// 用于计算右边两个childView的高度，最终高度取二者之间大值</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> rHeight = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 用于计算上边两个childView的宽度</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> tWidth = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\">// 用于计算下面两个childiew的宽度，最终宽度取二者之间大值</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bWidth = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 根据childView计算的出的宽和高，以及设置的margin计算容器的宽和高，主要用于容器是warp_content时</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span>.&lt;cCount) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> childView = getChildAt(i)</span><br><span class=\"line\">            cWidth = childView.measuredWidth</span><br><span class=\"line\">            cHeight = childView.measuredHeight</span><br><span class=\"line\">            cParams = childView.layoutParams <span class=\"keyword\">as</span> MarginLayoutParams</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 上面两个childView</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                tWidth += cWidth + cParams!!.leftMargin + cParams!!.rightMargin</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">2</span> || i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                bWidth += cWidth + cParams!!.leftMargin + cParams!!.rightMargin</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || i == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                lHeight += cHeight + cParams!!.topMargin + cParams!!.bottomMargin</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span> || i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                rHeight += cHeight + cParams!!.topMargin + cParams!!.bottomMargin</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        width = max(tWidth.toDouble(), bWidth.toDouble()).toInt()</span><br><span class=\"line\">        height = max(lHeight.toDouble(), rHeight.toDouble()).toInt()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果是wrap_content设置为我们计算的值</span></span><br><span class=\"line\"><span class=\"comment\">         * 否则：直接设置为父容器计算的值</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        setMeasuredDimension(</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (widthMode == MeasureSpec.EXACTLY)</span><br><span class=\"line\">                sizeWidth</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                width, <span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY)</span><br><span class=\"line\">                sizeHeight</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                height</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// abstract method in viewgroup</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLayout</span><span class=\"params\">(changed: <span class=\"type\">Boolean</span>, l: <span class=\"type\">Int</span>, t: <span class=\"type\">Int</span>, r: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> cCount = childCount</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cWidth = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cHeight = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cParams: MarginLayoutParams? = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 遍历所有childView根据其宽和高，以及margin进行布局</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span>.&lt;cCount) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> childView = getChildAt(i)</span><br><span class=\"line\">            cWidth = childView.measuredWidth</span><br><span class=\"line\">            cHeight = childView.measuredHeight</span><br><span class=\"line\">            cParams = childView.layoutParams <span class=\"keyword\">as</span> MarginLayoutParams</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> cl = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> ct = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> cr = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> cb = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">when</span> (i) &#123;</span><br><span class=\"line\">                <span class=\"number\">0</span> -&gt; &#123;</span><br><span class=\"line\">                    cl = cParams!!.leftMargin</span><br><span class=\"line\">                    ct = cParams!!.topMargin</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"number\">1</span> -&gt; &#123;</span><br><span class=\"line\">                    cl = (width - cWidth - cParams!!.rightMargin)</span><br><span class=\"line\">                    ct = cParams!!.topMargin</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"number\">2</span> -&gt; &#123;</span><br><span class=\"line\">                    cl = cParams!!.leftMargin</span><br><span class=\"line\">                    ct = height - cHeight - cParams!!.bottomMargin</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"number\">3</span> -&gt; &#123;</span><br><span class=\"line\">                    cl = (width - cWidth - cParams!!.rightMargin)</span><br><span class=\"line\">                    ct = height - cHeight - cParams!!.bottomMargin</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cr = cl + cWidth</span><br><span class=\"line\">            cb = cHeight + ct</span><br><span class=\"line\">            childView.layout(cl, ct, cr, cb)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.example.studyviewgrope.ViewLayout xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;#AA333333&quot;</span> &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;150dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;150dp&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;#E5ED05&quot;</span></span><br><span class=\"line\">        android:gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFFFFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;22sp&quot;</span></span><br><span class=\"line\">        android:textStyle=<span class=\"string\">&quot;bold&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;50dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;50dp&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;#00ff00&quot;</span></span><br><span class=\"line\">        android:gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFFFFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;22sp&quot;</span></span><br><span class=\"line\">        android:textStyle=<span class=\"string\">&quot;bold&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;50dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;50dp&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;#ff0000&quot;</span></span><br><span class=\"line\">        android:gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFFFFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;22sp&quot;</span></span><br><span class=\"line\">        android:textStyle=<span class=\"string\">&quot;bold&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;150dp&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;150dp&quot;</span></span><br><span class=\"line\">        android:background=<span class=\"string\">&quot;#0000ff&quot;</span></span><br><span class=\"line\">        android:gravity=<span class=\"string\">&quot;center&quot;</span></span><br><span class=\"line\">        android:text=<span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">        android:textColor=<span class=\"string\">&quot;#FFFFFF&quot;</span></span><br><span class=\"line\">        android:textSize=<span class=\"string\">&quot;22sp&quot;</span></span><br><span class=\"line\">        android:textStyle=<span class=\"string\">&quot;bold&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/com.example.studyviewgrope.ViewLayout&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"运算符","date":"2025-08-25T10:17:01.000Z","_content":"\n### 运算符与表达式\n\n![](../img/img109.png)\n\n### 算术运算符\n\n+（加），-（减），*（乘），/（除），%（取模/取余）\n\n**如果有小数参与运算，结果有可能不准确**\n\n### 类型转换\n\n- **隐式转换**（自动类型提升）\n\n  定义：把取值范围小的数据转成取值范围大的数据\n\n  提升规则：\n\n  1. 取值范围小的和取值范围大的进行运算，小的会先转成大的再进行运算\n  2. byte，short，char三种类型数据进行运算会优先转成int类型再进行运算\n\n- **强制转换**\n\n  定义：把取值范围大的数据赋值给取值范围小的变量\n\n  格式：目标数据类型 变量=（目标数据类型）被强制转化的数据\n\n### 字符串的”＋“操作\n\n![](../img/img110.png)\n\n![](../img/img111.png)\n\n### 字符相加（字符与字符，字符与数字）\n\n字符相加时会先将字符转换成ASCII码表对应的int类型数值再进行计算\n\n### 赋值运算符\n\n![](../img/img112.png)\n\n扩展的赋值运算符隐含了强制类型转换\n\n### 关系运算符\n\n![](../img/img113.png)\n\n关系运算符的结果都是boolean类型\n\n### 逻辑运算符\n\n![](../img/img114.png)\n\n### 短路逻辑运算符\n\n![](../img/img115.png)\n\n## 三元运算符格式\n\n关系表达式？表达式1：表达式2；\n\n计算规则：\n\n1. 首先计算关系表达式的值\n2. 为true返回表达式1\n3. 为false返回表达式2\n\n### 运算符的优先级\n\n![](../img/img116.png)\n","source":"_posts/运算符.md","raw":"---\ntitle: 运算符\ndate: 2025-08-25 18:17:01\ncategories:\n- Java\ntags:\n---\n\n### 运算符与表达式\n\n![](../img/img109.png)\n\n### 算术运算符\n\n+（加），-（减），*（乘），/（除），%（取模/取余）\n\n**如果有小数参与运算，结果有可能不准确**\n\n### 类型转换\n\n- **隐式转换**（自动类型提升）\n\n  定义：把取值范围小的数据转成取值范围大的数据\n\n  提升规则：\n\n  1. 取值范围小的和取值范围大的进行运算，小的会先转成大的再进行运算\n  2. byte，short，char三种类型数据进行运算会优先转成int类型再进行运算\n\n- **强制转换**\n\n  定义：把取值范围大的数据赋值给取值范围小的变量\n\n  格式：目标数据类型 变量=（目标数据类型）被强制转化的数据\n\n### 字符串的”＋“操作\n\n![](../img/img110.png)\n\n![](../img/img111.png)\n\n### 字符相加（字符与字符，字符与数字）\n\n字符相加时会先将字符转换成ASCII码表对应的int类型数值再进行计算\n\n### 赋值运算符\n\n![](../img/img112.png)\n\n扩展的赋值运算符隐含了强制类型转换\n\n### 关系运算符\n\n![](../img/img113.png)\n\n关系运算符的结果都是boolean类型\n\n### 逻辑运算符\n\n![](../img/img114.png)\n\n### 短路逻辑运算符\n\n![](../img/img115.png)\n\n## 三元运算符格式\n\n关系表达式？表达式1：表达式2；\n\n计算规则：\n\n1. 首先计算关系表达式的值\n2. 为true返回表达式1\n3. 为false返回表达式2\n\n### 运算符的优先级\n\n![](../img/img116.png)\n","slug":"运算符","published":1,"updated":"2025-08-26T13:03:10.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gd1003ps4s7cxymgoj2","content":"<h3 id=\"运算符与表达式\"><a href=\"#运算符与表达式\" class=\"headerlink\" title=\"运算符与表达式\"></a>运算符与表达式</h3><p><img src=\"/../img/img109.png\"></p>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><p>+（加），-（减），*（乘），&#x2F;（除），%（取模&#x2F;取余）</p>\n<p><strong>如果有小数参与运算，结果有可能不准确</strong></p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><ul>\n<li><p><strong>隐式转换</strong>（自动类型提升）</p>\n<p>定义：把取值范围小的数据转成取值范围大的数据</p>\n<p>提升规则：</p>\n<ol>\n<li>取值范围小的和取值范围大的进行运算，小的会先转成大的再进行运算</li>\n<li>byte，short，char三种类型数据进行运算会优先转成int类型再进行运算</li>\n</ol>\n</li>\n<li><p><strong>强制转换</strong></p>\n<p>定义：把取值范围大的数据赋值给取值范围小的变量</p>\n<p>格式：目标数据类型 变量&#x3D;（目标数据类型）被强制转化的数据</p>\n</li>\n</ul>\n<h3 id=\"字符串的”＋“操作\"><a href=\"#字符串的”＋“操作\" class=\"headerlink\" title=\"字符串的”＋“操作\"></a>字符串的”＋“操作</h3><p><img src=\"/../img/img110.png\"></p>\n<p><img src=\"/../img/img111.png\"></p>\n<h3 id=\"字符相加（字符与字符，字符与数字）\"><a href=\"#字符相加（字符与字符，字符与数字）\" class=\"headerlink\" title=\"字符相加（字符与字符，字符与数字）\"></a>字符相加（字符与字符，字符与数字）</h3><p>字符相加时会先将字符转换成ASCII码表对应的int类型数值再进行计算</p>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><p><img src=\"/../img/img112.png\"></p>\n<p>扩展的赋值运算符隐含了强制类型转换</p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p><img src=\"/../img/img113.png\"></p>\n<p>关系运算符的结果都是boolean类型</p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p><img src=\"/../img/img114.png\"></p>\n<h3 id=\"短路逻辑运算符\"><a href=\"#短路逻辑运算符\" class=\"headerlink\" title=\"短路逻辑运算符\"></a>短路逻辑运算符</h3><p><img src=\"/../img/img115.png\"></p>\n<h2 id=\"三元运算符格式\"><a href=\"#三元运算符格式\" class=\"headerlink\" title=\"三元运算符格式\"></a>三元运算符格式</h2><p>关系表达式？表达式1：表达式2；</p>\n<p>计算规则：</p>\n<ol>\n<li>首先计算关系表达式的值</li>\n<li>为true返回表达式1</li>\n<li>为false返回表达式2</li>\n</ol>\n<h3 id=\"运算符的优先级\"><a href=\"#运算符的优先级\" class=\"headerlink\" title=\"运算符的优先级\"></a>运算符的优先级</h3><p><img src=\"/../img/img116.png\"></p>\n","excerpt":"运算符与表达式\n\n\n算术运算符\n+（加），-（减），*（乘），/（除），%（取模/取余）\n\n如果有小数参与运算，结果有可能不准确\n\n类型转换\n * 隐式转换（自动类型提升）\n   \n   定义：把取值范围小的数据转成取值范围大的数据\n   \n   提升规则：\n   \n    1. 取值范围小的和取值范围大的进行运算，小的会先转成大的再进行运算\n    2. byte，short，char三种类型数据进行运算会优先转成int类型再进行运算\n   \n   \n * 强制转换\n   \n   定义：把取值范围大的数据赋值给取值范围小的变量\n   \n   格式：目标数据类型 变量=（目标数据类型）被强制转","more":"<h3 id=\"运算符与表达式\"><a href=\"#运算符与表达式\" class=\"headerlink\" title=\"运算符与表达式\"></a>运算符与表达式</h3><p><img src=\"/../img/img109.png\"></p>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><p>+（加），-（减），*（乘），&#x2F;（除），%（取模&#x2F;取余）</p>\n<p><strong>如果有小数参与运算，结果有可能不准确</strong></p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><ul>\n<li><p><strong>隐式转换</strong>（自动类型提升）</p>\n<p>定义：把取值范围小的数据转成取值范围大的数据</p>\n<p>提升规则：</p>\n<ol>\n<li>取值范围小的和取值范围大的进行运算，小的会先转成大的再进行运算</li>\n<li>byte，short，char三种类型数据进行运算会优先转成int类型再进行运算</li>\n</ol>\n</li>\n<li><p><strong>强制转换</strong></p>\n<p>定义：把取值范围大的数据赋值给取值范围小的变量</p>\n<p>格式：目标数据类型 变量&#x3D;（目标数据类型）被强制转化的数据</p>\n</li>\n</ul>\n<h3 id=\"字符串的”＋“操作\"><a href=\"#字符串的”＋“操作\" class=\"headerlink\" title=\"字符串的”＋“操作\"></a>字符串的”＋“操作</h3><p><img src=\"/../img/img110.png\"></p>\n<p><img src=\"/../img/img111.png\"></p>\n<h3 id=\"字符相加（字符与字符，字符与数字）\"><a href=\"#字符相加（字符与字符，字符与数字）\" class=\"headerlink\" title=\"字符相加（字符与字符，字符与数字）\"></a>字符相加（字符与字符，字符与数字）</h3><p>字符相加时会先将字符转换成ASCII码表对应的int类型数值再进行计算</p>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><p><img src=\"/../img/img112.png\"></p>\n<p>扩展的赋值运算符隐含了强制类型转换</p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p><img src=\"/../img/img113.png\"></p>\n<p>关系运算符的结果都是boolean类型</p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p><img src=\"/../img/img114.png\"></p>\n<h3 id=\"短路逻辑运算符\"><a href=\"#短路逻辑运算符\" class=\"headerlink\" title=\"短路逻辑运算符\"></a>短路逻辑运算符</h3><p><img src=\"/../img/img115.png\"></p>\n<h2 id=\"三元运算符格式\"><a href=\"#三元运算符格式\" class=\"headerlink\" title=\"三元运算符格式\"></a>三元运算符格式</h2><p>关系表达式？表达式1：表达式2；</p>\n<p>计算规则：</p>\n<ol>\n<li>首先计算关系表达式的值</li>\n<li>为true返回表达式1</li>\n<li>为false返回表达式2</li>\n</ol>\n<h3 id=\"运算符的优先级\"><a href=\"#运算符的优先级\" class=\"headerlink\" title=\"运算符的优先级\"></a>运算符的优先级</h3><p><img src=\"/../img/img116.png\"></p>\n"},{"title":"计算机中的数据存储","date":"2025-08-26T13:06:22.000Z","_content":"\n- **计算机主要以二进制存储数据**\n- **二进制以0b开头**\n- **八进制以0开头**\n- **十六进制以0x开头**\n- **十进制转任意进制使用除基取余法：数据除以基数记录余数直到商为0再将余数逆序排列**\n- **任意进制转十进制：系数*基数的权次幂 相加**\n\n\n\n","source":"_posts/计算机中的数据存储.md","raw":"---\ntitle: 计算机中的数据存储\ndate: 2025-08-26 21:06:22\ncategories:\n- 计算机底层\ntags:\n---\n\n- **计算机主要以二进制存储数据**\n- **二进制以0b开头**\n- **八进制以0开头**\n- **十六进制以0x开头**\n- **十进制转任意进制使用除基取余法：数据除以基数记录余数直到商为0再将余数逆序排列**\n- **任意进制转十进制：系数*基数的权次幂 相加**\n\n\n\n","slug":"计算机中的数据存储","published":1,"updated":"2025-08-28T13:51:46.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gd2003qs4s7hd4t1zx7","content":"<ul>\n<li><strong>计算机主要以二进制存储数据</strong></li>\n<li><strong>二进制以0b开头</strong></li>\n<li><strong>八进制以0开头</strong></li>\n<li><strong>十六进制以0x开头</strong></li>\n<li><strong>十进制转任意进制使用除基取余法：数据除以基数记录余数直到商为0再将余数逆序排列</strong></li>\n<li><strong>任意进制转十进制：系数*基数的权次幂 相加</strong></li>\n</ul>\n","excerpt":"* 计算机主要以二进制存储数据\n * 二进制以0b开头\n * 八进制以0开头\n * 十六进制以0x开头\n * 十进制转任意进制使用除基取余法：数据除以基数记录余数直到商为0再将余数逆序排列\n * 任意进制转十进制：系数*基数的权次幂 相加","more":"<ul>\n<li><strong>计算机主要以二进制存储数据</strong></li>\n<li><strong>二进制以0b开头</strong></li>\n<li><strong>八进制以0开头</strong></li>\n<li><strong>十六进制以0x开头</strong></li>\n<li><strong>十进制转任意进制使用除基取余法：数据除以基数记录余数直到商为0再将余数逆序排列</strong></li>\n<li><strong>任意进制转十进制：系数*基数的权次幂 相加</strong></li>\n</ul>\n"},{"title":"高级技巧Kotlin","date":"2025-06-26T18:02:24.000Z","_content":"\n# 全局获取Context的技巧\n\n```kotlin\nclass MyApplication : Application() {\n    companion object {\n        @SuppressLint(\"StaticFieldLeak\")\n        lateinit var context: Context\n    }\n    override fun onCreate() {\n        super.onCreate()\n        context = applicationContext\n    }\n}\n```\n\n```xml\n<application\n         android:name=\".MyApplication\" />\n```\n\n```kotlin\nToast.makeText(MyApplication.context, \"onCreate\", Toast.LENGTH_SHORT).show()\n```\n\n------\n\n# Intent传递对象\n\n### Serializable方式\n\n- **特点**：`Serializable` 是 Java 提供的一个接口，它标志着一个类可以被序列化\n\n- **用法**：\n\n  ```kotlin\n  // 定义一个可以序列化的对象\n  data class User(val name: String, val age: Int) : Serializable\n  \n  // 在第一个Activity中传递对象\n  val user = User(\"John\", 30)\n  val intent = Intent(this, SecondActivity::class.java)\n  intent.putExtra(\"user_data\", user)\n  startActivity(intent)\n  \n  // 在第二个Activity中接收对象\n  val user = intent.getSerializableExtra(\"user_data\") as User\n  ```\n\n### Parcelable方式\n\n- **特点**：`Parcelable` 是 Android 提供的一种对象序列化机制，它与 `Serializable` 类似，目的是将对象转换为可以通过 `Intent` 或 `Bundle` 等传递的字节流，但它的实现更加高效。与 Java 标准的 `Serializable` 相比，`Parcelable` 更加高效，因为它不会依赖于反射，使用了特定的内存块和优化的序列化方式。\n\n- **用法**：\n\n  ```kotlin\n  // 定义一个实现 Parcelable 的对象\n  data class User() : Parcelable {\n      val name=\"\"\n      val age=0\n      override fun writeToParcel(parcel: Parcel, flags: Int) {\n          parcel.writeString(name)//写出name\n          parcel.writeInt(age)//写出age\n      }\n  \n      override fun describeContents(): Int = 0\n  \n      companion object  CREATOR: Parcelable.Creator<User>{\n              override fun createFromParcel(parcel: Parcel): User {\n                  val user = User()\n                 user.name=parcel.readString()?:\"\"//读取name\n                  user.age=parcel.readInt()//读取age\n                  return user\n              }\n  \n              override fun newArray(size: Int): Array<User?> {\n                  return arrayOfNulls(size)\n              }\n          }\n      \n  }\n  \n  // 在第一个Activity中传递对象\n  val user = User()\n  user.name=\"John\"\n  user.age=18\n  val intent = Intent(this, SecondActivity::class.java)\n  intent.putExtra(\"user_data\", user)\n  startActivity(intent)\n  // 在第二个Activity中接收对象\n  val user = intent.getParcelableExtra(\"user_data\") as User\n  ```\n\n  **注意**：这里的读取顺序和写出的顺序一定要完全相同\n\n  更简单的方法：\n\n  ```kotlin\n  @Parcelable\n  class Person(var name:String,var age:Int):Parcelable\n  ```\n\n------\n\n# 定制自己的日志工具\n\n- 开发阶段将level指定成VERBOSE，正式上线时将其指定成ERROR\n\n```kotlin\nobject LogUtil {\n    private const val VERBOSE = 1\n    private const val DEBUG = 2\n    private const val INFO = 3\n    private const val WARN = 4\n    private const val ERROR = 5\n    private var level = VERBOSE\n    fun v(tag: String, msg: String) {\n        if (level <= VERBOSE) {\n            Log.v(tag, msg)\n        }\n    }\n    fun d(tag: String, msg: String) {\n        if (level <= DEBUG) {\n            Log.d(tag, msg)\n        }\n    }\n    fun i(tag: String, msg: String) {\n        if (level <= INFO) {\n            Log.i(tag, msg)\n        }\n    }\n    fun w(tag: String, msg: String) {\n        if (level <= WARN) {\n            Log.w(tag, msg)\n        }\n    }\n    fun e(tag: String, msg: String) {\n        if (level <= ERROR) {\n            Log.e(tag, msg)\n        }\n    }\n}\n```\n\n```kotlin\nLogUtil.d(\"TAG\", \"debug log\")\n```\n\n------\n\n# 深色主题\n\n```kotlin\nfun toggleTheme() {\n    val currentMode = AppCompatDelegate.getDefaultNightMode()\n\n    if (currentMode == AppCompatDelegate.MODE_NIGHT_YES) {\n        // 当前是深色主题，切换到浅色主题\n        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)\n    } else {\n        // 当前是浅色主题，切换到深色主题\n        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)\n    }\n\n    // 你可以在这里保存用户的选择，以便下次启动时保持一致\n    val sharedPreferences = getSharedPreferences(\"settings\", MODE_PRIVATE)\n    val editor = sharedPreferences.edit()\n    editor.putBoolean(\"dark_mode\", currentMode == AppCompatDelegate.MODE_NIGHT_YES)\n    editor.apply()\n}\n\n```\n\n------\n\n","source":"_posts/高级技巧-Kotlin.md","raw":"---\ntitle: 高级技巧Kotlin\ndate: 2025-06-27 02:02:24\ncategories:\n- Android(Kotlin版)\n---\n\n# 全局获取Context的技巧\n\n```kotlin\nclass MyApplication : Application() {\n    companion object {\n        @SuppressLint(\"StaticFieldLeak\")\n        lateinit var context: Context\n    }\n    override fun onCreate() {\n        super.onCreate()\n        context = applicationContext\n    }\n}\n```\n\n```xml\n<application\n         android:name=\".MyApplication\" />\n```\n\n```kotlin\nToast.makeText(MyApplication.context, \"onCreate\", Toast.LENGTH_SHORT).show()\n```\n\n------\n\n# Intent传递对象\n\n### Serializable方式\n\n- **特点**：`Serializable` 是 Java 提供的一个接口，它标志着一个类可以被序列化\n\n- **用法**：\n\n  ```kotlin\n  // 定义一个可以序列化的对象\n  data class User(val name: String, val age: Int) : Serializable\n  \n  // 在第一个Activity中传递对象\n  val user = User(\"John\", 30)\n  val intent = Intent(this, SecondActivity::class.java)\n  intent.putExtra(\"user_data\", user)\n  startActivity(intent)\n  \n  // 在第二个Activity中接收对象\n  val user = intent.getSerializableExtra(\"user_data\") as User\n  ```\n\n### Parcelable方式\n\n- **特点**：`Parcelable` 是 Android 提供的一种对象序列化机制，它与 `Serializable` 类似，目的是将对象转换为可以通过 `Intent` 或 `Bundle` 等传递的字节流，但它的实现更加高效。与 Java 标准的 `Serializable` 相比，`Parcelable` 更加高效，因为它不会依赖于反射，使用了特定的内存块和优化的序列化方式。\n\n- **用法**：\n\n  ```kotlin\n  // 定义一个实现 Parcelable 的对象\n  data class User() : Parcelable {\n      val name=\"\"\n      val age=0\n      override fun writeToParcel(parcel: Parcel, flags: Int) {\n          parcel.writeString(name)//写出name\n          parcel.writeInt(age)//写出age\n      }\n  \n      override fun describeContents(): Int = 0\n  \n      companion object  CREATOR: Parcelable.Creator<User>{\n              override fun createFromParcel(parcel: Parcel): User {\n                  val user = User()\n                 user.name=parcel.readString()?:\"\"//读取name\n                  user.age=parcel.readInt()//读取age\n                  return user\n              }\n  \n              override fun newArray(size: Int): Array<User?> {\n                  return arrayOfNulls(size)\n              }\n          }\n      \n  }\n  \n  // 在第一个Activity中传递对象\n  val user = User()\n  user.name=\"John\"\n  user.age=18\n  val intent = Intent(this, SecondActivity::class.java)\n  intent.putExtra(\"user_data\", user)\n  startActivity(intent)\n  // 在第二个Activity中接收对象\n  val user = intent.getParcelableExtra(\"user_data\") as User\n  ```\n\n  **注意**：这里的读取顺序和写出的顺序一定要完全相同\n\n  更简单的方法：\n\n  ```kotlin\n  @Parcelable\n  class Person(var name:String,var age:Int):Parcelable\n  ```\n\n------\n\n# 定制自己的日志工具\n\n- 开发阶段将level指定成VERBOSE，正式上线时将其指定成ERROR\n\n```kotlin\nobject LogUtil {\n    private const val VERBOSE = 1\n    private const val DEBUG = 2\n    private const val INFO = 3\n    private const val WARN = 4\n    private const val ERROR = 5\n    private var level = VERBOSE\n    fun v(tag: String, msg: String) {\n        if (level <= VERBOSE) {\n            Log.v(tag, msg)\n        }\n    }\n    fun d(tag: String, msg: String) {\n        if (level <= DEBUG) {\n            Log.d(tag, msg)\n        }\n    }\n    fun i(tag: String, msg: String) {\n        if (level <= INFO) {\n            Log.i(tag, msg)\n        }\n    }\n    fun w(tag: String, msg: String) {\n        if (level <= WARN) {\n            Log.w(tag, msg)\n        }\n    }\n    fun e(tag: String, msg: String) {\n        if (level <= ERROR) {\n            Log.e(tag, msg)\n        }\n    }\n}\n```\n\n```kotlin\nLogUtil.d(\"TAG\", \"debug log\")\n```\n\n------\n\n# 深色主题\n\n```kotlin\nfun toggleTheme() {\n    val currentMode = AppCompatDelegate.getDefaultNightMode()\n\n    if (currentMode == AppCompatDelegate.MODE_NIGHT_YES) {\n        // 当前是深色主题，切换到浅色主题\n        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)\n    } else {\n        // 当前是浅色主题，切换到深色主题\n        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)\n    }\n\n    // 你可以在这里保存用户的选择，以便下次启动时保持一致\n    val sharedPreferences = getSharedPreferences(\"settings\", MODE_PRIVATE)\n    val editor = sharedPreferences.edit()\n    editor.putBoolean(\"dark_mode\", currentMode == AppCompatDelegate.MODE_NIGHT_YES)\n    editor.apply()\n}\n\n```\n\n------\n\n","slug":"高级技巧-Kotlin","published":1,"updated":"2025-09-20T05:28:33.080Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gd2003rs4s75yya60ch","content":"<h1 id=\"全局获取Context的技巧\"><a href=\"#全局获取Context的技巧\" class=\"headerlink\" title=\"全局获取Context的技巧\"></a>全局获取Context的技巧</h1><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyApplication</span> : <span class=\"type\">Application</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(<span class=\"string\">&quot;StaticFieldLeak&quot;</span>)</span></span><br><span class=\"line\">        <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> context: Context</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate()</span><br><span class=\"line\">        context = applicationContext</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;.MyApplication&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Toast.makeText(MyApplication.context, <span class=\"string\">&quot;onCreate&quot;</span>, Toast.LENGTH_SHORT).show()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Intent传递对象\"><a href=\"#Intent传递对象\" class=\"headerlink\" title=\"Intent传递对象\"></a>Intent传递对象</h1><h3 id=\"Serializable方式\"><a href=\"#Serializable方式\" class=\"headerlink\" title=\"Serializable方式\"></a>Serializable方式</h3><ul>\n<li><p><strong>特点</strong>：<code>Serializable</code> 是 Java 提供的一个接口，它标志着一个类可以被序列化</p>\n</li>\n<li><p><strong>用法</strong>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个可以序列化的对象</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>) : Serializable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在第一个Activity中传递对象</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> user = User(<span class=\"string\">&quot;John&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> intent = Intent(<span class=\"keyword\">this</span>, SecondActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">&quot;user_data&quot;</span>, user)</span><br><span class=\"line\">startActivity(intent)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在第二个Activity中接收对象</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> user = intent.getSerializableExtra(<span class=\"string\">&quot;user_data&quot;</span>) <span class=\"keyword\">as</span> User</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Parcelable方式\"><a href=\"#Parcelable方式\" class=\"headerlink\" title=\"Parcelable方式\"></a>Parcelable方式</h3><ul>\n<li><p><strong>特点</strong>：<code>Parcelable</code> 是 Android 提供的一种对象序列化机制，它与 <code>Serializable</code> 类似，目的是将对象转换为可以通过 <code>Intent</code> 或 <code>Bundle</code> 等传递的字节流，但它的实现更加高效。与 Java 标准的 <code>Serializable</code> 相比，<code>Parcelable</code> 更加高效，因为它不会依赖于反射，使用了特定的内存块和优化的序列化方式。</p>\n</li>\n<li><p><strong>用法</strong>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个实现 Parcelable 的对象</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>() : Parcelable &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> name=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> age=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(parcel: <span class=\"type\">Parcel</span>, flags: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        parcel.writeString(name)<span class=\"comment\">//写出name</span></span><br><span class=\"line\">        parcel.writeInt(age)<span class=\"comment\">//写出age</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>  CREATOR: Parcelable.Creator&lt;User&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createFromParcel</span><span class=\"params\">(parcel: <span class=\"type\">Parcel</span>)</span></span>: User &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> user = User()</span><br><span class=\"line\">               user.name=parcel.readString()?:<span class=\"string\">&quot;&quot;</span><span class=\"comment\">//读取name</span></span><br><span class=\"line\">                user.age=parcel.readInt()<span class=\"comment\">//读取age</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> user</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">newArray</span><span class=\"params\">(size: <span class=\"type\">Int</span>)</span></span>: Array&lt;User?&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> arrayOfNulls(size)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在第一个Activity中传递对象</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> user = User()</span><br><span class=\"line\">user.name=<span class=\"string\">&quot;John&quot;</span></span><br><span class=\"line\">user.age=<span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> intent = Intent(<span class=\"keyword\">this</span>, SecondActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">&quot;user_data&quot;</span>, user)</span><br><span class=\"line\">startActivity(intent)</span><br><span class=\"line\"><span class=\"comment\">// 在第二个Activity中接收对象</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> user = intent.getParcelableExtra(<span class=\"string\">&quot;user_data&quot;</span>) <span class=\"keyword\">as</span> User</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：这里的读取顺序和写出的顺序一定要完全相同</p>\n<p>更简单的方法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Parcelable</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>(<span class=\"keyword\">var</span> name:String,<span class=\"keyword\">var</span> age:<span class=\"built_in\">Int</span>):Parcelable</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"定制自己的日志工具\"><a href=\"#定制自己的日志工具\" class=\"headerlink\" title=\"定制自己的日志工具\"></a>定制自己的日志工具</h1><ul>\n<li>开发阶段将level指定成VERBOSE，正式上线时将其指定成ERROR</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> LogUtil &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> VERBOSE = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> DEBUG = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> INFO = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> WARN = <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> ERROR = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> level = VERBOSE</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">v</span><span class=\"params\">(tag: <span class=\"type\">String</span>, msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level &lt;= VERBOSE) &#123;</span><br><span class=\"line\">            Log.v(tag, msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">d</span><span class=\"params\">(tag: <span class=\"type\">String</span>, msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level &lt;= DEBUG) &#123;</span><br><span class=\"line\">            Log.d(tag, msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">i</span><span class=\"params\">(tag: <span class=\"type\">String</span>, msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level &lt;= INFO) &#123;</span><br><span class=\"line\">            Log.i(tag, msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">w</span><span class=\"params\">(tag: <span class=\"type\">String</span>, msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level &lt;= WARN) &#123;</span><br><span class=\"line\">            Log.w(tag, msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">e</span><span class=\"params\">(tag: <span class=\"type\">String</span>, msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level &lt;= ERROR) &#123;</span><br><span class=\"line\">            Log.e(tag, msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LogUtil.d(<span class=\"string\">&quot;TAG&quot;</span>, <span class=\"string\">&quot;debug log&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"深色主题\"><a href=\"#深色主题\" class=\"headerlink\" title=\"深色主题\"></a>深色主题</h1><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">toggleTheme</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> currentMode = AppCompatDelegate.getDefaultNightMode()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentMode == AppCompatDelegate.MODE_NIGHT_YES) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前是深色主题，切换到浅色主题</span></span><br><span class=\"line\">        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前是浅色主题，切换到深色主题</span></span><br><span class=\"line\">        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 你可以在这里保存用户的选择，以便下次启动时保持一致</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sharedPreferences = getSharedPreferences(<span class=\"string\">&quot;settings&quot;</span>, MODE_PRIVATE)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> editor = sharedPreferences.edit()</span><br><span class=\"line\">    editor.putBoolean(<span class=\"string\">&quot;dark_mode&quot;</span>, currentMode == AppCompatDelegate.MODE_NIGHT_YES)</span><br><span class=\"line\">    editor.apply()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"全局获取Context的技巧\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nclass MyApplication : Application() {\n    companion object {\n        @SuppressLint(\"StaticFieldLeak\")\n        lateinit var context: Context\n    }\n    override fun onCreate() {\n        super.onCreate()\n        context = applicationContext\n    }\n}\n\n\n1\n2\n\n\n<applica","more":"<h1 id=\"全局获取Context的技巧\"><a href=\"#全局获取Context的技巧\" class=\"headerlink\" title=\"全局获取Context的技巧\"></a>全局获取Context的技巧</h1><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyApplication</span> : <span class=\"type\">Application</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(<span class=\"string\">&quot;StaticFieldLeak&quot;</span>)</span></span><br><span class=\"line\">        <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> context: Context</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate()</span><br><span class=\"line\">        context = applicationContext</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;.MyApplication&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Toast.makeText(MyApplication.context, <span class=\"string\">&quot;onCreate&quot;</span>, Toast.LENGTH_SHORT).show()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Intent传递对象\"><a href=\"#Intent传递对象\" class=\"headerlink\" title=\"Intent传递对象\"></a>Intent传递对象</h1><h3 id=\"Serializable方式\"><a href=\"#Serializable方式\" class=\"headerlink\" title=\"Serializable方式\"></a>Serializable方式</h3><ul>\n<li><p><strong>特点</strong>：<code>Serializable</code> 是 Java 提供的一个接口，它标志着一个类可以被序列化</p>\n</li>\n<li><p><strong>用法</strong>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个可以序列化的对象</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>) : Serializable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在第一个Activity中传递对象</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> user = User(<span class=\"string\">&quot;John&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> intent = Intent(<span class=\"keyword\">this</span>, SecondActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">&quot;user_data&quot;</span>, user)</span><br><span class=\"line\">startActivity(intent)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在第二个Activity中接收对象</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> user = intent.getSerializableExtra(<span class=\"string\">&quot;user_data&quot;</span>) <span class=\"keyword\">as</span> User</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Parcelable方式\"><a href=\"#Parcelable方式\" class=\"headerlink\" title=\"Parcelable方式\"></a>Parcelable方式</h3><ul>\n<li><p><strong>特点</strong>：<code>Parcelable</code> 是 Android 提供的一种对象序列化机制，它与 <code>Serializable</code> 类似，目的是将对象转换为可以通过 <code>Intent</code> 或 <code>Bundle</code> 等传递的字节流，但它的实现更加高效。与 Java 标准的 <code>Serializable</code> 相比，<code>Parcelable</code> 更加高效，因为它不会依赖于反射，使用了特定的内存块和优化的序列化方式。</p>\n</li>\n<li><p><strong>用法</strong>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个实现 Parcelable 的对象</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>() : Parcelable &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> name=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> age=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(parcel: <span class=\"type\">Parcel</span>, flags: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        parcel.writeString(name)<span class=\"comment\">//写出name</span></span><br><span class=\"line\">        parcel.writeInt(age)<span class=\"comment\">//写出age</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>  CREATOR: Parcelable.Creator&lt;User&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createFromParcel</span><span class=\"params\">(parcel: <span class=\"type\">Parcel</span>)</span></span>: User &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> user = User()</span><br><span class=\"line\">               user.name=parcel.readString()?:<span class=\"string\">&quot;&quot;</span><span class=\"comment\">//读取name</span></span><br><span class=\"line\">                user.age=parcel.readInt()<span class=\"comment\">//读取age</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> user</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">newArray</span><span class=\"params\">(size: <span class=\"type\">Int</span>)</span></span>: Array&lt;User?&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> arrayOfNulls(size)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在第一个Activity中传递对象</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> user = User()</span><br><span class=\"line\">user.name=<span class=\"string\">&quot;John&quot;</span></span><br><span class=\"line\">user.age=<span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> intent = Intent(<span class=\"keyword\">this</span>, SecondActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">&quot;user_data&quot;</span>, user)</span><br><span class=\"line\">startActivity(intent)</span><br><span class=\"line\"><span class=\"comment\">// 在第二个Activity中接收对象</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> user = intent.getParcelableExtra(<span class=\"string\">&quot;user_data&quot;</span>) <span class=\"keyword\">as</span> User</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：这里的读取顺序和写出的顺序一定要完全相同</p>\n<p>更简单的方法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Parcelable</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>(<span class=\"keyword\">var</span> name:String,<span class=\"keyword\">var</span> age:<span class=\"built_in\">Int</span>):Parcelable</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"定制自己的日志工具\"><a href=\"#定制自己的日志工具\" class=\"headerlink\" title=\"定制自己的日志工具\"></a>定制自己的日志工具</h1><ul>\n<li>开发阶段将level指定成VERBOSE，正式上线时将其指定成ERROR</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> LogUtil &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> VERBOSE = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> DEBUG = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> INFO = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> WARN = <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> ERROR = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> level = VERBOSE</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">v</span><span class=\"params\">(tag: <span class=\"type\">String</span>, msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level &lt;= VERBOSE) &#123;</span><br><span class=\"line\">            Log.v(tag, msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">d</span><span class=\"params\">(tag: <span class=\"type\">String</span>, msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level &lt;= DEBUG) &#123;</span><br><span class=\"line\">            Log.d(tag, msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">i</span><span class=\"params\">(tag: <span class=\"type\">String</span>, msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level &lt;= INFO) &#123;</span><br><span class=\"line\">            Log.i(tag, msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">w</span><span class=\"params\">(tag: <span class=\"type\">String</span>, msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level &lt;= WARN) &#123;</span><br><span class=\"line\">            Log.w(tag, msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">e</span><span class=\"params\">(tag: <span class=\"type\">String</span>, msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level &lt;= ERROR) &#123;</span><br><span class=\"line\">            Log.e(tag, msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LogUtil.d(<span class=\"string\">&quot;TAG&quot;</span>, <span class=\"string\">&quot;debug log&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"深色主题\"><a href=\"#深色主题\" class=\"headerlink\" title=\"深色主题\"></a>深色主题</h1><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">toggleTheme</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> currentMode = AppCompatDelegate.getDefaultNightMode()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentMode == AppCompatDelegate.MODE_NIGHT_YES) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前是深色主题，切换到浅色主题</span></span><br><span class=\"line\">        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前是浅色主题，切换到深色主题</span></span><br><span class=\"line\">        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 你可以在这里保存用户的选择，以便下次启动时保持一致</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sharedPreferences = getSharedPreferences(<span class=\"string\">&quot;settings&quot;</span>, MODE_PRIVATE)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> editor = sharedPreferences.edit()</span><br><span class=\"line\">    editor.putBoolean(<span class=\"string\">&quot;dark_mode&quot;</span>, currentMode == AppCompatDelegate.MODE_NIGHT_YES)</span><br><span class=\"line\">    editor.apply()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"高级技巧(Java)","date":"2025-03-28T08:23:09.000Z","_content":"\n# 全局获取Context\n\n1.定制自己的Application类\n\n2.在Manifest.xml中进行初始化\n\n3.如果有LitePal则在Application中调用LitePal初始化方法就行\n\n```java\npublic class MyApplication extends Application {\n    private static Context context;\n\n    @SuppressLint(\"MissingSuperCall\")\n    @Override\n    public void onCreate() {\n        context = getApplicationContext();\n        LitePalApplication.initialize(context);\n    }\n    public static Context getContext(){\n        return context;\n    }\n}\n\n```\n\n```java\n <application\n        android:name=\"com.example.application.MyApplication\">\n </application>\n```\n\n------\n\n# Intent传递数据\n\n### Serializable(序列化)\n\n1.让一个类去实现Serializable接口\n\n2.Intent传值\n\n3.调用getSerializableExtra方法接收值\n\n```java\npublic class Person implements Serializable {\n    private String name;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n\n```\n\n```java\n Person person=new Person();\n        person.setName(\"zx\");\n        person.setAge(18);\n        Intent intent=new Intent(FirstActivity.this, SecondActivity.class);\n        intent.putExtra(\"person_data\",person);\n        startActivity(intent);\n```\n\n```java\nPerson person=(Person) getIntent().getSerializableExtra(\"person_data\");\n```\n\n### Parcelable\n\n1.让一个类去实现Parcelable接口\n\n2.重写writeToParcel方法写入数据\n\n3.创建一个常量CREATOR，创建Parcelable.Creator接口的一个实现\n\n4.重写createFromParcel方法对数据进行读取，读取顺序和写出顺序一致\n\n5.同上一个Intent用法基本一致\n\n```java\npublic class Person implements Parcelable {\n    private String name;\n    private int age;\n\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    @Override\n    public void writeToParcel(@NonNull Parcel parcel, int i) {\n parcel.writeString(name);//写出Name\n parcel.writeInt(age);//写出Age\n    }\n    public static final Parcelable.Creator<Person> CREATOR = new Parcelable.Creator<Person>() {\n        @Override\n        public Person createFromParcel(Parcel in) {\n            Person person=new Person();\n            person.name=in.readString();//读取name\n            person.age=in.readInt();//读取age\n            return person;\n        }\n\n        @Override\n        public Person[] newArray(int size) {\n            return new Person[size];\n        }\n    };\n}\n\n```\n\n```java\n Person person=new Person();\n        person.setName(\"zx\");\n        person.setAge(18);\n        Intent intent=new Intent(FirstActivity.this, SecondActivity.class);\n        intent.putExtra(\"person_data\",person);\n        startActivity(intent);\n```\n\n```java\nPerson person=(Person) getIntent().getParcelableExtra(\"person_data\");\n```\n\n------\n\n# 定制自己的日志工具\n\n1.新建一个日志类\n\n2.项目上线前将level定义为VERBOSE，上线后将其定义为NOTHING\n\n```java\npublic class LogUtil {\n    public static final int VERBOSE=1;\n    public static final int DEBUG=2;\n    public static final int INFO=3;\n    public static final int WARN=4;\n    public static final int ERROR=5;\n    public static final int NOTHING=6;\n    public static int level=VERBOSE;\n    public static void v(String tag,String msg){\nif(level<=VERBOSE){\n    Log.v(tag,msg);\n}\n    }\n    public static void d(String tag,String msg){\nif(level<=DEBUG){\n    Log.d(tag, msg);\n}\n    }\n    public static void i(String tag,String msg){\n        if(level<=INFO){\n            Log.i(tag, msg);\n        }\n    }\n    public static void w(String tag,String msg){\n        if(level<=WARN){\n            Log.w(tag, msg);\n        }\n    }\n    public static void e(String tag,String msg){\n        if(level<=ERROR){\n            Log.e(tag, msg);\n        }\n    }\n\n\n\n}\n\n```\n\n------\n\n# 调试Android程序\n\n逐行的执行代码，查找bug\n\n### DeBug按钮调试\n\n1.在需要调试的部分设置断点\n\n2.点击Debug调试按钮\n\n### Attach debugger to Android process按钮调试\n\n1.设置断点\n\n2.直接运行程序\n\n3.点击工具栏中的Attach debugger to Android process进入Debug窗口\n\n------\n\n# 创建定时任务\n\n### Alarm机制\n\n1.建立一个新的服务\n\n2.在onStartCommand中开启一个新的线程\n\n3.利用AlarmManager进行设定(用setExact替代set，基本可以保证任务可以准时进行)\n\n4.启动定时服务\n\n```java\n@Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        //开启一个子线程\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                //在这里执行具体的逻辑操作\n            }\n        }).start();\n        //获取实例\n        AlarmManager manager=(AlarmManager) getSystemService(ALARM_SERVICE);\n        int anHour=60*60*1000;\n        long triggerAtTime= SystemClock.elapsedRealtime()+anHour;\n        //指定定时任务的服务为LongRunningService\n        Intent intent1=new Intent(this, LongRunningService.class);\n        @SuppressLint(\"UnspecifiedImmutableFlag\") PendingIntent pi=PendingIntent.getService(this,0,intent1,0);\n        //调用set方法完成设定\n        manager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,triggerAtTime,pi);\n\n        return super.onStartCommand(intent,flags,startId);\n    }\n```\n\n```java\n//启动定时服务\nIntent intent=new Intent(this, LongRunningService.class);\ncontext.startService(intent);\n```\n\n### Doze模式\n\n该模式下受限的功能：\n\n1.网络访问被禁止\n\n2.系统忽略唤醒CPU或者屏幕操作\n\n3.系统不再执行WIFI扫描\n\n4.系统不再执行同步服务\n\n5.Alarm服务将会在下次退出Doze模式时执行(该情况下定时任务会有误差，可以用setAndAllowWhileIdle()或setExactAndAllowWhileIdle()方法解决，这俩方法的区别和set(),setExact()之间的区别一样)\n\n------\n\n# 多窗口模式编程\n\n一：改变进入多窗口模式活动会被重建这一默认设置：\n\n在Manifest.xml进行配置：\n\n```java\nandroid:configChanges=\"orientation|keyboardHidden|screenSize|screenLayout\"\n```\n\n二：禁用多窗口模式：\n1.在<application>或<activity>中加入如下属性：(targetSdkVersion>=24时有用)\n\n```java\nandroid:resizeableActivity=\"false\"//false为不支持，true为支持，默认为true\n```\n\n2.targetSdkVersion<24时，android规定活动不允许横竖屏切换时，则其也不支持多窗口模式\n\n只需在<activity>标签中加入以下配置：\n\n```java\nandroid:screenOrientation=\"portrait\"//portrait只支持竖屏，landscape只支持横屏\n```\n\n------\n\n# Lambda表达式\n\n**条件**：只有一个待实现方法的接口可以使用这样的写法\n\n**实例**：\n\n```java\nRunnable runnable=new Runnable(){\n    @Override\n    public void run(){\n        //添加具体的实现\n    }\n}\n//用Lambda改写\nRunnable runnable=()->{\n   //代码逻辑\n};\n```\n\n```java\n//创建接口\npublic interface MyListener{\n    String doSomething(String a,int b);\n}\n//Lambda写法\nMyListener listener=(a,b)->{\n    String result=a+b;\n    return result;\n}\n//参数类型可以省略，如果只有一个参数还可以把括号去掉\n```\n\n------\n\n","source":"_posts/高级技巧.md","raw":"---\ntitle: 高级技巧(Java)\ndate: 2025-03-28 16:23:09\ncategories:\n- Android(Java版)\ntags:\n---\n\n# 全局获取Context\n\n1.定制自己的Application类\n\n2.在Manifest.xml中进行初始化\n\n3.如果有LitePal则在Application中调用LitePal初始化方法就行\n\n```java\npublic class MyApplication extends Application {\n    private static Context context;\n\n    @SuppressLint(\"MissingSuperCall\")\n    @Override\n    public void onCreate() {\n        context = getApplicationContext();\n        LitePalApplication.initialize(context);\n    }\n    public static Context getContext(){\n        return context;\n    }\n}\n\n```\n\n```java\n <application\n        android:name=\"com.example.application.MyApplication\">\n </application>\n```\n\n------\n\n# Intent传递数据\n\n### Serializable(序列化)\n\n1.让一个类去实现Serializable接口\n\n2.Intent传值\n\n3.调用getSerializableExtra方法接收值\n\n```java\npublic class Person implements Serializable {\n    private String name;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n\n```\n\n```java\n Person person=new Person();\n        person.setName(\"zx\");\n        person.setAge(18);\n        Intent intent=new Intent(FirstActivity.this, SecondActivity.class);\n        intent.putExtra(\"person_data\",person);\n        startActivity(intent);\n```\n\n```java\nPerson person=(Person) getIntent().getSerializableExtra(\"person_data\");\n```\n\n### Parcelable\n\n1.让一个类去实现Parcelable接口\n\n2.重写writeToParcel方法写入数据\n\n3.创建一个常量CREATOR，创建Parcelable.Creator接口的一个实现\n\n4.重写createFromParcel方法对数据进行读取，读取顺序和写出顺序一致\n\n5.同上一个Intent用法基本一致\n\n```java\npublic class Person implements Parcelable {\n    private String name;\n    private int age;\n\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    @Override\n    public void writeToParcel(@NonNull Parcel parcel, int i) {\n parcel.writeString(name);//写出Name\n parcel.writeInt(age);//写出Age\n    }\n    public static final Parcelable.Creator<Person> CREATOR = new Parcelable.Creator<Person>() {\n        @Override\n        public Person createFromParcel(Parcel in) {\n            Person person=new Person();\n            person.name=in.readString();//读取name\n            person.age=in.readInt();//读取age\n            return person;\n        }\n\n        @Override\n        public Person[] newArray(int size) {\n            return new Person[size];\n        }\n    };\n}\n\n```\n\n```java\n Person person=new Person();\n        person.setName(\"zx\");\n        person.setAge(18);\n        Intent intent=new Intent(FirstActivity.this, SecondActivity.class);\n        intent.putExtra(\"person_data\",person);\n        startActivity(intent);\n```\n\n```java\nPerson person=(Person) getIntent().getParcelableExtra(\"person_data\");\n```\n\n------\n\n# 定制自己的日志工具\n\n1.新建一个日志类\n\n2.项目上线前将level定义为VERBOSE，上线后将其定义为NOTHING\n\n```java\npublic class LogUtil {\n    public static final int VERBOSE=1;\n    public static final int DEBUG=2;\n    public static final int INFO=3;\n    public static final int WARN=4;\n    public static final int ERROR=5;\n    public static final int NOTHING=6;\n    public static int level=VERBOSE;\n    public static void v(String tag,String msg){\nif(level<=VERBOSE){\n    Log.v(tag,msg);\n}\n    }\n    public static void d(String tag,String msg){\nif(level<=DEBUG){\n    Log.d(tag, msg);\n}\n    }\n    public static void i(String tag,String msg){\n        if(level<=INFO){\n            Log.i(tag, msg);\n        }\n    }\n    public static void w(String tag,String msg){\n        if(level<=WARN){\n            Log.w(tag, msg);\n        }\n    }\n    public static void e(String tag,String msg){\n        if(level<=ERROR){\n            Log.e(tag, msg);\n        }\n    }\n\n\n\n}\n\n```\n\n------\n\n# 调试Android程序\n\n逐行的执行代码，查找bug\n\n### DeBug按钮调试\n\n1.在需要调试的部分设置断点\n\n2.点击Debug调试按钮\n\n### Attach debugger to Android process按钮调试\n\n1.设置断点\n\n2.直接运行程序\n\n3.点击工具栏中的Attach debugger to Android process进入Debug窗口\n\n------\n\n# 创建定时任务\n\n### Alarm机制\n\n1.建立一个新的服务\n\n2.在onStartCommand中开启一个新的线程\n\n3.利用AlarmManager进行设定(用setExact替代set，基本可以保证任务可以准时进行)\n\n4.启动定时服务\n\n```java\n@Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        //开启一个子线程\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                //在这里执行具体的逻辑操作\n            }\n        }).start();\n        //获取实例\n        AlarmManager manager=(AlarmManager) getSystemService(ALARM_SERVICE);\n        int anHour=60*60*1000;\n        long triggerAtTime= SystemClock.elapsedRealtime()+anHour;\n        //指定定时任务的服务为LongRunningService\n        Intent intent1=new Intent(this, LongRunningService.class);\n        @SuppressLint(\"UnspecifiedImmutableFlag\") PendingIntent pi=PendingIntent.getService(this,0,intent1,0);\n        //调用set方法完成设定\n        manager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,triggerAtTime,pi);\n\n        return super.onStartCommand(intent,flags,startId);\n    }\n```\n\n```java\n//启动定时服务\nIntent intent=new Intent(this, LongRunningService.class);\ncontext.startService(intent);\n```\n\n### Doze模式\n\n该模式下受限的功能：\n\n1.网络访问被禁止\n\n2.系统忽略唤醒CPU或者屏幕操作\n\n3.系统不再执行WIFI扫描\n\n4.系统不再执行同步服务\n\n5.Alarm服务将会在下次退出Doze模式时执行(该情况下定时任务会有误差，可以用setAndAllowWhileIdle()或setExactAndAllowWhileIdle()方法解决，这俩方法的区别和set(),setExact()之间的区别一样)\n\n------\n\n# 多窗口模式编程\n\n一：改变进入多窗口模式活动会被重建这一默认设置：\n\n在Manifest.xml进行配置：\n\n```java\nandroid:configChanges=\"orientation|keyboardHidden|screenSize|screenLayout\"\n```\n\n二：禁用多窗口模式：\n1.在<application>或<activity>中加入如下属性：(targetSdkVersion>=24时有用)\n\n```java\nandroid:resizeableActivity=\"false\"//false为不支持，true为支持，默认为true\n```\n\n2.targetSdkVersion<24时，android规定活动不允许横竖屏切换时，则其也不支持多窗口模式\n\n只需在<activity>标签中加入以下配置：\n\n```java\nandroid:screenOrientation=\"portrait\"//portrait只支持竖屏，landscape只支持横屏\n```\n\n------\n\n# Lambda表达式\n\n**条件**：只有一个待实现方法的接口可以使用这样的写法\n\n**实例**：\n\n```java\nRunnable runnable=new Runnable(){\n    @Override\n    public void run(){\n        //添加具体的实现\n    }\n}\n//用Lambda改写\nRunnable runnable=()->{\n   //代码逻辑\n};\n```\n\n```java\n//创建接口\npublic interface MyListener{\n    String doSomething(String a,int b);\n}\n//Lambda写法\nMyListener listener=(a,b)->{\n    String result=a+b;\n    return result;\n}\n//参数类型可以省略，如果只有一个参数还可以把括号去掉\n```\n\n------\n\n","slug":"高级技巧","published":1,"updated":"2025-08-20T06:49:54.000Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gd3003ss4s7daqh0lkr","content":"<h1 id=\"全局获取Context\"><a href=\"#全局获取Context\" class=\"headerlink\" title=\"全局获取Context\"></a>全局获取Context</h1><p>1.定制自己的Application类</p>\n<p>2.在Manifest.xml中进行初始化</p>\n<p>3.如果有LitePal则在Application中调用LitePal初始化方法就行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Context context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(&quot;MissingSuperCall&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        context = getApplicationContext();</span><br><span class=\"line\">        LitePalApplication.initialize(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Context <span class=\"title function_\">getContext</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;application</span><br><span class=\"line\">       android:name=<span class=\"string\">&quot;com.example.application.MyApplication&quot;</span>&gt;</span><br><span class=\"line\">&lt;/application&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Intent传递数据\"><a href=\"#Intent传递数据\" class=\"headerlink\" title=\"Intent传递数据\"></a>Intent传递数据</h1><h3 id=\"Serializable-序列化\"><a href=\"#Serializable-序列化\" class=\"headerlink\" title=\"Serializable(序列化)\"></a>Serializable(序列化)</h3><p>1.让一个类去实现Serializable接口</p>\n<p>2.Intent传值</p>\n<p>3.调用getSerializableExtra方法接收值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">       person.setName(<span class=\"string\">&quot;zx&quot;</span>);</span><br><span class=\"line\">       person.setAge(<span class=\"number\">18</span>);</span><br><span class=\"line\">       Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(FirstActivity.<span class=\"built_in\">this</span>, SecondActivity.class);</span><br><span class=\"line\">       intent.putExtra(<span class=\"string\">&quot;person_data&quot;</span>,person);</span><br><span class=\"line\">       startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person=(Person) getIntent().getSerializableExtra(<span class=\"string\">&quot;person_data&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Parcelable\"><a href=\"#Parcelable\" class=\"headerlink\" title=\"Parcelable\"></a>Parcelable</h3><p>1.让一个类去实现Parcelable接口</p>\n<p>2.重写writeToParcel方法写入数据</p>\n<p>3.创建一个常量CREATOR，创建Parcelable.Creator接口的一个实现</p>\n<p>4.重写createFromParcel方法对数据进行读取，读取顺序和写出顺序一致</p>\n<p>5.同上一个Intent用法基本一致</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Parcelable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">describeContents</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeToParcel</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Parcel parcel, <span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\"> parcel.writeString(name);<span class=\"comment\">//写出Name</span></span><br><span class=\"line\"> parcel.writeInt(age);<span class=\"comment\">//写出Age</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;Person&gt; CREATOR = <span class=\"keyword\">new</span> <span class=\"title class_\">Parcelable</span>.Creator&lt;Person&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Person <span class=\"title function_\">createFromParcel</span><span class=\"params\">(Parcel in)</span> &#123;</span><br><span class=\"line\">            Person person=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">            person.name=in.readString();<span class=\"comment\">//读取name</span></span><br><span class=\"line\">            person.age=in.readInt();<span class=\"comment\">//读取age</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Person[] newArray(<span class=\"type\">int</span> size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>[size];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">       person.setName(<span class=\"string\">&quot;zx&quot;</span>);</span><br><span class=\"line\">       person.setAge(<span class=\"number\">18</span>);</span><br><span class=\"line\">       Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(FirstActivity.<span class=\"built_in\">this</span>, SecondActivity.class);</span><br><span class=\"line\">       intent.putExtra(<span class=\"string\">&quot;person_data&quot;</span>,person);</span><br><span class=\"line\">       startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person=(Person) getIntent().getParcelableExtra(<span class=\"string\">&quot;person_data&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"定制自己的日志工具\"><a href=\"#定制自己的日志工具\" class=\"headerlink\" title=\"定制自己的日志工具\"></a>定制自己的日志工具</h1><p>1.新建一个日志类</p>\n<p>2.项目上线前将level定义为VERBOSE，上线后将其定义为NOTHING</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogUtil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> VERBOSE=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> DEBUG=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> INFO=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> WARN=<span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> ERROR=<span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> NOTHING=<span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> level=VERBOSE;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">v</span><span class=\"params\">(String tag,String msg)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(level&lt;=VERBOSE)&#123;</span><br><span class=\"line\">    Log.v(tag,msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">d</span><span class=\"params\">(String tag,String msg)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(level&lt;=DEBUG)&#123;</span><br><span class=\"line\">    Log.d(tag, msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">i</span><span class=\"params\">(String tag,String msg)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(level&lt;=INFO)&#123;</span><br><span class=\"line\">            Log.i(tag, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">w</span><span class=\"params\">(String tag,String msg)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(level&lt;=WARN)&#123;</span><br><span class=\"line\">            Log.w(tag, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">e</span><span class=\"params\">(String tag,String msg)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(level&lt;=ERROR)&#123;</span><br><span class=\"line\">            Log.e(tag, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"调试Android程序\"><a href=\"#调试Android程序\" class=\"headerlink\" title=\"调试Android程序\"></a>调试Android程序</h1><p>逐行的执行代码，查找bug</p>\n<h3 id=\"DeBug按钮调试\"><a href=\"#DeBug按钮调试\" class=\"headerlink\" title=\"DeBug按钮调试\"></a>DeBug按钮调试</h3><p>1.在需要调试的部分设置断点</p>\n<p>2.点击Debug调试按钮</p>\n<h3 id=\"Attach-debugger-to-Android-process按钮调试\"><a href=\"#Attach-debugger-to-Android-process按钮调试\" class=\"headerlink\" title=\"Attach debugger to Android process按钮调试\"></a>Attach debugger to Android process按钮调试</h3><p>1.设置断点</p>\n<p>2.直接运行程序</p>\n<p>3.点击工具栏中的Attach debugger to Android process进入Debug窗口</p>\n<hr>\n<h1 id=\"创建定时任务\"><a href=\"#创建定时任务\" class=\"headerlink\" title=\"创建定时任务\"></a>创建定时任务</h1><h3 id=\"Alarm机制\"><a href=\"#Alarm机制\" class=\"headerlink\" title=\"Alarm机制\"></a>Alarm机制</h3><p>1.建立一个新的服务</p>\n<p>2.在onStartCommand中开启一个新的线程</p>\n<p>3.利用AlarmManager进行设定(用setExact替代set，基本可以保证任务可以准时进行)</p>\n<p>4.启动定时服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"type\">int</span> flags, <span class=\"type\">int</span> startId)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开启一个子线程</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//在这里执行具体的逻辑操作</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"comment\">//获取实例</span></span><br><span class=\"line\">        AlarmManager manager=(AlarmManager) getSystemService(ALARM_SERVICE);</span><br><span class=\"line\">        <span class=\"type\">int</span> anHour=<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> triggerAtTime= SystemClock.elapsedRealtime()+anHour;</span><br><span class=\"line\">        <span class=\"comment\">//指定定时任务的服务为LongRunningService</span></span><br><span class=\"line\">        Intent intent1=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>, LongRunningService.class);</span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;UnspecifiedImmutableFlag&quot;)</span> PendingIntent pi=PendingIntent.getService(<span class=\"built_in\">this</span>,<span class=\"number\">0</span>,intent1,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//调用set方法完成设定</span></span><br><span class=\"line\">        manager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,triggerAtTime,pi);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.onStartCommand(intent,flags,startId);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//启动定时服务</span></span><br><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>, LongRunningService.class);</span><br><span class=\"line\">context.startService(intent);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Doze模式\"><a href=\"#Doze模式\" class=\"headerlink\" title=\"Doze模式\"></a>Doze模式</h3><p>该模式下受限的功能：</p>\n<p>1.网络访问被禁止</p>\n<p>2.系统忽略唤醒CPU或者屏幕操作</p>\n<p>3.系统不再执行WIFI扫描</p>\n<p>4.系统不再执行同步服务</p>\n<p>5.Alarm服务将会在下次退出Doze模式时执行(该情况下定时任务会有误差，可以用setAndAllowWhileIdle()或setExactAndAllowWhileIdle()方法解决，这俩方法的区别和set(),setExact()之间的区别一样)</p>\n<hr>\n<h1 id=\"多窗口模式编程\"><a href=\"#多窗口模式编程\" class=\"headerlink\" title=\"多窗口模式编程\"></a>多窗口模式编程</h1><p>一：改变进入多窗口模式活动会被重建这一默认设置：</p>\n<p>在Manifest.xml进行配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:configChanges=<span class=\"string\">&quot;orientation|keyboardHidden|screenSize|screenLayout&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>二：禁用多窗口模式：<br>1.在<application>或<activity>中加入如下属性：(targetSdkVersion&gt;&#x3D;24时有用)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:resizeableActivity=<span class=\"string\">&quot;false&quot;</span><span class=\"comment\">//false为不支持，true为支持，默认为true</span></span><br></pre></td></tr></table></figure>\n\n<p>2.targetSdkVersion&lt;24时，android规定活动不允许横竖屏切换时，则其也不支持多窗口模式</p>\n<p>只需在<activity>标签中加入以下配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:screenOrientation=<span class=\"string\">&quot;portrait&quot;</span><span class=\"comment\">//portrait只支持竖屏，landscape只支持横屏</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h1><p><strong>条件</strong>：只有一个待实现方法的接口可以使用这样的写法</p>\n<p><strong>实例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runnable runnable=<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//添加具体的实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//用Lambda改写</span></span><br><span class=\"line\">Runnable runnable=()-&gt;&#123;</span><br><span class=\"line\">   <span class=\"comment\">//代码逻辑</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyListener</span>&#123;</span><br><span class=\"line\">    String <span class=\"title function_\">doSomething</span><span class=\"params\">(String a,<span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Lambda写法</span></span><br><span class=\"line\">MyListener listener=(a,b)-&gt;&#123;</span><br><span class=\"line\">    String result=a+b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//参数类型可以省略，如果只有一个参数还可以把括号去掉</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n","excerpt":"全局获取Context\n1.定制自己的Application类\n\n2.在Manifest.xml中进行初始化\n\n3.如果有LitePal则在Application中调用LitePal初始化方法就行\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\npublic class MyApplication extends Application {\n    private static Context context;\n\n    @SuppressLint(\"MissingSuperCall\")\n    @Override\n    public void onCreate() ","more":"<h1 id=\"全局获取Context\"><a href=\"#全局获取Context\" class=\"headerlink\" title=\"全局获取Context\"></a>全局获取Context</h1><p>1.定制自己的Application类</p>\n<p>2.在Manifest.xml中进行初始化</p>\n<p>3.如果有LitePal则在Application中调用LitePal初始化方法就行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Context context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(&quot;MissingSuperCall&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        context = getApplicationContext();</span><br><span class=\"line\">        LitePalApplication.initialize(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Context <span class=\"title function_\">getContext</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;application</span><br><span class=\"line\">       android:name=<span class=\"string\">&quot;com.example.application.MyApplication&quot;</span>&gt;</span><br><span class=\"line\">&lt;/application&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Intent传递数据\"><a href=\"#Intent传递数据\" class=\"headerlink\" title=\"Intent传递数据\"></a>Intent传递数据</h1><h3 id=\"Serializable-序列化\"><a href=\"#Serializable-序列化\" class=\"headerlink\" title=\"Serializable(序列化)\"></a>Serializable(序列化)</h3><p>1.让一个类去实现Serializable接口</p>\n<p>2.Intent传值</p>\n<p>3.调用getSerializableExtra方法接收值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">       person.setName(<span class=\"string\">&quot;zx&quot;</span>);</span><br><span class=\"line\">       person.setAge(<span class=\"number\">18</span>);</span><br><span class=\"line\">       Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(FirstActivity.<span class=\"built_in\">this</span>, SecondActivity.class);</span><br><span class=\"line\">       intent.putExtra(<span class=\"string\">&quot;person_data&quot;</span>,person);</span><br><span class=\"line\">       startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person=(Person) getIntent().getSerializableExtra(<span class=\"string\">&quot;person_data&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Parcelable\"><a href=\"#Parcelable\" class=\"headerlink\" title=\"Parcelable\"></a>Parcelable</h3><p>1.让一个类去实现Parcelable接口</p>\n<p>2.重写writeToParcel方法写入数据</p>\n<p>3.创建一个常量CREATOR，创建Parcelable.Creator接口的一个实现</p>\n<p>4.重写createFromParcel方法对数据进行读取，读取顺序和写出顺序一致</p>\n<p>5.同上一个Intent用法基本一致</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Parcelable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">describeContents</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeToParcel</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Parcel parcel, <span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\"> parcel.writeString(name);<span class=\"comment\">//写出Name</span></span><br><span class=\"line\"> parcel.writeInt(age);<span class=\"comment\">//写出Age</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;Person&gt; CREATOR = <span class=\"keyword\">new</span> <span class=\"title class_\">Parcelable</span>.Creator&lt;Person&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Person <span class=\"title function_\">createFromParcel</span><span class=\"params\">(Parcel in)</span> &#123;</span><br><span class=\"line\">            Person person=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">            person.name=in.readString();<span class=\"comment\">//读取name</span></span><br><span class=\"line\">            person.age=in.readInt();<span class=\"comment\">//读取age</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Person[] newArray(<span class=\"type\">int</span> size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>[size];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">       person.setName(<span class=\"string\">&quot;zx&quot;</span>);</span><br><span class=\"line\">       person.setAge(<span class=\"number\">18</span>);</span><br><span class=\"line\">       Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(FirstActivity.<span class=\"built_in\">this</span>, SecondActivity.class);</span><br><span class=\"line\">       intent.putExtra(<span class=\"string\">&quot;person_data&quot;</span>,person);</span><br><span class=\"line\">       startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person=(Person) getIntent().getParcelableExtra(<span class=\"string\">&quot;person_data&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"定制自己的日志工具\"><a href=\"#定制自己的日志工具\" class=\"headerlink\" title=\"定制自己的日志工具\"></a>定制自己的日志工具</h1><p>1.新建一个日志类</p>\n<p>2.项目上线前将level定义为VERBOSE，上线后将其定义为NOTHING</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogUtil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> VERBOSE=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> DEBUG=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> INFO=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> WARN=<span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> ERROR=<span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> NOTHING=<span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> level=VERBOSE;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">v</span><span class=\"params\">(String tag,String msg)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(level&lt;=VERBOSE)&#123;</span><br><span class=\"line\">    Log.v(tag,msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">d</span><span class=\"params\">(String tag,String msg)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(level&lt;=DEBUG)&#123;</span><br><span class=\"line\">    Log.d(tag, msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">i</span><span class=\"params\">(String tag,String msg)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(level&lt;=INFO)&#123;</span><br><span class=\"line\">            Log.i(tag, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">w</span><span class=\"params\">(String tag,String msg)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(level&lt;=WARN)&#123;</span><br><span class=\"line\">            Log.w(tag, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">e</span><span class=\"params\">(String tag,String msg)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(level&lt;=ERROR)&#123;</span><br><span class=\"line\">            Log.e(tag, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"调试Android程序\"><a href=\"#调试Android程序\" class=\"headerlink\" title=\"调试Android程序\"></a>调试Android程序</h1><p>逐行的执行代码，查找bug</p>\n<h3 id=\"DeBug按钮调试\"><a href=\"#DeBug按钮调试\" class=\"headerlink\" title=\"DeBug按钮调试\"></a>DeBug按钮调试</h3><p>1.在需要调试的部分设置断点</p>\n<p>2.点击Debug调试按钮</p>\n<h3 id=\"Attach-debugger-to-Android-process按钮调试\"><a href=\"#Attach-debugger-to-Android-process按钮调试\" class=\"headerlink\" title=\"Attach debugger to Android process按钮调试\"></a>Attach debugger to Android process按钮调试</h3><p>1.设置断点</p>\n<p>2.直接运行程序</p>\n<p>3.点击工具栏中的Attach debugger to Android process进入Debug窗口</p>\n<hr>\n<h1 id=\"创建定时任务\"><a href=\"#创建定时任务\" class=\"headerlink\" title=\"创建定时任务\"></a>创建定时任务</h1><h3 id=\"Alarm机制\"><a href=\"#Alarm机制\" class=\"headerlink\" title=\"Alarm机制\"></a>Alarm机制</h3><p>1.建立一个新的服务</p>\n<p>2.在onStartCommand中开启一个新的线程</p>\n<p>3.利用AlarmManager进行设定(用setExact替代set，基本可以保证任务可以准时进行)</p>\n<p>4.启动定时服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"type\">int</span> flags, <span class=\"type\">int</span> startId)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开启一个子线程</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//在这里执行具体的逻辑操作</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"comment\">//获取实例</span></span><br><span class=\"line\">        AlarmManager manager=(AlarmManager) getSystemService(ALARM_SERVICE);</span><br><span class=\"line\">        <span class=\"type\">int</span> anHour=<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> triggerAtTime= SystemClock.elapsedRealtime()+anHour;</span><br><span class=\"line\">        <span class=\"comment\">//指定定时任务的服务为LongRunningService</span></span><br><span class=\"line\">        Intent intent1=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>, LongRunningService.class);</span><br><span class=\"line\">        <span class=\"meta\">@SuppressLint(&quot;UnspecifiedImmutableFlag&quot;)</span> PendingIntent pi=PendingIntent.getService(<span class=\"built_in\">this</span>,<span class=\"number\">0</span>,intent1,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//调用set方法完成设定</span></span><br><span class=\"line\">        manager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,triggerAtTime,pi);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.onStartCommand(intent,flags,startId);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//启动定时服务</span></span><br><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>, LongRunningService.class);</span><br><span class=\"line\">context.startService(intent);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Doze模式\"><a href=\"#Doze模式\" class=\"headerlink\" title=\"Doze模式\"></a>Doze模式</h3><p>该模式下受限的功能：</p>\n<p>1.网络访问被禁止</p>\n<p>2.系统忽略唤醒CPU或者屏幕操作</p>\n<p>3.系统不再执行WIFI扫描</p>\n<p>4.系统不再执行同步服务</p>\n<p>5.Alarm服务将会在下次退出Doze模式时执行(该情况下定时任务会有误差，可以用setAndAllowWhileIdle()或setExactAndAllowWhileIdle()方法解决，这俩方法的区别和set(),setExact()之间的区别一样)</p>\n<hr>\n<h1 id=\"多窗口模式编程\"><a href=\"#多窗口模式编程\" class=\"headerlink\" title=\"多窗口模式编程\"></a>多窗口模式编程</h1><p>一：改变进入多窗口模式活动会被重建这一默认设置：</p>\n<p>在Manifest.xml进行配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:configChanges=<span class=\"string\">&quot;orientation|keyboardHidden|screenSize|screenLayout&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>二：禁用多窗口模式：<br>1.在<application>或<activity>中加入如下属性：(targetSdkVersion&gt;&#x3D;24时有用)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:resizeableActivity=<span class=\"string\">&quot;false&quot;</span><span class=\"comment\">//false为不支持，true为支持，默认为true</span></span><br></pre></td></tr></table></figure>\n\n<p>2.targetSdkVersion&lt;24时，android规定活动不允许横竖屏切换时，则其也不支持多窗口模式</p>\n<p>只需在<activity>标签中加入以下配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:screenOrientation=<span class=\"string\">&quot;portrait&quot;</span><span class=\"comment\">//portrait只支持竖屏，landscape只支持横屏</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h1><p><strong>条件</strong>：只有一个待实现方法的接口可以使用这样的写法</p>\n<p><strong>实例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runnable runnable=<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//添加具体的实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//用Lambda改写</span></span><br><span class=\"line\">Runnable runnable=()-&gt;&#123;</span><br><span class=\"line\">   <span class=\"comment\">//代码逻辑</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyListener</span>&#123;</span><br><span class=\"line\">    String <span class=\"title function_\">doSomething</span><span class=\"params\">(String a,<span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Lambda写法</span></span><br><span class=\"line\">MyListener listener=(a,b)-&gt;&#123;</span><br><span class=\"line\">    String result=a+b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//参数类型可以省略，如果只有一个参数还可以把括号去掉</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"登陆注册数据备份(手动备份)","date":"2025-09-14T06:40:47.000Z","_content":"\n\n\n**本博客以firebase服务器为例**\n\n### 结构图\n\n```scss\nusers (Collection)\n   └── uid1 (Document)\n        └── messages (Collection)\n            ├── message1 (Document)\n            ├── message2 (Document)\n   └── uid2 (Document)\n        └── messages (Collection)\n            ├── message1 (Document)\n```\n\n\n\n### 注册\n\n- 获取auth和firestore对象\n- 向云端上传用户信息\n- 利用firestore建立个人档案\n\n```kotlin\n            auth.createUserWithEmailAndPassword(email,password)\n                .addOnCompleteListener(this){task ->\n                    if (task.isSuccessful){\n                        Toast.makeText(this, \"账户创建成功\", Toast.LENGTH_SHORT).show()\n                        val user= auth.currentUser\n                        val uid=user?.uid\n                        val userProfile=hashMapOf(\n                            \"uid\" to uid,\n                            \"email\" to email,\n                            \"registTime\" to System.currentTimeMillis()\n                        )\n                        //建立个人档案，将数据写入数据库中\n                        db.collection(\"users\").document(uid!!)\n                            .set(userProfile)\n                            .addOnSuccessListener {\n                                finish()\n                            }\n                            .addOnSuccessListener {\n                                Toast.makeText(this,\"用户信息储存失败请稍后重试\",Toast.LENGTH_SHORT).show()\n                            }\n                    }else{\n                        Toast.makeText(this,\"账户创建失败\",Toast.LENGTH_SHORT).show()\n                    }\n\n                }\n```\n\n### 登录\n\n```kotlin\n private fun login(){\n        val email=binding.email.text.toString()\n        val password=binding.password.text.toString()\n        if(email.isEmpty()||password.isEmpty()){\n            Toast.makeText(this,\"邮箱或密码不能为空\",Toast.LENGTH_SHORT).show()\n            return\n        }\n        auth.signInWithEmailAndPassword(email, password)\n            .addOnCompleteListener { task ->\n                if (task.isSuccessful) {\n                    //这一步是为了实现用户数据隔离\n                    lifecycleScope.launch {\n                        // 先清空数据库\n                        dao.clearAllMessages()\n                        dao.clearAllCategories()\n                        // 再切回主线程做 UI 操作\n                            restoreFromFirestore(dao)\n                            Toast.makeText(this@LoginActivity, \"用户登陆成功\", Toast.LENGTH_SHORT).show()\n                            val i = Intent(this@LoginActivity, MainActivity::class.java)\n                            startActivity(i)\n                            finish()\n\n                    }\n                } else {\n                    Toast.makeText(\n                        this@LoginActivity,\n                        \"登录失败: ${task.exception?.message}\",\n                        Toast.LENGTH_LONG\n                    ).show()\n                    binding.email.setText(\"\")\n                    binding.password.setText(\"\")\n                }\n            }\n```\n\n### 数据备份\n\n- 实现备份\n- 实现恢复\n- 在UI层调用\n\n```kotlin\nsuspend fun backupToFirestore(dao: MessageDao) {\n    //获取当前已登录的用户\n        val user = FirebaseAuth.getInstance().currentUser ?: return\n    //获取用户uid值作为唯一标识\n        val uid = user.uid\n    //获取数据库实例\n        val db = FirebaseFirestore.getInstance()\n//加载所有信息\n\n        val messages = dao.loadAllMessage()\n//在uid文件下创建messages集合作为uid下子集和\n        val userMessagesRef = db.collection(\"users\").document(uid).collection(\"messages\")\n   //创建一个批量处理操作的对象\n        val batch = db.batch()\n    //便利本地数据库所有数据\n        for (msg in messages) {\n            //以信息的id作为文档id用来获取索引或创建\n            val docRef = userMessagesRef.document(msg.id)\n            //将数据转化成键值对形式\n             val msgMap = mapOf(\n                 \"title\" to msg.title,\n                  \"time\" to msg.time,\n               \"aimdate\" to msg.aimdate,\n             \"isTop\" to msg.isTop,\n             \"categoryIcon\" to msg.categoryIcon,\n            \"categoryName\" to msg.categoryName,\n             \"categoryId\" to msg.categoryId\n            )\n            //将数据添加到docRef文档下面\n            batch.set(docRef, msgMap)\n        }\n       \n        try {\n //batch.commit()：提交所有批量写入操作，返回一个 Task。\n//await()：挂起当前协程，等待 Task 完成，直到异步操作结束。\n//这样，你就可以确保 所有操作都提交成功，并能在操作完成后继续执行下一步逻辑。\n            batch.commit().await()\n            Log.d(\"Backup\", \"备份成功\")\n        } catch (e: Exception) {\n            Log.e(\"Backup\", \"备份失败: ${e.message}\", e)\n        }\n\n    }\n```\n\n```kotlin\nsuspend fun restoreFromFirestore(dao: MessageDao) {\n        val user = FirebaseAuth.getInstance().currentUser ?: return\n        val uid = user.uid\n        val db = FirebaseFirestore.getInstance()\n//获取集合中的所有文档，get()方法是异步的所以需要awit()方法\n        val snapshot1 = db.collection(\"users\").document(uid).collection(\"messages\").get().await()\n     \n        // 清空本地再导入（防止重复）\n        dao.clearAllMessages()\n\n//遍历所有文档，并把数据添加到本地数据库\n        for (doc in snapshot1.documents) {\n            val id = doc.id\n            val title: String? = doc.getString(\"title\")?:\"\"\n            val time: Int= doc.getLong(\"time\")?.toInt() ?: 0\n            val aimdate: String?=doc.getString(\"aimdate\")\n            val isTop =doc.getBoolean(\"isTop\")?:false\n            val categoryIcon:Int?= doc.getLong(\"categoryIcon\")?.toInt()\n            val categoryName: String?=doc.getString(\"categoryName\")\n            val categoryId: String= doc.getString(\"categoryId\").toString()\n            val msg = Message(title,time,aimdate,isTop,id,categoryIcon,categoryName,categoryId)\n            dao.insertMessage(msg)\n        }\n     //加载数据\n        dao.loadAllMessage()\n\n    }\n```\n\n","source":"_posts/登陆注册数据备份-手动备份.md","raw":"---\ntitle: 登陆注册数据备份(手动备份)\ndate: 2025-09-14 14:40:47\ncategories:\n- Android随笔\ntags:\n---\n\n\n\n**本博客以firebase服务器为例**\n\n### 结构图\n\n```scss\nusers (Collection)\n   └── uid1 (Document)\n        └── messages (Collection)\n            ├── message1 (Document)\n            ├── message2 (Document)\n   └── uid2 (Document)\n        └── messages (Collection)\n            ├── message1 (Document)\n```\n\n\n\n### 注册\n\n- 获取auth和firestore对象\n- 向云端上传用户信息\n- 利用firestore建立个人档案\n\n```kotlin\n            auth.createUserWithEmailAndPassword(email,password)\n                .addOnCompleteListener(this){task ->\n                    if (task.isSuccessful){\n                        Toast.makeText(this, \"账户创建成功\", Toast.LENGTH_SHORT).show()\n                        val user= auth.currentUser\n                        val uid=user?.uid\n                        val userProfile=hashMapOf(\n                            \"uid\" to uid,\n                            \"email\" to email,\n                            \"registTime\" to System.currentTimeMillis()\n                        )\n                        //建立个人档案，将数据写入数据库中\n                        db.collection(\"users\").document(uid!!)\n                            .set(userProfile)\n                            .addOnSuccessListener {\n                                finish()\n                            }\n                            .addOnSuccessListener {\n                                Toast.makeText(this,\"用户信息储存失败请稍后重试\",Toast.LENGTH_SHORT).show()\n                            }\n                    }else{\n                        Toast.makeText(this,\"账户创建失败\",Toast.LENGTH_SHORT).show()\n                    }\n\n                }\n```\n\n### 登录\n\n```kotlin\n private fun login(){\n        val email=binding.email.text.toString()\n        val password=binding.password.text.toString()\n        if(email.isEmpty()||password.isEmpty()){\n            Toast.makeText(this,\"邮箱或密码不能为空\",Toast.LENGTH_SHORT).show()\n            return\n        }\n        auth.signInWithEmailAndPassword(email, password)\n            .addOnCompleteListener { task ->\n                if (task.isSuccessful) {\n                    //这一步是为了实现用户数据隔离\n                    lifecycleScope.launch {\n                        // 先清空数据库\n                        dao.clearAllMessages()\n                        dao.clearAllCategories()\n                        // 再切回主线程做 UI 操作\n                            restoreFromFirestore(dao)\n                            Toast.makeText(this@LoginActivity, \"用户登陆成功\", Toast.LENGTH_SHORT).show()\n                            val i = Intent(this@LoginActivity, MainActivity::class.java)\n                            startActivity(i)\n                            finish()\n\n                    }\n                } else {\n                    Toast.makeText(\n                        this@LoginActivity,\n                        \"登录失败: ${task.exception?.message}\",\n                        Toast.LENGTH_LONG\n                    ).show()\n                    binding.email.setText(\"\")\n                    binding.password.setText(\"\")\n                }\n            }\n```\n\n### 数据备份\n\n- 实现备份\n- 实现恢复\n- 在UI层调用\n\n```kotlin\nsuspend fun backupToFirestore(dao: MessageDao) {\n    //获取当前已登录的用户\n        val user = FirebaseAuth.getInstance().currentUser ?: return\n    //获取用户uid值作为唯一标识\n        val uid = user.uid\n    //获取数据库实例\n        val db = FirebaseFirestore.getInstance()\n//加载所有信息\n\n        val messages = dao.loadAllMessage()\n//在uid文件下创建messages集合作为uid下子集和\n        val userMessagesRef = db.collection(\"users\").document(uid).collection(\"messages\")\n   //创建一个批量处理操作的对象\n        val batch = db.batch()\n    //便利本地数据库所有数据\n        for (msg in messages) {\n            //以信息的id作为文档id用来获取索引或创建\n            val docRef = userMessagesRef.document(msg.id)\n            //将数据转化成键值对形式\n             val msgMap = mapOf(\n                 \"title\" to msg.title,\n                  \"time\" to msg.time,\n               \"aimdate\" to msg.aimdate,\n             \"isTop\" to msg.isTop,\n             \"categoryIcon\" to msg.categoryIcon,\n            \"categoryName\" to msg.categoryName,\n             \"categoryId\" to msg.categoryId\n            )\n            //将数据添加到docRef文档下面\n            batch.set(docRef, msgMap)\n        }\n       \n        try {\n //batch.commit()：提交所有批量写入操作，返回一个 Task。\n//await()：挂起当前协程，等待 Task 完成，直到异步操作结束。\n//这样，你就可以确保 所有操作都提交成功，并能在操作完成后继续执行下一步逻辑。\n            batch.commit().await()\n            Log.d(\"Backup\", \"备份成功\")\n        } catch (e: Exception) {\n            Log.e(\"Backup\", \"备份失败: ${e.message}\", e)\n        }\n\n    }\n```\n\n```kotlin\nsuspend fun restoreFromFirestore(dao: MessageDao) {\n        val user = FirebaseAuth.getInstance().currentUser ?: return\n        val uid = user.uid\n        val db = FirebaseFirestore.getInstance()\n//获取集合中的所有文档，get()方法是异步的所以需要awit()方法\n        val snapshot1 = db.collection(\"users\").document(uid).collection(\"messages\").get().await()\n     \n        // 清空本地再导入（防止重复）\n        dao.clearAllMessages()\n\n//遍历所有文档，并把数据添加到本地数据库\n        for (doc in snapshot1.documents) {\n            val id = doc.id\n            val title: String? = doc.getString(\"title\")?:\"\"\n            val time: Int= doc.getLong(\"time\")?.toInt() ?: 0\n            val aimdate: String?=doc.getString(\"aimdate\")\n            val isTop =doc.getBoolean(\"isTop\")?:false\n            val categoryIcon:Int?= doc.getLong(\"categoryIcon\")?.toInt()\n            val categoryName: String?=doc.getString(\"categoryName\")\n            val categoryId: String= doc.getString(\"categoryId\").toString()\n            val msg = Message(title,time,aimdate,isTop,id,categoryIcon,categoryName,categoryId)\n            dao.insertMessage(msg)\n        }\n     //加载数据\n        dao.loadAllMessage()\n\n    }\n```\n\n","slug":"登陆注册数据备份-手动备份","published":1,"updated":"2025-09-14T12:09:53.001Z","comments":1,"layout":"post","photos":[],"_id":"cmfru5gd4003us4s798vqfe8l","content":"<p><strong>本博客以firebase服务器为例</strong></p>\n<h3 id=\"结构图\"><a href=\"#结构图\" class=\"headerlink\" title=\"结构图\"></a>结构图</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">users (Collection)</span><br><span class=\"line\">   └── uid1 (Document)</span><br><span class=\"line\">        └── messages (Collection)</span><br><span class=\"line\">            ├── message1 (Document)</span><br><span class=\"line\">            ├── message2 (Document)</span><br><span class=\"line\">   └── uid2 (Document)</span><br><span class=\"line\">        └── messages (Collection)</span><br><span class=\"line\">            ├── message1 (Document)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><ul>\n<li>获取auth和firestore对象</li>\n<li>向云端上传用户信息</li>\n<li>利用firestore建立个人档案</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth.createUserWithEmailAndPassword(email,password)</span><br><span class=\"line\">    .addOnCompleteListener(<span class=\"keyword\">this</span>)&#123;task -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (task.isSuccessful)&#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;账户创建成功&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">            <span class=\"keyword\">val</span> user= auth.currentUser</span><br><span class=\"line\">            <span class=\"keyword\">val</span> uid=user?.uid</span><br><span class=\"line\">            <span class=\"keyword\">val</span> userProfile=hashMapOf(</span><br><span class=\"line\">                <span class=\"string\">&quot;uid&quot;</span> to uid,</span><br><span class=\"line\">                <span class=\"string\">&quot;email&quot;</span> to email,</span><br><span class=\"line\">                <span class=\"string\">&quot;registTime&quot;</span> to System.currentTimeMillis()</span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"comment\">//建立个人档案，将数据写入数据库中</span></span><br><span class=\"line\">            db.collection(<span class=\"string\">&quot;users&quot;</span>).document(uid!!)</span><br><span class=\"line\">                .<span class=\"keyword\">set</span>(userProfile)</span><br><span class=\"line\">                .addOnSuccessListener &#123;</span><br><span class=\"line\">                    finish()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                .addOnSuccessListener &#123;</span><br><span class=\"line\">                    Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;用户信息储存失败请稍后重试&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;账户创建失败&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">login</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">val</span> email=binding.email.text.toString()</span><br><span class=\"line\">       <span class=\"keyword\">val</span> password=binding.password.text.toString()</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(email.isEmpty()||password.isEmpty())&#123;</span><br><span class=\"line\">           Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;邮箱或密码不能为空&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">           <span class=\"keyword\">return</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       auth.signInWithEmailAndPassword(email, password)</span><br><span class=\"line\">           .addOnCompleteListener &#123; task -&gt;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (task.isSuccessful) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//这一步是为了实现用户数据隔离</span></span><br><span class=\"line\">                   lifecycleScope.launch &#123;</span><br><span class=\"line\">                       <span class=\"comment\">// 先清空数据库</span></span><br><span class=\"line\">                       dao.clearAllMessages()</span><br><span class=\"line\">                       dao.clearAllCategories()</span><br><span class=\"line\">                       <span class=\"comment\">// 再切回主线程做 UI 操作</span></span><br><span class=\"line\">                           restoreFromFirestore(dao)</span><br><span class=\"line\">                           Toast.makeText(<span class=\"keyword\">this</span><span class=\"symbol\">@LoginActivity</span>, <span class=\"string\">&quot;用户登陆成功&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">                           <span class=\"keyword\">val</span> i = Intent(<span class=\"keyword\">this</span><span class=\"symbol\">@LoginActivity</span>, MainActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">                           startActivity(i)</span><br><span class=\"line\">                           finish()</span><br><span class=\"line\"></span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                   Toast.makeText(</span><br><span class=\"line\">                       <span class=\"keyword\">this</span><span class=\"symbol\">@LoginActivity</span>,</span><br><span class=\"line\">                       <span class=\"string\">&quot;登录失败: <span class=\"subst\">$&#123;task.exception?.message&#125;</span>&quot;</span>,</span><br><span class=\"line\">                       Toast.LENGTH_LONG</span><br><span class=\"line\">                   ).show()</span><br><span class=\"line\">                   binding.email.setText(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                   binding.password.setText(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据备份\"><a href=\"#数据备份\" class=\"headerlink\" title=\"数据备份\"></a>数据备份</h3><ul>\n<li>实现备份</li>\n<li>实现恢复</li>\n<li>在UI层调用</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">backupToFirestore</span><span class=\"params\">(dao: <span class=\"type\">MessageDao</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前已登录的用户</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> user = FirebaseAuth.getInstance().currentUser ?: <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\">//获取用户uid值作为唯一标识</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> uid = user.uid</span><br><span class=\"line\">    <span class=\"comment\">//获取数据库实例</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> db = FirebaseFirestore.getInstance()</span><br><span class=\"line\"><span class=\"comment\">//加载所有信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> messages = dao.loadAllMessage()</span><br><span class=\"line\"><span class=\"comment\">//在uid文件下创建messages集合作为uid下子集和</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> userMessagesRef = db.collection(<span class=\"string\">&quot;users&quot;</span>).document(uid).collection(<span class=\"string\">&quot;messages&quot;</span>)</span><br><span class=\"line\">   <span class=\"comment\">//创建一个批量处理操作的对象</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> batch = db.batch()</span><br><span class=\"line\">    <span class=\"comment\">//便利本地数据库所有数据</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (msg <span class=\"keyword\">in</span> messages) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//以信息的id作为文档id用来获取索引或创建</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> docRef = userMessagesRef.document(msg.id)</span><br><span class=\"line\">            <span class=\"comment\">//将数据转化成键值对形式</span></span><br><span class=\"line\">             <span class=\"keyword\">val</span> msgMap = mapOf(</span><br><span class=\"line\">                 <span class=\"string\">&quot;title&quot;</span> to msg.title,</span><br><span class=\"line\">                  <span class=\"string\">&quot;time&quot;</span> to msg.time,</span><br><span class=\"line\">               <span class=\"string\">&quot;aimdate&quot;</span> to msg.aimdate,</span><br><span class=\"line\">             <span class=\"string\">&quot;isTop&quot;</span> to msg.isTop,</span><br><span class=\"line\">             <span class=\"string\">&quot;categoryIcon&quot;</span> to msg.categoryIcon,</span><br><span class=\"line\">            <span class=\"string\">&quot;categoryName&quot;</span> to msg.categoryName,</span><br><span class=\"line\">             <span class=\"string\">&quot;categoryId&quot;</span> to msg.categoryId</span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"comment\">//将数据添加到docRef文档下面</span></span><br><span class=\"line\">            batch.<span class=\"keyword\">set</span>(docRef, msgMap)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">//batch.commit()：提交所有批量写入操作，返回一个 Task。</span></span><br><span class=\"line\"><span class=\"comment\">//await()：挂起当前协程，等待 Task 完成，直到异步操作结束。</span></span><br><span class=\"line\"><span class=\"comment\">//这样，你就可以确保 所有操作都提交成功，并能在操作完成后继续执行下一步逻辑。</span></span><br><span class=\"line\">            batch.commit().await()</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;Backup&quot;</span>, <span class=\"string\">&quot;备份成功&quot;</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">            Log.e(<span class=\"string\">&quot;Backup&quot;</span>, <span class=\"string\">&quot;备份失败: <span class=\"subst\">$&#123;e.message&#125;</span>&quot;</span>, e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">restoreFromFirestore</span><span class=\"params\">(dao: <span class=\"type\">MessageDao</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> user = FirebaseAuth.getInstance().currentUser ?: <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> uid = user.uid</span><br><span class=\"line\">        <span class=\"keyword\">val</span> db = FirebaseFirestore.getInstance()</span><br><span class=\"line\"><span class=\"comment\">//获取集合中的所有文档，get()方法是异步的所以需要awit()方法</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> snapshot1 = db.collection(<span class=\"string\">&quot;users&quot;</span>).document(uid).collection(<span class=\"string\">&quot;messages&quot;</span>).<span class=\"keyword\">get</span>().await()</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\">// 清空本地再导入（防止重复）</span></span><br><span class=\"line\">        dao.clearAllMessages()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历所有文档，并把数据添加到本地数据库</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (doc <span class=\"keyword\">in</span> snapshot1.documents) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> id = doc.id</span><br><span class=\"line\">            <span class=\"keyword\">val</span> title: String? = doc.getString(<span class=\"string\">&quot;title&quot;</span>)?:<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> time: <span class=\"built_in\">Int</span>= doc.getLong(<span class=\"string\">&quot;time&quot;</span>)?.toInt() ?: <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> aimdate: String?=doc.getString(<span class=\"string\">&quot;aimdate&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> isTop =doc.getBoolean(<span class=\"string\">&quot;isTop&quot;</span>)?:<span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> categoryIcon:<span class=\"built_in\">Int</span>?= doc.getLong(<span class=\"string\">&quot;categoryIcon&quot;</span>)?.toInt()</span><br><span class=\"line\">            <span class=\"keyword\">val</span> categoryName: String?=doc.getString(<span class=\"string\">&quot;categoryName&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> categoryId: String= doc.getString(<span class=\"string\">&quot;categoryId&quot;</span>).toString()</span><br><span class=\"line\">            <span class=\"keyword\">val</span> msg = Message(title,time,aimdate,isTop,id,categoryIcon,categoryName,categoryId)</span><br><span class=\"line\">            dao.insertMessage(msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     <span class=\"comment\">//加载数据</span></span><br><span class=\"line\">        dao.loadAllMessage()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"本博客以firebase服务器为例\n\n结构图\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nusers (Collection)\n   └── uid1 (Document)\n        └── messages (Collection)\n            ├── message1 (Document)\n            ├── message2 (Document)\n   └── uid2 (Document)\n        └── messages (Collection)\n            ├── message1 (Document)\n\n\n注册\n * 获取auth和fir","more":"<p><strong>本博客以firebase服务器为例</strong></p>\n<h3 id=\"结构图\"><a href=\"#结构图\" class=\"headerlink\" title=\"结构图\"></a>结构图</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">users (Collection)</span><br><span class=\"line\">   └── uid1 (Document)</span><br><span class=\"line\">        └── messages (Collection)</span><br><span class=\"line\">            ├── message1 (Document)</span><br><span class=\"line\">            ├── message2 (Document)</span><br><span class=\"line\">   └── uid2 (Document)</span><br><span class=\"line\">        └── messages (Collection)</span><br><span class=\"line\">            ├── message1 (Document)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><ul>\n<li>获取auth和firestore对象</li>\n<li>向云端上传用户信息</li>\n<li>利用firestore建立个人档案</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth.createUserWithEmailAndPassword(email,password)</span><br><span class=\"line\">    .addOnCompleteListener(<span class=\"keyword\">this</span>)&#123;task -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (task.isSuccessful)&#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;账户创建成功&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">            <span class=\"keyword\">val</span> user= auth.currentUser</span><br><span class=\"line\">            <span class=\"keyword\">val</span> uid=user?.uid</span><br><span class=\"line\">            <span class=\"keyword\">val</span> userProfile=hashMapOf(</span><br><span class=\"line\">                <span class=\"string\">&quot;uid&quot;</span> to uid,</span><br><span class=\"line\">                <span class=\"string\">&quot;email&quot;</span> to email,</span><br><span class=\"line\">                <span class=\"string\">&quot;registTime&quot;</span> to System.currentTimeMillis()</span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"comment\">//建立个人档案，将数据写入数据库中</span></span><br><span class=\"line\">            db.collection(<span class=\"string\">&quot;users&quot;</span>).document(uid!!)</span><br><span class=\"line\">                .<span class=\"keyword\">set</span>(userProfile)</span><br><span class=\"line\">                .addOnSuccessListener &#123;</span><br><span class=\"line\">                    finish()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                .addOnSuccessListener &#123;</span><br><span class=\"line\">                    Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;用户信息储存失败请稍后重试&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;账户创建失败&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">login</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">val</span> email=binding.email.text.toString()</span><br><span class=\"line\">       <span class=\"keyword\">val</span> password=binding.password.text.toString()</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(email.isEmpty()||password.isEmpty())&#123;</span><br><span class=\"line\">           Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;邮箱或密码不能为空&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">           <span class=\"keyword\">return</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       auth.signInWithEmailAndPassword(email, password)</span><br><span class=\"line\">           .addOnCompleteListener &#123; task -&gt;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (task.isSuccessful) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//这一步是为了实现用户数据隔离</span></span><br><span class=\"line\">                   lifecycleScope.launch &#123;</span><br><span class=\"line\">                       <span class=\"comment\">// 先清空数据库</span></span><br><span class=\"line\">                       dao.clearAllMessages()</span><br><span class=\"line\">                       dao.clearAllCategories()</span><br><span class=\"line\">                       <span class=\"comment\">// 再切回主线程做 UI 操作</span></span><br><span class=\"line\">                           restoreFromFirestore(dao)</span><br><span class=\"line\">                           Toast.makeText(<span class=\"keyword\">this</span><span class=\"symbol\">@LoginActivity</span>, <span class=\"string\">&quot;用户登陆成功&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">                           <span class=\"keyword\">val</span> i = Intent(<span class=\"keyword\">this</span><span class=\"symbol\">@LoginActivity</span>, MainActivity::<span class=\"keyword\">class</span>.java)</span><br><span class=\"line\">                           startActivity(i)</span><br><span class=\"line\">                           finish()</span><br><span class=\"line\"></span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                   Toast.makeText(</span><br><span class=\"line\">                       <span class=\"keyword\">this</span><span class=\"symbol\">@LoginActivity</span>,</span><br><span class=\"line\">                       <span class=\"string\">&quot;登录失败: <span class=\"subst\">$&#123;task.exception?.message&#125;</span>&quot;</span>,</span><br><span class=\"line\">                       Toast.LENGTH_LONG</span><br><span class=\"line\">                   ).show()</span><br><span class=\"line\">                   binding.email.setText(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                   binding.password.setText(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据备份\"><a href=\"#数据备份\" class=\"headerlink\" title=\"数据备份\"></a>数据备份</h3><ul>\n<li>实现备份</li>\n<li>实现恢复</li>\n<li>在UI层调用</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">backupToFirestore</span><span class=\"params\">(dao: <span class=\"type\">MessageDao</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前已登录的用户</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> user = FirebaseAuth.getInstance().currentUser ?: <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\">//获取用户uid值作为唯一标识</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> uid = user.uid</span><br><span class=\"line\">    <span class=\"comment\">//获取数据库实例</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> db = FirebaseFirestore.getInstance()</span><br><span class=\"line\"><span class=\"comment\">//加载所有信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> messages = dao.loadAllMessage()</span><br><span class=\"line\"><span class=\"comment\">//在uid文件下创建messages集合作为uid下子集和</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> userMessagesRef = db.collection(<span class=\"string\">&quot;users&quot;</span>).document(uid).collection(<span class=\"string\">&quot;messages&quot;</span>)</span><br><span class=\"line\">   <span class=\"comment\">//创建一个批量处理操作的对象</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> batch = db.batch()</span><br><span class=\"line\">    <span class=\"comment\">//便利本地数据库所有数据</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (msg <span class=\"keyword\">in</span> messages) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//以信息的id作为文档id用来获取索引或创建</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> docRef = userMessagesRef.document(msg.id)</span><br><span class=\"line\">            <span class=\"comment\">//将数据转化成键值对形式</span></span><br><span class=\"line\">             <span class=\"keyword\">val</span> msgMap = mapOf(</span><br><span class=\"line\">                 <span class=\"string\">&quot;title&quot;</span> to msg.title,</span><br><span class=\"line\">                  <span class=\"string\">&quot;time&quot;</span> to msg.time,</span><br><span class=\"line\">               <span class=\"string\">&quot;aimdate&quot;</span> to msg.aimdate,</span><br><span class=\"line\">             <span class=\"string\">&quot;isTop&quot;</span> to msg.isTop,</span><br><span class=\"line\">             <span class=\"string\">&quot;categoryIcon&quot;</span> to msg.categoryIcon,</span><br><span class=\"line\">            <span class=\"string\">&quot;categoryName&quot;</span> to msg.categoryName,</span><br><span class=\"line\">             <span class=\"string\">&quot;categoryId&quot;</span> to msg.categoryId</span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"comment\">//将数据添加到docRef文档下面</span></span><br><span class=\"line\">            batch.<span class=\"keyword\">set</span>(docRef, msgMap)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">//batch.commit()：提交所有批量写入操作，返回一个 Task。</span></span><br><span class=\"line\"><span class=\"comment\">//await()：挂起当前协程，等待 Task 完成，直到异步操作结束。</span></span><br><span class=\"line\"><span class=\"comment\">//这样，你就可以确保 所有操作都提交成功，并能在操作完成后继续执行下一步逻辑。</span></span><br><span class=\"line\">            batch.commit().await()</span><br><span class=\"line\">            Log.d(<span class=\"string\">&quot;Backup&quot;</span>, <span class=\"string\">&quot;备份成功&quot;</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">            Log.e(<span class=\"string\">&quot;Backup&quot;</span>, <span class=\"string\">&quot;备份失败: <span class=\"subst\">$&#123;e.message&#125;</span>&quot;</span>, e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">restoreFromFirestore</span><span class=\"params\">(dao: <span class=\"type\">MessageDao</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> user = FirebaseAuth.getInstance().currentUser ?: <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> uid = user.uid</span><br><span class=\"line\">        <span class=\"keyword\">val</span> db = FirebaseFirestore.getInstance()</span><br><span class=\"line\"><span class=\"comment\">//获取集合中的所有文档，get()方法是异步的所以需要awit()方法</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> snapshot1 = db.collection(<span class=\"string\">&quot;users&quot;</span>).document(uid).collection(<span class=\"string\">&quot;messages&quot;</span>).<span class=\"keyword\">get</span>().await()</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\">// 清空本地再导入（防止重复）</span></span><br><span class=\"line\">        dao.clearAllMessages()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历所有文档，并把数据添加到本地数据库</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (doc <span class=\"keyword\">in</span> snapshot1.documents) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> id = doc.id</span><br><span class=\"line\">            <span class=\"keyword\">val</span> title: String? = doc.getString(<span class=\"string\">&quot;title&quot;</span>)?:<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> time: <span class=\"built_in\">Int</span>= doc.getLong(<span class=\"string\">&quot;time&quot;</span>)?.toInt() ?: <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> aimdate: String?=doc.getString(<span class=\"string\">&quot;aimdate&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> isTop =doc.getBoolean(<span class=\"string\">&quot;isTop&quot;</span>)?:<span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> categoryIcon:<span class=\"built_in\">Int</span>?= doc.getLong(<span class=\"string\">&quot;categoryIcon&quot;</span>)?.toInt()</span><br><span class=\"line\">            <span class=\"keyword\">val</span> categoryName: String?=doc.getString(<span class=\"string\">&quot;categoryName&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> categoryId: String= doc.getString(<span class=\"string\">&quot;categoryId&quot;</span>).toString()</span><br><span class=\"line\">            <span class=\"keyword\">val</span> msg = Message(title,time,aimdate,isTop,id,categoryIcon,categoryName,categoryId)</span><br><span class=\"line\">            dao.insertMessage(msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     <span class=\"comment\">//加载数据</span></span><br><span class=\"line\">        dao.loadAllMessage()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmfru5gbh0001s4s75u7u1e6w","category_id":"cmfru5gbo0004s4s779jw8vnc","_id":"cmfru5gbu000bs4s7ephh47tz"},{"post_id":"cmfru5gbm0003s4s76xce74cn","category_id":"cmfru5gbs0008s4s72lfq7nkt","_id":"cmfru5gbw000fs4s71q2v200c"},{"post_id":"cmfru5gbu000as4s7e8ew1zes","category_id":"cmfru5gbs0008s4s72lfq7nkt","_id":"cmfru5gby000is4s74yt24gdr"},{"post_id":"cmfru5gbp0005s4s7378bb4fc","category_id":"cmfru5gbu000cs4s79r9a4x9c","_id":"cmfru5gc0000ls4s72us4fiel"},{"post_id":"cmfru5gbr0006s4s7bwgb1ynd","category_id":"cmfru5gbs0008s4s72lfq7nkt","_id":"cmfru5gc1000os4s7c0o08onj"},{"post_id":"cmfru5gbr0007s4s72pn9c9zd","category_id":"cmfru5gbz000ks4s7guvy7kld","_id":"cmfru5gc3000ss4s7fppj23wj"},{"post_id":"cmfru5gc2000rs4s76xenf828","category_id":"cmfru5gc1000ps4s77oq38n9c","_id":"cmfru5gc4000xs4s72lhl6zri"},{"post_id":"cmfru5gbt0009s4s7h6xo9g8h","category_id":"cmfru5gc1000ps4s77oq38n9c","_id":"cmfru5gc60010s4s78tsfc01b"},{"post_id":"cmfru5gc3000ts4s73tboaekl","category_id":"cmfru5gc1000ps4s77oq38n9c","_id":"cmfru5gc60012s4s74lcd2chr"},{"post_id":"cmfru5gc3000vs4s7bwc53bln","category_id":"cmfru5gc1000ps4s77oq38n9c","_id":"cmfru5gc70015s4s7cmvtb65r"},{"post_id":"cmfru5gbv000ds4s7empa5p2j","category_id":"cmfru5gc1000ps4s77oq38n9c","_id":"cmfru5gc80017s4s75tt12hp0"},{"post_id":"cmfru5gc4000ws4s7auzx5g51","category_id":"cmfru5gc1000ps4s77oq38n9c","_id":"cmfru5gc9001as4s797t29n52"},{"post_id":"cmfru5gc5000zs4s7czrs6mxq","category_id":"cmfru5gbo0004s4s779jw8vnc","_id":"cmfru5gc9001cs4s7ccyh3dl4"},{"post_id":"cmfru5gbw000es4s7byot8rpb","category_id":"cmfru5gc1000ps4s77oq38n9c","_id":"cmfru5gca001fs4s712wc0cz1"},{"post_id":"cmfru5gbx000hs4s7cnm27yef","category_id":"cmfru5gc1000ps4s77oq38n9c","_id":"cmfru5gcb001hs4s77z9w3sot"},{"post_id":"cmfru5gby000js4s77ddrdpdy","category_id":"cmfru5gc1000ps4s77oq38n9c","_id":"cmfru5gcc001ks4s73wgfcvl7"},{"post_id":"cmfru5gc9001bs4s7fopr2egg","category_id":"cmfru5gbz000ks4s7guvy7kld","_id":"cmfru5gcc001ms4s7fszt27oo"},{"post_id":"cmfru5gca001es4s7928t8pjm","category_id":"cmfru5gbz000ks4s7guvy7kld","_id":"cmfru5gcd001ps4s711foe2xw"},{"post_id":"cmfru5gc0000ms4s78c7ie5dk","category_id":"cmfru5gc1000ps4s77oq38n9c","_id":"cmfru5gce001rs4s7ajh789bq"},{"post_id":"cmfru5gca001gs4s721becrka","category_id":"cmfru5gbo0004s4s779jw8vnc","_id":"cmfru5gcf001us4s7bvt6gu33"},{"post_id":"cmfru5gc0000ns4s7hibyfjqs","category_id":"cmfru5gc1000ps4s77oq38n9c","_id":"cmfru5gcf001ws4s7c377a54c"},{"post_id":"cmfru5gcc001ls4s7f4fz6ccg","category_id":"cmfru5gbo0004s4s779jw8vnc","_id":"cmfru5gch001zs4s7bxka702e"},{"post_id":"cmfru5gc1000qs4s7cb0sbx0d","category_id":"cmfru5gc1000ps4s77oq38n9c","_id":"cmfru5gch0021s4s77l0c9zju"},{"post_id":"cmfru5gcd001qs4s7c39o65xs","category_id":"cmfru5gbo0004s4s779jw8vnc","_id":"cmfru5gci0024s4s74myg3wzv"},{"post_id":"cmfru5gce001ts4s70lgad2rw","category_id":"cmfru5gbo0004s4s779jw8vnc","_id":"cmfru5gcj0026s4s78kjohn24"},{"post_id":"cmfru5gc60011s4s73wmd333a","category_id":"cmfru5gce001ss4s7dyqg89zf","_id":"cmfru5gcj0029s4s7gvk18kh7"},{"post_id":"cmfru5gc70014s4s74a15g5w7","category_id":"cmfru5gce001ss4s7dyqg89zf","_id":"cmfru5gck002bs4s79qg6gqx5"},{"post_id":"cmfru5gci0023s4s79np24zzn","category_id":"cmfru5gbo0004s4s779jw8vnc","_id":"cmfru5gcl002es4s7cqc82bgq"},{"post_id":"cmfru5gc70016s4s7fgd1ae5a","category_id":"cmfru5gce001ss4s7dyqg89zf","_id":"cmfru5gcm002gs4s77oid5bn6"},{"post_id":"cmfru5gci0025s4s72wro9t4w","category_id":"cmfru5gbz000ks4s7guvy7kld","_id":"cmfru5gcn002js4s7dw0n2179"},{"post_id":"cmfru5gcj0028s4s734o090zp","category_id":"cmfru5gbz000ks4s7guvy7kld","_id":"cmfru5gcn002ls4s75u6o21hf"},{"post_id":"cmfru5gc80019s4s72ap3hy3x","category_id":"cmfru5gce001ss4s7dyqg89zf","_id":"cmfru5gco002os4s75o46h34n"},{"post_id":"cmfru5gck002as4s7962i95mi","category_id":"cmfru5gbo0004s4s779jw8vnc","_id":"cmfru5gcp002qs4s794w830y0"},{"post_id":"cmfru5gcl002ds4s7aie2atk5","category_id":"cmfru5gbz000ks4s7guvy7kld","_id":"cmfru5gcq002ts4s7h41m0sbh"},{"post_id":"cmfru5gcd001os4s7c5vub9jr","category_id":"cmfru5gce001ss4s7dyqg89zf","_id":"cmfru5gcq002vs4s76hn498vg"},{"post_id":"cmfru5gcl002fs4s73cbtgy7o","category_id":"cmfru5gbz000ks4s7guvy7kld","_id":"cmfru5gcr002xs4s78pdb2dnw"},{"post_id":"cmfru5gcm002is4s79cbafh8p","category_id":"cmfru5gbo0004s4s779jw8vnc","_id":"cmfru5gcs002zs4s7dx4b67cj"},{"post_id":"cmfru5gcf001vs4s7fiz52pz9","category_id":"cmfru5gcm002hs4s727id5ahu","_id":"cmfru5gcs0031s4s7e63ce66a"},{"post_id":"cmfru5gcn002ks4s7farcceo2","category_id":"cmfru5gbz000ks4s7guvy7kld","_id":"cmfru5gct0033s4s768q10qef"},{"post_id":"cmfru5gco002ns4s7140ic35w","category_id":"cmfru5gbo0004s4s779jw8vnc","_id":"cmfru5gcu0035s4s75s0s488j"},{"post_id":"cmfru5gcg001ys4s7c0z7dqkf","category_id":"cmfru5gcn002ms4s79hhx5eso","_id":"cmfru5gcu0037s4s75ozycfd9"},{"post_id":"cmfru5gco002ps4s7007egiqt","category_id":"cmfru5gbs0008s4s72lfq7nkt","_id":"cmfru5gcv0039s4s7bjgn3il9"},{"post_id":"cmfru5gcp002ss4s7fl6oaw1m","category_id":"cmfru5gc1000ps4s77oq38n9c","_id":"cmfru5gcw003cs4s74pcwgtav"},{"post_id":"cmfru5gcq002us4s7bjish60p","category_id":"cmfru5gbz000ks4s7guvy7kld","_id":"cmfru5gcw003ds4s71mhy0t4n"},{"post_id":"cmfru5gch0020s4s77wjs7w0k","category_id":"cmfru5gcp002rs4s7hyl8cted","_id":"cmfru5gcw003fs4s76wg9hrsi"},{"post_id":"cmfru5gcr002ws4s71quue3pa","category_id":"cmfru5gbo0004s4s779jw8vnc","_id":"cmfru5gcw003gs4s7bg8d28rv"},{"post_id":"cmfru5gcr002ys4s7g9x2bwts","category_id":"cmfru5gbz000ks4s7guvy7kld","_id":"cmfru5gcx003is4s71zryfjxw"},{"post_id":"cmfru5gcs0030s4s789t8cfye","category_id":"cmfru5gbo0004s4s779jw8vnc","_id":"cmfru5gcx003js4s7ajtp9z0x"},{"post_id":"cmfru5gcs0032s4s7bc0p0f8g","category_id":"cmfru5gc1000ps4s77oq38n9c","_id":"cmfru5gcx003ks4s7fx4t7bl0"},{"post_id":"cmfru5gct0034s4s7dmdi52iq","category_id":"cmfru5gbz000ks4s7guvy7kld","_id":"cmfru5gcx003ls4s7hj4u92yp"},{"post_id":"cmfru5gcu0036s4s77l408zys","category_id":"cmfru5gcv003as4s7gvin290o","_id":"cmfru5gcx003ms4s76zvv3o0j"},{"post_id":"cmfru5gcu0038s4s7e59u6itd","category_id":"cmfru5gcv003as4s7gvin290o","_id":"cmfru5gcx003ns4s71nm7an6b"},{"post_id":"cmfru5gcv003bs4s7e2y861qc","category_id":"cmfru5gcv003as4s7gvin290o","_id":"cmfru5gcx003os4s7fc2qd2h8"},{"post_id":"cmfru5gd1003ps4s7cxymgoj2","category_id":"cmfru5gbs0008s4s72lfq7nkt","_id":"cmfru5gd4003ts4s7hy9u2wy2"},{"post_id":"cmfru5gd2003qs4s7hd4t1zx7","category_id":"cmfru5gcn002ms4s79hhx5eso","_id":"cmfru5gd4003vs4s772g4crgn"},{"post_id":"cmfru5gd2003rs4s75yya60ch","category_id":"cmfru5gbz000ks4s7guvy7kld","_id":"cmfru5gd4003ws4s725ln1k30"},{"post_id":"cmfru5gd3003ss4s7daqh0lkr","category_id":"cmfru5gbo0004s4s779jw8vnc","_id":"cmfru5gd5003xs4s716pqfw07"},{"post_id":"cmfru5gd4003us4s798vqfe8l","category_id":"cmfru5gcm002hs4s727id5ahu","_id":"cmfru5gd5003ys4s76mjh1nsu"}],"PostTag":[],"Tag":[]}}